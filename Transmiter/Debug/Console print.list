
Console print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb0  08006bb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006bb0  08006bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb8  08006bb8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  24000010  08006bd0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000fc  08006bd0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179f0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025ab  00000000  00000000  00037a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  0003af18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000365aa  00000000  00000000  0003bd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca6e  00000000  00000000  00072312  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015f1ed  00000000  00000000  0007ed80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ddf6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000408c  00000000  00000000  001ddfe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006b74 	.word	0x08006b74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006b74 	.word	0x08006b74

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SendMess>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendMess(char *Message){
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	466b      	mov	r3, sp
 80005f2:	461e      	mov	r6, r3


	  uint8_t tmp[strlen(Message)];
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fe6f 	bl	80002d8 <strlen>
 80005fa:	4605      	mov	r5, r0
 80005fc:	462b      	mov	r3, r5
 80005fe:	3b01      	subs	r3, #1
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4629      	mov	r1, r5
 8000604:	f04f 0200 	mov.w	r2, #0
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	f04f 0400 	mov.w	r4, #0
 8000610:	00d4      	lsls	r4, r2, #3
 8000612:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000616:	00cb      	lsls	r3, r1, #3
 8000618:	4629      	mov	r1, r5
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	f04f 0400 	mov.w	r4, #0
 8000626:	00d4      	lsls	r4, r2, #3
 8000628:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800062c:	00cb      	lsls	r3, r1, #3
 800062e:	1deb      	adds	r3, r5, #7
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	ebad 0d03 	sub.w	sp, sp, r3
 8000638:	466b      	mov	r3, sp
 800063a:	3300      	adds	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]

		int i;
		for(i=0;i < strlen(Message);i++){
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e00b      	b.n	800065c <SendMess+0x74>

			tmp[i] = (uint8_t)(Message[i]);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	7819      	ldrb	r1, [r3, #0]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4413      	add	r3, r2
 8000652:	460a      	mov	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
		for(i=0;i < strlen(Message);i++){
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fe3b 	bl	80002d8 <strlen>
 8000662:	4602      	mov	r2, r0
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	429a      	cmp	r2, r3
 8000668:	d8ec      	bhi.n	8000644 <SendMess+0x5c>
		}
		HAL_UART_Transmit(&huart1, tmp, sizeof(tmp)/sizeof(uint8_t), HAL_MAX_DELAY);
 800066a:	68f9      	ldr	r1, [r7, #12]
 800066c:	b2aa      	uxth	r2, r5
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <SendMess+0xa4>)
 8000674:	f003 fce4 	bl	8004040 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f000 fc72 	bl	8000f64 <HAL_Delay>
 8000680:	46b5      	mov	sp, r6

}
 8000682:	bf00      	nop
 8000684:	371c      	adds	r7, #28
 8000686:	46bd      	mov	sp, r7
 8000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068a:	bf00      	nop
 800068c:	2400002c 	.word	0x2400002c

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char *mess = "A";
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <main+0x84>)
 8000698:	607b      	str	r3, [r7, #4]
	uint8_t Rec = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fbcf 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f83f 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 f973 	bl	8000990 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006aa:	f000 f8d3 	bl	8000854 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 f923 	bl	80008f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	SendMess(mess);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff98 	bl	80005e8 <SendMess>
	HAL_Delay(20);
 80006b8:	2014      	movs	r0, #20
 80006ba:	f000 fc53 	bl	8000f64 <HAL_Delay>
	HAL_UART_Receive(&huart1, &Rec, 1,1000);
 80006be:	1cf9      	adds	r1, r7, #3
 80006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c4:	2201      	movs	r2, #1
 80006c6:	4814      	ldr	r0, [pc, #80]	; (8000718 <main+0x88>)
 80006c8:	f003 fd50 	bl	800416c <HAL_UART_Receive>

if (Rec == 66){
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b42      	cmp	r3, #66	; 0x42
 80006d0:	d105      	bne.n	80006de <main+0x4e>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2102      	movs	r1, #2
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <main+0x8c>)
 80006d8:	f000 ff06 	bl	80014e8 <HAL_GPIO_WritePin>
 80006dc:	e004      	b.n	80006e8 <main+0x58>
}
else{
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2101      	movs	r1, #1
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <main+0x90>)
 80006e4:	f000 ff00 	bl	80014e8 <HAL_GPIO_WritePin>
}
	HAL_Delay(1000);
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	f000 fc3a 	bl	8000f64 <HAL_Delay>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <main+0x8c>)
 80006f6:	f000 fef7 	bl	80014e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <main+0x90>)
 8000700:	f000 fef2 	bl	80014e8 <HAL_GPIO_WritePin>
	Rec = 0 ;
 8000704:	2300      	movs	r3, #0
 8000706:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(980);
 8000708:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 800070c:	f000 fc2a 	bl	8000f64 <HAL_Delay>
	SendMess(mess);
 8000710:	e7cf      	b.n	80006b2 <main+0x22>
 8000712:	bf00      	nop
 8000714:	08006b8c 	.word	0x08006b8c
 8000718:	2400002c 	.word	0x2400002c
 800071c:	58021000 	.word	0x58021000
 8000720:	58020400 	.word	0x58020400

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0cc      	sub	sp, #304	; 0x130
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800072e:	224c      	movs	r2, #76	; 0x4c
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fa16 	bl	8006b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800073c:	2220      	movs	r2, #32
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f006 fa0f 	bl	8006b64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4618      	mov	r0, r3
 800074c:	23bc      	movs	r3, #188	; 0xbc
 800074e:	461a      	mov	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f006 fa07 	bl	8006b64 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000756:	2002      	movs	r0, #2
 8000758:	f000 fee0 	bl	800151c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <SystemClock_Config+0x128>)
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	4a39      	ldr	r2, [pc, #228]	; (800084c <SystemClock_Config+0x128>)
 8000768:	f023 0301 	bic.w	r3, r3, #1
 800076c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <SystemClock_Config+0x128>)
 8000770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000772:	f003 0201 	and.w	r2, r3, #1
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <SystemClock_Config+0x12c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <SystemClock_Config+0x12c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6193      	str	r3, [r2, #24]
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <SystemClock_Config+0x12c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079a:	bf00      	nop
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <SystemClock_Config+0x12c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a8:	d1f8      	bne.n	800079c <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fee2 	bl	8001590 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007d2:	f000 f9ed 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	233f      	movs	r3, #63	; 0x3f
 80007d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000806:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fa97 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000818:	f000 f9ca 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fe09 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800083c:	f000 f9b8 	bl	8000bb0 <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	58000400 	.word	0x58000400
 8000850:	58024800 	.word	0x58024800

08000854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_TIM1_Init+0x9c>)
 8000874:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <MX_TIM1_Init+0xa0>)
 8000876:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM1_Init+0x9c>)
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_TIM1_Init+0x9c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM1_Init+0x9c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM1_Init+0x9c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_TIM1_Init+0x9c>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM1_Init+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_TIM1_Init+0x9c>)
 800089e:	f003 f8c3 	bl	8003a28 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f982 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_TIM1_Init+0x9c>)
 80008ba:	f003 f8e1 	bl	8003a80 <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008c4:	f000 f974 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM1_Init+0x9c>)
 80008da:	f003 fad9 	bl	8003e90 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80008e4:	f000 f964 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	240000b8 	.word	0x240000b8
 80008f4:	40010000 	.word	0x40010000

080008f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_USART1_UART_Init+0x90>)
 80008fe:	4a23      	ldr	r2, [pc, #140]	; (800098c <MX_USART1_UART_Init+0x94>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_USART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_USART1_UART_Init+0x90>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_USART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000940:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000942:	f003 fb2d 	bl	8003fa0 <HAL_UART_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 f930 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000954:	f005 fffd 	bl	8006952 <HAL_UARTEx_SetTxFifoThreshold>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800095e:	f000 f927 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000966:	f006 f832 	bl	80069ce <HAL_UARTEx_SetRxFifoThreshold>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 f91e 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_USART1_UART_Init+0x90>)
 8000976:	f005 ffb3 	bl	80068e0 <HAL_UARTEx_DisableFifoMode>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 f916 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2400002c 	.word	0x2400002c
 800098c:	40011000 	.word	0x40011000

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b7a      	ldr	r3, [pc, #488]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	4a78      	ldr	r2, [pc, #480]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b6:	4b76      	ldr	r3, [pc, #472]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c4:	4b72      	ldr	r3, [pc, #456]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	4a71      	ldr	r2, [pc, #452]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d4:	4b6e      	ldr	r3, [pc, #440]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b6b      	ldr	r3, [pc, #428]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	4a69      	ldr	r2, [pc, #420]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f2:	4b67      	ldr	r3, [pc, #412]	; (8000b90 <MX_GPIO_Init+0x200>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b63      	ldr	r3, [pc, #396]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	4a62      	ldr	r2, [pc, #392]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a10:	4b5f      	ldr	r3, [pc, #380]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	4b5c      	ldr	r3, [pc, #368]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	4a5a      	ldr	r2, [pc, #360]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2e:	4b58      	ldr	r3, [pc, #352]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3c:	4b54      	ldr	r3, [pc, #336]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	4a53      	ldr	r2, [pc, #332]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4c:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6a:	4b49      	ldr	r3, [pc, #292]	; (8000b90 <MX_GPIO_Init+0x200>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a7e:	4845      	ldr	r0, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x204>)
 8000a80:	f000 fd32 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8a:	4843      	ldr	r0, [pc, #268]	; (8000b98 <MX_GPIO_Init+0x208>)
 8000a8c:	f000 fd2c 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2102      	movs	r1, #2
 8000a94:	4841      	ldr	r0, [pc, #260]	; (8000b9c <MX_GPIO_Init+0x20c>)
 8000a96:	f000 fd27 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <MX_GPIO_Init+0x210>)
 8000ab0:	f000 fb6a 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ab4:	2332      	movs	r3, #50	; 0x32
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac4:	230b      	movs	r3, #11
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4834      	ldr	r0, [pc, #208]	; (8000ba0 <MX_GPIO_Init+0x210>)
 8000ad0:	f000 fb5a 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ad4:	2386      	movs	r3, #134	; 0x86
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <MX_GPIO_Init+0x214>)
 8000af0:	f000 fb4a 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000af4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4821      	ldr	r0, [pc, #132]	; (8000b94 <MX_GPIO_Init+0x204>)
 8000b0e:	f000 fb3b 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b24:	2307      	movs	r3, #7
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481a      	ldr	r0, [pc, #104]	; (8000b98 <MX_GPIO_Init+0x208>)
 8000b30:	f000 fb2a 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4812      	ldr	r0, [pc, #72]	; (8000b98 <MX_GPIO_Init+0x208>)
 8000b4e:	f000 fb1b 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0x218>)
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_GPIO_Init+0x21c>)
 8000b66:	f000 fb0f 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_GPIO_Init+0x20c>)
 8000b82:	f000 fb01 	bl	8001188 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	; 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020400 	.word	0x58020400
 8000b98:	58020c00 	.word	0x58020c00
 8000b9c:	58021000 	.word	0x58021000
 8000ba0:	58020800 	.word	0x58020800
 8000ba4:	58020000 	.word	0x58020000
 8000ba8:	11110000 	.word	0x11110000
 8000bac:	58021800 	.word	0x58021800

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	58024400 	.word	0x58024400

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_TIM_Base_MspInit+0x3c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d10e      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_TIM_Base_MspInit+0x40>)
 8000c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c0c:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <HAL_TIM_Base_MspInit+0x40>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <HAL_TIM_Base_MspInit+0x40>)
 8000c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40010000 	.word	0x40010000
 8000c34:	58024400 	.word	0x58024400

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12d      	bne.n	8000cb6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c96:	23c0      	movs	r3, #192	; 0xc0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000cb2:	f000 fa69 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020400 	.word	0x58020400

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f900 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <SystemInit+0xac>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <SystemInit+0xac>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <SystemInit+0xb0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <SystemInit+0xb0>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <SystemInit+0xb0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <SystemInit+0xb0>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4921      	ldr	r1, [pc, #132]	; (8000dd8 <SystemInit+0xb0>)
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <SystemInit+0xb4>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <SystemInit+0xb0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <SystemInit+0xb0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <SystemInit+0xb0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <SystemInit+0xb0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <SystemInit+0xb0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <SystemInit+0xb0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <SystemInit+0xb0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <SystemInit+0xb0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <SystemInit+0xb0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <SystemInit+0xb0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <SystemInit+0xb0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <SystemInit+0xb0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <SystemInit+0xb0>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <SystemInit+0xb0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <SystemInit+0xb8>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <SystemInit+0xbc>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dba:	d202      	bcs.n	8000dc2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <SystemInit+0xc0>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SystemInit+0xac>)
 8000dc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000de0:	5c001000 	.word	0x5c001000
 8000de4:	ffff0000 	.word	0xffff0000
 8000de8:	51008108 	.word	0x51008108

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000df0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000df2:	e003      	b.n	8000dfc <LoopCopyDataInit>

08000df4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000df6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000df8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dfa:	3104      	adds	r1, #4

08000dfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e04:	d3f6      	bcc.n	8000df4 <CopyDataInit>
  ldr  r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e08:	e002      	b.n	8000e10 <LoopFillZerobss>

08000e0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e0c:	f842 3b04 	str.w	r3, [r2], #4

08000e10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e14:	d3f9      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e16:	f7ff ff87 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f005 fe7f 	bl	8006b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fc37 	bl	8000690 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000e28:	08006bc0 	.word	0x08006bc0
  ldr  r0, =_sdata
 8000e2c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000e30:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000e34:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000e38:	240000fc 	.word	0x240000fc

08000e3c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC3_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 f96c 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e4c:	f001 f92e 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8000e50:	4601      	mov	r1, r0
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_Init+0x68>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	4a13      	ldr	r2, [pc, #76]	; (8000eac <HAL_Init+0x6c>)
 8000e5e:	5cd3      	ldrb	r3, [r2, r3]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	fa21 f303 	lsr.w	r3, r1, r3
 8000e68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_Init+0x68>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_Init+0x6c>)
 8000e74:	5cd3      	ldrb	r3, [r2, r3]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_Init+0x70>)
 8000e82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_Init+0x74>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f814 	bl	8000eb8 <HAL_InitTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e002      	b.n	8000ea0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9a:	f7ff fe91 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	08006ba0 	.word	0x08006ba0
 8000eb0:	24000004 	.word	0x24000004
 8000eb4:	24000000 	.word	0x24000000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_InitTick+0x60>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e021      	b.n	8000f10 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_InitTick+0x64>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_InitTick+0x60>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f943 	bl	800116e <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 f91b 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x68>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2400000c 	.word	0x2400000c
 8000f1c:	24000000 	.word	0x24000000
 8000f20:	24000008 	.word	0x24000008

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2400000c 	.word	0x2400000c
 8000f48:	240000f8 	.word	0x240000f8

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	240000f8 	.word	0x240000f8

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_Delay+0x40>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2400000c 	.word	0x2400000c

08000fa8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetREVID+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0c1b      	lsrs	r3, r3, #16
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	5c001000 	.word	0x5c001000

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00
 8001004:	05fa0000 	.word	0x05fa0000

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff47 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff5e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff90 	bl	8001078 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5f 	bl	8001024 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb2 	bl	80010e0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001196:	4b89      	ldr	r3, [pc, #548]	; (80013bc <HAL_GPIO_Init+0x234>)
 8001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800119a:	e194      	b.n	80014c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2101      	movs	r1, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8186 	beq.w	80014c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d00b      	beq.n	80011d4 <HAL_GPIO_Init+0x4c>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c8:	2b11      	cmp	r3, #17
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b12      	cmp	r3, #18
 80011d2:	d130      	bne.n	8001236 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120a:	2201      	movs	r2, #1
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f003 0201 	and.w	r2, r3, #1
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0xee>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b12      	cmp	r3, #18
 8001274:	d123      	bne.n	80012be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	69b9      	ldr	r1, [r7, #24]
 80012ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0203 	and.w	r2, r3, #3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80e0 	beq.w	80014c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x238>)
 8001302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001306:	4a2e      	ldr	r2, [pc, #184]	; (80013c0 <HAL_GPIO_Init+0x238>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_GPIO_Init+0x238>)
 8001312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <HAL_GPIO_Init+0x23c>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <HAL_GPIO_Init+0x240>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d052      	beq.n	80013f0 <HAL_GPIO_Init+0x268>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_GPIO_Init+0x244>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d031      	beq.n	80013b6 <HAL_GPIO_Init+0x22e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <HAL_GPIO_Init+0x248>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x22a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_GPIO_Init+0x24c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <HAL_GPIO_Init+0x250>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <HAL_GPIO_Init+0x254>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_GPIO_Init+0x258>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_GPIO_Init+0x25c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_GPIO_Init+0x260>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a17      	ldr	r2, [pc, #92]	; (80013ec <HAL_GPIO_Init+0x264>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20e>
 8001392:	2309      	movs	r3, #9
 8001394:	e02d      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 8001396:	230a      	movs	r3, #10
 8001398:	e02b      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 800139a:	2308      	movs	r3, #8
 800139c:	e029      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 800139e:	2307      	movs	r3, #7
 80013a0:	e027      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e025      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e023      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e021      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e01f      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e01d      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e01b      	b.n	80013f2 <HAL_GPIO_Init+0x26a>
 80013ba:	bf00      	nop
 80013bc:	58000080 	.word	0x58000080
 80013c0:	58024400 	.word	0x58024400
 80013c4:	58000400 	.word	0x58000400
 80013c8:	58020000 	.word	0x58020000
 80013cc:	58020400 	.word	0x58020400
 80013d0:	58020800 	.word	0x58020800
 80013d4:	58020c00 	.word	0x58020c00
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58021400 	.word	0x58021400
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58021c00 	.word	0x58021c00
 80013e8:	58022000 	.word	0x58022000
 80013ec:	58022400 	.word	0x58022400
 80013f0:	2300      	movs	r3, #0
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001402:	4938      	ldr	r1, [pc, #224]	; (80014e4 <HAL_GPIO_Init+0x35c>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800148a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	3301      	adds	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f ae63 	bne.w	800119c <HAL_GPIO_Init+0x14>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	58000400 	.word	0x58000400

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_PWREx_ConfigSupply+0x70>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00a      	beq.n	8001546 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_PWREx_ConfigSupply+0x70>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e01f      	b.n	8001582 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e01d      	b.n	8001582 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_PWREx_ConfigSupply+0x70>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f023 0207 	bic.w	r2, r3, #7
 800154e:	490f      	ldr	r1, [pc, #60]	; (800158c <HAL_PWREx_ConfigSupply+0x70>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4313      	orrs	r3, r2
 8001554:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001556:	f7ff fcf9 	bl	8000f4c <HAL_GetTick>
 800155a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800155c:	e009      	b.n	8001572 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800155e:	f7ff fcf5 	bl	8000f4c <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156c:	d901      	bls.n	8001572 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e007      	b.n	8001582 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_PWREx_ConfigSupply+0x70>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800157a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800157e:	d1ee      	bne.n	800155e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	58024800 	.word	0x58024800

08001590 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e3c4      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8087 	beq.w	80016be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b0:	4ba2      	ldr	r3, [pc, #648]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015ba:	4ba0      	ldr	r3, [pc, #640]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d007      	beq.n	80015d6 <HAL_RCC_OscConfig+0x46>
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	2b18      	cmp	r3, #24
 80015ca:	d110      	bne.n	80015ee <HAL_RCC_OscConfig+0x5e>
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d10b      	bne.n	80015ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d6:	4b99      	ldr	r3, [pc, #612]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d06c      	beq.n	80016bc <HAL_RCC_OscConfig+0x12c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d168      	bne.n	80016bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e39e      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x76>
 80015f8:	4b90      	ldr	r3, [pc, #576]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a8f      	ldr	r2, [pc, #572]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e02e      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b8b      	ldr	r3, [pc, #556]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a8a      	ldr	r2, [pc, #552]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a87      	ldr	r2, [pc, #540]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0xbc>
 8001632:	4b82      	ldr	r3, [pc, #520]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a81      	ldr	r2, [pc, #516]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b7f      	ldr	r3, [pc, #508]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7e      	ldr	r2, [pc, #504]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xd4>
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7a      	ldr	r2, [pc, #488]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b78      	ldr	r3, [pc, #480]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a77      	ldr	r2, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fc6e 	bl	8000f4c <HAL_GetTick>
 8001670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fc6a 	bl	8000f4c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e352      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xe4>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fc5a 	bl	8000f4c <HAL_GetTick>
 8001698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fc56 	bl	8000f4c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e33e      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x10c>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8092 	beq.w	80017f0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_RCC_OscConfig+0x162>
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	2b18      	cmp	r3, #24
 80016e6:	d12d      	bne.n	8001744 <HAL_RCC_OscConfig+0x1b4>
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d128      	bne.n	8001744 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f2:	4b52      	ldr	r3, [pc, #328]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x17a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e310      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	f7ff fc4d 	bl	8000fa8 <HAL_GetREVID>
 800170e:	4602      	mov	r2, r0
 8001710:	f241 0303 	movw	r3, #4099	; 0x1003
 8001714:	429a      	cmp	r2, r3
 8001716:	d80a      	bhi.n	800172e <HAL_RCC_OscConfig+0x19e>
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	031b      	lsls	r3, r3, #12
 8001726:	4945      	ldr	r1, [pc, #276]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172c:	e060      	b.n	80017f0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	061b      	lsls	r3, r3, #24
 800173c:	493f      	ldr	r1, [pc, #252]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001742:	e055      	b.n	80017f0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d038      	beq.n	80017be <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 0219 	bic.w	r2, r3, #25
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4938      	ldr	r1, [pc, #224]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff fbf5 	bl	8000f4c <HAL_GetTick>
 8001762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff fbf1 	bl	8000f4c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e2d9      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	f7ff fc10 	bl	8000fa8 <HAL_GetREVID>
 8001788:	4602      	mov	r2, r0
 800178a:	f241 0303 	movw	r3, #4099	; 0x1003
 800178e:	429a      	cmp	r2, r3
 8001790:	d80a      	bhi.n	80017a8 <HAL_RCC_OscConfig+0x218>
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	031b      	lsls	r3, r3, #12
 80017a0:	4926      	ldr	r1, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
 80017a6:	e023      	b.n	80017f0 <HAL_RCC_OscConfig+0x260>
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	4921      	ldr	r1, [pc, #132]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
 80017bc:	e018      	b.n	80017f0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fbbf 	bl	8000f4c <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fbbb 	bl	8000f4c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e2a3      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 8091 	beq.w	8001920 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001806:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b08      	cmp	r3, #8
 8001812:	d007      	beq.n	8001824 <HAL_RCC_OscConfig+0x294>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b18      	cmp	r3, #24
 8001818:	d12f      	bne.n	800187a <HAL_RCC_OscConfig+0x2ea>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d12a      	bne.n	800187a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_OscConfig+0x2ac>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <HAL_RCC_OscConfig+0x2b0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b80      	cmp	r3, #128	; 0x80
 8001836:	d003      	beq.n	8001840 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e277      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
 800183c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001840:	f7ff fbb2 	bl	8000fa8 <HAL_GetREVID>
 8001844:	4602      	mov	r2, r0
 8001846:	f241 0303 	movw	r3, #4099	; 0x1003
 800184a:	429a      	cmp	r2, r3
 800184c:	d80a      	bhi.n	8001864 <HAL_RCC_OscConfig+0x2d4>
 800184e:	4ba2      	ldr	r3, [pc, #648]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	069b      	lsls	r3, r3, #26
 800185c:	499e      	ldr	r1, [pc, #632]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001862:	e05d      	b.n	8001920 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001864:	4b9c      	ldr	r3, [pc, #624]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	4999      	ldr	r1, [pc, #612]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001878:	e052      	b.n	8001920 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d035      	beq.n	80018ee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001882:	4b95      	ldr	r3, [pc, #596]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a94      	ldr	r2, [pc, #592]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fb5d 	bl	8000f4c <HAL_GetTick>
 8001892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001896:	f7ff fb59 	bl	8000f4c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e241      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018a8:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018b4:	f7ff fb78 	bl	8000fa8 <HAL_GetREVID>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80018be:	429a      	cmp	r2, r3
 80018c0:	d80a      	bhi.n	80018d8 <HAL_RCC_OscConfig+0x348>
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	069b      	lsls	r3, r3, #26
 80018d0:	4981      	ldr	r1, [pc, #516]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
 80018d6:	e023      	b.n	8001920 <HAL_RCC_OscConfig+0x390>
 80018d8:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	497c      	ldr	r1, [pc, #496]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ee:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a79      	ldr	r2, [pc, #484]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80018f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb27 	bl	8000f4c <HAL_GetTick>
 80018fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001902:	f7ff fb23 	bl	8000f4c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e20b      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001914:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d036      	beq.n	800199a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d019      	beq.n	8001968 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001938:	4a67      	ldr	r2, [pc, #412]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fb04 	bl	8000f4c <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff fb00 	bl	8000f4c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1e8      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 800195c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x3b8>
 8001966:	e018      	b.n	800199a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196c:	4a5a      	ldr	r2, [pc, #360]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff faea 	bl	8000f4c <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff fae6 	bl	8000f4c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1ce      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800198e:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d036      	beq.n	8001a14 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d019      	beq.n	80019e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ae:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a49      	ldr	r2, [pc, #292]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80019b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fac7 	bl	8000f4c <HAL_GetTick>
 80019be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019c2:	f7ff fac3 	bl	8000f4c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1ab      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019d4:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x432>
 80019e0:	e018      	b.n	8001a14 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a3c      	ldr	r2, [pc, #240]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 80019e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019ee:	f7ff faad 	bl	8000f4c <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019f6:	f7ff faa9 	bl	8000f4c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e191      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a08:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8086 	beq.w	8001b2e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <HAL_RCC_OscConfig+0x54c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2d      	ldr	r2, [pc, #180]	; (8001adc <HAL_RCC_OscConfig+0x54c>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a2e:	f7ff fa8d 	bl	8000f4c <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff fa89 	bl	8000f4c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e171      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_RCC_OscConfig+0x54c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x4da>
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e02d      	b.n	8001ac6 <HAL_RCC_OscConfig+0x536>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4fc>
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8a:	e01c      	b.n	8001ac6 <HAL_RCC_OscConfig+0x536>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d10c      	bne.n	8001aae <HAL_RCC_OscConfig+0x51e>
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	e00b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x536>
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_RCC_OscConfig+0x548>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01a      	beq.n	8001b04 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff fa3d 	bl	8000f4c <HAL_GetTick>
 8001ad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ad4:	e00f      	b.n	8001af6 <HAL_RCC_OscConfig+0x566>
 8001ad6:	bf00      	nop
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fa34 	bl	8000f4c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e11a      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001af6:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0ee      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x550>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff fa22 	bl	8000f4c <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fa1e 	bl	8000f4c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e104      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b22:	4b84      	ldr	r3, [pc, #528]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80f9 	beq.w	8001d2a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b38:	4b7e      	ldr	r3, [pc, #504]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b40:	2b18      	cmp	r3, #24
 8001b42:	f000 80b4 	beq.w	8001cae <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	f040 8095 	bne.w	8001c7a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f9f6 	bl	8000f4c <HAL_GetTick>
 8001b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f9f2 	bl	8000f4c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e0da      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b76:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b82:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b86:	4b6c      	ldr	r3, [pc, #432]	; (8001d38 <HAL_RCC_OscConfig+0x7a8>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	430a      	orrs	r2, r1
 8001b96:	4967      	ldr	r1, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	3b01      	subs	r3, #1
 8001bac:	025b      	lsls	r3, r3, #9
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	061b      	lsls	r3, r3, #24
 8001bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001bcc:	4959      	ldr	r1, [pc, #356]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001bd2:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	4a57      	ldr	r2, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bde:	4b55      	ldr	r3, [pc, #340]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <HAL_RCC_OscConfig+0x7ac>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bea:	00d2      	lsls	r2, r2, #3
 8001bec:	4951      	ldr	r1, [pc, #324]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bf2:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f023 020c 	bic.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	494d      	ldr	r1, [pc, #308]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c04:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f023 0202 	bic.w	r2, r3, #2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	4948      	ldr	r1, [pc, #288]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	4a46      	ldr	r2, [pc, #280]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	4a43      	ldr	r2, [pc, #268]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	4a40      	ldr	r2, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff f97b 	bl	8000f4c <HAL_GetTick>
 8001c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff f977 	bl	8000f4c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e05f      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c6c:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x6ca>
 8001c78:	e057      	b.n	8001d2a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff f961 	bl	8000f4c <HAL_GetTick>
 8001c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f95d 	bl	8000f4c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e045      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6fe>
 8001cac:	e03d      	b.n	8001d2a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x7a4>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d031      	beq.n	8001d26 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d12a      	bne.n	8001d26 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d122      	bne.n	8001d26 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d11a      	bne.n	8001d26 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	0a5b      	lsrs	r3, r3, #9
 8001cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d111      	bne.n	8001d26 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d108      	bne.n	8001d26 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	0e1b      	lsrs	r3, r3, #24
 8001d18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	58024400 	.word	0x58024400
 8001d38:	fffffc0c 	.word	0xfffffc0c
 8001d3c:	ffff0007 	.word	0xffff0007

08001d40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e19c      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b8a      	ldr	r3, [pc, #552]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b87      	ldr	r3, [pc, #540]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 020f 	bic.w	r2, r3, #15
 8001d6a:	4985      	ldr	r1, [pc, #532]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b83      	ldr	r3, [pc, #524]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e184      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d908      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001da0:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4975      	ldr	r1, [pc, #468]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d908      	bls.n	8001de0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dce:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	496a      	ldr	r1, [pc, #424]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d908      	bls.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dfc:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	495e      	ldr	r1, [pc, #376]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d908      	bls.n	8001e3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e2a:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4953      	ldr	r1, [pc, #332]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d908      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f023 020f 	bic.w	r2, r3, #15
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4947      	ldr	r1, [pc, #284]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d055      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4940      	ldr	r1, [pc, #256]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d121      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0f6      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ea8:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d115      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0ea      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0de      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d6      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f023 0207 	bic.w	r2, r3, #7
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4925      	ldr	r1, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f82b 	bl	8000f4c <HAL_GetTick>
 8001ef6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7ff f827 	bl	8000f4c <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0be      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d1eb      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d208      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f023 020f 	bic.w	r2, r3, #15
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	490e      	ldr	r1, [pc, #56]	; (8001f84 <HAL_RCC_ClockConfig+0x244>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d214      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 020f 	bic.w	r2, r3, #15
 8001f66:	4906      	ldr	r1, [pc, #24]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <HAL_RCC_ClockConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e086      	b.n	800208e <HAL_RCC_ClockConfig+0x34e>
 8001f80:	52002000 	.word	0x52002000
 8001f84:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d208      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fa4:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4939      	ldr	r1, [pc, #228]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d208      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	492e      	ldr	r1, [pc, #184]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d208      	bcs.n	8002012 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4922      	ldr	r1, [pc, #136]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 800200e:	4313      	orrs	r3, r2
 8002010:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800202a:	429a      	cmp	r2, r3
 800202c:	d208      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4917      	ldr	r1, [pc, #92]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 800203c:	4313      	orrs	r3, r2
 800203e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002040:	f000 f834 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8002044:	4601      	mov	r1, r0
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_RCC_ClockConfig+0x35c>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	fa21 f303 	lsr.w	r3, r1, r3
 800205c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x358>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_RCC_ClockConfig+0x35c>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x360>)
 8002076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_RCC_ClockConfig+0x364>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_ClockConfig+0x368>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe ff18 	bl	8000eb8 <HAL_InitTick>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	58024400 	.word	0x58024400
 800209c:	08006ba0 	.word	0x08006ba0
 80020a0:	24000004 	.word	0x24000004
 80020a4:	24000000 	.word	0x24000000
 80020a8:	24000008 	.word	0x24000008

080020ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b2:	4baf      	ldr	r3, [pc, #700]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ba:	2b18      	cmp	r3, #24
 80020bc:	f200 814e 	bhi.w	800235c <HAL_RCC_GetSysClockFreq+0x2b0>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	0800212d 	.word	0x0800212d
 80020cc:	0800235d 	.word	0x0800235d
 80020d0:	0800235d 	.word	0x0800235d
 80020d4:	0800235d 	.word	0x0800235d
 80020d8:	0800235d 	.word	0x0800235d
 80020dc:	0800235d 	.word	0x0800235d
 80020e0:	0800235d 	.word	0x0800235d
 80020e4:	0800235d 	.word	0x0800235d
 80020e8:	08002153 	.word	0x08002153
 80020ec:	0800235d 	.word	0x0800235d
 80020f0:	0800235d 	.word	0x0800235d
 80020f4:	0800235d 	.word	0x0800235d
 80020f8:	0800235d 	.word	0x0800235d
 80020fc:	0800235d 	.word	0x0800235d
 8002100:	0800235d 	.word	0x0800235d
 8002104:	0800235d 	.word	0x0800235d
 8002108:	08002159 	.word	0x08002159
 800210c:	0800235d 	.word	0x0800235d
 8002110:	0800235d 	.word	0x0800235d
 8002114:	0800235d 	.word	0x0800235d
 8002118:	0800235d 	.word	0x0800235d
 800211c:	0800235d 	.word	0x0800235d
 8002120:	0800235d 	.word	0x0800235d
 8002124:	0800235d 	.word	0x0800235d
 8002128:	0800215f 	.word	0x0800215f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800212c:	4b90      	ldr	r3, [pc, #576]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002138:	4b8d      	ldr	r3, [pc, #564]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	08db      	lsrs	r3, r3, #3
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	4a8c      	ldr	r2, [pc, #560]	; (8002374 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800214a:	e10a      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800214c:	4b89      	ldr	r3, [pc, #548]	; (8002374 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800214e:	61bb      	str	r3, [r7, #24]
    break;
 8002150:	e107      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002154:	61bb      	str	r3, [r7, #24]
    break;
 8002156:	e104      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800215a:	61bb      	str	r3, [r7, #24]
    break;
 800215c:	e101      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800215e:	4b84      	ldr	r3, [pc, #528]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002168:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002172:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002174:	4b7e      	ldr	r3, [pc, #504]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800217e:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	08db      	lsrs	r3, r3, #3
 8002184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002196:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80da 	beq.w	8002356 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d05a      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0x1b2>
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d302      	bcc.n	80021b2 <HAL_RCC_GetSysClockFreq+0x106>
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d078      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80021b0:	e099      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d02d      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	08db      	lsrs	r3, r3, #3
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	4a6a      	ldr	r2, [pc, #424]	; (8002374 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021e8:	4b61      	ldr	r3, [pc, #388]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80021fc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800220c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002218:	e087      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002224:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002384 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002240:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800224c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800225c:	e065      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002268:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002388 <HAL_RCC_GetSysClockFreq+0x2dc>
 800226c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002280:	ed97 6a02 	vldr	s12, [r7, #8]
 8002284:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800228c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022a0:	e043      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ac:	eddf 6a37 	vldr	s13, [pc, #220]	; 800238c <HAL_RCC_GetSysClockFreq+0x2e0>
 80022b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022b4:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80022c8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2d4>
 80022cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022e4:	e021      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002388 <HAL_RCC_GetSysClockFreq+0x2dc>
 80022f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002308:	ed97 6a02 	vldr	s12, [r7, #8]
 800230c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800231c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002328:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	0a5b      	lsrs	r3, r3, #9
 8002330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002334:	3301      	adds	r3, #1
 8002336:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002342:	edd7 6a07 	vldr	s13, [r7, #28]
 8002346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234e:	ee17 3a90 	vmov	r3, s15
 8002352:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002354:	e005      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
    break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800235e:	61bb      	str	r3, [r7, #24]
    break;
 8002360:	bf00      	nop
  }

  return sysclockfreq;
 8002362:	69bb      	ldr	r3, [r7, #24]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3724      	adds	r7, #36	; 0x24
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	58024400 	.word	0x58024400
 8002374:	03d09000 	.word	0x03d09000
 8002378:	003d0900 	.word	0x003d0900
 800237c:	007a1200 	.word	0x007a1200
 8002380:	46000000 	.word	0x46000000
 8002384:	4c742400 	.word	0x4c742400
 8002388:	4a742400 	.word	0x4a742400
 800238c:	4af42400 	.word	0x4af42400

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002396:	f7ff fe89 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800239a:	4601      	mov	r1, r0
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80023a8:	5cd3      	ldrb	r3, [r2, r3]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	fa21 f303 	lsr.w	r3, r1, r3
 80023b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80023cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	58024400 	.word	0x58024400
 80023e4:	08006ba0 	.word	0x08006ba0
 80023e8:	24000004 	.word	0x24000004
 80023ec:	24000000 	.word	0x24000000

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023f4:	f7ff ffcc 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023f8:	4601      	mov	r1, r0
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	58024400 	.word	0x58024400
 8002418:	08006ba0 	.word	0x08006ba0

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002420:	f7ff ffb6 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 8002424:	4601      	mov	r1, r0
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400
 8002444:	08006ba0 	.word	0x08006ba0

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002454:	2300      	movs	r3, #0
 8002456:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d03d      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246c:	d013      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800246e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002472:	d802      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002478:	e01f      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800247a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800247e:	d013      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002484:	d01c      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002486:	e018      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002488:	4baf      	ldr	r3, [pc, #700]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	4aae      	ldr	r2, [pc, #696]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800248e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002494:	e015      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	2102      	movs	r1, #2
 800249c:	4618      	mov	r0, r3
 800249e:	f001 f95f 	bl	8003760 <RCCEx_PLL2_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024a6:	e00c      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3324      	adds	r3, #36	; 0x24
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 fa08 	bl	80038c4 <RCCEx_PLL3_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024b8:	e003      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
      break;
 80024be:	e000      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80024c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024c8:	4b9f      	ldr	r3, [pc, #636]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d4:	499c      	ldr	r1, [pc, #624]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	650b      	str	r3, [r1, #80]	; 0x50
 80024da:	e001      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03d      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d826      	bhi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80024f4:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80024f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fa:	bf00      	nop
 80024fc:	08002511 	.word	0x08002511
 8002500:	0800251f 	.word	0x0800251f
 8002504:	08002531 	.word	0x08002531
 8002508:	08002549 	.word	0x08002549
 800250c:	08002549 	.word	0x08002549
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002510:	4b8d      	ldr	r3, [pc, #564]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	4a8c      	ldr	r2, [pc, #560]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800251c:	e015      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f001 f91b 	bl	8003760 <RCCEx_PLL2_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800252e:	e00c      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3324      	adds	r3, #36	; 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f001 f9c4 	bl	80038c4 <RCCEx_PLL3_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002540:	e003      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
      break;
 8002546:	e000      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254a:	7dfb      	ldrb	r3, [r7, #23]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002550:	4b7d      	ldr	r3, [pc, #500]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	f023 0207 	bic.w	r2, r3, #7
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	497a      	ldr	r1, [pc, #488]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800255e:	4313      	orrs	r3, r2
 8002560:	650b      	str	r3, [r1, #80]	; 0x50
 8002562:	e001      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03e      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d01c      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	d804      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d00d      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002588:	e01e      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800258a:	2bc0      	cmp	r3, #192	; 0xc0
 800258c:	d01f      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 800258e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002592:	d01e      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002594:	e018      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	4a6b      	ldr	r2, [pc, #428]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80025a2:	e017      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 f8d8 	bl	8003760 <RCCEx_PLL2_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80025b4:	e00e      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3324      	adds	r3, #36	; 0x24
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 f981 	bl	80038c4 <RCCEx_PLL3_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80025c6:	e005      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
      break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80025d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4958      	ldr	r1, [pc, #352]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	650b      	str	r3, [r1, #80]	; 0x50
 80025ec:	e001      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d044      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002608:	d01f      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260e:	d805      	bhi.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002618:	d00e      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800261a:	e01f      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800261c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002620:	d01f      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002622:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002626:	d01e      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002628:	e018      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	4a46      	ldr	r2, [pc, #280]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002636:	e017      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f88e 	bl	8003760 <RCCEx_PLL2_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002648:	e00e      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3324      	adds	r3, #36	; 0x24
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f937 	bl	80038c4 <RCCEx_PLL3_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	75fb      	strb	r3, [r7, #23]
      break;
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800267c:	4932      	ldr	r1, [pc, #200]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800267e:	4313      	orrs	r3, r2
 8002680:	658b      	str	r3, [r1, #88]	; 0x58
 8002682:	e001      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d044      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800269a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269e:	d01f      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80026a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a4:	d805      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80026aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ae:	d00e      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x286>
 80026b0:	e01f      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80026b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026b6:	d01f      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80026b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026bc:	d01e      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80026be:	e018      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026cc:	e017      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f843 	bl	8003760 <RCCEx_PLL2_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026de:	e00e      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3324      	adds	r3, #36	; 0x24
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 f8ec 	bl	80038c4 <RCCEx_PLL3_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026f0:	e005      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
      break;
 80026f6:	e002      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80026f8:	bf00      	nop
 80026fa:	e000      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80026fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002712:	490d      	ldr	r1, [pc, #52]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002714:	4313      	orrs	r3, r2
 8002716:	658b      	str	r3, [r1, #88]	; 0x58
 8002718:	e001      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d035      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	2b10      	cmp	r3, #16
 8002730:	d00c      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002732:	2b10      	cmp	r3, #16
 8002734:	d802      	bhi.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01b      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800273a:	e017      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d00c      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002740:	2b30      	cmp	r3, #48	; 0x30
 8002742:	d018      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002744:	e012      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002746:	bf00      	nop
 8002748:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800274c:	4baf      	ldr	r3, [pc, #700]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	4aae      	ldr	r2, [pc, #696]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002758:	e00e      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fffd 	bl	8003760 <RCCEx_PLL2_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800276a:	e005      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	75fb      	strb	r3, [r7, #23]
      break;
 8002770:	e002      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800277e:	4ba3      	ldr	r3, [pc, #652]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	49a0      	ldr	r1, [pc, #640]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002790:	e001      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d042      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027aa:	d01f      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80027ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b0:	d805      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80027b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ba:	d00e      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x392>
 80027bc:	e01f      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80027be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027c2:	d01f      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80027c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027c8:	d01e      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80027ca:	e018      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027cc:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4a8e      	ldr	r2, [pc, #568]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027d8:	e017      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 ffbd 	bl	8003760 <RCCEx_PLL2_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027ea:	e00e      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3324      	adds	r3, #36	; 0x24
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 f866 	bl	80038c4 <RCCEx_PLL3_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027fc:	e005      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
      break;
 8002802:	e002      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002810:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002814:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	497b      	ldr	r1, [pc, #492]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	650b      	str	r3, [r1, #80]	; 0x50
 8002822:	e001      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d042      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800283c:	d01b      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800283e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002842:	d805      	bhi.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d022      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800284e:	e01b      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002854:	d01d      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800285a:	d01c      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800285c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002860:	d01b      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002862:	e011      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f000 ff78 	bl	8003760 <RCCEx_PLL2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002874:	e012      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3324      	adds	r3, #36	; 0x24
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f001 f821 	bl	80038c4 <RCCEx_PLL3_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002886:	e009      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	75fb      	strb	r3, [r7, #23]
      break;
 800288c:	e006      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800288e:	bf00      	nop
 8002890:	e004      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800289a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	4957      	ldr	r1, [pc, #348]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	650b      	str	r3, [r1, #80]	; 0x50
 80028b4:	e001      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d044      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d0:	d01b      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80028d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d6:	d805      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d022      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80028dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80028e2:	e01b      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e8:	d01d      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80028ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ee:	d01c      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80028f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028f4:	d01b      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80028f6:	e011      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 ff2e 	bl	8003760 <RCCEx_PLL2_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002908:	e012      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3324      	adds	r3, #36	; 0x24
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f000 ffd7 	bl	80038c4 <RCCEx_PLL3_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800291a:	e009      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
      break;
 8002920:	e006      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002922:	bf00      	nop
 8002924:	e004      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800292e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002936:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002944:	4931      	ldr	r1, [pc, #196]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	658b      	str	r3, [r1, #88]	; 0x58
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002964:	d005      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800296a:	d009      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002970:	e00f      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800297e:	e00c      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	2101      	movs	r1, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f000 feea 	bl	8003760 <RCCEx_PLL2_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002990:	e003      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
      break;
 8002996:	e000      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ac:	4917      	ldr	r1, [pc, #92]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	650b      	str	r3, [r1, #80]	; 0x50
 80029b2:	e001      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d035      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d81b      	bhi.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002a11 	.word	0x08002a11
 80029d8:	080029e5 	.word	0x080029e5
 80029dc:	080029f3 	.word	0x080029f3
 80029e0:	08002a11 	.word	0x08002a11
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029f0:	e00f      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2102      	movs	r1, #2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 feb1 	bl	8003760 <RCCEx_PLL2_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a02:	e006      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
      break;
 8002a08:	e003      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
      break;
 8002a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a18:	4bba      	ldr	r3, [pc, #744]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	f023 0203 	bic.w	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	49b7      	ldr	r1, [pc, #732]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a2a:	e001      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8086 	beq.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a3e:	4bb2      	ldr	r3, [pc, #712]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4ab1      	ldr	r2, [pc, #708]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fa7f 	bl	8000f4c <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a50:	e009      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fa7b 	bl	8000f4c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d902      	bls.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	75fb      	strb	r3, [r7, #23]
        break;
 8002a64:	e005      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a66:	4ba8      	ldr	r3, [pc, #672]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0ef      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d166      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a78:	4ba2      	ldr	r3, [pc, #648]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a82:	4053      	eors	r3, r2
 8002a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8c:	4b9d      	ldr	r3, [pc, #628]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a96:	4b9b      	ldr	r3, [pc, #620]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a9a      	ldr	r2, [pc, #616]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa2:	4b98      	ldr	r3, [pc, #608]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a97      	ldr	r2, [pc, #604]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002aae:	4a95      	ldr	r2, [pc, #596]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d115      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fa44 	bl	8000f4c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fa40 	bl	8000f4c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d902      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	75fb      	strb	r3, [r7, #23]
            break;
 8002ade:	e005      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae0:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ed      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d126      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b00:	d10d      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002b02:	4b80      	ldr	r3, [pc, #512]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b10:	0919      	lsrs	r1, r3, #4
 8002b12:	4b7e      	ldr	r3, [pc, #504]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002b14:	400b      	ands	r3, r1
 8002b16:	497b      	ldr	r1, [pc, #492]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	610b      	str	r3, [r1, #16]
 8002b1c:	e005      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002b1e:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	4a78      	ldr	r2, [pc, #480]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b28:	6113      	str	r3, [r2, #16]
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	4972      	ldr	r1, [pc, #456]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	670b      	str	r3, [r1, #112]	; 0x70
 8002b3e:	e004      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	75bb      	strb	r3, [r7, #22]
 8002b44:	e001      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07d      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b5a:	2b28      	cmp	r3, #40	; 0x28
 8002b5c:	d866      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002c33 	.word	0x08002c33
 8002b68:	08002c2d 	.word	0x08002c2d
 8002b6c:	08002c2d 	.word	0x08002c2d
 8002b70:	08002c2d 	.word	0x08002c2d
 8002b74:	08002c2d 	.word	0x08002c2d
 8002b78:	08002c2d 	.word	0x08002c2d
 8002b7c:	08002c2d 	.word	0x08002c2d
 8002b80:	08002c2d 	.word	0x08002c2d
 8002b84:	08002c09 	.word	0x08002c09
 8002b88:	08002c2d 	.word	0x08002c2d
 8002b8c:	08002c2d 	.word	0x08002c2d
 8002b90:	08002c2d 	.word	0x08002c2d
 8002b94:	08002c2d 	.word	0x08002c2d
 8002b98:	08002c2d 	.word	0x08002c2d
 8002b9c:	08002c2d 	.word	0x08002c2d
 8002ba0:	08002c2d 	.word	0x08002c2d
 8002ba4:	08002c1b 	.word	0x08002c1b
 8002ba8:	08002c2d 	.word	0x08002c2d
 8002bac:	08002c2d 	.word	0x08002c2d
 8002bb0:	08002c2d 	.word	0x08002c2d
 8002bb4:	08002c2d 	.word	0x08002c2d
 8002bb8:	08002c2d 	.word	0x08002c2d
 8002bbc:	08002c2d 	.word	0x08002c2d
 8002bc0:	08002c2d 	.word	0x08002c2d
 8002bc4:	08002c33 	.word	0x08002c33
 8002bc8:	08002c2d 	.word	0x08002c2d
 8002bcc:	08002c2d 	.word	0x08002c2d
 8002bd0:	08002c2d 	.word	0x08002c2d
 8002bd4:	08002c2d 	.word	0x08002c2d
 8002bd8:	08002c2d 	.word	0x08002c2d
 8002bdc:	08002c2d 	.word	0x08002c2d
 8002be0:	08002c2d 	.word	0x08002c2d
 8002be4:	08002c33 	.word	0x08002c33
 8002be8:	08002c2d 	.word	0x08002c2d
 8002bec:	08002c2d 	.word	0x08002c2d
 8002bf0:	08002c2d 	.word	0x08002c2d
 8002bf4:	08002c2d 	.word	0x08002c2d
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002c2d 	.word	0x08002c2d
 8002c00:	08002c2d 	.word	0x08002c2d
 8002c04:	08002c33 	.word	0x08002c33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fda6 	bl	8003760 <RCCEx_PLL2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c18:	e00c      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3324      	adds	r3, #36	; 0x24
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fe4f 	bl	80038c4 <RCCEx_PLL3_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c2a:	e003      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c30:	e000      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c3a:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c46:	492f      	ldr	r1, [pc, #188]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c4c:	e001      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d037      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d820      	bhi.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002caf 	.word	0x08002caf
 8002c70:	08002c85 	.word	0x08002c85
 8002c74:	08002c97 	.word	0x08002c97
 8002c78:	08002caf 	.word	0x08002caf
 8002c7c:	08002caf 	.word	0x08002caf
 8002c80:	08002caf 	.word	0x08002caf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fd68 	bl	8003760 <RCCEx_PLL2_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c94:	e00c      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3324      	adds	r3, #36	; 0x24
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fe11 	bl	80038c4 <RCCEx_PLL3_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ca6:	e003      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cac:	e000      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb0:	7dfb      	ldrb	r3, [r7, #23]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	4910      	ldr	r1, [pc, #64]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	654b      	str	r3, [r1, #84]	; 0x54
 8002cc8:	e001      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d040      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d827      	bhi.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d3b 	.word	0x08002d3b
 8002cf0:	08002d11 	.word	0x08002d11
 8002cf4:	08002d23 	.word	0x08002d23
 8002cf8:	08002d3b 	.word	0x08002d3b
 8002cfc:	08002d3b 	.word	0x08002d3b
 8002d00:	08002d3b 	.word	0x08002d3b
 8002d04:	58024400 	.word	0x58024400
 8002d08:	58024800 	.word	0x58024800
 8002d0c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd22 	bl	8003760 <RCCEx_PLL2_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d20:	e00c      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3324      	adds	r3, #36	; 0x24
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fdcb 	bl	80038c4 <RCCEx_PLL3_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d32:	e003      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
      break;
 8002d38:	e000      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d42:	4bb2      	ldr	r3, [pc, #712]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	49ae      	ldr	r1, [pc, #696]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	658b      	str	r3, [r1, #88]	; 0x58
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d044      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d72:	d01b      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d78:	d805      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d022      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002d84:	e01b      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d90:	d01c      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d96:	d01b      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002d98:	e011      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fcdd 	bl	8003760 <RCCEx_PLL2_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002daa:	e012      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fd86 	bl	80038c4 <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dbc:	e009      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc2:	e006      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e004      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002dc8:	bf00      	nop
 8002dca:	e002      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd8:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de6:	4989      	ldr	r1, [pc, #548]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	654b      	str	r3, [r1, #84]	; 0x54
 8002dec:	e001      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e08:	d01b      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e0e:	d805      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d022      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002e1a:	e01b      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d01d      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002e22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e26:	d01c      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002e28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e2c:	d01b      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002e2e:	e011      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3304      	adds	r3, #4
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fc92 	bl	8003760 <RCCEx_PLL2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e40:	e012      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3324      	adds	r3, #36	; 0x24
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fd3b 	bl	80038c4 <RCCEx_PLL3_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e004      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e6e:	4b67      	ldr	r3, [pc, #412]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e7c:	4963      	ldr	r1, [pc, #396]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	658b      	str	r3, [r1, #88]	; 0x58
 8002e82:	e001      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d044      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea4:	d805      	bhi.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d022      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002eb0:	e01b      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002eb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ebc:	d01c      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002ebe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ec2:	d01b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002ec4:	e011      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fc47 	bl	8003760 <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ed6:	e012      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fcf0 	bl	80038c4 <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e009      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      break;
 8002eee:	e006      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002ef0:	bf00      	nop
 8002ef2:	e004      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002ef4:	bf00      	nop
 8002ef6:	e002      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f12:	493e      	ldr	r1, [pc, #248]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	658b      	str	r3, [r1, #88]	; 0x58
 8002f18:	e001      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d10a      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3324      	adds	r3, #36	; 0x24
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fcc1 	bl	80038c4 <RCCEx_PLL3_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	492c      	ldr	r1, [pc, #176]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d10a      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3324      	adds	r3, #36	; 0x24
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fca0 	bl	80038c4 <RCCEx_PLL3_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9c:	491b      	ldr	r1, [pc, #108]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d032      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8002fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fbe:	d016      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d111      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fbc8 	bl	8003760 <RCCEx_PLL2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3324      	adds	r3, #36	; 0x24
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fc71 	bl	80038c4 <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fe6:	e003      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
      break;
 8002fec:	e000      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8002fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003004:	4901      	ldr	r1, [pc, #4]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	658b      	str	r3, [r1, #88]	; 0x58
 800300a:	e003      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800300c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02f      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800302a:	d00c      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800302c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003030:	d015      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003036:	d10f      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003038:	4b71      	ldr	r3, [pc, #452]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	4a70      	ldr	r2, [pc, #448]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800303e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003044:	e00c      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3324      	adds	r3, #36	; 0x24
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fc39 	bl	80038c4 <RCCEx_PLL3_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	75fb      	strb	r3, [r7, #23]
      break;
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800305e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003066:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003074:	4962      	ldr	r1, [pc, #392]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	654b      	str	r3, [r1, #84]	; 0x54
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d029      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d007      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800309a:	e00f      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309c:	4b58      	ldr	r3, [pc, #352]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	4a57      	ldr	r2, [pc, #348]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80030a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030a8:	e00b      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2102      	movs	r1, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fb55 	bl	8003760 <RCCEx_PLL2_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030ba:	e002      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	75fb      	strb	r3, [r7, #23]
      break;
 80030c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	494a      	ldr	r1, [pc, #296]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030da:	e001      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3324      	adds	r3, #36	; 0x24
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fbe6 	bl	80038c4 <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02f      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003116:	d00c      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311c:	d802      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d011      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003122:	e00d      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003128:	d00f      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800312a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800312e:	d00e      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003130:	e006      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003132:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	4a32      	ldr	r2, [pc, #200]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800313e:	e007      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
      break;
 8003144:	e004      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800314e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003162:	4927      	ldr	r1, [pc, #156]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	654b      	str	r3, [r1, #84]	; 0x54
 8003168:	e001      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800317c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	491e      	ldr	r1, [pc, #120]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003188:	4313      	orrs	r3, r2
 800318a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a4:	4916      	ldr	r1, [pc, #88]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	4a11      	ldr	r2, [pc, #68]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031c0:	6113      	str	r3, [r2, #16]
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da08      	bge.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e6:	4906      	ldr	r1, [pc, #24]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80031ec:	7dbb      	ldrb	r3, [r7, #22]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024400 	.word	0x58024400

08003204 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003208:	f7ff f8c2 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 800320c:	4601      	mov	r1, r0
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	58024400 	.word	0x58024400
 800322c:	08006ba0 	.word	0x08006ba0

08003230 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003238:	4b9d      	ldr	r3, [pc, #628]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003242:	4b9b      	ldr	r3, [pc, #620]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	0b1b      	lsrs	r3, r3, #12
 8003248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800324e:	4b98      	ldr	r3, [pc, #608]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800325a:	4b95      	ldr	r3, [pc, #596]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	08db      	lsrs	r3, r3, #3
 8003260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 810a 	beq.w	8003492 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d05a      	beq.n	800333a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d302      	bcc.n	800328e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8003288:	2b02      	cmp	r3, #2
 800328a:	d078      	beq.n	800337e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800328c:	e099      	b.n	80033c2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800328e:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d02d      	beq.n	80032f6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800329a:	4b85      	ldr	r3, [pc, #532]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	08db      	lsrs	r3, r3, #3
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	4a83      	ldr	r2, [pc, #524]	; (80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c4:	4b7a      	ldr	r3, [pc, #488]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80032d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80032dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80032f4:	e087      	b.n	8003406 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003300:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80034bc <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003308:	4b69      	ldr	r3, [pc, #420]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003318:	ed97 6a03 	vldr	s12, [r7, #12]
 800331c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003328:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003334:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003338:	e065      	b.n	8003406 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003344:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80034c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334c:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003360:	eddf 5a55 	vldr	s11, [pc, #340]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003378:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800337c:	e043      	b.n	8003406 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003388:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80034c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800338c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003390:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80033a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80033a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033c0:	e021      	b.n	8003406 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033cc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80034c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80033d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d4:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033dc:	ee07 3a90 	vmov	s15, r3
 80033e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80033e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80033ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003400:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003404:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003406:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	0a5b      	lsrs	r3, r3, #9
 800340c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800341c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003420:	edd7 6a07 	vldr	s13, [r7, #28]
 8003424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800342c:	ee17 2a90 	vmov	r2, s15
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800344a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800344e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345a:	ee17 2a90 	vmov	r2, s15
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	0e1b      	lsrs	r3, r3, #24
 8003468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003478:	ee37 7a87 	vadd.f32	s14, s15, s14
 800347c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003488:	ee17 2a90 	vmov	r2, s15
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003490:	e008      	b.n	80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	3724      	adds	r7, #36	; 0x24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	58024400 	.word	0x58024400
 80034b4:	03d09000 	.word	0x03d09000
 80034b8:	46000000 	.word	0x46000000
 80034bc:	4c742400 	.word	0x4c742400
 80034c0:	4a742400 	.word	0x4a742400
 80034c4:	4af42400 	.word	0x4af42400

080034c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b089      	sub	sp, #36	; 0x24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034d0:	4b9d      	ldr	r3, [pc, #628]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80034da:	4b9b      	ldr	r3, [pc, #620]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	0d1b      	lsrs	r3, r3, #20
 80034e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80034e6:	4b98      	ldr	r3, [pc, #608]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80034f2:	4b95      	ldr	r3, [pc, #596]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	08db      	lsrs	r3, r3, #3
 80034f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 810a 	beq.w	800372a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d05a      	beq.n	80035d2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800351c:	2b01      	cmp	r3, #1
 800351e:	d302      	bcc.n	8003526 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003520:	2b02      	cmp	r3, #2
 8003522:	d078      	beq.n	8003616 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003524:	e099      	b.n	800365a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d02d      	beq.n	800358e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003532:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	08db      	lsrs	r3, r3, #3
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	4a83      	ldr	r2, [pc, #524]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355c:	4b7a      	ldr	r3, [pc, #488]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003570:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003750 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003588:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800358c:	e087      	b.n	800369e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003598:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003754 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800359c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a8:	ee07 3a90 	vmov	s15, r3
 80035ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80035b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003750 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80035b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035d0:	e065      	b.n	800369e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80035e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80035f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003750 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80035fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003614:	e043      	b.n	800369e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003620:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800375c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003624:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003628:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003638:	ed97 6a03 	vldr	s12, [r7, #12]
 800363c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003750 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800364c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003654:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003658:	e021      	b.n	800369e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003664:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003680:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003750 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800369c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800369e:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	0a5b      	lsrs	r3, r3, #9
 80036a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c4:	ee17 2a90 	vmov	r2, s15
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f2:	ee17 2a90 	vmov	r2, s15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	0e1b      	lsrs	r3, r3, #24
 8003700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003710:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003714:	edd7 6a07 	vldr	s13, [r7, #28]
 8003718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800371c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003720:	ee17 2a90 	vmov	r2, s15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003728:	e008      	b.n	800373c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	3724      	adds	r7, #36	; 0x24
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	58024400 	.word	0x58024400
 800374c:	03d09000 	.word	0x03d09000
 8003750:	46000000 	.word	0x46000000
 8003754:	4c742400 	.word	0x4c742400
 8003758:	4a742400 	.word	0x4a742400
 800375c:	4af42400 	.word	0x4af42400

08003760 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800376e:	4b53      	ldr	r3, [pc, #332]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b03      	cmp	r3, #3
 8003778:	d101      	bne.n	800377e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e099      	b.n	80038b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800377e:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a4e      	ldr	r2, [pc, #312]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003784:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378a:	f7fd fbdf 	bl	8000f4c <HAL_GetTick>
 800378e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003790:	e008      	b.n	80037a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003792:	f7fd fbdb 	bl	8000f4c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e086      	b.n	80038b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037a4:	4b45      	ldr	r3, [pc, #276]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80037b0:	4b42      	ldr	r3, [pc, #264]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	031b      	lsls	r3, r3, #12
 80037be:	493f      	ldr	r1, [pc, #252]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	628b      	str	r3, [r1, #40]	; 0x28
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	025b      	lsls	r3, r3, #9
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037f4:	4931      	ldr	r1, [pc, #196]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80037fa:	4b30      	ldr	r3, [pc, #192]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	492d      	ldr	r1, [pc, #180]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003808:	4313      	orrs	r3, r2
 800380a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800380c:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f023 0220 	bic.w	r2, r3, #32
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4928      	ldr	r1, [pc, #160]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4a26      	ldr	r2, [pc, #152]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 800382c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <RCCEx_PLL2_Config+0x160>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	69d2      	ldr	r2, [r2, #28]
 8003836:	00d2      	lsls	r2, r2, #3
 8003838:	4920      	ldr	r1, [pc, #128]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800383e:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003844:	f043 0310 	orr.w	r3, r3, #16
 8003848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800385a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800385c:	e00f      	b.n	800387e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003864:	4b15      	ldr	r3, [pc, #84]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a14      	ldr	r2, [pc, #80]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 800386a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003870:	e005      	b.n	800387e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4a11      	ldr	r2, [pc, #68]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 8003884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388a:	f7fd fb5f 	bl	8000f4c <HAL_GetTick>
 800388e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003890:	e008      	b.n	80038a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003892:	f7fd fb5b 	bl	8000f4c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e006      	b.n	80038b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <RCCEx_PLL2_Config+0x15c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
 80038c0:	ffff0007 	.word	0xffff0007

080038c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038d2:	4b53      	ldr	r3, [pc, #332]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d101      	bne.n	80038e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e099      	b.n	8003a16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80038e2:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4e      	ldr	r2, [pc, #312]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ee:	f7fd fb2d 	bl	8000f4c <HAL_GetTick>
 80038f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038f4:	e008      	b.n	8003908 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038f6:	f7fd fb29 	bl	8000f4c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e086      	b.n	8003a16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003908:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003914:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	051b      	lsls	r3, r3, #20
 8003922:	493f      	ldr	r1, [pc, #252]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003924:	4313      	orrs	r3, r2
 8003926:	628b      	str	r3, [r1, #40]	; 0x28
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	3b01      	subs	r3, #1
 800392e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	3b01      	subs	r3, #1
 8003938:	025b      	lsls	r3, r3, #9
 800393a:	b29b      	uxth	r3, r3
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	3b01      	subs	r3, #1
 8003944:	041b      	lsls	r3, r3, #16
 8003946:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	3b01      	subs	r3, #1
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003958:	4931      	ldr	r1, [pc, #196]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 800395a:	4313      	orrs	r3, r2
 800395c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800395e:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	492d      	ldr	r1, [pc, #180]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	4928      	ldr	r1, [pc, #160]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 800397e:	4313      	orrs	r3, r2
 8003980:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800398c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <RCCEx_PLL3_Config+0x160>)
 8003994:	4013      	ands	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	69d2      	ldr	r2, [r2, #28]
 800399a:	00d2      	lsls	r2, r2, #3
 800399c:	4920      	ldr	r1, [pc, #128]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039c0:	e00f      	b.n	80039e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d106      	bne.n	80039d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039d4:	e005      	b.n	80039e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ee:	f7fd faad 	bl	8000f4c <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039f4:	e008      	b.n	8003a08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039f6:	f7fd faa9 	bl	8000f4c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e006      	b.n	8003a16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <RCCEx_PLL3_Config+0x15c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	ffff0007 	.word	0xffff0007

08003a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01d      	b.n	8003a76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fd f8d0 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f000 f8da 	bl	8003c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_TIM_ConfigClockSource+0x18>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0b7      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x188>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <HAL_TIM_ConfigClockSource+0x190>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003abe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b70      	cmp	r3, #112	; 0x70
 8003ace:	d02e      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xae>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d812      	bhi.n	8003afa <HAL_TIM_ConfigClockSource+0x7a>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	f000 8084 	beq.w	8003be2 <HAL_TIM_ConfigClockSource+0x162>
 8003ada:	2b30      	cmp	r3, #48	; 0x30
 8003adc:	d806      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x6c>
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d07f      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d07d      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d07b      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003aea:	e084      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003aec:	2b50      	cmp	r3, #80	; 0x50
 8003aee:	d048      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x102>
 8003af0:	2b60      	cmp	r3, #96	; 0x60
 8003af2:	d056      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x122>
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d064      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8003af8:	e07d      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003afa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003afe:	d070      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
 8003b00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003b04:	d809      	bhi.n	8003b1a <HAL_TIM_ConfigClockSource+0x9a>
 8003b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0a:	d027      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0xdc>
 8003b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b10:	d067      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
 8003b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b16:	d06d      	beq.n	8003bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b18:	e06d      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003b1a:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <HAL_TIM_ConfigClockSource+0x194>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d060      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
 8003b20:	4a3d      	ldr	r2, [pc, #244]	; (8003c18 <HAL_TIM_ConfigClockSource+0x198>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d05d      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
 8003b26:	4a3d      	ldr	r2, [pc, #244]	; (8003c1c <HAL_TIM_ConfigClockSource+0x19c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d05a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003b2c:	e063      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f000 f987 	bl	8003e50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	609a      	str	r2, [r3, #8]
      break;
 8003b5a:	e04c      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f000 f970 	bl	8003e50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b7e:	609a      	str	r2, [r3, #8]
      break;
 8003b80:	e039      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 f8e0 	bl	8003d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2150      	movs	r1, #80	; 0x50
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f93a 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e029      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 f8ff 	bl	8003db2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2160      	movs	r1, #96	; 0x60
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f92a 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e019      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 f8c0 	bl	8003d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2140      	movs	r1, #64	; 0x40
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f91a 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 8003be0:	e009      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f000 f911 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 8003bf2:	e000      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003bf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	ffceff88 	.word	0xffceff88
 8003c14:	00100030 	.word	0x00100030
 8003c18:	00100040 	.word	0x00100040
 8003c1c:	00100020 	.word	0x00100020

08003c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <TIM_Base_SetConfig+0x114>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3d      	ldr	r2, [pc, #244]	; (8003d38 <TIM_Base_SetConfig+0x118>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3c      	ldr	r2, [pc, #240]	; (8003d3c <TIM_Base_SetConfig+0x11c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3b      	ldr	r2, [pc, #236]	; (8003d40 <TIM_Base_SetConfig+0x120>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3a      	ldr	r2, [pc, #232]	; (8003d44 <TIM_Base_SetConfig+0x124>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <TIM_Base_SetConfig+0x114>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01f      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d01b      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <TIM_Base_SetConfig+0x118>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d017      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <TIM_Base_SetConfig+0x11c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <TIM_Base_SetConfig+0x120>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <TIM_Base_SetConfig+0x124>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <TIM_Base_SetConfig+0x128>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_Base_SetConfig+0x9a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <TIM_Base_SetConfig+0x130>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <TIM_Base_SetConfig+0x114>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <TIM_Base_SetConfig+0x124>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a11      	ldr	r2, [pc, #68]	; (8003d48 <TIM_Base_SetConfig+0x128>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a10      	ldr	r2, [pc, #64]	; (8003d4c <TIM_Base_SetConfig+0x12c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0xf8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0f      	ldr	r2, [pc, #60]	; (8003d50 <TIM_Base_SetConfig+0x130>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40010400 	.word	0x40010400
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40014400 	.word	0x40014400
 8003d50:	40014800 	.word	0x40014800

08003d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f023 0201 	bic.w	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 030a 	bic.w	r3, r3, #10
 8003d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0210 	bic.w	r2, r3, #16
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	031b      	lsls	r3, r3, #12
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	621a      	str	r2, [r3, #32]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <TIM_ITRx_SetConfig+0x38>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f043 0307 	orr.w	r3, r3, #7
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	ffcfff8f 	.word	0xffcfff8f

08003e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	021a      	lsls	r2, r3, #8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e068      	b.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2e      	ldr	r2, [pc, #184]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d018      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10c      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40010400 	.word	0x40010400
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40000c00 	.word	0x40000c00
 8003f9c:	40001800 	.word	0x40001800

08003fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e042      	b.n	8004038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fc fe37 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f994 	bl	8004310 <UART_SetConfig>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e022      	b.n	8004038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f002 fb06 	bl	800660c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800400e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800401e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f002 fb8d 	bl	8006750 <UART_CheckIdleState>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004056:	2b20      	cmp	r3, #32
 8004058:	f040 8083 	bne.w	8004162 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Transmit+0x28>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e07b      	b.n	8004164 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_UART_Transmit+0x3a>
 8004076:	2302      	movs	r3, #2
 8004078:	e074      	b.n	8004164 <HAL_UART_Transmit+0x124>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2221      	movs	r2, #33	; 0x21
 800408e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004092:	f7fc ff5b 	bl	8000f4c <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d108      	bne.n	80040c4 <HAL_UART_Transmit+0x84>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e003      	b.n	80040cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040cc:	e02c      	b.n	8004128 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2180      	movs	r1, #128	; 0x80
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f002 fb81 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e03d      	b.n	8004164 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	3302      	adds	r3, #2
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e007      	b.n	8004116 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1cc      	bne.n	80040ce <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f002 fb4e 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00a      	b.n	8004164 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	; 0x28
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004182:	2b20      	cmp	r3, #32
 8004184:	f040 80bd 	bne.w	8004302 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_UART_Receive+0x28>
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0b5      	b.n	8004304 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Receive+0x3a>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e0ae      	b.n	8004304 <HAL_UART_Receive+0x198>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2222      	movs	r2, #34	; 0x22
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041be:	f7fc fec5 	bl	8000f4c <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d10e      	bne.n	80041fc <HAL_UART_Receive+0x90>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_UART_Receive+0x86>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041f0:	e02d      	b.n	800424e <HAL_UART_Receive+0xe2>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	22ff      	movs	r2, #255	; 0xff
 80041f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041fa:	e028      	b.n	800424e <HAL_UART_Receive+0xe2>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10d      	bne.n	8004220 <HAL_UART_Receive+0xb4>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <HAL_UART_Receive+0xaa>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	22ff      	movs	r2, #255	; 0xff
 8004210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004214:	e01b      	b.n	800424e <HAL_UART_Receive+0xe2>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	227f      	movs	r2, #127	; 0x7f
 800421a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800421e:	e016      	b.n	800424e <HAL_UART_Receive+0xe2>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004228:	d10d      	bne.n	8004246 <HAL_UART_Receive+0xda>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <HAL_UART_Receive+0xd0>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	227f      	movs	r2, #127	; 0x7f
 8004236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800423a:	e008      	b.n	800424e <HAL_UART_Receive+0xe2>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	223f      	movs	r2, #63	; 0x3f
 8004240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004244:	e003      	b.n	800424e <HAL_UART_Receive+0xe2>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004254:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d108      	bne.n	8004272 <HAL_UART_Receive+0x106>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e003      	b.n	800427a <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800427a:	e032      	b.n	80042e2 <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	2120      	movs	r1, #32
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f002 faaa 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e036      	b.n	8004304 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10c      	bne.n	80042b6 <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	8a7b      	ldrh	r3, [r7, #18]
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	3302      	adds	r3, #2
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e00c      	b.n	80042d0 <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	8a7b      	ldrh	r3, [r7, #18]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	4013      	ands	r3, r2
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3301      	adds	r3, #1
 80042ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1c6      	bne.n	800427c <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0000      	movs	r0, r0
	...

08004310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004310:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004314:	b090      	sub	sp, #64	; 0x40
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004324:	2300      	movs	r3, #0
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4313      	orrs	r3, r2
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004346:	4313      	orrs	r3, r2
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4bc1      	ldr	r3, [pc, #772]	; (8004658 <UART_SetConfig+0x348>)
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800435a:	430b      	orrs	r3, r1
 800435c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4ab7      	ldr	r2, [pc, #732]	; (800465c <UART_SetConfig+0x34c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438a:	4313      	orrs	r3, r2
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4bb2      	ldr	r3, [pc, #712]	; (8004660 <UART_SetConfig+0x350>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800439e:	430b      	orrs	r3, r1
 80043a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f023 010f 	bic.w	r1, r3, #15
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4aa9      	ldr	r2, [pc, #676]	; (8004664 <UART_SetConfig+0x354>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d177      	bne.n	80044b2 <UART_SetConfig+0x1a2>
 80043c2:	4ba9      	ldr	r3, [pc, #676]	; (8004668 <UART_SetConfig+0x358>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ca:	2b28      	cmp	r3, #40	; 0x28
 80043cc:	d86c      	bhi.n	80044a8 <UART_SetConfig+0x198>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0xc4>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	08004479 	.word	0x08004479
 80043d8:	080044a9 	.word	0x080044a9
 80043dc:	080044a9 	.word	0x080044a9
 80043e0:	080044a9 	.word	0x080044a9
 80043e4:	080044a9 	.word	0x080044a9
 80043e8:	080044a9 	.word	0x080044a9
 80043ec:	080044a9 	.word	0x080044a9
 80043f0:	080044a9 	.word	0x080044a9
 80043f4:	08004481 	.word	0x08004481
 80043f8:	080044a9 	.word	0x080044a9
 80043fc:	080044a9 	.word	0x080044a9
 8004400:	080044a9 	.word	0x080044a9
 8004404:	080044a9 	.word	0x080044a9
 8004408:	080044a9 	.word	0x080044a9
 800440c:	080044a9 	.word	0x080044a9
 8004410:	080044a9 	.word	0x080044a9
 8004414:	08004489 	.word	0x08004489
 8004418:	080044a9 	.word	0x080044a9
 800441c:	080044a9 	.word	0x080044a9
 8004420:	080044a9 	.word	0x080044a9
 8004424:	080044a9 	.word	0x080044a9
 8004428:	080044a9 	.word	0x080044a9
 800442c:	080044a9 	.word	0x080044a9
 8004430:	080044a9 	.word	0x080044a9
 8004434:	08004491 	.word	0x08004491
 8004438:	080044a9 	.word	0x080044a9
 800443c:	080044a9 	.word	0x080044a9
 8004440:	080044a9 	.word	0x080044a9
 8004444:	080044a9 	.word	0x080044a9
 8004448:	080044a9 	.word	0x080044a9
 800444c:	080044a9 	.word	0x080044a9
 8004450:	080044a9 	.word	0x080044a9
 8004454:	08004499 	.word	0x08004499
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044a9 	.word	0x080044a9
 8004460:	080044a9 	.word	0x080044a9
 8004464:	080044a9 	.word	0x080044a9
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044a9 	.word	0x080044a9
 8004470:	080044a9 	.word	0x080044a9
 8004474:	080044a1 	.word	0x080044a1
 8004478:	2301      	movs	r3, #1
 800447a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800447e:	e233      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004480:	2304      	movs	r3, #4
 8004482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004486:	e22f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004488:	2308      	movs	r3, #8
 800448a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800448e:	e22b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004490:	2310      	movs	r3, #16
 8004492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004496:	e227      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004498:	2320      	movs	r3, #32
 800449a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800449e:	e223      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80044a0:	2340      	movs	r3, #64	; 0x40
 80044a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044a6:	e21f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ae:	bf00      	nop
 80044b0:	e21a      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a6d      	ldr	r2, [pc, #436]	; (800466c <UART_SetConfig+0x35c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d132      	bne.n	8004522 <UART_SetConfig+0x212>
 80044bc:	4b6a      	ldr	r3, [pc, #424]	; (8004668 <UART_SetConfig+0x358>)
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d827      	bhi.n	8004518 <UART_SetConfig+0x208>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <UART_SetConfig+0x1c0>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044e9 	.word	0x080044e9
 80044d4:	080044f1 	.word	0x080044f1
 80044d8:	080044f9 	.word	0x080044f9
 80044dc:	08004501 	.word	0x08004501
 80044e0:	08004509 	.word	0x08004509
 80044e4:	08004511 	.word	0x08004511
 80044e8:	2300      	movs	r3, #0
 80044ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ee:	e1fb      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80044f0:	2304      	movs	r3, #4
 80044f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044f6:	e1f7      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80044f8:	2308      	movs	r3, #8
 80044fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044fe:	e1f3      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004500:	2310      	movs	r3, #16
 8004502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004506:	e1ef      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004508:	2320      	movs	r3, #32
 800450a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800450e:	e1eb      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004510:	2340      	movs	r3, #64	; 0x40
 8004512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004516:	e1e7      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800451e:	bf00      	nop
 8004520:	e1e2      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a52      	ldr	r2, [pc, #328]	; (8004670 <UART_SetConfig+0x360>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d132      	bne.n	8004592 <UART_SetConfig+0x282>
 800452c:	4b4e      	ldr	r3, [pc, #312]	; (8004668 <UART_SetConfig+0x358>)
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	2b05      	cmp	r3, #5
 8004536:	d827      	bhi.n	8004588 <UART_SetConfig+0x278>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0x230>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004559 	.word	0x08004559
 8004544:	08004561 	.word	0x08004561
 8004548:	08004569 	.word	0x08004569
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	2300      	movs	r3, #0
 800455a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800455e:	e1c3      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004566:	e1bf      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800456e:	e1bb      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004576:	e1b7      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004578:	2320      	movs	r3, #32
 800457a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800457e:	e1b3      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004586:	e1af      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800458e:	bf00      	nop
 8004590:	e1aa      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a37      	ldr	r2, [pc, #220]	; (8004674 <UART_SetConfig+0x364>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d132      	bne.n	8004602 <UART_SetConfig+0x2f2>
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <UART_SetConfig+0x358>)
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d827      	bhi.n	80045f8 <UART_SetConfig+0x2e8>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x2a0>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c9 	.word	0x080045c9
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	080045d9 	.word	0x080045d9
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045ce:	e18b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80045d0:	2304      	movs	r3, #4
 80045d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045d6:	e187      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80045d8:	2308      	movs	r3, #8
 80045da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045de:	e183      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80045e0:	2310      	movs	r3, #16
 80045e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045e6:	e17f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80045e8:	2320      	movs	r3, #32
 80045ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045ee:	e17b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80045f0:	2340      	movs	r3, #64	; 0x40
 80045f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045f6:	e177      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045fe:	bf00      	nop
 8004600:	e172      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <UART_SetConfig+0x368>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d144      	bne.n	8004696 <UART_SetConfig+0x386>
 800460c:	4b16      	ldr	r3, [pc, #88]	; (8004668 <UART_SetConfig+0x358>)
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	2b05      	cmp	r3, #5
 8004616:	d839      	bhi.n	800468c <UART_SetConfig+0x37c>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x310>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004639 	.word	0x08004639
 8004624:	08004641 	.word	0x08004641
 8004628:	08004649 	.word	0x08004649
 800462c:	08004651 	.word	0x08004651
 8004630:	0800467d 	.word	0x0800467d
 8004634:	08004685 	.word	0x08004685
 8004638:	2300      	movs	r3, #0
 800463a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800463e:	e153      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004646:	e14f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800464e:	e14b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004656:	e147      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004658:	cfff69f3 	.word	0xcfff69f3
 800465c:	58000c00 	.word	0x58000c00
 8004660:	11fff4ff 	.word	0x11fff4ff
 8004664:	40011000 	.word	0x40011000
 8004668:	58024400 	.word	0x58024400
 800466c:	40004400 	.word	0x40004400
 8004670:	40004800 	.word	0x40004800
 8004674:	40004c00 	.word	0x40004c00
 8004678:	40005000 	.word	0x40005000
 800467c:	2320      	movs	r3, #32
 800467e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004682:	e131      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004684:	2340      	movs	r3, #64	; 0x40
 8004686:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800468a:	e12d      	b.n	80048e8 <UART_SetConfig+0x5d8>
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004692:	bf00      	nop
 8004694:	e128      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4ac3      	ldr	r2, [pc, #780]	; (80049a8 <UART_SetConfig+0x698>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d178      	bne.n	8004792 <UART_SetConfig+0x482>
 80046a0:	4bc2      	ldr	r3, [pc, #776]	; (80049ac <UART_SetConfig+0x69c>)
 80046a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046a8:	2b28      	cmp	r3, #40	; 0x28
 80046aa:	d86d      	bhi.n	8004788 <UART_SetConfig+0x478>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x3a4>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	08004759 	.word	0x08004759
 80046b8:	08004789 	.word	0x08004789
 80046bc:	08004789 	.word	0x08004789
 80046c0:	08004789 	.word	0x08004789
 80046c4:	08004789 	.word	0x08004789
 80046c8:	08004789 	.word	0x08004789
 80046cc:	08004789 	.word	0x08004789
 80046d0:	08004789 	.word	0x08004789
 80046d4:	08004761 	.word	0x08004761
 80046d8:	08004789 	.word	0x08004789
 80046dc:	08004789 	.word	0x08004789
 80046e0:	08004789 	.word	0x08004789
 80046e4:	08004789 	.word	0x08004789
 80046e8:	08004789 	.word	0x08004789
 80046ec:	08004789 	.word	0x08004789
 80046f0:	08004789 	.word	0x08004789
 80046f4:	08004769 	.word	0x08004769
 80046f8:	08004789 	.word	0x08004789
 80046fc:	08004789 	.word	0x08004789
 8004700:	08004789 	.word	0x08004789
 8004704:	08004789 	.word	0x08004789
 8004708:	08004789 	.word	0x08004789
 800470c:	08004789 	.word	0x08004789
 8004710:	08004789 	.word	0x08004789
 8004714:	08004771 	.word	0x08004771
 8004718:	08004789 	.word	0x08004789
 800471c:	08004789 	.word	0x08004789
 8004720:	08004789 	.word	0x08004789
 8004724:	08004789 	.word	0x08004789
 8004728:	08004789 	.word	0x08004789
 800472c:	08004789 	.word	0x08004789
 8004730:	08004789 	.word	0x08004789
 8004734:	08004779 	.word	0x08004779
 8004738:	08004789 	.word	0x08004789
 800473c:	08004789 	.word	0x08004789
 8004740:	08004789 	.word	0x08004789
 8004744:	08004789 	.word	0x08004789
 8004748:	08004789 	.word	0x08004789
 800474c:	08004789 	.word	0x08004789
 8004750:	08004789 	.word	0x08004789
 8004754:	08004781 	.word	0x08004781
 8004758:	2301      	movs	r3, #1
 800475a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800475e:	e0c3      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004766:	e0bf      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800476e:	e0bb      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004776:	e0b7      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004778:	2320      	movs	r3, #32
 800477a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800477e:	e0b3      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004780:	2340      	movs	r3, #64	; 0x40
 8004782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004786:	e0af      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800478e:	bf00      	nop
 8004790:	e0aa      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a86      	ldr	r2, [pc, #536]	; (80049b0 <UART_SetConfig+0x6a0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d132      	bne.n	8004802 <UART_SetConfig+0x4f2>
 800479c:	4b83      	ldr	r3, [pc, #524]	; (80049ac <UART_SetConfig+0x69c>)
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d827      	bhi.n	80047f8 <UART_SetConfig+0x4e8>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x4a0>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	080047d9 	.word	0x080047d9
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047ce:	e08b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047d6:	e087      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047de:	e083      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047e6:	e07f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80047e8:	2320      	movs	r3, #32
 80047ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047ee:	e07b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047f6:	e077      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80047fe:	bf00      	nop
 8004800:	e072      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6b      	ldr	r2, [pc, #428]	; (80049b4 <UART_SetConfig+0x6a4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d132      	bne.n	8004872 <UART_SetConfig+0x562>
 800480c:	4b67      	ldr	r3, [pc, #412]	; (80049ac <UART_SetConfig+0x69c>)
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	2b05      	cmp	r3, #5
 8004816:	d827      	bhi.n	8004868 <UART_SetConfig+0x558>
 8004818:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0x510>)
 800481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481e:	bf00      	nop
 8004820:	08004839 	.word	0x08004839
 8004824:	08004841 	.word	0x08004841
 8004828:	08004849 	.word	0x08004849
 800482c:	08004851 	.word	0x08004851
 8004830:	08004859 	.word	0x08004859
 8004834:	08004861 	.word	0x08004861
 8004838:	2300      	movs	r3, #0
 800483a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800483e:	e053      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004840:	2304      	movs	r3, #4
 8004842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004846:	e04f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004848:	2308      	movs	r3, #8
 800484a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800484e:	e04b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004850:	2310      	movs	r3, #16
 8004852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004856:	e047      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004858:	2320      	movs	r3, #32
 800485a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800485e:	e043      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004866:	e03f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800486e:	bf00      	nop
 8004870:	e03a      	b.n	80048e8 <UART_SetConfig+0x5d8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a50      	ldr	r2, [pc, #320]	; (80049b8 <UART_SetConfig+0x6a8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d132      	bne.n	80048e2 <UART_SetConfig+0x5d2>
 800487c:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <UART_SetConfig+0x69c>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	2b05      	cmp	r3, #5
 8004886:	d827      	bhi.n	80048d8 <UART_SetConfig+0x5c8>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x580>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048a9 	.word	0x080048a9
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048b9 	.word	0x080048b9
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ae:	e01b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048b6:	e017      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048be:	e013      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048c6:	e00f      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80048c8:	2320      	movs	r3, #32
 80048ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048ce:	e00b      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80048d0:	2340      	movs	r3, #64	; 0x40
 80048d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048d6:	e007      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <UART_SetConfig+0x5d8>
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a32      	ldr	r2, [pc, #200]	; (80049b8 <UART_SetConfig+0x6a8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	f040 86f7 	bne.w	80056e2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	f000 80c0 	beq.w	8004a7e <UART_SetConfig+0x76e>
 80048fe:	2b08      	cmp	r3, #8
 8004900:	dc04      	bgt.n	800490c <UART_SetConfig+0x5fc>
 8004902:	2b02      	cmp	r3, #2
 8004904:	d00c      	beq.n	8004920 <UART_SetConfig+0x610>
 8004906:	2b04      	cmp	r3, #4
 8004908:	d065      	beq.n	80049d6 <UART_SetConfig+0x6c6>
 800490a:	e27a      	b.n	8004e02 <UART_SetConfig+0xaf2>
 800490c:	2b20      	cmp	r3, #32
 800490e:	f000 81b0 	beq.w	8004c72 <UART_SetConfig+0x962>
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	f000 821e 	beq.w	8004d54 <UART_SetConfig+0xa44>
 8004918:	2b10      	cmp	r3, #16
 800491a:	f000 8104 	beq.w	8004b26 <UART_SetConfig+0x816>
 800491e:	e270      	b.n	8004e02 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004920:	f7fe fc70 	bl	8003204 <HAL_RCCEx_GetD3PCLK1Freq>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04e      	beq.n	80049cc <UART_SetConfig+0x6bc>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	2b01      	cmp	r3, #1
 8004934:	d048      	beq.n	80049c8 <UART_SetConfig+0x6b8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b02      	cmp	r3, #2
 800493c:	d042      	beq.n	80049c4 <UART_SetConfig+0x6b4>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b03      	cmp	r3, #3
 8004944:	d03c      	beq.n	80049c0 <UART_SetConfig+0x6b0>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b04      	cmp	r3, #4
 800494c:	d036      	beq.n	80049bc <UART_SetConfig+0x6ac>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b05      	cmp	r3, #5
 8004954:	d026      	beq.n	80049a4 <UART_SetConfig+0x694>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b06      	cmp	r3, #6
 800495c:	d020      	beq.n	80049a0 <UART_SetConfig+0x690>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b07      	cmp	r3, #7
 8004964:	d01a      	beq.n	800499c <UART_SetConfig+0x68c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b08      	cmp	r3, #8
 800496c:	d014      	beq.n	8004998 <UART_SetConfig+0x688>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b09      	cmp	r3, #9
 8004974:	d00e      	beq.n	8004994 <UART_SetConfig+0x684>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b0a      	cmp	r3, #10
 800497c:	d008      	beq.n	8004990 <UART_SetConfig+0x680>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b0b      	cmp	r3, #11
 8004984:	d102      	bne.n	800498c <UART_SetConfig+0x67c>
 8004986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498a:	e020      	b.n	80049ce <UART_SetConfig+0x6be>
 800498c:	2301      	movs	r3, #1
 800498e:	e01e      	b.n	80049ce <UART_SetConfig+0x6be>
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	e01c      	b.n	80049ce <UART_SetConfig+0x6be>
 8004994:	2340      	movs	r3, #64	; 0x40
 8004996:	e01a      	b.n	80049ce <UART_SetConfig+0x6be>
 8004998:	2320      	movs	r3, #32
 800499a:	e018      	b.n	80049ce <UART_SetConfig+0x6be>
 800499c:	2310      	movs	r3, #16
 800499e:	e016      	b.n	80049ce <UART_SetConfig+0x6be>
 80049a0:	230c      	movs	r3, #12
 80049a2:	e014      	b.n	80049ce <UART_SetConfig+0x6be>
 80049a4:	230a      	movs	r3, #10
 80049a6:	e012      	b.n	80049ce <UART_SetConfig+0x6be>
 80049a8:	40011400 	.word	0x40011400
 80049ac:	58024400 	.word	0x58024400
 80049b0:	40007800 	.word	0x40007800
 80049b4:	40007c00 	.word	0x40007c00
 80049b8:	58000c00 	.word	0x58000c00
 80049bc:	2308      	movs	r3, #8
 80049be:	e006      	b.n	80049ce <UART_SetConfig+0x6be>
 80049c0:	2306      	movs	r3, #6
 80049c2:	e004      	b.n	80049ce <UART_SetConfig+0x6be>
 80049c4:	2304      	movs	r3, #4
 80049c6:	e002      	b.n	80049ce <UART_SetConfig+0x6be>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e000      	b.n	80049ce <UART_SetConfig+0x6be>
 80049cc:	2301      	movs	r3, #1
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049d4:	e219      	b.n	8004e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049d6:	f107 0318 	add.w	r3, r7, #24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fc28 	bl	8003230 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d044      	beq.n	8004a74 <UART_SetConfig+0x764>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d03e      	beq.n	8004a70 <UART_SetConfig+0x760>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d038      	beq.n	8004a6c <UART_SetConfig+0x75c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d032      	beq.n	8004a68 <UART_SetConfig+0x758>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d02c      	beq.n	8004a64 <UART_SetConfig+0x754>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b05      	cmp	r3, #5
 8004a10:	d026      	beq.n	8004a60 <UART_SetConfig+0x750>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d020      	beq.n	8004a5c <UART_SetConfig+0x74c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b07      	cmp	r3, #7
 8004a20:	d01a      	beq.n	8004a58 <UART_SetConfig+0x748>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d014      	beq.n	8004a54 <UART_SetConfig+0x744>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b09      	cmp	r3, #9
 8004a30:	d00e      	beq.n	8004a50 <UART_SetConfig+0x740>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b0a      	cmp	r3, #10
 8004a38:	d008      	beq.n	8004a4c <UART_SetConfig+0x73c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2b0b      	cmp	r3, #11
 8004a40:	d102      	bne.n	8004a48 <UART_SetConfig+0x738>
 8004a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a46:	e016      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e014      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	e012      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	e010      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a54:	2320      	movs	r3, #32
 8004a56:	e00e      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	e00c      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	e00a      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a60:	230a      	movs	r3, #10
 8004a62:	e008      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a64:	2308      	movs	r3, #8
 8004a66:	e006      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a68:	2306      	movs	r3, #6
 8004a6a:	e004      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	e002      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e000      	b.n	8004a76 <UART_SetConfig+0x766>
 8004a74:	2301      	movs	r3, #1
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a7c:	e1c5      	b.n	8004e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a7e:	f107 030c 	add.w	r3, r7, #12
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe fd20 	bl	80034c8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d044      	beq.n	8004b1c <UART_SetConfig+0x80c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d03e      	beq.n	8004b18 <UART_SetConfig+0x808>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d038      	beq.n	8004b14 <UART_SetConfig+0x804>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d032      	beq.n	8004b10 <UART_SetConfig+0x800>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d02c      	beq.n	8004b0c <UART_SetConfig+0x7fc>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d026      	beq.n	8004b08 <UART_SetConfig+0x7f8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d020      	beq.n	8004b04 <UART_SetConfig+0x7f4>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b07      	cmp	r3, #7
 8004ac8:	d01a      	beq.n	8004b00 <UART_SetConfig+0x7f0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d014      	beq.n	8004afc <UART_SetConfig+0x7ec>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d00e      	beq.n	8004af8 <UART_SetConfig+0x7e8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b0a      	cmp	r3, #10
 8004ae0:	d008      	beq.n	8004af4 <UART_SetConfig+0x7e4>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b0b      	cmp	r3, #11
 8004ae8:	d102      	bne.n	8004af0 <UART_SetConfig+0x7e0>
 8004aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aee:	e016      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e014      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	e012      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004af8:	2340      	movs	r3, #64	; 0x40
 8004afa:	e010      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004afc:	2320      	movs	r3, #32
 8004afe:	e00e      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b00:	2310      	movs	r3, #16
 8004b02:	e00c      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b04:	230c      	movs	r3, #12
 8004b06:	e00a      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b08:	230a      	movs	r3, #10
 8004b0a:	e008      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	e006      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b10:	2306      	movs	r3, #6
 8004b12:	e004      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b14:	2304      	movs	r3, #4
 8004b16:	e002      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e000      	b.n	8004b1e <UART_SetConfig+0x80e>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b24:	e171      	b.n	8004e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b26:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <UART_SetConfig+0xa00>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d054      	beq.n	8004bdc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004b32:	4b77      	ldr	r3, [pc, #476]	; (8004d10 <UART_SetConfig+0xa00>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	08db      	lsrs	r3, r3, #3
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	4a75      	ldr	r2, [pc, #468]	; (8004d14 <UART_SetConfig+0xa04>)
 8004b3e:	40da      	lsrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d044      	beq.n	8004bd2 <UART_SetConfig+0x8c2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d03e      	beq.n	8004bce <UART_SetConfig+0x8be>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d038      	beq.n	8004bca <UART_SetConfig+0x8ba>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d032      	beq.n	8004bc6 <UART_SetConfig+0x8b6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d02c      	beq.n	8004bc2 <UART_SetConfig+0x8b2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d026      	beq.n	8004bbe <UART_SetConfig+0x8ae>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b06      	cmp	r3, #6
 8004b76:	d020      	beq.n	8004bba <UART_SetConfig+0x8aa>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d01a      	beq.n	8004bb6 <UART_SetConfig+0x8a6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d014      	beq.n	8004bb2 <UART_SetConfig+0x8a2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b09      	cmp	r3, #9
 8004b8e:	d00e      	beq.n	8004bae <UART_SetConfig+0x89e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2b0a      	cmp	r3, #10
 8004b96:	d008      	beq.n	8004baa <UART_SetConfig+0x89a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2b0b      	cmp	r3, #11
 8004b9e:	d102      	bne.n	8004ba6 <UART_SetConfig+0x896>
 8004ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba4:	e016      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e014      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	e012      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	e010      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	e00e      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	e00c      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	e00a      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bbe:	230a      	movs	r3, #10
 8004bc0:	e008      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	e006      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bc6:	2306      	movs	r3, #6
 8004bc8:	e004      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	e002      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e000      	b.n	8004bd4 <UART_SetConfig+0x8c4>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8004bda:	e116      	b.n	8004e0a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d043      	beq.n	8004c6c <UART_SetConfig+0x95c>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d03d      	beq.n	8004c68 <UART_SetConfig+0x958>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d037      	beq.n	8004c64 <UART_SetConfig+0x954>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d031      	beq.n	8004c60 <UART_SetConfig+0x950>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d02b      	beq.n	8004c5c <UART_SetConfig+0x94c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d025      	beq.n	8004c58 <UART_SetConfig+0x948>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b06      	cmp	r3, #6
 8004c12:	d01f      	beq.n	8004c54 <UART_SetConfig+0x944>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b07      	cmp	r3, #7
 8004c1a:	d019      	beq.n	8004c50 <UART_SetConfig+0x940>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d013      	beq.n	8004c4c <UART_SetConfig+0x93c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b09      	cmp	r3, #9
 8004c2a:	d00d      	beq.n	8004c48 <UART_SetConfig+0x938>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b0a      	cmp	r3, #10
 8004c32:	d007      	beq.n	8004c44 <UART_SetConfig+0x934>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2b0b      	cmp	r3, #11
 8004c3a:	d101      	bne.n	8004c40 <UART_SetConfig+0x930>
 8004c3c:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <UART_SetConfig+0xa08>)
 8004c3e:	e016      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <UART_SetConfig+0xa04>)
 8004c42:	e014      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c44:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <UART_SetConfig+0xa0c>)
 8004c46:	e012      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <UART_SetConfig+0xa10>)
 8004c4a:	e010      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c4c:	4b35      	ldr	r3, [pc, #212]	; (8004d24 <UART_SetConfig+0xa14>)
 8004c4e:	e00e      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c50:	4b35      	ldr	r3, [pc, #212]	; (8004d28 <UART_SetConfig+0xa18>)
 8004c52:	e00c      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <UART_SetConfig+0xa1c>)
 8004c56:	e00a      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c58:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <UART_SetConfig+0xa20>)
 8004c5a:	e008      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c5c:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <UART_SetConfig+0xa24>)
 8004c5e:	e006      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c60:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <UART_SetConfig+0xa28>)
 8004c62:	e004      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <UART_SetConfig+0xa2c>)
 8004c66:	e002      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c68:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <UART_SetConfig+0xa30>)
 8004c6a:	e000      	b.n	8004c6e <UART_SetConfig+0x95e>
 8004c6c:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <UART_SetConfig+0xa04>)
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c70:	e0cb      	b.n	8004e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d046      	beq.n	8004d08 <UART_SetConfig+0x9f8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d040      	beq.n	8004d04 <UART_SetConfig+0x9f4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d03a      	beq.n	8004d00 <UART_SetConfig+0x9f0>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d034      	beq.n	8004cfc <UART_SetConfig+0x9ec>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d02e      	beq.n	8004cf8 <UART_SetConfig+0x9e8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d028      	beq.n	8004cf4 <UART_SetConfig+0x9e4>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d022      	beq.n	8004cf0 <UART_SetConfig+0x9e0>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b07      	cmp	r3, #7
 8004cb0:	d01c      	beq.n	8004cec <UART_SetConfig+0x9dc>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d016      	beq.n	8004ce8 <UART_SetConfig+0x9d8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	d00f      	beq.n	8004ce2 <UART_SetConfig+0x9d2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b0a      	cmp	r3, #10
 8004cc8:	d008      	beq.n	8004cdc <UART_SetConfig+0x9cc>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b0b      	cmp	r3, #11
 8004cd0:	d102      	bne.n	8004cd8 <UART_SetConfig+0x9c8>
 8004cd2:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004cd6:	e018      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004cd8:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <UART_SetConfig+0xa18>)
 8004cda:	e016      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004cdc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004ce0:	e013      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004ce2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ce6:	e010      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <UART_SetConfig+0xa34>)
 8004cea:	e00e      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <UART_SetConfig+0xa08>)
 8004cee:	e00c      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004cf0:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <UART_SetConfig+0xa38>)
 8004cf2:	e00a      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004cf4:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <UART_SetConfig+0xa3c>)
 8004cf6:	e008      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004cf8:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <UART_SetConfig+0xa0c>)
 8004cfa:	e006      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <UART_SetConfig+0xa40>)
 8004cfe:	e004      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <UART_SetConfig+0xa10>)
 8004d02:	e002      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <UART_SetConfig+0xa14>)
 8004d06:	e000      	b.n	8004d0a <UART_SetConfig+0x9fa>
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <UART_SetConfig+0xa18>)
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d0c:	e07d      	b.n	8004e0a <UART_SetConfig+0xafa>
 8004d0e:	bf00      	nop
 8004d10:	58024400 	.word	0x58024400
 8004d14:	03d09000 	.word	0x03d09000
 8004d18:	0003d090 	.word	0x0003d090
 8004d1c:	0007a120 	.word	0x0007a120
 8004d20:	000f4240 	.word	0x000f4240
 8004d24:	001e8480 	.word	0x001e8480
 8004d28:	003d0900 	.word	0x003d0900
 8004d2c:	00516155 	.word	0x00516155
 8004d30:	0061a800 	.word	0x0061a800
 8004d34:	007a1200 	.word	0x007a1200
 8004d38:	00a2c2aa 	.word	0x00a2c2aa
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	01e84800 	.word	0x01e84800
 8004d44:	0001e848 	.word	0x0001e848
 8004d48:	00051615 	.word	0x00051615
 8004d4c:	00061a80 	.word	0x00061a80
 8004d50:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d04e      	beq.n	8004dfa <UART_SetConfig+0xaea>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d047      	beq.n	8004df4 <UART_SetConfig+0xae4>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d040      	beq.n	8004dee <UART_SetConfig+0xade>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d039      	beq.n	8004de8 <UART_SetConfig+0xad8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d032      	beq.n	8004de2 <UART_SetConfig+0xad2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	d02b      	beq.n	8004ddc <UART_SetConfig+0xacc>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b06      	cmp	r3, #6
 8004d8a:	d024      	beq.n	8004dd6 <UART_SetConfig+0xac6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b07      	cmp	r3, #7
 8004d92:	d01d      	beq.n	8004dd0 <UART_SetConfig+0xac0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d016      	beq.n	8004dca <UART_SetConfig+0xaba>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2b09      	cmp	r3, #9
 8004da2:	d00f      	beq.n	8004dc4 <UART_SetConfig+0xab4>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b0a      	cmp	r3, #10
 8004daa:	d008      	beq.n	8004dbe <UART_SetConfig+0xaae>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b0b      	cmp	r3, #11
 8004db2:	d101      	bne.n	8004db8 <UART_SetConfig+0xaa8>
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	e022      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbc:	e01f      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dc2:	e01c      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc8:	e019      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dce:	e016      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004dd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dd4:	e013      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004dd6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004ddc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004de0:	e00d      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de6:	e00a      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004de8:	f241 5355 	movw	r3, #5461	; 0x1555
 8004dec:	e007      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004df2:	e004      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004df8:	e001      	b.n	8004dfe <UART_SetConfig+0xaee>
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e00:	e003      	b.n	8004e0a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8004e08:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f001 83e8 	beq.w	80065e2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d305      	bcc.n	8004e2e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d904      	bls.n	8004e38 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e34:	f001 bbd5 	b.w	80065e2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004e38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	f000 8154 	beq.w	80050ea <UART_SetConfig+0xdda>
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	dc06      	bgt.n	8004e54 <UART_SetConfig+0xb44>
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d00f      	beq.n	8004e6a <UART_SetConfig+0xb5a>
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	f000 80ac 	beq.w	8004fa8 <UART_SetConfig+0xc98>
 8004e50:	f000 bc30 	b.w	80056b4 <UART_SetConfig+0x13a4>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	f000 832d 	beq.w	80054b4 <UART_SetConfig+0x11a4>
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	f000 83a5 	beq.w	80055aa <UART_SetConfig+0x129a>
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	f000 81e3 	beq.w	800522c <UART_SetConfig+0xf1c>
 8004e66:	f000 bc25 	b.w	80056b4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e6a:	f7fe f9cb 	bl	8003204 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e6e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	4618      	mov	r0, r3
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d067      	beq.n	8004f50 <UART_SetConfig+0xc40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d05e      	beq.n	8004f46 <UART_SetConfig+0xc36>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d055      	beq.n	8004f3c <UART_SetConfig+0xc2c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d04c      	beq.n	8004f32 <UART_SetConfig+0xc22>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d043      	beq.n	8004f28 <UART_SetConfig+0xc18>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d03a      	beq.n	8004f1e <UART_SetConfig+0xc0e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2b06      	cmp	r3, #6
 8004eae:	d031      	beq.n	8004f14 <UART_SetConfig+0xc04>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2b07      	cmp	r3, #7
 8004eb6:	d028      	beq.n	8004f0a <UART_SetConfig+0xbfa>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d01f      	beq.n	8004f00 <UART_SetConfig+0xbf0>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2b09      	cmp	r3, #9
 8004ec6:	d016      	beq.n	8004ef6 <UART_SetConfig+0xbe6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	2b0a      	cmp	r3, #10
 8004ece:	d00d      	beq.n	8004eec <UART_SetConfig+0xbdc>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	2b0b      	cmp	r3, #11
 8004ed6:	d104      	bne.n	8004ee2 <UART_SetConfig+0xbd2>
 8004ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004edc:	f04f 0400 	mov.w	r4, #0
 8004ee0:	e03a      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004ee2:	f04f 0301 	mov.w	r3, #1
 8004ee6:	f04f 0400 	mov.w	r4, #0
 8004eea:	e035      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004eec:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004ef0:	f04f 0400 	mov.w	r4, #0
 8004ef4:	e030      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004ef6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004efa:	f04f 0400 	mov.w	r4, #0
 8004efe:	e02b      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f00:	f04f 0320 	mov.w	r3, #32
 8004f04:	f04f 0400 	mov.w	r4, #0
 8004f08:	e026      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f0a:	f04f 0310 	mov.w	r3, #16
 8004f0e:	f04f 0400 	mov.w	r4, #0
 8004f12:	e021      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f14:	f04f 030c 	mov.w	r3, #12
 8004f18:	f04f 0400 	mov.w	r4, #0
 8004f1c:	e01c      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f1e:	f04f 030a 	mov.w	r3, #10
 8004f22:	f04f 0400 	mov.w	r4, #0
 8004f26:	e017      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f28:	f04f 0308 	mov.w	r3, #8
 8004f2c:	f04f 0400 	mov.w	r4, #0
 8004f30:	e012      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f32:	f04f 0306 	mov.w	r3, #6
 8004f36:	f04f 0400 	mov.w	r4, #0
 8004f3a:	e00d      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f3c:	f04f 0304 	mov.w	r3, #4
 8004f40:	f04f 0400 	mov.w	r4, #0
 8004f44:	e008      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f46:	f04f 0302 	mov.w	r3, #2
 8004f4a:	f04f 0400 	mov.w	r4, #0
 8004f4e:	e003      	b.n	8004f58 <UART_SetConfig+0xc48>
 8004f50:	f04f 0301 	mov.w	r3, #1
 8004f54:	f04f 0400 	mov.w	r4, #0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	f7fb f9c4 	bl	80002e8 <__aeabi_uldivmod>
 8004f60:	4603      	mov	r3, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	4619      	mov	r1, r3
 8004f66:	4622      	mov	r2, r4
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	f04f 0400 	mov.w	r4, #0
 8004f70:	0214      	lsls	r4, r2, #8
 8004f72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004f76:	020b      	lsls	r3, r1, #8
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6852      	ldr	r2, [r2, #4]
 8004f7c:	0852      	lsrs	r2, r2, #1
 8004f7e:	4611      	mov	r1, r2
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	eb13 0b01 	adds.w	fp, r3, r1
 8004f88:	eb44 0c02 	adc.w	ip, r4, r2
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	4661      	mov	r1, ip
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f04f 0400 	mov.w	r4, #0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4623      	mov	r3, r4
 8004f9c:	f7fb f9a4 	bl	80002e8 <__aeabi_uldivmod>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004fa6:	e389      	b.n	80056bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fa8:	f107 0318 	add.w	r3, r7, #24
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe f93f 	bl	8003230 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d067      	beq.n	8005092 <UART_SetConfig+0xd82>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d05e      	beq.n	8005088 <UART_SetConfig+0xd78>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d055      	beq.n	800507e <UART_SetConfig+0xd6e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d04c      	beq.n	8005074 <UART_SetConfig+0xd64>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d043      	beq.n	800506a <UART_SetConfig+0xd5a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d03a      	beq.n	8005060 <UART_SetConfig+0xd50>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2b06      	cmp	r3, #6
 8004ff0:	d031      	beq.n	8005056 <UART_SetConfig+0xd46>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b07      	cmp	r3, #7
 8004ff8:	d028      	beq.n	800504c <UART_SetConfig+0xd3c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d01f      	beq.n	8005042 <UART_SetConfig+0xd32>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b09      	cmp	r3, #9
 8005008:	d016      	beq.n	8005038 <UART_SetConfig+0xd28>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b0a      	cmp	r3, #10
 8005010:	d00d      	beq.n	800502e <UART_SetConfig+0xd1e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b0b      	cmp	r3, #11
 8005018:	d104      	bne.n	8005024 <UART_SetConfig+0xd14>
 800501a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800501e:	f04f 0400 	mov.w	r4, #0
 8005022:	e03a      	b.n	800509a <UART_SetConfig+0xd8a>
 8005024:	f04f 0301 	mov.w	r3, #1
 8005028:	f04f 0400 	mov.w	r4, #0
 800502c:	e035      	b.n	800509a <UART_SetConfig+0xd8a>
 800502e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005032:	f04f 0400 	mov.w	r4, #0
 8005036:	e030      	b.n	800509a <UART_SetConfig+0xd8a>
 8005038:	f04f 0340 	mov.w	r3, #64	; 0x40
 800503c:	f04f 0400 	mov.w	r4, #0
 8005040:	e02b      	b.n	800509a <UART_SetConfig+0xd8a>
 8005042:	f04f 0320 	mov.w	r3, #32
 8005046:	f04f 0400 	mov.w	r4, #0
 800504a:	e026      	b.n	800509a <UART_SetConfig+0xd8a>
 800504c:	f04f 0310 	mov.w	r3, #16
 8005050:	f04f 0400 	mov.w	r4, #0
 8005054:	e021      	b.n	800509a <UART_SetConfig+0xd8a>
 8005056:	f04f 030c 	mov.w	r3, #12
 800505a:	f04f 0400 	mov.w	r4, #0
 800505e:	e01c      	b.n	800509a <UART_SetConfig+0xd8a>
 8005060:	f04f 030a 	mov.w	r3, #10
 8005064:	f04f 0400 	mov.w	r4, #0
 8005068:	e017      	b.n	800509a <UART_SetConfig+0xd8a>
 800506a:	f04f 0308 	mov.w	r3, #8
 800506e:	f04f 0400 	mov.w	r4, #0
 8005072:	e012      	b.n	800509a <UART_SetConfig+0xd8a>
 8005074:	f04f 0306 	mov.w	r3, #6
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	e00d      	b.n	800509a <UART_SetConfig+0xd8a>
 800507e:	f04f 0304 	mov.w	r3, #4
 8005082:	f04f 0400 	mov.w	r4, #0
 8005086:	e008      	b.n	800509a <UART_SetConfig+0xd8a>
 8005088:	f04f 0302 	mov.w	r3, #2
 800508c:	f04f 0400 	mov.w	r4, #0
 8005090:	e003      	b.n	800509a <UART_SetConfig+0xd8a>
 8005092:	f04f 0301 	mov.w	r3, #1
 8005096:	f04f 0400 	mov.w	r4, #0
 800509a:	461a      	mov	r2, r3
 800509c:	4623      	mov	r3, r4
 800509e:	f7fb f923 	bl	80002e8 <__aeabi_uldivmod>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	4619      	mov	r1, r3
 80050a8:	4622      	mov	r2, r4
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	f04f 0400 	mov.w	r4, #0
 80050b2:	0214      	lsls	r4, r2, #8
 80050b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80050b8:	020b      	lsls	r3, r1, #8
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6852      	ldr	r2, [r2, #4]
 80050be:	0852      	lsrs	r2, r2, #1
 80050c0:	4611      	mov	r1, r2
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	eb13 0b01 	adds.w	fp, r3, r1
 80050ca:	eb44 0c02 	adc.w	ip, r4, r2
 80050ce:	4658      	mov	r0, fp
 80050d0:	4661      	mov	r1, ip
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	461a      	mov	r2, r3
 80050dc:	4623      	mov	r3, r4
 80050de:	f7fb f903 	bl	80002e8 <__aeabi_uldivmod>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80050e8:	e2e8      	b.n	80056bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ea:	f107 030c 	add.w	r3, r7, #12
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe f9ea 	bl	80034c8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d067      	beq.n	80051d4 <UART_SetConfig+0xec4>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b01      	cmp	r3, #1
 800510a:	d05e      	beq.n	80051ca <UART_SetConfig+0xeba>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b02      	cmp	r3, #2
 8005112:	d055      	beq.n	80051c0 <UART_SetConfig+0xeb0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b03      	cmp	r3, #3
 800511a:	d04c      	beq.n	80051b6 <UART_SetConfig+0xea6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b04      	cmp	r3, #4
 8005122:	d043      	beq.n	80051ac <UART_SetConfig+0xe9c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2b05      	cmp	r3, #5
 800512a:	d03a      	beq.n	80051a2 <UART_SetConfig+0xe92>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b06      	cmp	r3, #6
 8005132:	d031      	beq.n	8005198 <UART_SetConfig+0xe88>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b07      	cmp	r3, #7
 800513a:	d028      	beq.n	800518e <UART_SetConfig+0xe7e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b08      	cmp	r3, #8
 8005142:	d01f      	beq.n	8005184 <UART_SetConfig+0xe74>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b09      	cmp	r3, #9
 800514a:	d016      	beq.n	800517a <UART_SetConfig+0xe6a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2b0a      	cmp	r3, #10
 8005152:	d00d      	beq.n	8005170 <UART_SetConfig+0xe60>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b0b      	cmp	r3, #11
 800515a:	d104      	bne.n	8005166 <UART_SetConfig+0xe56>
 800515c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005160:	f04f 0400 	mov.w	r4, #0
 8005164:	e03a      	b.n	80051dc <UART_SetConfig+0xecc>
 8005166:	f04f 0301 	mov.w	r3, #1
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	e035      	b.n	80051dc <UART_SetConfig+0xecc>
 8005170:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005174:	f04f 0400 	mov.w	r4, #0
 8005178:	e030      	b.n	80051dc <UART_SetConfig+0xecc>
 800517a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800517e:	f04f 0400 	mov.w	r4, #0
 8005182:	e02b      	b.n	80051dc <UART_SetConfig+0xecc>
 8005184:	f04f 0320 	mov.w	r3, #32
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	e026      	b.n	80051dc <UART_SetConfig+0xecc>
 800518e:	f04f 0310 	mov.w	r3, #16
 8005192:	f04f 0400 	mov.w	r4, #0
 8005196:	e021      	b.n	80051dc <UART_SetConfig+0xecc>
 8005198:	f04f 030c 	mov.w	r3, #12
 800519c:	f04f 0400 	mov.w	r4, #0
 80051a0:	e01c      	b.n	80051dc <UART_SetConfig+0xecc>
 80051a2:	f04f 030a 	mov.w	r3, #10
 80051a6:	f04f 0400 	mov.w	r4, #0
 80051aa:	e017      	b.n	80051dc <UART_SetConfig+0xecc>
 80051ac:	f04f 0308 	mov.w	r3, #8
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e012      	b.n	80051dc <UART_SetConfig+0xecc>
 80051b6:	f04f 0306 	mov.w	r3, #6
 80051ba:	f04f 0400 	mov.w	r4, #0
 80051be:	e00d      	b.n	80051dc <UART_SetConfig+0xecc>
 80051c0:	f04f 0304 	mov.w	r3, #4
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	e008      	b.n	80051dc <UART_SetConfig+0xecc>
 80051ca:	f04f 0302 	mov.w	r3, #2
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	e003      	b.n	80051dc <UART_SetConfig+0xecc>
 80051d4:	f04f 0301 	mov.w	r3, #1
 80051d8:	f04f 0400 	mov.w	r4, #0
 80051dc:	461a      	mov	r2, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	f7fb f882 	bl	80002e8 <__aeabi_uldivmod>
 80051e4:	4603      	mov	r3, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	4619      	mov	r1, r3
 80051ea:	4622      	mov	r2, r4
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	f04f 0400 	mov.w	r4, #0
 80051f4:	0214      	lsls	r4, r2, #8
 80051f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80051fa:	020b      	lsls	r3, r1, #8
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6852      	ldr	r2, [r2, #4]
 8005200:	0852      	lsrs	r2, r2, #1
 8005202:	4611      	mov	r1, r2
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	eb13 0b01 	adds.w	fp, r3, r1
 800520c:	eb44 0c02 	adc.w	ip, r4, r2
 8005210:	4658      	mov	r0, fp
 8005212:	4661      	mov	r1, ip
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f04f 0400 	mov.w	r4, #0
 800521c:	461a      	mov	r2, r3
 800521e:	4623      	mov	r3, r4
 8005220:	f7fb f862 	bl	80002e8 <__aeabi_uldivmod>
 8005224:	4603      	mov	r3, r0
 8005226:	460c      	mov	r4, r1
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800522a:	e247      	b.n	80056bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800522c:	4b96      	ldr	r3, [pc, #600]	; (8005488 <UART_SetConfig+0x1178>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80a3 	beq.w	8005380 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800523a:	4b93      	ldr	r3, [pc, #588]	; (8005488 <UART_SetConfig+0x1178>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	4a91      	ldr	r2, [pc, #580]	; (800548c <UART_SetConfig+0x117c>)
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	4618      	mov	r0, r3
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d067      	beq.n	8005328 <UART_SetConfig+0x1018>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	2b01      	cmp	r3, #1
 800525e:	d05e      	beq.n	800531e <UART_SetConfig+0x100e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	2b02      	cmp	r3, #2
 8005266:	d055      	beq.n	8005314 <UART_SetConfig+0x1004>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2b03      	cmp	r3, #3
 800526e:	d04c      	beq.n	800530a <UART_SetConfig+0xffa>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b04      	cmp	r3, #4
 8005276:	d043      	beq.n	8005300 <UART_SetConfig+0xff0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	2b05      	cmp	r3, #5
 800527e:	d03a      	beq.n	80052f6 <UART_SetConfig+0xfe6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	2b06      	cmp	r3, #6
 8005286:	d031      	beq.n	80052ec <UART_SetConfig+0xfdc>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	2b07      	cmp	r3, #7
 800528e:	d028      	beq.n	80052e2 <UART_SetConfig+0xfd2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	2b08      	cmp	r3, #8
 8005296:	d01f      	beq.n	80052d8 <UART_SetConfig+0xfc8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2b09      	cmp	r3, #9
 800529e:	d016      	beq.n	80052ce <UART_SetConfig+0xfbe>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	2b0a      	cmp	r3, #10
 80052a6:	d00d      	beq.n	80052c4 <UART_SetConfig+0xfb4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b0b      	cmp	r3, #11
 80052ae:	d104      	bne.n	80052ba <UART_SetConfig+0xfaa>
 80052b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	e03a      	b.n	8005330 <UART_SetConfig+0x1020>
 80052ba:	f04f 0301 	mov.w	r3, #1
 80052be:	f04f 0400 	mov.w	r4, #0
 80052c2:	e035      	b.n	8005330 <UART_SetConfig+0x1020>
 80052c4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	e030      	b.n	8005330 <UART_SetConfig+0x1020>
 80052ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80052d2:	f04f 0400 	mov.w	r4, #0
 80052d6:	e02b      	b.n	8005330 <UART_SetConfig+0x1020>
 80052d8:	f04f 0320 	mov.w	r3, #32
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	e026      	b.n	8005330 <UART_SetConfig+0x1020>
 80052e2:	f04f 0310 	mov.w	r3, #16
 80052e6:	f04f 0400 	mov.w	r4, #0
 80052ea:	e021      	b.n	8005330 <UART_SetConfig+0x1020>
 80052ec:	f04f 030c 	mov.w	r3, #12
 80052f0:	f04f 0400 	mov.w	r4, #0
 80052f4:	e01c      	b.n	8005330 <UART_SetConfig+0x1020>
 80052f6:	f04f 030a 	mov.w	r3, #10
 80052fa:	f04f 0400 	mov.w	r4, #0
 80052fe:	e017      	b.n	8005330 <UART_SetConfig+0x1020>
 8005300:	f04f 0308 	mov.w	r3, #8
 8005304:	f04f 0400 	mov.w	r4, #0
 8005308:	e012      	b.n	8005330 <UART_SetConfig+0x1020>
 800530a:	f04f 0306 	mov.w	r3, #6
 800530e:	f04f 0400 	mov.w	r4, #0
 8005312:	e00d      	b.n	8005330 <UART_SetConfig+0x1020>
 8005314:	f04f 0304 	mov.w	r3, #4
 8005318:	f04f 0400 	mov.w	r4, #0
 800531c:	e008      	b.n	8005330 <UART_SetConfig+0x1020>
 800531e:	f04f 0302 	mov.w	r3, #2
 8005322:	f04f 0400 	mov.w	r4, #0
 8005326:	e003      	b.n	8005330 <UART_SetConfig+0x1020>
 8005328:	f04f 0301 	mov.w	r3, #1
 800532c:	f04f 0400 	mov.w	r4, #0
 8005330:	461a      	mov	r2, r3
 8005332:	4623      	mov	r3, r4
 8005334:	f7fa ffd8 	bl	80002e8 <__aeabi_uldivmod>
 8005338:	4603      	mov	r3, r0
 800533a:	460c      	mov	r4, r1
 800533c:	4619      	mov	r1, r3
 800533e:	4622      	mov	r2, r4
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	0214      	lsls	r4, r2, #8
 800534a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800534e:	020b      	lsls	r3, r1, #8
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6852      	ldr	r2, [r2, #4]
 8005354:	0852      	lsrs	r2, r2, #1
 8005356:	4611      	mov	r1, r2
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	eb13 0b01 	adds.w	fp, r3, r1
 8005360:	eb44 0c02 	adc.w	ip, r4, r2
 8005364:	4658      	mov	r0, fp
 8005366:	4661      	mov	r1, ip
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	461a      	mov	r2, r3
 8005372:	4623      	mov	r3, r4
 8005374:	f7fa ffb8 	bl	80002e8 <__aeabi_uldivmod>
 8005378:	4603      	mov	r3, r0
 800537a:	460c      	mov	r4, r1
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800537e:	e19d      	b.n	80056bc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d05b      	beq.n	8005440 <UART_SetConfig+0x1130>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	2b01      	cmp	r3, #1
 800538e:	d053      	beq.n	8005438 <UART_SetConfig+0x1128>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2b02      	cmp	r3, #2
 8005396:	d04b      	beq.n	8005430 <UART_SetConfig+0x1120>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b03      	cmp	r3, #3
 800539e:	d043      	beq.n	8005428 <UART_SetConfig+0x1118>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d03b      	beq.n	8005420 <UART_SetConfig+0x1110>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	d033      	beq.n	8005418 <UART_SetConfig+0x1108>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d02b      	beq.n	8005410 <UART_SetConfig+0x1100>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	2b07      	cmp	r3, #7
 80053be:	d023      	beq.n	8005408 <UART_SetConfig+0x10f8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d01b      	beq.n	8005400 <UART_SetConfig+0x10f0>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	2b09      	cmp	r3, #9
 80053ce:	d013      	beq.n	80053f8 <UART_SetConfig+0x10e8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2b0a      	cmp	r3, #10
 80053d6:	d00b      	beq.n	80053f0 <UART_SetConfig+0x10e0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b0b      	cmp	r3, #11
 80053de:	d103      	bne.n	80053e8 <UART_SetConfig+0x10d8>
 80053e0:	4b2a      	ldr	r3, [pc, #168]	; (800548c <UART_SetConfig+0x117c>)
 80053e2:	f04f 0400 	mov.w	r4, #0
 80053e6:	e02e      	b.n	8005446 <UART_SetConfig+0x1136>
 80053e8:	4b29      	ldr	r3, [pc, #164]	; (8005490 <UART_SetConfig+0x1180>)
 80053ea:	f04f 0403 	mov.w	r4, #3
 80053ee:	e02a      	b.n	8005446 <UART_SetConfig+0x1136>
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <UART_SetConfig+0x1184>)
 80053f2:	f04f 0400 	mov.w	r4, #0
 80053f6:	e026      	b.n	8005446 <UART_SetConfig+0x1136>
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <UART_SetConfig+0x1188>)
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	e022      	b.n	8005446 <UART_SetConfig+0x1136>
 8005400:	4b26      	ldr	r3, [pc, #152]	; (800549c <UART_SetConfig+0x118c>)
 8005402:	f04f 0400 	mov.w	r4, #0
 8005406:	e01e      	b.n	8005446 <UART_SetConfig+0x1136>
 8005408:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <UART_SetConfig+0x1190>)
 800540a:	f04f 0400 	mov.w	r4, #0
 800540e:	e01a      	b.n	8005446 <UART_SetConfig+0x1136>
 8005410:	a419      	add	r4, pc, #100	; (adr r4, 8005478 <UART_SetConfig+0x1168>)
 8005412:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005416:	e016      	b.n	8005446 <UART_SetConfig+0x1136>
 8005418:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <UART_SetConfig+0x1194>)
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	e012      	b.n	8005446 <UART_SetConfig+0x1136>
 8005420:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <UART_SetConfig+0x1198>)
 8005422:	f04f 0400 	mov.w	r4, #0
 8005426:	e00e      	b.n	8005446 <UART_SetConfig+0x1136>
 8005428:	a415      	add	r4, pc, #84	; (adr r4, 8005480 <UART_SetConfig+0x1170>)
 800542a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800542e:	e00a      	b.n	8005446 <UART_SetConfig+0x1136>
 8005430:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <UART_SetConfig+0x119c>)
 8005432:	f04f 0400 	mov.w	r4, #0
 8005436:	e006      	b.n	8005446 <UART_SetConfig+0x1136>
 8005438:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <UART_SetConfig+0x11a0>)
 800543a:	f04f 0401 	mov.w	r4, #1
 800543e:	e002      	b.n	8005446 <UART_SetConfig+0x1136>
 8005440:	4b13      	ldr	r3, [pc, #76]	; (8005490 <UART_SetConfig+0x1180>)
 8005442:	f04f 0403 	mov.w	r4, #3
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	4611      	mov	r1, r2
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	eb13 0b01 	adds.w	fp, r3, r1
 8005456:	eb44 0c02 	adc.w	ip, r4, r2
 800545a:	4658      	mov	r0, fp
 800545c:	4661      	mov	r1, ip
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f04f 0400 	mov.w	r4, #0
 8005466:	461a      	mov	r2, r3
 8005468:	4623      	mov	r3, r4
 800546a:	f7fa ff3d 	bl	80002e8 <__aeabi_uldivmod>
 800546e:	4603      	mov	r3, r0
 8005470:	460c      	mov	r4, r1
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005474:	e122      	b.n	80056bc <UART_SetConfig+0x13ac>
 8005476:	bf00      	nop
 8005478:	51615500 	.word	0x51615500
 800547c:	00000000 	.word	0x00000000
 8005480:	a2c2aa00 	.word	0xa2c2aa00
 8005484:	00000000 	.word	0x00000000
 8005488:	58024400 	.word	0x58024400
 800548c:	03d09000 	.word	0x03d09000
 8005490:	d0900000 	.word	0xd0900000
 8005494:	07a12000 	.word	0x07a12000
 8005498:	0f424000 	.word	0x0f424000
 800549c:	1e848000 	.word	0x1e848000
 80054a0:	3d090000 	.word	0x3d090000
 80054a4:	61a80000 	.word	0x61a80000
 80054a8:	7a120000 	.word	0x7a120000
 80054ac:	f4240000 	.word	0xf4240000
 80054b0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d05b      	beq.n	8005574 <UART_SetConfig+0x1264>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d053      	beq.n	800556c <UART_SetConfig+0x125c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d04b      	beq.n	8005564 <UART_SetConfig+0x1254>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d043      	beq.n	800555c <UART_SetConfig+0x124c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d03b      	beq.n	8005554 <UART_SetConfig+0x1244>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d033      	beq.n	800554c <UART_SetConfig+0x123c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d02b      	beq.n	8005544 <UART_SetConfig+0x1234>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	d023      	beq.n	800553c <UART_SetConfig+0x122c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d01b      	beq.n	8005534 <UART_SetConfig+0x1224>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b09      	cmp	r3, #9
 8005502:	d013      	beq.n	800552c <UART_SetConfig+0x121c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b0a      	cmp	r3, #10
 800550a:	d00b      	beq.n	8005524 <UART_SetConfig+0x1214>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b0b      	cmp	r3, #11
 8005512:	d103      	bne.n	800551c <UART_SetConfig+0x120c>
 8005514:	4bc0      	ldr	r3, [pc, #768]	; (8005818 <UART_SetConfig+0x1508>)
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	e02e      	b.n	800557a <UART_SetConfig+0x126a>
 800551c:	4bbf      	ldr	r3, [pc, #764]	; (800581c <UART_SetConfig+0x150c>)
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	e02a      	b.n	800557a <UART_SetConfig+0x126a>
 8005524:	4bbe      	ldr	r3, [pc, #760]	; (8005820 <UART_SetConfig+0x1510>)
 8005526:	f04f 0400 	mov.w	r4, #0
 800552a:	e026      	b.n	800557a <UART_SetConfig+0x126a>
 800552c:	4bbd      	ldr	r3, [pc, #756]	; (8005824 <UART_SetConfig+0x1514>)
 800552e:	f04f 0400 	mov.w	r4, #0
 8005532:	e022      	b.n	800557a <UART_SetConfig+0x126a>
 8005534:	4bbc      	ldr	r3, [pc, #752]	; (8005828 <UART_SetConfig+0x1518>)
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	e01e      	b.n	800557a <UART_SetConfig+0x126a>
 800553c:	4bbb      	ldr	r3, [pc, #748]	; (800582c <UART_SetConfig+0x151c>)
 800553e:	f04f 0400 	mov.w	r4, #0
 8005542:	e01a      	b.n	800557a <UART_SetConfig+0x126a>
 8005544:	a4b0      	add	r4, pc, #704	; (adr r4, 8005808 <UART_SetConfig+0x14f8>)
 8005546:	e9d4 3400 	ldrd	r3, r4, [r4]
 800554a:	e016      	b.n	800557a <UART_SetConfig+0x126a>
 800554c:	4bb8      	ldr	r3, [pc, #736]	; (8005830 <UART_SetConfig+0x1520>)
 800554e:	f04f 0400 	mov.w	r4, #0
 8005552:	e012      	b.n	800557a <UART_SetConfig+0x126a>
 8005554:	4bb7      	ldr	r3, [pc, #732]	; (8005834 <UART_SetConfig+0x1524>)
 8005556:	f04f 0400 	mov.w	r4, #0
 800555a:	e00e      	b.n	800557a <UART_SetConfig+0x126a>
 800555c:	a4ac      	add	r4, pc, #688	; (adr r4, 8005810 <UART_SetConfig+0x1500>)
 800555e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005562:	e00a      	b.n	800557a <UART_SetConfig+0x126a>
 8005564:	4bb4      	ldr	r3, [pc, #720]	; (8005838 <UART_SetConfig+0x1528>)
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	e006      	b.n	800557a <UART_SetConfig+0x126a>
 800556c:	4bb3      	ldr	r3, [pc, #716]	; (800583c <UART_SetConfig+0x152c>)
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	e002      	b.n	800557a <UART_SetConfig+0x126a>
 8005574:	4ba9      	ldr	r3, [pc, #676]	; (800581c <UART_SetConfig+0x150c>)
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6852      	ldr	r2, [r2, #4]
 800557e:	0852      	lsrs	r2, r2, #1
 8005580:	4611      	mov	r1, r2
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	eb13 0b01 	adds.w	fp, r3, r1
 800558a:	eb44 0c02 	adc.w	ip, r4, r2
 800558e:	4658      	mov	r0, fp
 8005590:	4661      	mov	r1, ip
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f04f 0400 	mov.w	r4, #0
 800559a:	461a      	mov	r2, r3
 800559c:	4623      	mov	r3, r4
 800559e:	f7fa fea3 	bl	80002e8 <__aeabi_uldivmod>
 80055a2:	4603      	mov	r3, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80055a8:	e088      	b.n	80056bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d064      	beq.n	800567c <UART_SetConfig+0x136c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d05b      	beq.n	8005672 <UART_SetConfig+0x1362>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d052      	beq.n	8005668 <UART_SetConfig+0x1358>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d04a      	beq.n	8005660 <UART_SetConfig+0x1350>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d041      	beq.n	8005656 <UART_SetConfig+0x1346>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d039      	beq.n	800564e <UART_SetConfig+0x133e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d031      	beq.n	8005646 <UART_SetConfig+0x1336>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	d028      	beq.n	800563c <UART_SetConfig+0x132c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d01f      	beq.n	8005632 <UART_SetConfig+0x1322>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b09      	cmp	r3, #9
 80055f8:	d016      	beq.n	8005628 <UART_SetConfig+0x1318>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b0a      	cmp	r3, #10
 8005600:	d00d      	beq.n	800561e <UART_SetConfig+0x130e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b0b      	cmp	r3, #11
 8005608:	d104      	bne.n	8005614 <UART_SetConfig+0x1304>
 800560a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560e:	f04f 0400 	mov.w	r4, #0
 8005612:	e037      	b.n	8005684 <UART_SetConfig+0x1374>
 8005614:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	e032      	b.n	8005684 <UART_SetConfig+0x1374>
 800561e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	e02d      	b.n	8005684 <UART_SetConfig+0x1374>
 8005628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800562c:	f04f 0400 	mov.w	r4, #0
 8005630:	e028      	b.n	8005684 <UART_SetConfig+0x1374>
 8005632:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005636:	f04f 0400 	mov.w	r4, #0
 800563a:	e023      	b.n	8005684 <UART_SetConfig+0x1374>
 800563c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005640:	f04f 0400 	mov.w	r4, #0
 8005644:	e01e      	b.n	8005684 <UART_SetConfig+0x1374>
 8005646:	4b7e      	ldr	r3, [pc, #504]	; (8005840 <UART_SetConfig+0x1530>)
 8005648:	f04f 0400 	mov.w	r4, #0
 800564c:	e01a      	b.n	8005684 <UART_SetConfig+0x1374>
 800564e:	4b7d      	ldr	r3, [pc, #500]	; (8005844 <UART_SetConfig+0x1534>)
 8005650:	f04f 0400 	mov.w	r4, #0
 8005654:	e016      	b.n	8005684 <UART_SetConfig+0x1374>
 8005656:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800565a:	f04f 0400 	mov.w	r4, #0
 800565e:	e011      	b.n	8005684 <UART_SetConfig+0x1374>
 8005660:	4b79      	ldr	r3, [pc, #484]	; (8005848 <UART_SetConfig+0x1538>)
 8005662:	f04f 0400 	mov.w	r4, #0
 8005666:	e00d      	b.n	8005684 <UART_SetConfig+0x1374>
 8005668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	e008      	b.n	8005684 <UART_SetConfig+0x1374>
 8005672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005676:	f04f 0400 	mov.w	r4, #0
 800567a:	e003      	b.n	8005684 <UART_SetConfig+0x1374>
 800567c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005680:	f04f 0400 	mov.w	r4, #0
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6852      	ldr	r2, [r2, #4]
 8005688:	0852      	lsrs	r2, r2, #1
 800568a:	4611      	mov	r1, r2
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	eb13 0b01 	adds.w	fp, r3, r1
 8005694:	eb44 0c02 	adc.w	ip, r4, r2
 8005698:	4658      	mov	r0, fp
 800569a:	4661      	mov	r1, ip
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f04f 0400 	mov.w	r4, #0
 80056a4:	461a      	mov	r2, r3
 80056a6:	4623      	mov	r3, r4
 80056a8:	f7fa fe1e 	bl	80002e8 <__aeabi_uldivmod>
 80056ac:	4603      	mov	r3, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80056b2:	e003      	b.n	80056bc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80056ba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c2:	d309      	bcc.n	80056d8 <UART_SetConfig+0x13c8>
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ca:	d205      	bcs.n	80056d8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d2:	60da      	str	r2, [r3, #12]
 80056d4:	f000 bf85 	b.w	80065e2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056de:	f000 bf80 	b.w	80065e2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ea:	f040 83da 	bne.w	8005ea2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80056ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	f200 83b3 	bhi.w	8005e5e <UART_SetConfig+0x1b4e>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x13f0>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	0800584d 	.word	0x0800584d
 8005704:	08005905 	.word	0x08005905
 8005708:	08005e5f 	.word	0x08005e5f
 800570c:	08005e5f 	.word	0x08005e5f
 8005710:	080059bd 	.word	0x080059bd
 8005714:	08005e5f 	.word	0x08005e5f
 8005718:	08005e5f 	.word	0x08005e5f
 800571c:	08005e5f 	.word	0x08005e5f
 8005720:	08005a79 	.word	0x08005a79
 8005724:	08005e5f 	.word	0x08005e5f
 8005728:	08005e5f 	.word	0x08005e5f
 800572c:	08005e5f 	.word	0x08005e5f
 8005730:	08005e5f 	.word	0x08005e5f
 8005734:	08005e5f 	.word	0x08005e5f
 8005738:	08005e5f 	.word	0x08005e5f
 800573c:	08005e5f 	.word	0x08005e5f
 8005740:	08005b35 	.word	0x08005b35
 8005744:	08005e5f 	.word	0x08005e5f
 8005748:	08005e5f 	.word	0x08005e5f
 800574c:	08005e5f 	.word	0x08005e5f
 8005750:	08005e5f 	.word	0x08005e5f
 8005754:	08005e5f 	.word	0x08005e5f
 8005758:	08005e5f 	.word	0x08005e5f
 800575c:	08005e5f 	.word	0x08005e5f
 8005760:	08005e5f 	.word	0x08005e5f
 8005764:	08005e5f 	.word	0x08005e5f
 8005768:	08005e5f 	.word	0x08005e5f
 800576c:	08005e5f 	.word	0x08005e5f
 8005770:	08005e5f 	.word	0x08005e5f
 8005774:	08005e5f 	.word	0x08005e5f
 8005778:	08005e5f 	.word	0x08005e5f
 800577c:	08005e5f 	.word	0x08005e5f
 8005780:	08005ca7 	.word	0x08005ca7
 8005784:	08005e5f 	.word	0x08005e5f
 8005788:	08005e5f 	.word	0x08005e5f
 800578c:	08005e5f 	.word	0x08005e5f
 8005790:	08005e5f 	.word	0x08005e5f
 8005794:	08005e5f 	.word	0x08005e5f
 8005798:	08005e5f 	.word	0x08005e5f
 800579c:	08005e5f 	.word	0x08005e5f
 80057a0:	08005e5f 	.word	0x08005e5f
 80057a4:	08005e5f 	.word	0x08005e5f
 80057a8:	08005e5f 	.word	0x08005e5f
 80057ac:	08005e5f 	.word	0x08005e5f
 80057b0:	08005e5f 	.word	0x08005e5f
 80057b4:	08005e5f 	.word	0x08005e5f
 80057b8:	08005e5f 	.word	0x08005e5f
 80057bc:	08005e5f 	.word	0x08005e5f
 80057c0:	08005e5f 	.word	0x08005e5f
 80057c4:	08005e5f 	.word	0x08005e5f
 80057c8:	08005e5f 	.word	0x08005e5f
 80057cc:	08005e5f 	.word	0x08005e5f
 80057d0:	08005e5f 	.word	0x08005e5f
 80057d4:	08005e5f 	.word	0x08005e5f
 80057d8:	08005e5f 	.word	0x08005e5f
 80057dc:	08005e5f 	.word	0x08005e5f
 80057e0:	08005e5f 	.word	0x08005e5f
 80057e4:	08005e5f 	.word	0x08005e5f
 80057e8:	08005e5f 	.word	0x08005e5f
 80057ec:	08005e5f 	.word	0x08005e5f
 80057f0:	08005e5f 	.word	0x08005e5f
 80057f4:	08005e5f 	.word	0x08005e5f
 80057f8:	08005e5f 	.word	0x08005e5f
 80057fc:	08005e5f 	.word	0x08005e5f
 8005800:	08005d9d 	.word	0x08005d9d
 8005804:	f3af 8000 	nop.w
 8005808:	05161500 	.word	0x05161500
 800580c:	00000000 	.word	0x00000000
 8005810:	0a2c2a00 	.word	0x0a2c2a00
 8005814:	00000000 	.word	0x00000000
 8005818:	003d0900 	.word	0x003d0900
 800581c:	3d090000 	.word	0x3d090000
 8005820:	007a1200 	.word	0x007a1200
 8005824:	00f42400 	.word	0x00f42400
 8005828:	01e84800 	.word	0x01e84800
 800582c:	03d09000 	.word	0x03d09000
 8005830:	061a8000 	.word	0x061a8000
 8005834:	07a12000 	.word	0x07a12000
 8005838:	0f424000 	.word	0x0f424000
 800583c:	1e848000 	.word	0x1e848000
 8005840:	000aaa00 	.word	0x000aaa00
 8005844:	000ccc00 	.word	0x000ccc00
 8005848:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584c:	f7fc fdd0 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8005850:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d044      	beq.n	80058e4 <UART_SetConfig+0x15d4>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b01      	cmp	r3, #1
 8005860:	d03e      	beq.n	80058e0 <UART_SetConfig+0x15d0>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b02      	cmp	r3, #2
 8005868:	d038      	beq.n	80058dc <UART_SetConfig+0x15cc>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b03      	cmp	r3, #3
 8005870:	d032      	beq.n	80058d8 <UART_SetConfig+0x15c8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b04      	cmp	r3, #4
 8005878:	d02c      	beq.n	80058d4 <UART_SetConfig+0x15c4>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b05      	cmp	r3, #5
 8005880:	d026      	beq.n	80058d0 <UART_SetConfig+0x15c0>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b06      	cmp	r3, #6
 8005888:	d020      	beq.n	80058cc <UART_SetConfig+0x15bc>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b07      	cmp	r3, #7
 8005890:	d01a      	beq.n	80058c8 <UART_SetConfig+0x15b8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b08      	cmp	r3, #8
 8005898:	d014      	beq.n	80058c4 <UART_SetConfig+0x15b4>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d00e      	beq.n	80058c0 <UART_SetConfig+0x15b0>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	2b0a      	cmp	r3, #10
 80058a8:	d008      	beq.n	80058bc <UART_SetConfig+0x15ac>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b0b      	cmp	r3, #11
 80058b0:	d102      	bne.n	80058b8 <UART_SetConfig+0x15a8>
 80058b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058b6:	e016      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e014      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	e012      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058c0:	2340      	movs	r3, #64	; 0x40
 80058c2:	e010      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058c4:	2320      	movs	r3, #32
 80058c6:	e00e      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058c8:	2310      	movs	r3, #16
 80058ca:	e00c      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058cc:	230c      	movs	r3, #12
 80058ce:	e00a      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058d0:	230a      	movs	r3, #10
 80058d2:	e008      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	e006      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058d8:	2306      	movs	r3, #6
 80058da:	e004      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058dc:	2304      	movs	r3, #4
 80058de:	e002      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e000      	b.n	80058e6 <UART_SetConfig+0x15d6>
 80058e4:	2301      	movs	r3, #1
 80058e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	005a      	lsls	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005902:	e2b0      	b.n	8005e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005904:	f7fc fd8a 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8005908:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d044      	beq.n	800599c <UART_SetConfig+0x168c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b01      	cmp	r3, #1
 8005918:	d03e      	beq.n	8005998 <UART_SetConfig+0x1688>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b02      	cmp	r3, #2
 8005920:	d038      	beq.n	8005994 <UART_SetConfig+0x1684>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b03      	cmp	r3, #3
 8005928:	d032      	beq.n	8005990 <UART_SetConfig+0x1680>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b04      	cmp	r3, #4
 8005930:	d02c      	beq.n	800598c <UART_SetConfig+0x167c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b05      	cmp	r3, #5
 8005938:	d026      	beq.n	8005988 <UART_SetConfig+0x1678>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	2b06      	cmp	r3, #6
 8005940:	d020      	beq.n	8005984 <UART_SetConfig+0x1674>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b07      	cmp	r3, #7
 8005948:	d01a      	beq.n	8005980 <UART_SetConfig+0x1670>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b08      	cmp	r3, #8
 8005950:	d014      	beq.n	800597c <UART_SetConfig+0x166c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b09      	cmp	r3, #9
 8005958:	d00e      	beq.n	8005978 <UART_SetConfig+0x1668>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b0a      	cmp	r3, #10
 8005960:	d008      	beq.n	8005974 <UART_SetConfig+0x1664>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b0b      	cmp	r3, #11
 8005968:	d102      	bne.n	8005970 <UART_SetConfig+0x1660>
 800596a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800596e:	e016      	b.n	800599e <UART_SetConfig+0x168e>
 8005970:	2301      	movs	r3, #1
 8005972:	e014      	b.n	800599e <UART_SetConfig+0x168e>
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	e012      	b.n	800599e <UART_SetConfig+0x168e>
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	e010      	b.n	800599e <UART_SetConfig+0x168e>
 800597c:	2320      	movs	r3, #32
 800597e:	e00e      	b.n	800599e <UART_SetConfig+0x168e>
 8005980:	2310      	movs	r3, #16
 8005982:	e00c      	b.n	800599e <UART_SetConfig+0x168e>
 8005984:	230c      	movs	r3, #12
 8005986:	e00a      	b.n	800599e <UART_SetConfig+0x168e>
 8005988:	230a      	movs	r3, #10
 800598a:	e008      	b.n	800599e <UART_SetConfig+0x168e>
 800598c:	2308      	movs	r3, #8
 800598e:	e006      	b.n	800599e <UART_SetConfig+0x168e>
 8005990:	2306      	movs	r3, #6
 8005992:	e004      	b.n	800599e <UART_SetConfig+0x168e>
 8005994:	2304      	movs	r3, #4
 8005996:	e002      	b.n	800599e <UART_SetConfig+0x168e>
 8005998:	2302      	movs	r3, #2
 800599a:	e000      	b.n	800599e <UART_SetConfig+0x168e>
 800599c:	2301      	movs	r3, #1
 800599e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a4:	005a      	lsls	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	441a      	add	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059ba:	e254      	b.n	8005e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059bc:	f107 0318 	add.w	r3, r7, #24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fd fc35 	bl	8003230 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d044      	beq.n	8005a5a <UART_SetConfig+0x174a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d03e      	beq.n	8005a56 <UART_SetConfig+0x1746>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d038      	beq.n	8005a52 <UART_SetConfig+0x1742>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d032      	beq.n	8005a4e <UART_SetConfig+0x173e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d02c      	beq.n	8005a4a <UART_SetConfig+0x173a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d026      	beq.n	8005a46 <UART_SetConfig+0x1736>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d020      	beq.n	8005a42 <UART_SetConfig+0x1732>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b07      	cmp	r3, #7
 8005a06:	d01a      	beq.n	8005a3e <UART_SetConfig+0x172e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d014      	beq.n	8005a3a <UART_SetConfig+0x172a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d00e      	beq.n	8005a36 <UART_SetConfig+0x1726>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b0a      	cmp	r3, #10
 8005a1e:	d008      	beq.n	8005a32 <UART_SetConfig+0x1722>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b0b      	cmp	r3, #11
 8005a26:	d102      	bne.n	8005a2e <UART_SetConfig+0x171e>
 8005a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a2c:	e016      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e014      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	e012      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a36:	2340      	movs	r3, #64	; 0x40
 8005a38:	e010      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	e00e      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a3e:	2310      	movs	r3, #16
 8005a40:	e00c      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a42:	230c      	movs	r3, #12
 8005a44:	e00a      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a46:	230a      	movs	r3, #10
 8005a48:	e008      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	e006      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a4e:	2306      	movs	r3, #6
 8005a50:	e004      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a52:	2304      	movs	r3, #4
 8005a54:	e002      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e000      	b.n	8005a5c <UART_SetConfig+0x174c>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	005a      	lsls	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	441a      	add	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a76:	e1f6      	b.n	8005e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a78:	f107 030c 	add.w	r3, r7, #12
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fd fd23 	bl	80034c8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d044      	beq.n	8005b16 <UART_SetConfig+0x1806>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d03e      	beq.n	8005b12 <UART_SetConfig+0x1802>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d038      	beq.n	8005b0e <UART_SetConfig+0x17fe>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d032      	beq.n	8005b0a <UART_SetConfig+0x17fa>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d02c      	beq.n	8005b06 <UART_SetConfig+0x17f6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	2b05      	cmp	r3, #5
 8005ab2:	d026      	beq.n	8005b02 <UART_SetConfig+0x17f2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d020      	beq.n	8005afe <UART_SetConfig+0x17ee>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	d01a      	beq.n	8005afa <UART_SetConfig+0x17ea>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d014      	beq.n	8005af6 <UART_SetConfig+0x17e6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	2b09      	cmp	r3, #9
 8005ad2:	d00e      	beq.n	8005af2 <UART_SetConfig+0x17e2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b0a      	cmp	r3, #10
 8005ada:	d008      	beq.n	8005aee <UART_SetConfig+0x17de>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b0b      	cmp	r3, #11
 8005ae2:	d102      	bne.n	8005aea <UART_SetConfig+0x17da>
 8005ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ae8:	e016      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e014      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	e012      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	e010      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005af6:	2320      	movs	r3, #32
 8005af8:	e00e      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005afa:	2310      	movs	r3, #16
 8005afc:	e00c      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005afe:	230c      	movs	r3, #12
 8005b00:	e00a      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005b02:	230a      	movs	r3, #10
 8005b04:	e008      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005b06:	2308      	movs	r3, #8
 8005b08:	e006      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005b0a:	2306      	movs	r3, #6
 8005b0c:	e004      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005b0e:	2304      	movs	r3, #4
 8005b10:	e002      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e000      	b.n	8005b18 <UART_SetConfig+0x1808>
 8005b16:	2301      	movs	r3, #1
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	005a      	lsls	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	441a      	add	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b32:	e198      	b.n	8005e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b34:	4b87      	ldr	r3, [pc, #540]	; (8005d54 <UART_SetConfig+0x1a44>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d05e      	beq.n	8005bfe <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b40:	4b84      	ldr	r3, [pc, #528]	; (8005d54 <UART_SetConfig+0x1a44>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	4a83      	ldr	r2, [pc, #524]	; (8005d58 <UART_SetConfig+0x1a48>)
 8005b4c:	40da      	lsrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d044      	beq.n	8005be0 <UART_SetConfig+0x18d0>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d03e      	beq.n	8005bdc <UART_SetConfig+0x18cc>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d038      	beq.n	8005bd8 <UART_SetConfig+0x18c8>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d032      	beq.n	8005bd4 <UART_SetConfig+0x18c4>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d02c      	beq.n	8005bd0 <UART_SetConfig+0x18c0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d026      	beq.n	8005bcc <UART_SetConfig+0x18bc>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d020      	beq.n	8005bc8 <UART_SetConfig+0x18b8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b07      	cmp	r3, #7
 8005b8c:	d01a      	beq.n	8005bc4 <UART_SetConfig+0x18b4>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d014      	beq.n	8005bc0 <UART_SetConfig+0x18b0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b09      	cmp	r3, #9
 8005b9c:	d00e      	beq.n	8005bbc <UART_SetConfig+0x18ac>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b0a      	cmp	r3, #10
 8005ba4:	d008      	beq.n	8005bb8 <UART_SetConfig+0x18a8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b0b      	cmp	r3, #11
 8005bac:	d102      	bne.n	8005bb4 <UART_SetConfig+0x18a4>
 8005bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bb2:	e016      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e014      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	e012      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bbc:	2340      	movs	r3, #64	; 0x40
 8005bbe:	e010      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	e00e      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	e00c      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bc8:	230c      	movs	r3, #12
 8005bca:	e00a      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bcc:	230a      	movs	r3, #10
 8005bce:	e008      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	e006      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bd4:	2306      	movs	r3, #6
 8005bd6:	e004      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	e002      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e000      	b.n	8005be2 <UART_SetConfig+0x18d2>
 8005be0:	2301      	movs	r3, #1
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	005a      	lsls	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	441a      	add	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005bfc:	e133      	b.n	8005e66 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d043      	beq.n	8005c8e <UART_SetConfig+0x197e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d03d      	beq.n	8005c8a <UART_SetConfig+0x197a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d037      	beq.n	8005c86 <UART_SetConfig+0x1976>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d031      	beq.n	8005c82 <UART_SetConfig+0x1972>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d02b      	beq.n	8005c7e <UART_SetConfig+0x196e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	d025      	beq.n	8005c7a <UART_SetConfig+0x196a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d01f      	beq.n	8005c76 <UART_SetConfig+0x1966>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	d019      	beq.n	8005c72 <UART_SetConfig+0x1962>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d013      	beq.n	8005c6e <UART_SetConfig+0x195e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b09      	cmp	r3, #9
 8005c4c:	d00d      	beq.n	8005c6a <UART_SetConfig+0x195a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b0a      	cmp	r3, #10
 8005c54:	d007      	beq.n	8005c66 <UART_SetConfig+0x1956>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b0b      	cmp	r3, #11
 8005c5c:	d101      	bne.n	8005c62 <UART_SetConfig+0x1952>
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	; (8005d5c <UART_SetConfig+0x1a4c>)
 8005c60:	e016      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c62:	4b3f      	ldr	r3, [pc, #252]	; (8005d60 <UART_SetConfig+0x1a50>)
 8005c64:	e014      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c66:	4b3f      	ldr	r3, [pc, #252]	; (8005d64 <UART_SetConfig+0x1a54>)
 8005c68:	e012      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c6a:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <UART_SetConfig+0x1a58>)
 8005c6c:	e010      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <UART_SetConfig+0x1a5c>)
 8005c70:	e00e      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <UART_SetConfig+0x1a60>)
 8005c74:	e00c      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c76:	4b3f      	ldr	r3, [pc, #252]	; (8005d74 <UART_SetConfig+0x1a64>)
 8005c78:	e00a      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c7a:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <UART_SetConfig+0x1a68>)
 8005c7c:	e008      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c7e:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <UART_SetConfig+0x1a6c>)
 8005c80:	e006      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c82:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <UART_SetConfig+0x1a70>)
 8005c84:	e004      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c86:	4b3f      	ldr	r3, [pc, #252]	; (8005d84 <UART_SetConfig+0x1a74>)
 8005c88:	e002      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c8a:	4b33      	ldr	r3, [pc, #204]	; (8005d58 <UART_SetConfig+0x1a48>)
 8005c8c:	e000      	b.n	8005c90 <UART_SetConfig+0x1980>
 8005c8e:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <UART_SetConfig+0x1a50>)
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6852      	ldr	r2, [r2, #4]
 8005c94:	0852      	lsrs	r2, r2, #1
 8005c96:	441a      	add	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ca4:	e0df      	b.n	8005e66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d045      	beq.n	8005d3a <UART_SetConfig+0x1a2a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d03f      	beq.n	8005d36 <UART_SetConfig+0x1a26>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d039      	beq.n	8005d32 <UART_SetConfig+0x1a22>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d033      	beq.n	8005d2e <UART_SetConfig+0x1a1e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d02d      	beq.n	8005d2a <UART_SetConfig+0x1a1a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d027      	beq.n	8005d26 <UART_SetConfig+0x1a16>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b06      	cmp	r3, #6
 8005cdc:	d021      	beq.n	8005d22 <UART_SetConfig+0x1a12>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b07      	cmp	r3, #7
 8005ce4:	d01b      	beq.n	8005d1e <UART_SetConfig+0x1a0e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d015      	beq.n	8005d1a <UART_SetConfig+0x1a0a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b09      	cmp	r3, #9
 8005cf4:	d00f      	beq.n	8005d16 <UART_SetConfig+0x1a06>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b0a      	cmp	r3, #10
 8005cfc:	d008      	beq.n	8005d10 <UART_SetConfig+0x1a00>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d102      	bne.n	8005d0c <UART_SetConfig+0x19fc>
 8005d06:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005d0a:	e017      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <UART_SetConfig+0x1a60>)
 8005d0e:	e015      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d14:	e012      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d16:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <UART_SetConfig+0x1a78>)
 8005d18:	e010      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d1a:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <UART_SetConfig+0x1a7c>)
 8005d1c:	e00e      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <UART_SetConfig+0x1a4c>)
 8005d20:	e00c      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <UART_SetConfig+0x1a80>)
 8005d24:	e00a      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <UART_SetConfig+0x1a84>)
 8005d28:	e008      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <UART_SetConfig+0x1a54>)
 8005d2c:	e006      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d2e:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <UART_SetConfig+0x1a88>)
 8005d30:	e004      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d32:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <UART_SetConfig+0x1a58>)
 8005d34:	e002      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <UART_SetConfig+0x1a5c>)
 8005d38:	e000      	b.n	8005d3c <UART_SetConfig+0x1a2c>
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <UART_SetConfig+0x1a60>)
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6852      	ldr	r2, [r2, #4]
 8005d40:	0852      	lsrs	r2, r2, #1
 8005d42:	441a      	add	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d50:	e089      	b.n	8005e66 <UART_SetConfig+0x1b56>
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400
 8005d58:	03d09000 	.word	0x03d09000
 8005d5c:	0007a120 	.word	0x0007a120
 8005d60:	07a12000 	.word	0x07a12000
 8005d64:	000f4240 	.word	0x000f4240
 8005d68:	001e8480 	.word	0x001e8480
 8005d6c:	003d0900 	.word	0x003d0900
 8005d70:	007a1200 	.word	0x007a1200
 8005d74:	00a2c2aa 	.word	0x00a2c2aa
 8005d78:	00c35000 	.word	0x00c35000
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	01458554 	.word	0x01458554
 8005d84:	01e84800 	.word	0x01e84800
 8005d88:	0001e848 	.word	0x0001e848
 8005d8c:	0003d090 	.word	0x0003d090
 8005d90:	000a2c2a 	.word	0x000a2c2a
 8005d94:	000c3500 	.word	0x000c3500
 8005d98:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d04f      	beq.n	8005e44 <UART_SetConfig+0x1b34>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d048      	beq.n	8005e3e <UART_SetConfig+0x1b2e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d041      	beq.n	8005e38 <UART_SetConfig+0x1b28>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d03a      	beq.n	8005e32 <UART_SetConfig+0x1b22>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d033      	beq.n	8005e2c <UART_SetConfig+0x1b1c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d02c      	beq.n	8005e26 <UART_SetConfig+0x1b16>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b06      	cmp	r3, #6
 8005dd2:	d025      	beq.n	8005e20 <UART_SetConfig+0x1b10>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b07      	cmp	r3, #7
 8005dda:	d01e      	beq.n	8005e1a <UART_SetConfig+0x1b0a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d017      	beq.n	8005e14 <UART_SetConfig+0x1b04>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d010      	beq.n	8005e0e <UART_SetConfig+0x1afe>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b0a      	cmp	r3, #10
 8005df2:	d009      	beq.n	8005e08 <UART_SetConfig+0x1af8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b0b      	cmp	r3, #11
 8005dfa:	d102      	bne.n	8005e02 <UART_SetConfig+0x1af2>
 8005dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e00:	e022      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e06:	e01f      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0c:	e01c      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e12:	e019      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e18:	e016      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e1e:	e013      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e20:	f241 5354 	movw	r3, #5460	; 0x1554
 8005e24:	e010      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e26:	f641 1398 	movw	r3, #6552	; 0x1998
 8005e2a:	e00d      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e30:	e00a      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e32:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005e36:	e007      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e3c:	e004      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e42:	e001      	b.n	8005e48 <UART_SetConfig+0x1b38>
 8005e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6852      	ldr	r2, [r2, #4]
 8005e4c:	0852      	lsrs	r2, r2, #1
 8005e4e:	441a      	add	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e5c:	e003      	b.n	8005e66 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	2b0f      	cmp	r3, #15
 8005e6a:	d916      	bls.n	8005e9a <UART_SetConfig+0x1b8a>
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e72:	d212      	bcs.n	8005e9a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f023 030f 	bic.w	r3, r3, #15
 8005e7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005e96:	60da      	str	r2, [r3, #12]
 8005e98:	e3a3      	b.n	80065e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea0:	e39f      	b.n	80065e2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8005ea2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	f200 8388 	bhi.w	80065bc <UART_SetConfig+0x22ac>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <UART_SetConfig+0x1ba4>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005fb9 	.word	0x08005fb9
 8005eb8:	0800606f 	.word	0x0800606f
 8005ebc:	080065bd 	.word	0x080065bd
 8005ec0:	080065bd 	.word	0x080065bd
 8005ec4:	08006125 	.word	0x08006125
 8005ec8:	080065bd 	.word	0x080065bd
 8005ecc:	080065bd 	.word	0x080065bd
 8005ed0:	080065bd 	.word	0x080065bd
 8005ed4:	080061df 	.word	0x080061df
 8005ed8:	080065bd 	.word	0x080065bd
 8005edc:	080065bd 	.word	0x080065bd
 8005ee0:	080065bd 	.word	0x080065bd
 8005ee4:	080065bd 	.word	0x080065bd
 8005ee8:	080065bd 	.word	0x080065bd
 8005eec:	080065bd 	.word	0x080065bd
 8005ef0:	080065bd 	.word	0x080065bd
 8005ef4:	08006299 	.word	0x08006299
 8005ef8:	080065bd 	.word	0x080065bd
 8005efc:	080065bd 	.word	0x080065bd
 8005f00:	080065bd 	.word	0x080065bd
 8005f04:	080065bd 	.word	0x080065bd
 8005f08:	080065bd 	.word	0x080065bd
 8005f0c:	080065bd 	.word	0x080065bd
 8005f10:	080065bd 	.word	0x080065bd
 8005f14:	080065bd 	.word	0x080065bd
 8005f18:	080065bd 	.word	0x080065bd
 8005f1c:	080065bd 	.word	0x080065bd
 8005f20:	080065bd 	.word	0x080065bd
 8005f24:	080065bd 	.word	0x080065bd
 8005f28:	080065bd 	.word	0x080065bd
 8005f2c:	080065bd 	.word	0x080065bd
 8005f30:	080065bd 	.word	0x080065bd
 8005f34:	08006409 	.word	0x08006409
 8005f38:	080065bd 	.word	0x080065bd
 8005f3c:	080065bd 	.word	0x080065bd
 8005f40:	080065bd 	.word	0x080065bd
 8005f44:	080065bd 	.word	0x080065bd
 8005f48:	080065bd 	.word	0x080065bd
 8005f4c:	080065bd 	.word	0x080065bd
 8005f50:	080065bd 	.word	0x080065bd
 8005f54:	080065bd 	.word	0x080065bd
 8005f58:	080065bd 	.word	0x080065bd
 8005f5c:	080065bd 	.word	0x080065bd
 8005f60:	080065bd 	.word	0x080065bd
 8005f64:	080065bd 	.word	0x080065bd
 8005f68:	080065bd 	.word	0x080065bd
 8005f6c:	080065bd 	.word	0x080065bd
 8005f70:	080065bd 	.word	0x080065bd
 8005f74:	080065bd 	.word	0x080065bd
 8005f78:	080065bd 	.word	0x080065bd
 8005f7c:	080065bd 	.word	0x080065bd
 8005f80:	080065bd 	.word	0x080065bd
 8005f84:	080065bd 	.word	0x080065bd
 8005f88:	080065bd 	.word	0x080065bd
 8005f8c:	080065bd 	.word	0x080065bd
 8005f90:	080065bd 	.word	0x080065bd
 8005f94:	080065bd 	.word	0x080065bd
 8005f98:	080065bd 	.word	0x080065bd
 8005f9c:	080065bd 	.word	0x080065bd
 8005fa0:	080065bd 	.word	0x080065bd
 8005fa4:	080065bd 	.word	0x080065bd
 8005fa8:	080065bd 	.word	0x080065bd
 8005fac:	080065bd 	.word	0x080065bd
 8005fb0:	080065bd 	.word	0x080065bd
 8005fb4:	080064fd 	.word	0x080064fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb8:	f7fc fa1a 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8005fbc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d044      	beq.n	8006050 <UART_SetConfig+0x1d40>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d03e      	beq.n	800604c <UART_SetConfig+0x1d3c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d038      	beq.n	8006048 <UART_SetConfig+0x1d38>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d032      	beq.n	8006044 <UART_SetConfig+0x1d34>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d02c      	beq.n	8006040 <UART_SetConfig+0x1d30>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d026      	beq.n	800603c <UART_SetConfig+0x1d2c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d020      	beq.n	8006038 <UART_SetConfig+0x1d28>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b07      	cmp	r3, #7
 8005ffc:	d01a      	beq.n	8006034 <UART_SetConfig+0x1d24>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	2b08      	cmp	r3, #8
 8006004:	d014      	beq.n	8006030 <UART_SetConfig+0x1d20>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	2b09      	cmp	r3, #9
 800600c:	d00e      	beq.n	800602c <UART_SetConfig+0x1d1c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	2b0a      	cmp	r3, #10
 8006014:	d008      	beq.n	8006028 <UART_SetConfig+0x1d18>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b0b      	cmp	r3, #11
 800601c:	d102      	bne.n	8006024 <UART_SetConfig+0x1d14>
 800601e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006022:	e016      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006024:	2301      	movs	r3, #1
 8006026:	e014      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	e012      	b.n	8006052 <UART_SetConfig+0x1d42>
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	e010      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006030:	2320      	movs	r3, #32
 8006032:	e00e      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006034:	2310      	movs	r3, #16
 8006036:	e00c      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006038:	230c      	movs	r3, #12
 800603a:	e00a      	b.n	8006052 <UART_SetConfig+0x1d42>
 800603c:	230a      	movs	r3, #10
 800603e:	e008      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006040:	2308      	movs	r3, #8
 8006042:	e006      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006044:	2306      	movs	r3, #6
 8006046:	e004      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006048:	2304      	movs	r3, #4
 800604a:	e002      	b.n	8006052 <UART_SetConfig+0x1d42>
 800604c:	2302      	movs	r3, #2
 800604e:	e000      	b.n	8006052 <UART_SetConfig+0x1d42>
 8006050:	2301      	movs	r3, #1
 8006052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006054:	fbb2 f2f3 	udiv	r2, r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	b29b      	uxth	r3, r3
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800606c:	e2aa      	b.n	80065c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800606e:	f7fc f9d5 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8006072:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	d044      	beq.n	8006106 <UART_SetConfig+0x1df6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b01      	cmp	r3, #1
 8006082:	d03e      	beq.n	8006102 <UART_SetConfig+0x1df2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b02      	cmp	r3, #2
 800608a:	d038      	beq.n	80060fe <UART_SetConfig+0x1dee>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b03      	cmp	r3, #3
 8006092:	d032      	beq.n	80060fa <UART_SetConfig+0x1dea>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b04      	cmp	r3, #4
 800609a:	d02c      	beq.n	80060f6 <UART_SetConfig+0x1de6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2b05      	cmp	r3, #5
 80060a2:	d026      	beq.n	80060f2 <UART_SetConfig+0x1de2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b06      	cmp	r3, #6
 80060aa:	d020      	beq.n	80060ee <UART_SetConfig+0x1dde>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	d01a      	beq.n	80060ea <UART_SetConfig+0x1dda>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d014      	beq.n	80060e6 <UART_SetConfig+0x1dd6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	d00e      	beq.n	80060e2 <UART_SetConfig+0x1dd2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b0a      	cmp	r3, #10
 80060ca:	d008      	beq.n	80060de <UART_SetConfig+0x1dce>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b0b      	cmp	r3, #11
 80060d2:	d102      	bne.n	80060da <UART_SetConfig+0x1dca>
 80060d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060d8:	e016      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060da:	2301      	movs	r3, #1
 80060dc:	e014      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	e012      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060e2:	2340      	movs	r3, #64	; 0x40
 80060e4:	e010      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060e6:	2320      	movs	r3, #32
 80060e8:	e00e      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060ea:	2310      	movs	r3, #16
 80060ec:	e00c      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060ee:	230c      	movs	r3, #12
 80060f0:	e00a      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060f2:	230a      	movs	r3, #10
 80060f4:	e008      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060f6:	2308      	movs	r3, #8
 80060f8:	e006      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060fa:	2306      	movs	r3, #6
 80060fc:	e004      	b.n	8006108 <UART_SetConfig+0x1df8>
 80060fe:	2304      	movs	r3, #4
 8006100:	e002      	b.n	8006108 <UART_SetConfig+0x1df8>
 8006102:	2302      	movs	r3, #2
 8006104:	e000      	b.n	8006108 <UART_SetConfig+0x1df8>
 8006106:	2301      	movs	r3, #1
 8006108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610a:	fbb2 f2f3 	udiv	r2, r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	441a      	add	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	b29b      	uxth	r3, r3
 8006120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006122:	e24f      	b.n	80065c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006124:	f107 0318 	add.w	r3, r7, #24
 8006128:	4618      	mov	r0, r3
 800612a:	f7fd f881 	bl	8003230 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	d044      	beq.n	80061c2 <UART_SetConfig+0x1eb2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2b01      	cmp	r3, #1
 800613e:	d03e      	beq.n	80061be <UART_SetConfig+0x1eae>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b02      	cmp	r3, #2
 8006146:	d038      	beq.n	80061ba <UART_SetConfig+0x1eaa>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	2b03      	cmp	r3, #3
 800614e:	d032      	beq.n	80061b6 <UART_SetConfig+0x1ea6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	2b04      	cmp	r3, #4
 8006156:	d02c      	beq.n	80061b2 <UART_SetConfig+0x1ea2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	2b05      	cmp	r3, #5
 800615e:	d026      	beq.n	80061ae <UART_SetConfig+0x1e9e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b06      	cmp	r3, #6
 8006166:	d020      	beq.n	80061aa <UART_SetConfig+0x1e9a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	2b07      	cmp	r3, #7
 800616e:	d01a      	beq.n	80061a6 <UART_SetConfig+0x1e96>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	2b08      	cmp	r3, #8
 8006176:	d014      	beq.n	80061a2 <UART_SetConfig+0x1e92>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2b09      	cmp	r3, #9
 800617e:	d00e      	beq.n	800619e <UART_SetConfig+0x1e8e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	2b0a      	cmp	r3, #10
 8006186:	d008      	beq.n	800619a <UART_SetConfig+0x1e8a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	2b0b      	cmp	r3, #11
 800618e:	d102      	bne.n	8006196 <UART_SetConfig+0x1e86>
 8006190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006194:	e016      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 8006196:	2301      	movs	r3, #1
 8006198:	e014      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	e012      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 800619e:	2340      	movs	r3, #64	; 0x40
 80061a0:	e010      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061a2:	2320      	movs	r3, #32
 80061a4:	e00e      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061a6:	2310      	movs	r3, #16
 80061a8:	e00c      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061aa:	230c      	movs	r3, #12
 80061ac:	e00a      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061ae:	230a      	movs	r3, #10
 80061b0:	e008      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061b2:	2308      	movs	r3, #8
 80061b4:	e006      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061b6:	2306      	movs	r3, #6
 80061b8:	e004      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061ba:	2304      	movs	r3, #4
 80061bc:	e002      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061be:	2302      	movs	r3, #2
 80061c0:	e000      	b.n	80061c4 <UART_SetConfig+0x1eb4>
 80061c2:	2301      	movs	r3, #1
 80061c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	441a      	add	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d8:	b29b      	uxth	r3, r3
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061dc:	e1f2      	b.n	80065c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fd f970 	bl	80034c8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d044      	beq.n	800627c <UART_SetConfig+0x1f6c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d03e      	beq.n	8006278 <UART_SetConfig+0x1f68>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d038      	beq.n	8006274 <UART_SetConfig+0x1f64>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	2b03      	cmp	r3, #3
 8006208:	d032      	beq.n	8006270 <UART_SetConfig+0x1f60>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	2b04      	cmp	r3, #4
 8006210:	d02c      	beq.n	800626c <UART_SetConfig+0x1f5c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	2b05      	cmp	r3, #5
 8006218:	d026      	beq.n	8006268 <UART_SetConfig+0x1f58>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	2b06      	cmp	r3, #6
 8006220:	d020      	beq.n	8006264 <UART_SetConfig+0x1f54>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b07      	cmp	r3, #7
 8006228:	d01a      	beq.n	8006260 <UART_SetConfig+0x1f50>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b08      	cmp	r3, #8
 8006230:	d014      	beq.n	800625c <UART_SetConfig+0x1f4c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b09      	cmp	r3, #9
 8006238:	d00e      	beq.n	8006258 <UART_SetConfig+0x1f48>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b0a      	cmp	r3, #10
 8006240:	d008      	beq.n	8006254 <UART_SetConfig+0x1f44>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b0b      	cmp	r3, #11
 8006248:	d102      	bne.n	8006250 <UART_SetConfig+0x1f40>
 800624a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800624e:	e016      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006250:	2301      	movs	r3, #1
 8006252:	e014      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	e012      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006258:	2340      	movs	r3, #64	; 0x40
 800625a:	e010      	b.n	800627e <UART_SetConfig+0x1f6e>
 800625c:	2320      	movs	r3, #32
 800625e:	e00e      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006260:	2310      	movs	r3, #16
 8006262:	e00c      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006264:	230c      	movs	r3, #12
 8006266:	e00a      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006268:	230a      	movs	r3, #10
 800626a:	e008      	b.n	800627e <UART_SetConfig+0x1f6e>
 800626c:	2308      	movs	r3, #8
 800626e:	e006      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006270:	2306      	movs	r3, #6
 8006272:	e004      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006274:	2304      	movs	r3, #4
 8006276:	e002      	b.n	800627e <UART_SetConfig+0x1f6e>
 8006278:	2302      	movs	r3, #2
 800627a:	e000      	b.n	800627e <UART_SetConfig+0x1f6e>
 800627c:	2301      	movs	r3, #1
 800627e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	441a      	add	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	b29b      	uxth	r3, r3
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006296:	e195      	b.n	80065c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006298:	4b87      	ldr	r3, [pc, #540]	; (80064b8 <UART_SetConfig+0x21a8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d05d      	beq.n	8006360 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a4:	4b84      	ldr	r3, [pc, #528]	; (80064b8 <UART_SetConfig+0x21a8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	4a83      	ldr	r2, [pc, #524]	; (80064bc <UART_SetConfig+0x21ac>)
 80062b0:	40da      	lsrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d044      	beq.n	8006344 <UART_SetConfig+0x2034>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d03e      	beq.n	8006340 <UART_SetConfig+0x2030>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d038      	beq.n	800633c <UART_SetConfig+0x202c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d032      	beq.n	8006338 <UART_SetConfig+0x2028>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d02c      	beq.n	8006334 <UART_SetConfig+0x2024>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d026      	beq.n	8006330 <UART_SetConfig+0x2020>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	2b06      	cmp	r3, #6
 80062e8:	d020      	beq.n	800632c <UART_SetConfig+0x201c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	2b07      	cmp	r3, #7
 80062f0:	d01a      	beq.n	8006328 <UART_SetConfig+0x2018>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d014      	beq.n	8006324 <UART_SetConfig+0x2014>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	2b09      	cmp	r3, #9
 8006300:	d00e      	beq.n	8006320 <UART_SetConfig+0x2010>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	2b0a      	cmp	r3, #10
 8006308:	d008      	beq.n	800631c <UART_SetConfig+0x200c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	2b0b      	cmp	r3, #11
 8006310:	d102      	bne.n	8006318 <UART_SetConfig+0x2008>
 8006312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006316:	e016      	b.n	8006346 <UART_SetConfig+0x2036>
 8006318:	2301      	movs	r3, #1
 800631a:	e014      	b.n	8006346 <UART_SetConfig+0x2036>
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	e012      	b.n	8006346 <UART_SetConfig+0x2036>
 8006320:	2340      	movs	r3, #64	; 0x40
 8006322:	e010      	b.n	8006346 <UART_SetConfig+0x2036>
 8006324:	2320      	movs	r3, #32
 8006326:	e00e      	b.n	8006346 <UART_SetConfig+0x2036>
 8006328:	2310      	movs	r3, #16
 800632a:	e00c      	b.n	8006346 <UART_SetConfig+0x2036>
 800632c:	230c      	movs	r3, #12
 800632e:	e00a      	b.n	8006346 <UART_SetConfig+0x2036>
 8006330:	230a      	movs	r3, #10
 8006332:	e008      	b.n	8006346 <UART_SetConfig+0x2036>
 8006334:	2308      	movs	r3, #8
 8006336:	e006      	b.n	8006346 <UART_SetConfig+0x2036>
 8006338:	2306      	movs	r3, #6
 800633a:	e004      	b.n	8006346 <UART_SetConfig+0x2036>
 800633c:	2304      	movs	r3, #4
 800633e:	e002      	b.n	8006346 <UART_SetConfig+0x2036>
 8006340:	2302      	movs	r3, #2
 8006342:	e000      	b.n	8006346 <UART_SetConfig+0x2036>
 8006344:	2301      	movs	r3, #1
 8006346:	fbb2 f2f3 	udiv	r2, r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	441a      	add	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800635e:	e131      	b.n	80065c4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d043      	beq.n	80063f0 <UART_SetConfig+0x20e0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	2b01      	cmp	r3, #1
 800636e:	d03d      	beq.n	80063ec <UART_SetConfig+0x20dc>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	2b02      	cmp	r3, #2
 8006376:	d037      	beq.n	80063e8 <UART_SetConfig+0x20d8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	2b03      	cmp	r3, #3
 800637e:	d031      	beq.n	80063e4 <UART_SetConfig+0x20d4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	2b04      	cmp	r3, #4
 8006386:	d02b      	beq.n	80063e0 <UART_SetConfig+0x20d0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	2b05      	cmp	r3, #5
 800638e:	d025      	beq.n	80063dc <UART_SetConfig+0x20cc>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2b06      	cmp	r3, #6
 8006396:	d01f      	beq.n	80063d8 <UART_SetConfig+0x20c8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	2b07      	cmp	r3, #7
 800639e:	d019      	beq.n	80063d4 <UART_SetConfig+0x20c4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d013      	beq.n	80063d0 <UART_SetConfig+0x20c0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	2b09      	cmp	r3, #9
 80063ae:	d00d      	beq.n	80063cc <UART_SetConfig+0x20bc>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	2b0a      	cmp	r3, #10
 80063b6:	d007      	beq.n	80063c8 <UART_SetConfig+0x20b8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	2b0b      	cmp	r3, #11
 80063be:	d101      	bne.n	80063c4 <UART_SetConfig+0x20b4>
 80063c0:	4b3f      	ldr	r3, [pc, #252]	; (80064c0 <UART_SetConfig+0x21b0>)
 80063c2:	e016      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063c4:	4b3d      	ldr	r3, [pc, #244]	; (80064bc <UART_SetConfig+0x21ac>)
 80063c6:	e014      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <UART_SetConfig+0x21b4>)
 80063ca:	e012      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063cc:	4b3e      	ldr	r3, [pc, #248]	; (80064c8 <UART_SetConfig+0x21b8>)
 80063ce:	e010      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063d0:	4b3e      	ldr	r3, [pc, #248]	; (80064cc <UART_SetConfig+0x21bc>)
 80063d2:	e00e      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063d4:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <UART_SetConfig+0x21c0>)
 80063d6:	e00c      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063d8:	4b3e      	ldr	r3, [pc, #248]	; (80064d4 <UART_SetConfig+0x21c4>)
 80063da:	e00a      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063dc:	4b3e      	ldr	r3, [pc, #248]	; (80064d8 <UART_SetConfig+0x21c8>)
 80063de:	e008      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063e0:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <UART_SetConfig+0x21cc>)
 80063e2:	e006      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063e4:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <UART_SetConfig+0x21d0>)
 80063e6:	e004      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063e8:	4b3e      	ldr	r3, [pc, #248]	; (80064e4 <UART_SetConfig+0x21d4>)
 80063ea:	e002      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063ec:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <UART_SetConfig+0x21d8>)
 80063ee:	e000      	b.n	80063f2 <UART_SetConfig+0x20e2>
 80063f0:	4b32      	ldr	r3, [pc, #200]	; (80064bc <UART_SetConfig+0x21ac>)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6852      	ldr	r2, [r2, #4]
 80063f6:	0852      	lsrs	r2, r2, #1
 80063f8:	441a      	add	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006402:	b29b      	uxth	r3, r3
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006406:	e0dd      	b.n	80065c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	d046      	beq.n	800649e <UART_SetConfig+0x218e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2b01      	cmp	r3, #1
 8006416:	d040      	beq.n	800649a <UART_SetConfig+0x218a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2b02      	cmp	r3, #2
 800641e:	d03a      	beq.n	8006496 <UART_SetConfig+0x2186>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2b03      	cmp	r3, #3
 8006426:	d034      	beq.n	8006492 <UART_SetConfig+0x2182>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b04      	cmp	r3, #4
 800642e:	d02e      	beq.n	800648e <UART_SetConfig+0x217e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	2b05      	cmp	r3, #5
 8006436:	d028      	beq.n	800648a <UART_SetConfig+0x217a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b06      	cmp	r3, #6
 800643e:	d022      	beq.n	8006486 <UART_SetConfig+0x2176>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2b07      	cmp	r3, #7
 8006446:	d01c      	beq.n	8006482 <UART_SetConfig+0x2172>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	2b08      	cmp	r3, #8
 800644e:	d016      	beq.n	800647e <UART_SetConfig+0x216e>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	2b09      	cmp	r3, #9
 8006456:	d00f      	beq.n	8006478 <UART_SetConfig+0x2168>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	2b0a      	cmp	r3, #10
 800645e:	d008      	beq.n	8006472 <UART_SetConfig+0x2162>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b0b      	cmp	r3, #11
 8006466:	d102      	bne.n	800646e <UART_SetConfig+0x215e>
 8006468:	f643 5309 	movw	r3, #15625	; 0x3d09
 800646c:	e018      	b.n	80064a0 <UART_SetConfig+0x2190>
 800646e:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <UART_SetConfig+0x21c0>)
 8006470:	e016      	b.n	80064a0 <UART_SetConfig+0x2190>
 8006472:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006476:	e013      	b.n	80064a0 <UART_SetConfig+0x2190>
 8006478:	f24f 4324 	movw	r3, #62500	; 0xf424
 800647c:	e010      	b.n	80064a0 <UART_SetConfig+0x2190>
 800647e:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <UART_SetConfig+0x21dc>)
 8006480:	e00e      	b.n	80064a0 <UART_SetConfig+0x2190>
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <UART_SetConfig+0x21b0>)
 8006484:	e00c      	b.n	80064a0 <UART_SetConfig+0x2190>
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <UART_SetConfig+0x21e0>)
 8006488:	e00a      	b.n	80064a0 <UART_SetConfig+0x2190>
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <UART_SetConfig+0x21e4>)
 800648c:	e008      	b.n	80064a0 <UART_SetConfig+0x2190>
 800648e:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <UART_SetConfig+0x21b4>)
 8006490:	e006      	b.n	80064a0 <UART_SetConfig+0x2190>
 8006492:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <UART_SetConfig+0x21e8>)
 8006494:	e004      	b.n	80064a0 <UART_SetConfig+0x2190>
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <UART_SetConfig+0x21b8>)
 8006498:	e002      	b.n	80064a0 <UART_SetConfig+0x2190>
 800649a:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <UART_SetConfig+0x21bc>)
 800649c:	e000      	b.n	80064a0 <UART_SetConfig+0x2190>
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <UART_SetConfig+0x21c0>)
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6852      	ldr	r2, [r2, #4]
 80064a4:	0852      	lsrs	r2, r2, #1
 80064a6:	441a      	add	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064b4:	e086      	b.n	80065c4 <UART_SetConfig+0x22b4>
 80064b6:	bf00      	nop
 80064b8:	58024400 	.word	0x58024400
 80064bc:	03d09000 	.word	0x03d09000
 80064c0:	0003d090 	.word	0x0003d090
 80064c4:	0007a120 	.word	0x0007a120
 80064c8:	000f4240 	.word	0x000f4240
 80064cc:	001e8480 	.word	0x001e8480
 80064d0:	003d0900 	.word	0x003d0900
 80064d4:	00516155 	.word	0x00516155
 80064d8:	0061a800 	.word	0x0061a800
 80064dc:	007a1200 	.word	0x007a1200
 80064e0:	00a2c2aa 	.word	0x00a2c2aa
 80064e4:	00f42400 	.word	0x00f42400
 80064e8:	01e84800 	.word	0x01e84800
 80064ec:	0001e848 	.word	0x0001e848
 80064f0:	00051615 	.word	0x00051615
 80064f4:	00061a80 	.word	0x00061a80
 80064f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d04e      	beq.n	80065a2 <UART_SetConfig+0x2292>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	2b01      	cmp	r3, #1
 800650a:	d047      	beq.n	800659c <UART_SetConfig+0x228c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	2b02      	cmp	r3, #2
 8006512:	d040      	beq.n	8006596 <UART_SetConfig+0x2286>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2b03      	cmp	r3, #3
 800651a:	d039      	beq.n	8006590 <UART_SetConfig+0x2280>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	2b04      	cmp	r3, #4
 8006522:	d032      	beq.n	800658a <UART_SetConfig+0x227a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	2b05      	cmp	r3, #5
 800652a:	d02b      	beq.n	8006584 <UART_SetConfig+0x2274>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b06      	cmp	r3, #6
 8006532:	d024      	beq.n	800657e <UART_SetConfig+0x226e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	2b07      	cmp	r3, #7
 800653a:	d01d      	beq.n	8006578 <UART_SetConfig+0x2268>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	2b08      	cmp	r3, #8
 8006542:	d016      	beq.n	8006572 <UART_SetConfig+0x2262>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2b09      	cmp	r3, #9
 800654a:	d00f      	beq.n	800656c <UART_SetConfig+0x225c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b0a      	cmp	r3, #10
 8006552:	d008      	beq.n	8006566 <UART_SetConfig+0x2256>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	2b0b      	cmp	r3, #11
 800655a:	d101      	bne.n	8006560 <UART_SetConfig+0x2250>
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	e022      	b.n	80065a6 <UART_SetConfig+0x2296>
 8006560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006564:	e01f      	b.n	80065a6 <UART_SetConfig+0x2296>
 8006566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800656a:	e01c      	b.n	80065a6 <UART_SetConfig+0x2296>
 800656c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006570:	e019      	b.n	80065a6 <UART_SetConfig+0x2296>
 8006572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006576:	e016      	b.n	80065a6 <UART_SetConfig+0x2296>
 8006578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800657c:	e013      	b.n	80065a6 <UART_SetConfig+0x2296>
 800657e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006582:	e010      	b.n	80065a6 <UART_SetConfig+0x2296>
 8006584:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006588:	e00d      	b.n	80065a6 <UART_SetConfig+0x2296>
 800658a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800658e:	e00a      	b.n	80065a6 <UART_SetConfig+0x2296>
 8006590:	f241 5355 	movw	r3, #5461	; 0x1555
 8006594:	e007      	b.n	80065a6 <UART_SetConfig+0x2296>
 8006596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800659a:	e004      	b.n	80065a6 <UART_SetConfig+0x2296>
 800659c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065a0:	e001      	b.n	80065a6 <UART_SetConfig+0x2296>
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6852      	ldr	r2, [r2, #4]
 80065aa:	0852      	lsrs	r2, r2, #1
 80065ac:	441a      	add	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ba:	e003      	b.n	80065c4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80065c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d908      	bls.n	80065dc <UART_SetConfig+0x22cc>
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d204      	bcs.n	80065dc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e002      	b.n	80065e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80065fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006602:	4618      	mov	r0, r3
 8006604:	3740      	adds	r7, #64	; 0x40
 8006606:	46bd      	mov	sp, r7
 8006608:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800660c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01a      	beq.n	8006722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670a:	d10a      	bne.n	8006722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006760:	f7fa fbf4 	bl	8000f4c <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b08      	cmp	r3, #8
 8006772:	d10e      	bne.n	8006792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f82c 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e022      	b.n	80067d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b04      	cmp	r3, #4
 800679e:	d10e      	bne.n	80067be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f816 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e00c      	b.n	80067d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f0:	e062      	b.n	80068b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d05e      	beq.n	80068b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fa fba7 	bl	8000f4c <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <UART_WaitOnFlagUntilTimeout+0x30>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d11d      	bne.n	800684c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800681e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e045      	b.n	80068d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d02e      	beq.n	80068b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006868:	d126      	bne.n	80068b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006872:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006882:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e00f      	b.n	80068d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69da      	ldr	r2, [r3, #28]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4013      	ands	r3, r2
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	bf0c      	ite	eq
 80068c8:	2301      	moveq	r3, #1
 80068ca:	2300      	movne	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d08d      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e027      	b.n	8006946 <HAL_UARTEx_DisableFifoMode+0x66>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2224      	movs	r2, #36	; 0x24
 8006902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0201 	bic.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006966:	2302      	movs	r3, #2
 8006968:	e02d      	b.n	80069c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2224      	movs	r2, #36	; 0x24
 8006976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f850 	bl	8006a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e02d      	b.n	8006a42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2224      	movs	r2, #36	; 0x24
 80069f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0201 	bic.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f812 	bl	8006a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b089      	sub	sp, #36	; 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a54:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <UARTEx_SetNbDataToProcess+0xc8>)
 8006a56:	f107 0314 	add.w	r3, r7, #20
 8006a5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a5e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a62:	4a2d      	ldr	r2, [pc, #180]	; (8006b18 <UARTEx_SetNbDataToProcess+0xcc>)
 8006a64:	f107 030c 	add.w	r3, r7, #12
 8006a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a6c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d108      	bne.n	8006a8a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a88:	e03d      	b.n	8006b06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a8a:	2308      	movs	r3, #8
 8006a8c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a8e:	2308      	movs	r3, #8
 8006a90:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	0e5b      	lsrs	r3, r3, #25
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	0f5b      	lsrs	r3, r3, #29
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006ab2:	7fbb      	ldrb	r3, [r7, #30]
 8006ab4:	7f3a      	ldrb	r2, [r7, #28]
 8006ab6:	f107 0120 	add.w	r1, r7, #32
 8006aba:	440a      	add	r2, r1
 8006abc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	7f3a      	ldrb	r2, [r7, #28]
 8006ac6:	f107 0120 	add.w	r1, r7, #32
 8006aca:	440a      	add	r2, r1
 8006acc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006adc:	7ffb      	ldrb	r3, [r7, #31]
 8006ade:	7f7a      	ldrb	r2, [r7, #29]
 8006ae0:	f107 0120 	add.w	r1, r7, #32
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	7f7a      	ldrb	r2, [r7, #29]
 8006af0:	f107 0120 	add.w	r1, r7, #32
 8006af4:	440a      	add	r2, r1
 8006af6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b06:	bf00      	nop
 8006b08:	3724      	adds	r7, #36	; 0x24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	08006b90 	.word	0x08006b90
 8006b18:	08006b98 	.word	0x08006b98

08006b1c <__libc_init_array>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	4e0d      	ldr	r6, [pc, #52]	; (8006b54 <__libc_init_array+0x38>)
 8006b20:	4c0d      	ldr	r4, [pc, #52]	; (8006b58 <__libc_init_array+0x3c>)
 8006b22:	1ba4      	subs	r4, r4, r6
 8006b24:	10a4      	asrs	r4, r4, #2
 8006b26:	2500      	movs	r5, #0
 8006b28:	42a5      	cmp	r5, r4
 8006b2a:	d109      	bne.n	8006b40 <__libc_init_array+0x24>
 8006b2c:	4e0b      	ldr	r6, [pc, #44]	; (8006b5c <__libc_init_array+0x40>)
 8006b2e:	4c0c      	ldr	r4, [pc, #48]	; (8006b60 <__libc_init_array+0x44>)
 8006b30:	f000 f820 	bl	8006b74 <_init>
 8006b34:	1ba4      	subs	r4, r4, r6
 8006b36:	10a4      	asrs	r4, r4, #2
 8006b38:	2500      	movs	r5, #0
 8006b3a:	42a5      	cmp	r5, r4
 8006b3c:	d105      	bne.n	8006b4a <__libc_init_array+0x2e>
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b44:	4798      	blx	r3
 8006b46:	3501      	adds	r5, #1
 8006b48:	e7ee      	b.n	8006b28 <__libc_init_array+0xc>
 8006b4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b4e:	4798      	blx	r3
 8006b50:	3501      	adds	r5, #1
 8006b52:	e7f2      	b.n	8006b3a <__libc_init_array+0x1e>
 8006b54:	08006bb8 	.word	0x08006bb8
 8006b58:	08006bb8 	.word	0x08006bb8
 8006b5c:	08006bb8 	.word	0x08006bb8
 8006b60:	08006bbc 	.word	0x08006bbc

08006b64 <memset>:
 8006b64:	4402      	add	r2, r0
 8006b66:	4603      	mov	r3, r0
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d100      	bne.n	8006b6e <memset+0xa>
 8006b6c:	4770      	bx	lr
 8006b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b72:	e7f9      	b.n	8006b68 <memset+0x4>

08006b74 <_init>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	bf00      	nop
 8006b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7a:	bc08      	pop	{r3}
 8006b7c:	469e      	mov	lr, r3
 8006b7e:	4770      	bx	lr

08006b80 <_fini>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	bf00      	nop
 8006b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b86:	bc08      	pop	{r3}
 8006b88:	469e      	mov	lr, r3
 8006b8a:	4770      	bx	lr
