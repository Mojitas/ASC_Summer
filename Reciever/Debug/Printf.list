
Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a574  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a864  0800a864  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a864  0800a864  0001a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a86c  0800a86c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800a874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800a884  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800a8e4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000002c0  240000d0  0800a944  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000390  0800a944  00020390  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020394  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002dc3  00000000  00000000  00040492  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000011f8  00000000  00000000  00043258  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000010e0  00000000  00000000  00044450  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003792e  00000000  00000000  00045530  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00010537  00000000  00000000  0007ce5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001660a4  00000000  00000000  0008d395  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001f3439  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004c80  00000000  00000000  001f34b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a7f4 	.word	0x0800a7f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800a7f4 	.word	0x0800a7f4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SendMess>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SendMess(char *Message){
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	466b      	mov	r3, sp
 80005f2:	461e      	mov	r6, r3


	  uint8_t tmp[strlen(Message)];
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fe6f 	bl	80002d8 <strlen>
 80005fa:	4605      	mov	r5, r0
 80005fc:	462b      	mov	r3, r5
 80005fe:	3b01      	subs	r3, #1
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4629      	mov	r1, r5
 8000604:	f04f 0200 	mov.w	r2, #0
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	f04f 0400 	mov.w	r4, #0
 8000610:	00d4      	lsls	r4, r2, #3
 8000612:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000616:	00cb      	lsls	r3, r1, #3
 8000618:	4629      	mov	r1, r5
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	f04f 0400 	mov.w	r4, #0
 8000626:	00d4      	lsls	r4, r2, #3
 8000628:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800062c:	00cb      	lsls	r3, r1, #3
 800062e:	1deb      	adds	r3, r5, #7
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	ebad 0d03 	sub.w	sp, sp, r3
 8000638:	466b      	mov	r3, sp
 800063a:	3300      	adds	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]

		int i;
		for(i=0;i < strlen(Message);i++){
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e00b      	b.n	800065c <SendMess+0x74>

			tmp[i] = (uint8_t)(Message[i]);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	7819      	ldrb	r1, [r3, #0]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4413      	add	r3, r2
 8000652:	460a      	mov	r2, r1
 8000654:	701a      	strb	r2, [r3, #0]
		for(i=0;i < strlen(Message);i++){
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fe3b 	bl	80002d8 <strlen>
 8000662:	4602      	mov	r2, r0
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	429a      	cmp	r2, r3
 8000668:	d8ec      	bhi.n	8000644 <SendMess+0x5c>
		}
		HAL_UART_Transmit(&huart1, tmp, sizeof(tmp)/sizeof(uint8_t), HAL_MAX_DELAY);
 800066a:	68f9      	ldr	r1, [r7, #12]
 800066c:	b2aa      	uxth	r2, r5
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	4808      	ldr	r0, [pc, #32]	; (8000694 <SendMess+0xac>)
 8000674:	f007 f8b6 	bl	80077e4 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2102      	movs	r1, #2
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <SendMess+0xb0>)
 800067e:	f004 f933 	bl	80048e8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000686:	f000 ff2b 	bl	80014e0 <HAL_Delay>
 800068a:	46b5      	mov	sp, r6

}
 800068c:	bf00      	nop
 800068e:	371c      	adds	r7, #28
 8000690:	46bd      	mov	sp, r7
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000694:	240001dc 	.word	0x240001dc
 8000698:	58021000 	.word	0x58021000

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
/*char buf[100];*/
	uint8_t call =0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 febf 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f8ff 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 faad 	bl	8000c0c <MX_GPIO_Init>
  MX_DMA_Init();
 80006b2:	f000 fa83 	bl	8000bbc <MX_DMA_Init>
  MX_ETH_Init();
 80006b6:	f000 f991 	bl	80009dc <MX_ETH_Init>
  MX_TIM1_Init();
 80006ba:	f000 f9e1 	bl	8000a80 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006be:	f000 fa31 	bl	8000b24 <MX_USART1_UART_Init>

  while (1)
  {
//		establish connection

	  switch(call)
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	2b47      	cmp	r3, #71	; 0x47
 80006c6:	f200 80d7 	bhi.w	8000878 <main+0x1dc>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <main+0x34>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080007f1 	.word	0x080007f1
 80006d4:	08000879 	.word	0x08000879
 80006d8:	08000879 	.word	0x08000879
 80006dc:	08000879 	.word	0x08000879
 80006e0:	08000879 	.word	0x08000879
 80006e4:	08000879 	.word	0x08000879
 80006e8:	08000879 	.word	0x08000879
 80006ec:	08000879 	.word	0x08000879
 80006f0:	08000879 	.word	0x08000879
 80006f4:	08000879 	.word	0x08000879
 80006f8:	08000879 	.word	0x08000879
 80006fc:	08000879 	.word	0x08000879
 8000700:	08000879 	.word	0x08000879
 8000704:	08000879 	.word	0x08000879
 8000708:	08000879 	.word	0x08000879
 800070c:	08000879 	.word	0x08000879
 8000710:	08000879 	.word	0x08000879
 8000714:	08000879 	.word	0x08000879
 8000718:	08000879 	.word	0x08000879
 800071c:	08000879 	.word	0x08000879
 8000720:	08000879 	.word	0x08000879
 8000724:	08000879 	.word	0x08000879
 8000728:	08000879 	.word	0x08000879
 800072c:	08000879 	.word	0x08000879
 8000730:	08000879 	.word	0x08000879
 8000734:	08000879 	.word	0x08000879
 8000738:	08000879 	.word	0x08000879
 800073c:	08000879 	.word	0x08000879
 8000740:	08000879 	.word	0x08000879
 8000744:	08000879 	.word	0x08000879
 8000748:	08000879 	.word	0x08000879
 800074c:	08000879 	.word	0x08000879
 8000750:	08000879 	.word	0x08000879
 8000754:	08000879 	.word	0x08000879
 8000758:	08000879 	.word	0x08000879
 800075c:	08000879 	.word	0x08000879
 8000760:	08000879 	.word	0x08000879
 8000764:	08000879 	.word	0x08000879
 8000768:	08000879 	.word	0x08000879
 800076c:	08000879 	.word	0x08000879
 8000770:	08000879 	.word	0x08000879
 8000774:	08000879 	.word	0x08000879
 8000778:	08000879 	.word	0x08000879
 800077c:	08000879 	.word	0x08000879
 8000780:	08000879 	.word	0x08000879
 8000784:	08000879 	.word	0x08000879
 8000788:	08000879 	.word	0x08000879
 800078c:	08000879 	.word	0x08000879
 8000790:	08000879 	.word	0x08000879
 8000794:	08000879 	.word	0x08000879
 8000798:	08000879 	.word	0x08000879
 800079c:	08000879 	.word	0x08000879
 80007a0:	08000879 	.word	0x08000879
 80007a4:	08000879 	.word	0x08000879
 80007a8:	08000879 	.word	0x08000879
 80007ac:	08000879 	.word	0x08000879
 80007b0:	08000879 	.word	0x08000879
 80007b4:	08000879 	.word	0x08000879
 80007b8:	08000879 	.word	0x08000879
 80007bc:	08000879 	.word	0x08000879
 80007c0:	08000879 	.word	0x08000879
 80007c4:	08000879 	.word	0x08000879
 80007c8:	08000879 	.word	0x08000879
 80007cc:	08000879 	.word	0x08000879
 80007d0:	08000879 	.word	0x08000879
 80007d4:	08000809 	.word	0x08000809
 80007d8:	08000819 	.word	0x08000819
 80007dc:	08000829 	.word	0x08000829
 80007e0:	08000839 	.word	0x08000839
 80007e4:	08000849 	.word	0x08000849
 80007e8:	08000859 	.word	0x08000859
 80007ec:	08000869 	.word	0x08000869
	  {
	  case 0:
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2102      	movs	r1, #2
 80007f4:	4824      	ldr	r0, [pc, #144]	; (8000888 <main+0x1ec>)
 80007f6:	f004 f877 	bl	80048e8 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_DMA(&huart1, &call, 1);
 80007fa:	1cfb      	adds	r3, r7, #3
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <main+0x1f0>)
 8000802:	f007 f885 	bl	8007910 <HAL_UART_Receive_DMA>
	  break;
 8000806:	e03e      	b.n	8000886 <main+0x1ea>
	  case 65:
		  send = "B";
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <main+0x1f4>)
 800080a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff feeb 	bl	80005e8 <SendMess>
	  call = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	70fb      	strb	r3, [r7, #3]
	  break;
 8000816:	e036      	b.n	8000886 <main+0x1ea>
	  case 66:
		  send = "C\n";
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <main+0x1f8>)
 800081a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fee3 	bl	80005e8 <SendMess>
	  call = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	70fb      	strb	r3, [r7, #3]
	  break;
 8000826:	e02e      	b.n	8000886 <main+0x1ea>
	  case 67:
		  send = "C\n";
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <main+0x1f8>)
 800082a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fedb 	bl	80005e8 <SendMess>
	  call = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	70fb      	strb	r3, [r7, #3]
	  break;
 8000836:	e026      	b.n	8000886 <main+0x1ea>
	  case 68:
		  send = "D\n";
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <main+0x1fc>)
 800083a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff fed3 	bl	80005e8 <SendMess>
	  call = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	70fb      	strb	r3, [r7, #3]
	  break;
 8000846:	e01e      	b.n	8000886 <main+0x1ea>
	  case 69:
		  send = "E:54C\n";
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <main+0x200>)
 800084a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fecb 	bl	80005e8 <SendMess>
	  call = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	70fb      	strb	r3, [r7, #3]
	  break;
 8000856:	e016      	b.n	8000886 <main+0x1ea>
	  case 70:
		  send = "F\n";
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <main+0x204>)
 800085a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fec3 	bl	80005e8 <SendMess>
	  call = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	70fb      	strb	r3, [r7, #3]
	  break;
 8000866:	e00e      	b.n	8000886 <main+0x1ea>
	  case 71:
		  send = "G\n";
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <main+0x208>)
 800086a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff febb 	bl	80005e8 <SendMess>
	  call = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	70fb      	strb	r3, [r7, #3]
	  break;
 8000876:	e006      	b.n	8000886 <main+0x1ea>
	  default:
	  send = "Wrong system call\n";
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <main+0x20c>)
 800087a:	607b      	str	r3, [r7, #4]
	  SendMess(send);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff feb3 	bl	80005e8 <SendMess>
	  call = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	70fb      	strb	r3, [r7, #3]
	  switch(call)
 8000886:	e71c      	b.n	80006c2 <main+0x26>
 8000888:	58021000 	.word	0x58021000
 800088c:	240001dc 	.word	0x240001dc
 8000890:	0800a80c 	.word	0x0800a80c
 8000894:	0800a810 	.word	0x0800a810
 8000898:	0800a814 	.word	0x0800a814
 800089c:	0800a818 	.word	0x0800a818
 80008a0:	0800a820 	.word	0x0800a820
 80008a4:	0800a824 	.word	0x0800a824
 80008a8:	0800a828 	.word	0x0800a828

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0cc      	sub	sp, #304	; 0x130
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f009 ff92 	bl	800a7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008c4:	2220      	movs	r2, #32
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f009 ff8b 	bl	800a7e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4618      	mov	r0, r3
 80008d4:	23bc      	movs	r3, #188	; 0xbc
 80008d6:	461a      	mov	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f009 ff83 	bl	800a7e4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008de:	2002      	movs	r0, #2
 80008e0:	f004 f81c 	bl	800491c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <SystemClock_Config+0x128>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ee:	4a39      	ldr	r2, [pc, #228]	; (80009d4 <SystemClock_Config+0x128>)
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008f6:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <SystemClock_Config+0x128>)
 80008f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fa:	f003 0201 	and.w	r2, r3, #1
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <SystemClock_Config+0x12c>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800090a:	4a33      	ldr	r2, [pc, #204]	; (80009d8 <SystemClock_Config+0x12c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <SystemClock_Config+0x12c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000922:	bf00      	nop
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <SystemClock_Config+0x12c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800092c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000930:	d1f8      	bne.n	8000924 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000938:	2301      	movs	r3, #1
 800093a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800094e:	4618      	mov	r0, r3
 8000950:	f004 f81e 	bl	8004990 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800095a:	f000 fa5f 	bl	8000e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	233f      	movs	r3, #63	; 0x3f
 8000960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800098e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f004 fbd3 	bl	8005140 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80009a0:	f000 fa3c 	bl	8000e1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	2200      	movs	r2, #0
 80009b2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 ff87 	bl	80058cc <HAL_RCCEx_PeriphCLKConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80009c4:	f000 fa2a 	bl	8000e1c <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	58000400 	.word	0x58000400
 80009d8:	58024800 	.word	0x58024800

080009dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_ETH_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <MX_ETH_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_ETH_Init+0x90>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_ETH_Init+0x90>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_ETH_Init+0x90>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	3302      	adds	r3, #2
 80009fe:	22e1      	movs	r2, #225	; 0xe1
 8000a00:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	3303      	adds	r3, #3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	3304      	adds	r3, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	3305      	adds	r3, #5
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_ETH_Init+0x98>)
 8000a2a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_ETH_Init+0x9c>)
 8000a30:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a38:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_ETH_Init+0x90>)
 8000a3c:	f003 f98e 	bl	8003d5c <HAL_ETH_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 f9e9 	bl	8000e1c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_ETH_Init+0xa0>)
 8000a50:	f009 fec8 	bl	800a7e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_ETH_Init+0xa0>)
 8000a56:	2221      	movs	r2, #33	; 0x21
 8000a58:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_ETH_Init+0xa0>)
 8000a5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a60:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_ETH_Init+0xa0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	240002a8 	.word	0x240002a8
 8000a70:	40028000 	.word	0x40028000
 8000a74:	24000070 	.word	0x24000070
 8000a78:	24000010 	.word	0x24000010
 8000a7c:	24000318 	.word	0x24000318

08000a80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <MX_TIM1_Init+0xa0>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000aca:	f006 f9ef 	bl	8006eac <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 f9a2 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000ae6:	f006 fb57 	bl	8007198 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000af0:	f000 f994 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_TIM1_Init+0x9c>)
 8000b06:	f006 fd77 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b10:	f000 f984 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000268 	.word	0x24000268
 8000b20:	40010000 	.word	0x40010000

08000b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_USART1_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b6e:	f006 fde9 	bl	8007744 <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 f950 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b80:	f009 fd28 	bl	800a5d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 f947 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000b92:	f009 fd5d 	bl	800a650 <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 f93e 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USART1_UART_Init+0x90>)
 8000ba2:	f009 fcde 	bl	800a562 <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f936 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	240001dc 	.word	0x240001dc
 8000bb8:	40011000 	.word	0x40011000

08000bbc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_DMA_Init+0x4c>)
 8000bc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <MX_DMA_Init+0x4c>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_DMA_Init+0x4c>)
 8000bd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	200b      	movs	r0, #11
 8000be6:	f000 fd75 	bl	80016d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bea:	200b      	movs	r0, #11
 8000bec:	f000 fd8c 	bl	8001708 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	200c      	movs	r0, #12
 8000bf6:	f000 fd6d 	bl	80016d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bfa:	200c      	movs	r0, #12
 8000bfc:	f000 fd84 	bl	8001708 <HAL_NVIC_EnableIRQ>

}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58024400 	.word	0x58024400

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b6e      	ldr	r3, [pc, #440]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a6c      	ldr	r2, [pc, #432]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b6a      	ldr	r3, [pc, #424]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c40:	4b66      	ldr	r3, [pc, #408]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b62      	ldr	r3, [pc, #392]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b5f      	ldr	r3, [pc, #380]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a5d      	ldr	r2, [pc, #372]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b57      	ldr	r3, [pc, #348]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	4a56      	ldr	r2, [pc, #344]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8c:	4b53      	ldr	r3, [pc, #332]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a4e      	ldr	r2, [pc, #312]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb8:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a47      	ldr	r2, [pc, #284]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a3f      	ldr	r2, [pc, #252]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <MX_GPIO_Init+0x1d0>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Tx_GPIO_Port, Tx_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	4839      	ldr	r0, [pc, #228]	; (8000de0 <MX_GPIO_Init+0x1d4>)
 8000cfa:	f003 fdf5 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2101      	movs	r1, #1
 8000d02:	4838      	ldr	r0, [pc, #224]	; (8000de4 <MX_GPIO_Init+0x1d8>)
 8000d04:	f003 fdf0 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	4836      	ldr	r0, [pc, #216]	; (8000de8 <MX_GPIO_Init+0x1dc>)
 8000d0e:	f003 fdeb 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <MX_GPIO_Init+0x1e0>)
 8000d28:	f003 fc2e 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tx_Pin */
  GPIO_InitStruct.Pin = Tx_Pin;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Tx_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4827      	ldr	r0, [pc, #156]	; (8000de0 <MX_GPIO_Init+0x1d4>)
 8000d44:	f003 fc20 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rx_Pin */
  GPIO_InitStruct.Pin = Rx_Pin;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rx_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4821      	ldr	r0, [pc, #132]	; (8000de0 <MX_GPIO_Init+0x1d4>)
 8000d5c:	f003 fc14 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	481b      	ldr	r0, [pc, #108]	; (8000de4 <MX_GPIO_Init+0x1d8>)
 8000d78:	f003 fc06 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MX_GPIO_Init+0x1e4>)
 8000d9a:	f003 fbf5 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_GPIO_Init+0x1e8>)
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_GPIO_Init+0x1ec>)
 8000db2:	f003 fbe9 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_GPIO_Init+0x1dc>)
 8000dce:	f003 fbdb 	bl	8004588 <HAL_GPIO_Init>

}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	; 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020000 	.word	0x58020000
 8000de4:	58020400 	.word	0x58020400
 8000de8:	58021000 	.word	0x58021000
 8000dec:	58020800 	.word	0x58020800
 8000df0:	58020c00 	.word	0x58020c00
 8000df4:	11110000 	.word	0x11110000
 8000df8:	58021800 	.word	0x58021800

08000dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e0c:	d101      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0e:	f000 fb47 	bl	80014a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2102      	movs	r1, #2
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <Error_Handler+0x24>)
 8000e26:	f003 fd5f 	bl	80048e8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2e:	f000 fb57 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2102      	movs	r1, #2
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <Error_Handler+0x24>)
 8000e38:	f003 fd56 	bl	80048e8 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	58021000 	.word	0x58021000

08000e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_MspInit+0x30>)
 8000e4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x30>)
 8000e52:	f043 0302 	orr.w	r3, r3, #2
 8000e56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a59      	ldr	r2, [pc, #356]	; (8000ffc <HAL_ETH_MspInit+0x184>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	f040 80ab 	bne.w	8000ff2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e9c:	4b58      	ldr	r3, [pc, #352]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea2:	4a57      	ldr	r2, [pc, #348]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eac:	4b54      	ldr	r3, [pc, #336]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eba:	4b51      	ldr	r3, [pc, #324]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec0:	4a4f      	ldr	r2, [pc, #316]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eca:	4b4d      	ldr	r3, [pc, #308]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ed8:	4b49      	ldr	r3, [pc, #292]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000eda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ede:	4a48      	ldr	r2, [pc, #288]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ee8:	4b45      	ldr	r3, [pc, #276]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b42      	ldr	r3, [pc, #264]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	4a40      	ldr	r2, [pc, #256]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f06:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	4a39      	ldr	r2, [pc, #228]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	4a31      	ldr	r2, [pc, #196]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_ETH_MspInit+0x188>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f6e:	2332      	movs	r3, #50	; 0x32
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	481e      	ldr	r0, [pc, #120]	; (8001004 <HAL_ETH_MspInit+0x18c>)
 8000f8a:	f003 fafd 	bl	8004588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f8e:	2386      	movs	r3, #134	; 0x86
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9e:	230b      	movs	r3, #11
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4817      	ldr	r0, [pc, #92]	; (8001008 <HAL_ETH_MspInit+0x190>)
 8000faa:	f003 faed 	bl	8004588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc0:	230b      	movs	r3, #11
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <HAL_ETH_MspInit+0x194>)
 8000fcc:	f003 fadc 	bl	8004588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe2:	230b      	movs	r3, #11
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <HAL_ETH_MspInit+0x198>)
 8000fee:	f003 facb 	bl	8004588 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3738      	adds	r7, #56	; 0x38
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40028000 	.word	0x40028000
 8001000:	58024400 	.word	0x58024400
 8001004:	58020800 	.word	0x58020800
 8001008:	58020000 	.word	0x58020000
 800100c:	58020400 	.word	0x58020400
 8001010:	58021800 	.word	0x58021800

08001014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_TIM_Base_MspInit+0x3c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10e      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_TIM_Base_MspInit+0x40>)
 8001028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_TIM_Base_MspInit+0x40>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <HAL_TIM_Base_MspInit+0x40>)
 8001038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40010000 	.word	0x40010000
 8001054:	58024400 	.word	0x58024400

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <HAL_UART_MspInit+0x14c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f040 8090 	bne.w	800119c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_UART_MspInit+0x150>)
 800107e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <HAL_UART_MspInit+0x150>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_UART_MspInit+0x150>)
 800108e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <HAL_UART_MspInit+0x150>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	4a41      	ldr	r2, [pc, #260]	; (80011a8 <HAL_UART_MspInit+0x150>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_UART_MspInit+0x150>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b8:	23c0      	movs	r3, #192	; 0xc0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c8:	2307      	movs	r3, #7
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4836      	ldr	r0, [pc, #216]	; (80011ac <HAL_UART_MspInit+0x154>)
 80010d4:	f003 fa58 	bl	8004588 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HAL_UART_MspInit+0x158>)
 80010da:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <HAL_UART_MspInit+0x15c>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_UART_MspInit+0x158>)
 80010e0:	2229      	movs	r2, #41	; 0x29
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <HAL_UART_MspInit+0x158>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_UART_MspInit+0x158>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_UART_MspInit+0x158>)
 80010f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_UART_MspInit+0x158>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <HAL_UART_MspInit+0x158>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_UART_MspInit+0x158>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_UART_MspInit+0x158>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_UART_MspInit+0x158>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <HAL_UART_MspInit+0x158>)
 8001118:	f000 fb04 	bl	8001724 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001122:	f7ff fe7b 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_UART_MspInit+0x158>)
 800112a:	679a      	str	r2, [r3, #120]	; 0x78
 800112c:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <HAL_UART_MspInit+0x158>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_UART_MspInit+0x164>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_UART_MspInit+0x160>)
 800113a:	222a      	movs	r2, #42	; 0x2a
 800113c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001140:	2240      	movs	r2, #64	; 0x40
 8001142:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_UART_MspInit+0x160>)
 800114c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x160>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_UART_MspInit+0x160>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001170:	4811      	ldr	r0, [pc, #68]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001172:	f000 fad7 	bl	8001724 <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800117c:	f7ff fe4e 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001184:	675a      	str	r2, [r3, #116]	; 0x74
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <HAL_UART_MspInit+0x160>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2025      	movs	r0, #37	; 0x25
 8001192:	f000 fa9f 	bl	80016d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001196:	2025      	movs	r0, #37	; 0x25
 8001198:	f000 fab6 	bl	8001708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40011000 	.word	0x40011000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020400 	.word	0x58020400
 80011b0:	24000164 	.word	0x24000164
 80011b4:	40020010 	.word	0x40020010
 80011b8:	240000ec 	.word	0x240000ec
 80011bc:	40020028 	.word	0x40020028

080011c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	201c      	movs	r0, #28
 80011d6:	f000 fa7d 	bl	80016d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 fa94 	bl	8001708 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_InitTick+0xa4>)
 80011e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e6:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <HAL_InitTick+0xa4>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_InitTick+0xa4>)
 80011f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011fe:	f107 020c 	add.w	r2, r7, #12
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fb1d 	bl	8005848 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800120e:	f004 faef 	bl	80057f0 <HAL_RCC_GetPCLK1Freq>
 8001212:	6378      	str	r0, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_InitTick+0xa8>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	0c9b      	lsrs	r3, r3, #18
 800121e:	3b01      	subs	r3, #1
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0xac>)
 8001224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001228:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_InitTick+0xac>)
 800122c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_InitTick+0xac>)
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_InitTick+0xac>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_InitTick+0xac>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_InitTick+0xac>)
 8001246:	f005 fe31 	bl	8006eac <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d104      	bne.n	800125a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <HAL_InitTick+0xac>)
 8001252:	f005 fe57 	bl	8006f04 <HAL_TIM_Base_Start_IT>
 8001256:	4603      	mov	r3, r0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3738      	adds	r7, #56	; 0x38
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	58024400 	.word	0x58024400
 8001268:	431bde83 	.word	0x431bde83
 800126c:	2400034c 	.word	0x2400034c

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <DMA1_Stream0_IRQHandler+0x10>)
 80012c6:	f001 fa37 	bl	8002738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000164 	.word	0x24000164

080012d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA1_Stream1_IRQHandler+0x10>)
 80012da:	f001 fa2d 	bl	8002738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	240000ec 	.word	0x240000ec

080012e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM2_IRQHandler+0x10>)
 80012ee:	f005 fe33 	bl	8006f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2400034c 	.word	0x2400034c

080012fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <USART1_IRQHandler+0x10>)
 8001302:	f006 fb8d 	bl	8007a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	240001dc 	.word	0x240001dc

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <SystemInit+0xac>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <SystemInit+0xac>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <SystemInit+0xb0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <SystemInit+0xb0>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <SystemInit+0xb0>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <SystemInit+0xb0>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4921      	ldr	r1, [pc, #132]	; (80013c0 <SystemInit+0xb0>)
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <SystemInit+0xb4>)
 800133e:	4013      	ands	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <SystemInit+0xb0>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <SystemInit+0xb0>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <SystemInit+0xb0>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <SystemInit+0xb0>)
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <SystemInit+0xb0>)
 800135c:	2200      	movs	r2, #0
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <SystemInit+0xb0>)
 8001362:	2200      	movs	r2, #0
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <SystemInit+0xb0>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <SystemInit+0xb0>)
 800136e:	2200      	movs	r2, #0
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <SystemInit+0xb0>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <SystemInit+0xb0>)
 800137a:	2200      	movs	r2, #0
 800137c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <SystemInit+0xb0>)
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <SystemInit+0xb0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <SystemInit+0xb0>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <SystemInit+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <SystemInit+0xb8>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <SystemInit+0xbc>)
 800139c:	4013      	ands	r3, r2
 800139e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013a2:	d202      	bcs.n	80013aa <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <SystemInit+0xc0>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SystemInit+0xac>)
 80013ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	58024400 	.word	0x58024400
 80013c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013c8:	5c001000 	.word	0x5c001000
 80013cc:	ffff0000 	.word	0xffff0000
 80013d0:	51008108 	.word	0x51008108

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013da:	e003      	b.n	80013e4 <LoopCopyDataInit>

080013dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013e2:	3104      	adds	r1, #4

080013e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013ec:	d3f6      	bcc.n	80013dc <CopyDataInit>
  ldr  r2, =_sbss
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013f0:	e002      	b.n	80013f8 <LoopFillZerobss>

080013f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013f4:	f842 3b04 	str.w	r3, [r2], #4

080013f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013fc:	d3f9      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013fe:	f7ff ff87 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f009 f9cb 	bl	800a79c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff f949 	bl	800069c <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800140c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001410:	0800a874 	.word	0x0800a874
  ldr  r0, =_sdata
 8001414:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001418:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 800141c:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001420:	24000390 	.word	0x24000390

08001424 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC3_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142e:	2003      	movs	r0, #3
 8001430:	f000 f945 	bl	80016be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001434:	f004 f83a 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8001438:	4601      	mov	r1, r0
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_Init+0x68>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_Init+0x6c>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	fa21 f303 	lsr.w	r3, r1, r3
 8001450:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_Init+0x68>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_Init+0x6c>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_Init+0x70>)
 800146a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_Init+0x74>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fea4 	bl	80011c0 <HAL_InitTick>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e002      	b.n	8001488 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001482:	f7ff fcdf 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	58024400 	.word	0x58024400
 8001494:	0800a84c 	.word	0x0800a84c
 8001498:	24000004 	.word	0x24000004
 800149c:	24000000 	.word	0x24000000

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	2400000c 	.word	0x2400000c
 80014c4:	2400038c 	.word	0x2400038c

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2400038c 	.word	0x2400038c

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_Delay+0x40>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2400000c 	.word	0x2400000c

08001524 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetREVID+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0c1b      	lsrs	r3, r3, #16
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	5c001000 	.word	0x5c001000

0800153c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	58000400 	.word	0x58000400

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	4313      	orrs	r3, r2
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	05fa0000 	.word	0x05fa0000

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e2:	f7ff ff63 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	6978      	ldr	r0, [r7, #20]
 80016ee:	f7ff ffb3 	bl	8001658 <NVIC_EncodePriority>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff82 	bl	8001604 <__NVIC_SetPriority>
}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff56 	bl	80015c8 <__NVIC_EnableIRQ>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff fecc 	bl	80014c8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e316      	b.n	8001d6a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a66      	ldr	r2, [pc, #408]	; (80018dc <HAL_DMA_Init+0x1b8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d04a      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_DMA_Init+0x1bc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d045      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a63      	ldr	r2, [pc, #396]	; (80018e4 <HAL_DMA_Init+0x1c0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d040      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a62      	ldr	r2, [pc, #392]	; (80018e8 <HAL_DMA_Init+0x1c4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d03b      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a60      	ldr	r2, [pc, #384]	; (80018ec <HAL_DMA_Init+0x1c8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d036      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5f      	ldr	r2, [pc, #380]	; (80018f0 <HAL_DMA_Init+0x1cc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d031      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a5d      	ldr	r2, [pc, #372]	; (80018f4 <HAL_DMA_Init+0x1d0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02c      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a5c      	ldr	r2, [pc, #368]	; (80018f8 <HAL_DMA_Init+0x1d4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d027      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5a      	ldr	r2, [pc, #360]	; (80018fc <HAL_DMA_Init+0x1d8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d022      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a59      	ldr	r2, [pc, #356]	; (8001900 <HAL_DMA_Init+0x1dc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d01d      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a57      	ldr	r2, [pc, #348]	; (8001904 <HAL_DMA_Init+0x1e0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d018      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a56      	ldr	r2, [pc, #344]	; (8001908 <HAL_DMA_Init+0x1e4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a54      	ldr	r2, [pc, #336]	; (800190c <HAL_DMA_Init+0x1e8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00e      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a53      	ldr	r2, [pc, #332]	; (8001910 <HAL_DMA_Init+0x1ec>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d009      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a51      	ldr	r2, [pc, #324]	; (8001914 <HAL_DMA_Init+0x1f0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d004      	beq.n	80017dc <HAL_DMA_Init+0xb8>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a50      	ldr	r2, [pc, #320]	; (8001918 <HAL_DMA_Init+0x1f4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Init+0xbc>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_DMA_Init+0xbe>
 80017e0:	2300      	movs	r3, #0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 813b 	beq.w	8001a5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a37      	ldr	r2, [pc, #220]	; (80018dc <HAL_DMA_Init+0x1b8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d04a      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a36      	ldr	r2, [pc, #216]	; (80018e0 <HAL_DMA_Init+0x1bc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d045      	beq.n	8001898 <HAL_DMA_Init+0x174>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a34      	ldr	r2, [pc, #208]	; (80018e4 <HAL_DMA_Init+0x1c0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d040      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <HAL_DMA_Init+0x1c4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d03b      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a31      	ldr	r2, [pc, #196]	; (80018ec <HAL_DMA_Init+0x1c8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d036      	beq.n	8001898 <HAL_DMA_Init+0x174>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <HAL_DMA_Init+0x1cc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d031      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <HAL_DMA_Init+0x1d0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d02c      	beq.n	8001898 <HAL_DMA_Init+0x174>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <HAL_DMA_Init+0x1d4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d027      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_DMA_Init+0x1d8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d022      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a2a      	ldr	r2, [pc, #168]	; (8001900 <HAL_DMA_Init+0x1dc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d01d      	beq.n	8001898 <HAL_DMA_Init+0x174>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <HAL_DMA_Init+0x1e0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d018      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_DMA_Init+0x1e4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d013      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_DMA_Init+0x1e8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00e      	beq.n	8001898 <HAL_DMA_Init+0x174>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a24      	ldr	r2, [pc, #144]	; (8001910 <HAL_DMA_Init+0x1ec>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d009      	beq.n	8001898 <HAL_DMA_Init+0x174>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a22      	ldr	r2, [pc, #136]	; (8001914 <HAL_DMA_Init+0x1f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d004      	beq.n	8001898 <HAL_DMA_Init+0x174>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a21      	ldr	r2, [pc, #132]	; (8001918 <HAL_DMA_Init+0x1f4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d108      	bne.n	80018aa <HAL_DMA_Init+0x186>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e007      	b.n	80018ba <HAL_DMA_Init+0x196>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018ba:	e02f      	b.n	800191c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018bc:	f7ff fe04 	bl	80014c8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d928      	bls.n	800191c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2220      	movs	r2, #32
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2203      	movs	r2, #3
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e246      	b.n	8001d6a <HAL_DMA_Init+0x646>
 80018dc:	40020010 	.word	0x40020010
 80018e0:	40020028 	.word	0x40020028
 80018e4:	40020040 	.word	0x40020040
 80018e8:	40020058 	.word	0x40020058
 80018ec:	40020070 	.word	0x40020070
 80018f0:	40020088 	.word	0x40020088
 80018f4:	400200a0 	.word	0x400200a0
 80018f8:	400200b8 	.word	0x400200b8
 80018fc:	40020410 	.word	0x40020410
 8001900:	40020428 	.word	0x40020428
 8001904:	40020440 	.word	0x40020440
 8001908:	40020458 	.word	0x40020458
 800190c:	40020470 	.word	0x40020470
 8001910:	40020488 	.word	0x40020488
 8001914:	400204a0 	.word	0x400204a0
 8001918:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1c8      	bne.n	80018bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4b83      	ldr	r3, [pc, #524]	; (8001b44 <HAL_DMA_Init+0x420>)
 8001936:	4013      	ands	r3, r2
 8001938:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001942:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	2b04      	cmp	r3, #4
 800196e:	d107      	bne.n	8001980 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4313      	orrs	r3, r2
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001980:	4b71      	ldr	r3, [pc, #452]	; (8001b48 <HAL_DMA_Init+0x424>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b71      	ldr	r3, [pc, #452]	; (8001b4c <HAL_DMA_Init+0x428>)
 8001986:	4013      	ands	r3, r2
 8001988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800198c:	d328      	bcc.n	80019e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b28      	cmp	r3, #40	; 0x28
 8001994:	d903      	bls.n	800199e <HAL_DMA_Init+0x27a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b2e      	cmp	r3, #46	; 0x2e
 800199c:	d917      	bls.n	80019ce <HAL_DMA_Init+0x2aa>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b3e      	cmp	r3, #62	; 0x3e
 80019a4:	d903      	bls.n	80019ae <HAL_DMA_Init+0x28a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b42      	cmp	r3, #66	; 0x42
 80019ac:	d90f      	bls.n	80019ce <HAL_DMA_Init+0x2aa>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b46      	cmp	r3, #70	; 0x46
 80019b4:	d903      	bls.n	80019be <HAL_DMA_Init+0x29a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b48      	cmp	r3, #72	; 0x48
 80019bc:	d907      	bls.n	80019ce <HAL_DMA_Init+0x2aa>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b4e      	cmp	r3, #78	; 0x4e
 80019c4:	d905      	bls.n	80019d2 <HAL_DMA_Init+0x2ae>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b52      	cmp	r3, #82	; 0x52
 80019cc:	d801      	bhi.n	80019d2 <HAL_DMA_Init+0x2ae>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_DMA_Init+0x2b0>
 80019d2:	2300      	movs	r3, #0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f023 0307 	bic.w	r3, r3, #7
 80019f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d117      	bne.n	8001a3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00e      	beq.n	8001a3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f002 f813 	bl	8003a48 <DMA_CheckFifoParam>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e197      	b.n	8001d6a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f001 ff4e 	bl	80038e4 <DMA_CalcBaseAndBitshift>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	223f      	movs	r2, #63	; 0x3f
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	e0cd      	b.n	8001bfa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <HAL_DMA_Init+0x42c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_Init+0x38a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a39      	ldr	r2, [pc, #228]	; (8001b54 <HAL_DMA_Init+0x430>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01d      	beq.n	8001aae <HAL_DMA_Init+0x38a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_DMA_Init+0x434>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d018      	beq.n	8001aae <HAL_DMA_Init+0x38a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a36      	ldr	r2, [pc, #216]	; (8001b5c <HAL_DMA_Init+0x438>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_DMA_Init+0x38a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a35      	ldr	r2, [pc, #212]	; (8001b60 <HAL_DMA_Init+0x43c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_DMA_Init+0x38a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <HAL_DMA_Init+0x440>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_DMA_Init+0x38a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <HAL_DMA_Init+0x444>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_DMA_Init+0x38a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a30      	ldr	r2, [pc, #192]	; (8001b6c <HAL_DMA_Init+0x448>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_DMA_Init+0x38e>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_Init+0x390>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8097 	beq.w	8001be8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <HAL_DMA_Init+0x42c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d021      	beq.n	8001b08 <HAL_DMA_Init+0x3e4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <HAL_DMA_Init+0x430>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01c      	beq.n	8001b08 <HAL_DMA_Init+0x3e4>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <HAL_DMA_Init+0x434>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d017      	beq.n	8001b08 <HAL_DMA_Init+0x3e4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <HAL_DMA_Init+0x438>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d012      	beq.n	8001b08 <HAL_DMA_Init+0x3e4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_DMA_Init+0x43c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00d      	beq.n	8001b08 <HAL_DMA_Init+0x3e4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1c      	ldr	r2, [pc, #112]	; (8001b64 <HAL_DMA_Init+0x440>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d008      	beq.n	8001b08 <HAL_DMA_Init+0x3e4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <HAL_DMA_Init+0x444>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d003      	beq.n	8001b08 <HAL_DMA_Init+0x3e4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_DMA_Init+0x448>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_DMA_Init+0x44c>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d020      	beq.n	8001b74 <HAL_DMA_Init+0x450>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b80      	cmp	r3, #128	; 0x80
 8001b38:	d102      	bne.n	8001b40 <HAL_DMA_Init+0x41c>
 8001b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b3e:	e01a      	b.n	8001b76 <HAL_DMA_Init+0x452>
 8001b40:	2300      	movs	r3, #0
 8001b42:	e018      	b.n	8001b76 <HAL_DMA_Init+0x452>
 8001b44:	fe10803f 	.word	0xfe10803f
 8001b48:	5c001000 	.word	0x5c001000
 8001b4c:	ffff0000 	.word	0xffff0000
 8001b50:	58025408 	.word	0x58025408
 8001b54:	5802541c 	.word	0x5802541c
 8001b58:	58025430 	.word	0x58025430
 8001b5c:	58025444 	.word	0x58025444
 8001b60:	58025458 	.word	0x58025458
 8001b64:	5802546c 	.word	0x5802546c
 8001b68:	58025480 	.word	0x58025480
 8001b6c:	58025494 	.word	0x58025494
 8001b70:	fffe000f 	.word	0xfffe000f
 8001b74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68d2      	ldr	r2, [r2, #12]
 8001b7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ba4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <HAL_DMA_Init+0x650>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_DMA_Init+0x654>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	009a      	lsls	r2, r3, #2
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f001 fe89 	bl	80038e4 <DMA_CalcBaseAndBitshift>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2201      	movs	r2, #1
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	e008      	b.n	8001bfa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0b7      	b.n	8001d6a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_DMA_Init+0x658>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d072      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a5d      	ldr	r2, [pc, #372]	; (8001d80 <HAL_DMA_Init+0x65c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d06d      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5c      	ldr	r2, [pc, #368]	; (8001d84 <HAL_DMA_Init+0x660>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d068      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_DMA_Init+0x664>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d063      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a59      	ldr	r2, [pc, #356]	; (8001d8c <HAL_DMA_Init+0x668>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d05e      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a57      	ldr	r2, [pc, #348]	; (8001d90 <HAL_DMA_Init+0x66c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d059      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a56      	ldr	r2, [pc, #344]	; (8001d94 <HAL_DMA_Init+0x670>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d054      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a54      	ldr	r2, [pc, #336]	; (8001d98 <HAL_DMA_Init+0x674>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d04f      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <HAL_DMA_Init+0x678>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d04a      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_DMA_Init+0x67c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d045      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_DMA_Init+0x680>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d040      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <HAL_DMA_Init+0x684>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d03b      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a4d      	ldr	r2, [pc, #308]	; (8001dac <HAL_DMA_Init+0x688>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d036      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a4b      	ldr	r2, [pc, #300]	; (8001db0 <HAL_DMA_Init+0x68c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d031      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a4a      	ldr	r2, [pc, #296]	; (8001db4 <HAL_DMA_Init+0x690>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d02c      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a48      	ldr	r2, [pc, #288]	; (8001db8 <HAL_DMA_Init+0x694>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d027      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <HAL_DMA_Init+0x698>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_DMA_Init+0x69c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01d      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a44      	ldr	r2, [pc, #272]	; (8001dc4 <HAL_DMA_Init+0x6a0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d018      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <HAL_DMA_Init+0x6a4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a41      	ldr	r2, [pc, #260]	; (8001dcc <HAL_DMA_Init+0x6a8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00e      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3f      	ldr	r2, [pc, #252]	; (8001dd0 <HAL_DMA_Init+0x6ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d009      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a3e      	ldr	r2, [pc, #248]	; (8001dd4 <HAL_DMA_Init+0x6b0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d004      	beq.n	8001cea <HAL_DMA_Init+0x5c6>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <HAL_DMA_Init+0x6b4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_DMA_Init+0x5ca>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_DMA_Init+0x5cc>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d032      	beq.n	8001d5a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f001 ff23 	bl	8003b40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d102      	bne.n	8001d08 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d010      	beq.n	8001d48 <HAL_DMA_Init+0x624>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d80c      	bhi.n	8001d48 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f001 ffa0 	bl	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	e008      	b.n	8001d5a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	a7fdabf8 	.word	0xa7fdabf8
 8001d78:	cccccccd 	.word	0xcccccccd
 8001d7c:	40020010 	.word	0x40020010
 8001d80:	40020028 	.word	0x40020028
 8001d84:	40020040 	.word	0x40020040
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	40020070 	.word	0x40020070
 8001d90:	40020088 	.word	0x40020088
 8001d94:	400200a0 	.word	0x400200a0
 8001d98:	400200b8 	.word	0x400200b8
 8001d9c:	40020410 	.word	0x40020410
 8001da0:	40020428 	.word	0x40020428
 8001da4:	40020440 	.word	0x40020440
 8001da8:	40020458 	.word	0x40020458
 8001dac:	40020470 	.word	0x40020470
 8001db0:	40020488 	.word	0x40020488
 8001db4:	400204a0 	.word	0x400204a0
 8001db8:	400204b8 	.word	0x400204b8
 8001dbc:	58025408 	.word	0x58025408
 8001dc0:	5802541c 	.word	0x5802541c
 8001dc4:	58025430 	.word	0x58025430
 8001dc8:	58025444 	.word	0x58025444
 8001dcc:	58025458 	.word	0x58025458
 8001dd0:	5802546c 	.word	0x5802546c
 8001dd4:	58025480 	.word	0x58025480
 8001dd8:	58025494 	.word	0x58025494

08001ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e226      	b.n	8002246 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_DMA_Start_IT+0x2a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e21f      	b.n	8002246 <HAL_DMA_Start_IT+0x46a>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 820a 	bne.w	8002230 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a68      	ldr	r2, [pc, #416]	; (8001fd0 <HAL_DMA_Start_IT+0x1f4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04a      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <HAL_DMA_Start_IT+0x1f8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d045      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a65      	ldr	r2, [pc, #404]	; (8001fd8 <HAL_DMA_Start_IT+0x1fc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d040      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <HAL_DMA_Start_IT+0x200>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d03b      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a62      	ldr	r2, [pc, #392]	; (8001fe0 <HAL_DMA_Start_IT+0x204>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d036      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a60      	ldr	r2, [pc, #384]	; (8001fe4 <HAL_DMA_Start_IT+0x208>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d031      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a5f      	ldr	r2, [pc, #380]	; (8001fe8 <HAL_DMA_Start_IT+0x20c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d02c      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5d      	ldr	r2, [pc, #372]	; (8001fec <HAL_DMA_Start_IT+0x210>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d027      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <HAL_DMA_Start_IT+0x214>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a5a      	ldr	r2, [pc, #360]	; (8001ff4 <HAL_DMA_Start_IT+0x218>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01d      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a59      	ldr	r2, [pc, #356]	; (8001ff8 <HAL_DMA_Start_IT+0x21c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d018      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_DMA_Start_IT+0x220>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_DMA_Start_IT+0x224>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00e      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a54      	ldr	r2, [pc, #336]	; (8002004 <HAL_DMA_Start_IT+0x228>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a53      	ldr	r2, [pc, #332]	; (8002008 <HAL_DMA_Start_IT+0x22c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d004      	beq.n	8001eca <HAL_DMA_Start_IT+0xee>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_DMA_Start_IT+0x230>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d108      	bne.n	8001edc <HAL_DMA_Start_IT+0x100>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e007      	b.n	8001eec <HAL_DMA_Start_IT+0x110>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f001 fb4a 	bl	800358c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <HAL_DMA_Start_IT+0x1f4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04a      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a33      	ldr	r2, [pc, #204]	; (8001fd4 <HAL_DMA_Start_IT+0x1f8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d045      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <HAL_DMA_Start_IT+0x1fc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <HAL_DMA_Start_IT+0x200>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03b      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <HAL_DMA_Start_IT+0x204>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2d      	ldr	r2, [pc, #180]	; (8001fe4 <HAL_DMA_Start_IT+0x208>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <HAL_DMA_Start_IT+0x20c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02c      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <HAL_DMA_Start_IT+0x210>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d027      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <HAL_DMA_Start_IT+0x214>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_DMA_Start_IT+0x218>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01d      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_DMA_Start_IT+0x21c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <HAL_DMA_Start_IT+0x220>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_DMA_Start_IT+0x224>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_DMA_Start_IT+0x228>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_DMA_Start_IT+0x22c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_Start_IT+0x1bc>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_DMA_Start_IT+0x230>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Start_IT+0x1c0>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_Start_IT+0x1c2>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 021e 	bic.w	r2, r3, #30
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0216 	orr.w	r2, r2, #22
 8001fb4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03e      	beq.n	800203c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0208 	orr.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e035      	b.n	800203c <HAL_DMA_Start_IT+0x260>
 8001fd0:	40020010 	.word	0x40020010
 8001fd4:	40020028 	.word	0x40020028
 8001fd8:	40020040 	.word	0x40020040
 8001fdc:	40020058 	.word	0x40020058
 8001fe0:	40020070 	.word	0x40020070
 8001fe4:	40020088 	.word	0x40020088
 8001fe8:	400200a0 	.word	0x400200a0
 8001fec:	400200b8 	.word	0x400200b8
 8001ff0:	40020410 	.word	0x40020410
 8001ff4:	40020428 	.word	0x40020428
 8001ff8:	40020440 	.word	0x40020440
 8001ffc:	40020458 	.word	0x40020458
 8002000:	40020470 	.word	0x40020470
 8002004:	40020488 	.word	0x40020488
 8002008:	400204a0 	.word	0x400204a0
 800200c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 020e 	bic.w	r2, r3, #14
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 020a 	orr.w	r2, r2, #10
 8002022:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0204 	orr.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a83      	ldr	r2, [pc, #524]	; (8002250 <HAL_DMA_Start_IT+0x474>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d072      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a82      	ldr	r2, [pc, #520]	; (8002254 <HAL_DMA_Start_IT+0x478>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d06d      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a80      	ldr	r2, [pc, #512]	; (8002258 <HAL_DMA_Start_IT+0x47c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d068      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_DMA_Start_IT+0x480>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d063      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a7d      	ldr	r2, [pc, #500]	; (8002260 <HAL_DMA_Start_IT+0x484>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d05e      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7c      	ldr	r2, [pc, #496]	; (8002264 <HAL_DMA_Start_IT+0x488>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d059      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a7a      	ldr	r2, [pc, #488]	; (8002268 <HAL_DMA_Start_IT+0x48c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d054      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a79      	ldr	r2, [pc, #484]	; (800226c <HAL_DMA_Start_IT+0x490>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d04f      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a77      	ldr	r2, [pc, #476]	; (8002270 <HAL_DMA_Start_IT+0x494>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d04a      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a76      	ldr	r2, [pc, #472]	; (8002274 <HAL_DMA_Start_IT+0x498>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d045      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a74      	ldr	r2, [pc, #464]	; (8002278 <HAL_DMA_Start_IT+0x49c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d040      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a73      	ldr	r2, [pc, #460]	; (800227c <HAL_DMA_Start_IT+0x4a0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d03b      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a71      	ldr	r2, [pc, #452]	; (8002280 <HAL_DMA_Start_IT+0x4a4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d036      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a70      	ldr	r2, [pc, #448]	; (8002284 <HAL_DMA_Start_IT+0x4a8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d031      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6e      	ldr	r2, [pc, #440]	; (8002288 <HAL_DMA_Start_IT+0x4ac>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02c      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6d      	ldr	r2, [pc, #436]	; (800228c <HAL_DMA_Start_IT+0x4b0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d027      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6b      	ldr	r2, [pc, #428]	; (8002290 <HAL_DMA_Start_IT+0x4b4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d022      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_DMA_Start_IT+0x4b8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d01d      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a68      	ldr	r2, [pc, #416]	; (8002298 <HAL_DMA_Start_IT+0x4bc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d018      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a67      	ldr	r2, [pc, #412]	; (800229c <HAL_DMA_Start_IT+0x4c0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a65      	ldr	r2, [pc, #404]	; (80022a0 <HAL_DMA_Start_IT+0x4c4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00e      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a64      	ldr	r2, [pc, #400]	; (80022a4 <HAL_DMA_Start_IT+0x4c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a62      	ldr	r2, [pc, #392]	; (80022a8 <HAL_DMA_Start_IT+0x4cc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_DMA_Start_IT+0x350>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a61      	ldr	r2, [pc, #388]	; (80022ac <HAL_DMA_Start_IT+0x4d0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Start_IT+0x354>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_DMA_Start_IT+0x356>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01a      	beq.n	800216c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002152:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a37      	ldr	r2, [pc, #220]	; (8002250 <HAL_DMA_Start_IT+0x474>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d04a      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a36      	ldr	r2, [pc, #216]	; (8002254 <HAL_DMA_Start_IT+0x478>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d045      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_DMA_Start_IT+0x47c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d040      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a33      	ldr	r2, [pc, #204]	; (800225c <HAL_DMA_Start_IT+0x480>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d03b      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_DMA_Start_IT+0x484>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d036      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a30      	ldr	r2, [pc, #192]	; (8002264 <HAL_DMA_Start_IT+0x488>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d031      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2e      	ldr	r2, [pc, #184]	; (8002268 <HAL_DMA_Start_IT+0x48c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02c      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2d      	ldr	r2, [pc, #180]	; (800226c <HAL_DMA_Start_IT+0x490>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d027      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <HAL_DMA_Start_IT+0x494>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d022      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <HAL_DMA_Start_IT+0x498>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d01d      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <HAL_DMA_Start_IT+0x49c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d018      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_DMA_Start_IT+0x4a0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a25      	ldr	r2, [pc, #148]	; (8002280 <HAL_DMA_Start_IT+0x4a4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00e      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a24      	ldr	r2, [pc, #144]	; (8002284 <HAL_DMA_Start_IT+0x4a8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d009      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <HAL_DMA_Start_IT+0x4ac>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d004      	beq.n	800220c <HAL_DMA_Start_IT+0x430>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a21      	ldr	r2, [pc, #132]	; (800228c <HAL_DMA_Start_IT+0x4b0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d108      	bne.n	800221e <HAL_DMA_Start_IT+0x442>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e012      	b.n	8002244 <HAL_DMA_Start_IT+0x468>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e009      	b.n	8002244 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800223e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002244:	7dfb      	ldrb	r3, [r7, #23]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40020010 	.word	0x40020010
 8002254:	40020028 	.word	0x40020028
 8002258:	40020040 	.word	0x40020040
 800225c:	40020058 	.word	0x40020058
 8002260:	40020070 	.word	0x40020070
 8002264:	40020088 	.word	0x40020088
 8002268:	400200a0 	.word	0x400200a0
 800226c:	400200b8 	.word	0x400200b8
 8002270:	40020410 	.word	0x40020410
 8002274:	40020428 	.word	0x40020428
 8002278:	40020440 	.word	0x40020440
 800227c:	40020458 	.word	0x40020458
 8002280:	40020470 	.word	0x40020470
 8002284:	40020488 	.word	0x40020488
 8002288:	400204a0 	.word	0x400204a0
 800228c:	400204b8 	.word	0x400204b8
 8002290:	58025408 	.word	0x58025408
 8002294:	5802541c 	.word	0x5802541c
 8002298:	58025430 	.word	0x58025430
 800229c:	58025444 	.word	0x58025444
 80022a0:	58025458 	.word	0x58025458
 80022a4:	5802546c 	.word	0x5802546c
 80022a8:	58025480 	.word	0x58025480
 80022ac:	58025494 	.word	0x58025494

080022b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e205      	b.n	80026ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e1fa      	b.n	80026ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a8c      	ldr	r2, [pc, #560]	; (8002510 <HAL_DMA_Abort_IT+0x260>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d04a      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a8b      	ldr	r2, [pc, #556]	; (8002514 <HAL_DMA_Abort_IT+0x264>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d045      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a89      	ldr	r2, [pc, #548]	; (8002518 <HAL_DMA_Abort_IT+0x268>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d040      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a88      	ldr	r2, [pc, #544]	; (800251c <HAL_DMA_Abort_IT+0x26c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d03b      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a86      	ldr	r2, [pc, #536]	; (8002520 <HAL_DMA_Abort_IT+0x270>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a85      	ldr	r2, [pc, #532]	; (8002524 <HAL_DMA_Abort_IT+0x274>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d031      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a83      	ldr	r2, [pc, #524]	; (8002528 <HAL_DMA_Abort_IT+0x278>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02c      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a82      	ldr	r2, [pc, #520]	; (800252c <HAL_DMA_Abort_IT+0x27c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d027      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a80      	ldr	r2, [pc, #512]	; (8002530 <HAL_DMA_Abort_IT+0x280>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d022      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7f      	ldr	r2, [pc, #508]	; (8002534 <HAL_DMA_Abort_IT+0x284>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d01d      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a7d      	ldr	r2, [pc, #500]	; (8002538 <HAL_DMA_Abort_IT+0x288>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7c      	ldr	r2, [pc, #496]	; (800253c <HAL_DMA_Abort_IT+0x28c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a7a      	ldr	r2, [pc, #488]	; (8002540 <HAL_DMA_Abort_IT+0x290>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a79      	ldr	r2, [pc, #484]	; (8002544 <HAL_DMA_Abort_IT+0x294>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a77      	ldr	r2, [pc, #476]	; (8002548 <HAL_DMA_Abort_IT+0x298>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_DMA_Abort_IT+0xc8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_DMA_Abort_IT+0x29c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_DMA_Abort_IT+0xcc>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_DMA_Abort_IT+0xce>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d065      	beq.n	800244e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2204      	movs	r2, #4
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a60      	ldr	r2, [pc, #384]	; (8002510 <HAL_DMA_Abort_IT+0x260>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d04a      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a5e      	ldr	r2, [pc, #376]	; (8002514 <HAL_DMA_Abort_IT+0x264>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d045      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a5d      	ldr	r2, [pc, #372]	; (8002518 <HAL_DMA_Abort_IT+0x268>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d040      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5b      	ldr	r2, [pc, #364]	; (800251c <HAL_DMA_Abort_IT+0x26c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d03b      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a5a      	ldr	r2, [pc, #360]	; (8002520 <HAL_DMA_Abort_IT+0x270>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d036      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_DMA_Abort_IT+0x274>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d031      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_DMA_Abort_IT+0x278>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d02c      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a55      	ldr	r2, [pc, #340]	; (800252c <HAL_DMA_Abort_IT+0x27c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d027      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a54      	ldr	r2, [pc, #336]	; (8002530 <HAL_DMA_Abort_IT+0x280>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d022      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_DMA_Abort_IT+0x284>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01d      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_DMA_Abort_IT+0x288>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d018      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_DMA_Abort_IT+0x28c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <HAL_DMA_Abort_IT+0x290>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a4c      	ldr	r2, [pc, #304]	; (8002544 <HAL_DMA_Abort_IT+0x294>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <HAL_DMA_Abort_IT+0x298>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_DMA_Abort_IT+0x17a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a49      	ldr	r2, [pc, #292]	; (800254c <HAL_DMA_Abort_IT+0x29c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d108      	bne.n	800243c <HAL_DMA_Abort_IT+0x18c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e147      	b.n	80026cc <HAL_DMA_Abort_IT+0x41c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e13e      	b.n	80026cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 020e 	bic.w	r2, r2, #14
 800245c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2b      	ldr	r2, [pc, #172]	; (8002510 <HAL_DMA_Abort_IT+0x260>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04a      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a29      	ldr	r2, [pc, #164]	; (8002514 <HAL_DMA_Abort_IT+0x264>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d045      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a28      	ldr	r2, [pc, #160]	; (8002518 <HAL_DMA_Abort_IT+0x268>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d040      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a26      	ldr	r2, [pc, #152]	; (800251c <HAL_DMA_Abort_IT+0x26c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d03b      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a25      	ldr	r2, [pc, #148]	; (8002520 <HAL_DMA_Abort_IT+0x270>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d036      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a23      	ldr	r2, [pc, #140]	; (8002524 <HAL_DMA_Abort_IT+0x274>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d031      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a22      	ldr	r2, [pc, #136]	; (8002528 <HAL_DMA_Abort_IT+0x278>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d02c      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_DMA_Abort_IT+0x27c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d027      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_DMA_Abort_IT+0x280>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_DMA_Abort_IT+0x284>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01d      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_DMA_Abort_IT+0x288>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d018      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_DMA_Abort_IT+0x28c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_DMA_Abort_IT+0x290>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_DMA_Abort_IT+0x294>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_DMA_Abort_IT+0x298>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_Abort_IT+0x24e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <HAL_DMA_Abort_IT+0x29c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d128      	bne.n	8002550 <HAL_DMA_Abort_IT+0x2a0>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e027      	b.n	8002560 <HAL_DMA_Abort_IT+0x2b0>
 8002510:	40020010 	.word	0x40020010
 8002514:	40020028 	.word	0x40020028
 8002518:	40020040 	.word	0x40020040
 800251c:	40020058 	.word	0x40020058
 8002520:	40020070 	.word	0x40020070
 8002524:	40020088 	.word	0x40020088
 8002528:	400200a0 	.word	0x400200a0
 800252c:	400200b8 	.word	0x400200b8
 8002530:	40020410 	.word	0x40020410
 8002534:	40020428 	.word	0x40020428
 8002538:	40020440 	.word	0x40020440
 800253c:	40020458 	.word	0x40020458
 8002540:	40020470 	.word	0x40020470
 8002544:	40020488 	.word	0x40020488
 8002548:	400204a0 	.word	0x400204a0
 800254c:	400204b8 	.word	0x400204b8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5c      	ldr	r2, [pc, #368]	; (80026d8 <HAL_DMA_Abort_IT+0x428>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d072      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5b      	ldr	r2, [pc, #364]	; (80026dc <HAL_DMA_Abort_IT+0x42c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d06d      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a59      	ldr	r2, [pc, #356]	; (80026e0 <HAL_DMA_Abort_IT+0x430>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d068      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_DMA_Abort_IT+0x434>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d063      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_DMA_Abort_IT+0x438>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d05e      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a55      	ldr	r2, [pc, #340]	; (80026ec <HAL_DMA_Abort_IT+0x43c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d059      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a53      	ldr	r2, [pc, #332]	; (80026f0 <HAL_DMA_Abort_IT+0x440>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d054      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_DMA_Abort_IT+0x444>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d04f      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <HAL_DMA_Abort_IT+0x448>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d04a      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a4f      	ldr	r2, [pc, #316]	; (80026fc <HAL_DMA_Abort_IT+0x44c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d045      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4d      	ldr	r2, [pc, #308]	; (8002700 <HAL_DMA_Abort_IT+0x450>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d040      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <HAL_DMA_Abort_IT+0x454>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d03b      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a4a      	ldr	r2, [pc, #296]	; (8002708 <HAL_DMA_Abort_IT+0x458>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d036      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a49      	ldr	r2, [pc, #292]	; (800270c <HAL_DMA_Abort_IT+0x45c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d031      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a47      	ldr	r2, [pc, #284]	; (8002710 <HAL_DMA_Abort_IT+0x460>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02c      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a46      	ldr	r2, [pc, #280]	; (8002714 <HAL_DMA_Abort_IT+0x464>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d027      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a44      	ldr	r2, [pc, #272]	; (8002718 <HAL_DMA_Abort_IT+0x468>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d022      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a43      	ldr	r2, [pc, #268]	; (800271c <HAL_DMA_Abort_IT+0x46c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d01d      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a41      	ldr	r2, [pc, #260]	; (8002720 <HAL_DMA_Abort_IT+0x470>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d018      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a40      	ldr	r2, [pc, #256]	; (8002724 <HAL_DMA_Abort_IT+0x474>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d013      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a3e      	ldr	r2, [pc, #248]	; (8002728 <HAL_DMA_Abort_IT+0x478>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00e      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3d      	ldr	r2, [pc, #244]	; (800272c <HAL_DMA_Abort_IT+0x47c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a3b      	ldr	r2, [pc, #236]	; (8002730 <HAL_DMA_Abort_IT+0x480>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d004      	beq.n	8002650 <HAL_DMA_Abort_IT+0x3a0>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_DMA_Abort_IT+0x484>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_DMA_Abort_IT+0x3a4>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_DMA_Abort_IT+0x3a6>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d028      	beq.n	80026ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002668:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002688:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40020010 	.word	0x40020010
 80026dc:	40020028 	.word	0x40020028
 80026e0:	40020040 	.word	0x40020040
 80026e4:	40020058 	.word	0x40020058
 80026e8:	40020070 	.word	0x40020070
 80026ec:	40020088 	.word	0x40020088
 80026f0:	400200a0 	.word	0x400200a0
 80026f4:	400200b8 	.word	0x400200b8
 80026f8:	40020410 	.word	0x40020410
 80026fc:	40020428 	.word	0x40020428
 8002700:	40020440 	.word	0x40020440
 8002704:	40020458 	.word	0x40020458
 8002708:	40020470 	.word	0x40020470
 800270c:	40020488 	.word	0x40020488
 8002710:	400204a0 	.word	0x400204a0
 8002714:	400204b8 	.word	0x400204b8
 8002718:	58025408 	.word	0x58025408
 800271c:	5802541c 	.word	0x5802541c
 8002720:	58025430 	.word	0x58025430
 8002724:	58025444 	.word	0x58025444
 8002728:	58025458 	.word	0x58025458
 800272c:	5802546c 	.word	0x5802546c
 8002730:	58025480 	.word	0x58025480
 8002734:	58025494 	.word	0x58025494

08002738 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002744:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_DMA_IRQHandler+0x1ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a67      	ldr	r2, [pc, #412]	; (80028e8 <HAL_DMA_IRQHandler+0x1b0>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0a9b      	lsrs	r3, r3, #10
 8002750:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a5f      	ldr	r2, [pc, #380]	; (80028ec <HAL_DMA_IRQHandler+0x1b4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04a      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5d      	ldr	r2, [pc, #372]	; (80028f0 <HAL_DMA_IRQHandler+0x1b8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d045      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a5c      	ldr	r2, [pc, #368]	; (80028f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d040      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5a      	ldr	r2, [pc, #360]	; (80028f8 <HAL_DMA_IRQHandler+0x1c0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d03b      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a59      	ldr	r2, [pc, #356]	; (80028fc <HAL_DMA_IRQHandler+0x1c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d036      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_DMA_IRQHandler+0x1c8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d031      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_DMA_IRQHandler+0x1cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d02c      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a54      	ldr	r2, [pc, #336]	; (8002908 <HAL_DMA_IRQHandler+0x1d0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d027      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a53      	ldr	r2, [pc, #332]	; (800290c <HAL_DMA_IRQHandler+0x1d4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d022      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a51      	ldr	r2, [pc, #324]	; (8002910 <HAL_DMA_IRQHandler+0x1d8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01d      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a50      	ldr	r2, [pc, #320]	; (8002914 <HAL_DMA_IRQHandler+0x1dc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a4e      	ldr	r2, [pc, #312]	; (8002918 <HAL_DMA_IRQHandler+0x1e0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a4d      	ldr	r2, [pc, #308]	; (800291c <HAL_DMA_IRQHandler+0x1e4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a4b      	ldr	r2, [pc, #300]	; (8002920 <HAL_DMA_IRQHandler+0x1e8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a4a      	ldr	r2, [pc, #296]	; (8002924 <HAL_DMA_IRQHandler+0x1ec>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_IRQHandler+0xd2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a48      	ldr	r2, [pc, #288]	; (8002928 <HAL_DMA_IRQHandler+0x1f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_DMA_IRQHandler+0xd6>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_DMA_IRQHandler+0xd8>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 842b 	beq.w	800306c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2208      	movs	r2, #8
 8002820:	409a      	lsls	r2, r3
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80a2 	beq.w	8002970 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_DMA_IRQHandler+0x1b4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d04a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2d      	ldr	r2, [pc, #180]	; (80028f0 <HAL_DMA_IRQHandler+0x1b8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d045      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d040      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <HAL_DMA_IRQHandler+0x1c0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d03b      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_DMA_IRQHandler+0x1c4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d036      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_DMA_IRQHandler+0x1c8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d031      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_DMA_IRQHandler+0x1cc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d02c      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <HAL_DMA_IRQHandler+0x1d0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d027      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_DMA_IRQHandler+0x1d4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d022      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <HAL_DMA_IRQHandler+0x1d8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d01d      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_DMA_IRQHandler+0x1dc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d018      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_DMA_IRQHandler+0x1e0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_DMA_IRQHandler+0x1e4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00e      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <HAL_DMA_IRQHandler+0x1e8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_DMA_IRQHandler+0x1ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d004      	beq.n	80028cc <HAL_DMA_IRQHandler+0x194>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_DMA_IRQHandler+0x1f0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d12f      	bne.n	800292c <HAL_DMA_IRQHandler+0x1f4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	e02e      	b.n	8002940 <HAL_DMA_IRQHandler+0x208>
 80028e2:	bf00      	nop
 80028e4:	24000000 	.word	0x24000000
 80028e8:	1b4e81b5 	.word	0x1b4e81b5
 80028ec:	40020010 	.word	0x40020010
 80028f0:	40020028 	.word	0x40020028
 80028f4:	40020040 	.word	0x40020040
 80028f8:	40020058 	.word	0x40020058
 80028fc:	40020070 	.word	0x40020070
 8002900:	40020088 	.word	0x40020088
 8002904:	400200a0 	.word	0x400200a0
 8002908:	400200b8 	.word	0x400200b8
 800290c:	40020410 	.word	0x40020410
 8002910:	40020428 	.word	0x40020428
 8002914:	40020440 	.word	0x40020440
 8002918:	40020458 	.word	0x40020458
 800291c:	40020470 	.word	0x40020470
 8002920:	40020488 	.word	0x40020488
 8002924:	400204a0 	.word	0x400204a0
 8002928:	400204b8 	.word	0x400204b8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2208      	movs	r2, #8
 800295e:	409a      	lsls	r2, r3
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d06e      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a69      	ldr	r2, [pc, #420]	; (8002b30 <HAL_DMA_IRQHandler+0x3f8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d04a      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a67      	ldr	r2, [pc, #412]	; (8002b34 <HAL_DMA_IRQHandler+0x3fc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d045      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a66      	ldr	r2, [pc, #408]	; (8002b38 <HAL_DMA_IRQHandler+0x400>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d040      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a64      	ldr	r2, [pc, #400]	; (8002b3c <HAL_DMA_IRQHandler+0x404>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d03b      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <HAL_DMA_IRQHandler+0x408>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d036      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a61      	ldr	r2, [pc, #388]	; (8002b44 <HAL_DMA_IRQHandler+0x40c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d031      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <HAL_DMA_IRQHandler+0x410>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d02c      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <HAL_DMA_IRQHandler+0x414>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d027      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_DMA_IRQHandler+0x418>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d022      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a5b      	ldr	r2, [pc, #364]	; (8002b54 <HAL_DMA_IRQHandler+0x41c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01d      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a5a      	ldr	r2, [pc, #360]	; (8002b58 <HAL_DMA_IRQHandler+0x420>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d018      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_DMA_IRQHandler+0x424>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a57      	ldr	r2, [pc, #348]	; (8002b60 <HAL_DMA_IRQHandler+0x428>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00e      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a55      	ldr	r2, [pc, #340]	; (8002b64 <HAL_DMA_IRQHandler+0x42c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_DMA_IRQHandler+0x430>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x2ee>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_DMA_IRQHandler+0x434>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10a      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x304>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e003      	b.n	8002a44 <HAL_DMA_IRQHandler+0x30c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2201      	movs	r2, #1
 8002a52:	409a      	lsls	r2, r3
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f043 0202 	orr.w	r2, r3, #2
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 808f 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <HAL_DMA_IRQHandler+0x3f8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04a      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2a      	ldr	r2, [pc, #168]	; (8002b34 <HAL_DMA_IRQHandler+0x3fc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d045      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <HAL_DMA_IRQHandler+0x400>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <HAL_DMA_IRQHandler+0x404>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d03b      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_DMA_IRQHandler+0x408>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d036      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_DMA_IRQHandler+0x40c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d031      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_DMA_IRQHandler+0x410>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d02c      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_DMA_IRQHandler+0x414>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d027      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_DMA_IRQHandler+0x418>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d022      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_DMA_IRQHandler+0x41c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01d      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_DMA_IRQHandler+0x420>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d018      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_DMA_IRQHandler+0x424>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_DMA_IRQHandler+0x428>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_DMA_IRQHandler+0x42c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_DMA_IRQHandler+0x430>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3e2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <HAL_DMA_IRQHandler+0x434>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d12a      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x438>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e023      	b.n	8002b78 <HAL_DMA_IRQHandler+0x440>
 8002b30:	40020010 	.word	0x40020010
 8002b34:	40020028 	.word	0x40020028
 8002b38:	40020040 	.word	0x40020040
 8002b3c:	40020058 	.word	0x40020058
 8002b40:	40020070 	.word	0x40020070
 8002b44:	40020088 	.word	0x40020088
 8002b48:	400200a0 	.word	0x400200a0
 8002b4c:	400200b8 	.word	0x400200b8
 8002b50:	40020410 	.word	0x40020410
 8002b54:	40020428 	.word	0x40020428
 8002b58:	40020440 	.word	0x40020440
 8002b5c:	40020458 	.word	0x40020458
 8002b60:	40020470 	.word	0x40020470
 8002b64:	40020488 	.word	0x40020488
 8002b68:	400204a0 	.word	0x400204a0
 8002b6c:	400204b8 	.word	0x400204b8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2204      	movs	r2, #4
 8002b86:	409a      	lsls	r2, r3
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a6 	beq.w	8002cfa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a85      	ldr	r2, [pc, #532]	; (8002dc8 <HAL_DMA_IRQHandler+0x690>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d04a      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a83      	ldr	r2, [pc, #524]	; (8002dcc <HAL_DMA_IRQHandler+0x694>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d045      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a82      	ldr	r2, [pc, #520]	; (8002dd0 <HAL_DMA_IRQHandler+0x698>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d040      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a80      	ldr	r2, [pc, #512]	; (8002dd4 <HAL_DMA_IRQHandler+0x69c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d03b      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a7f      	ldr	r2, [pc, #508]	; (8002dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d036      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7d      	ldr	r2, [pc, #500]	; (8002ddc <HAL_DMA_IRQHandler+0x6a4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d031      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_DMA_IRQHandler+0x6a8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d02c      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a7a      	ldr	r2, [pc, #488]	; (8002de4 <HAL_DMA_IRQHandler+0x6ac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d027      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a79      	ldr	r2, [pc, #484]	; (8002de8 <HAL_DMA_IRQHandler+0x6b0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a77      	ldr	r2, [pc, #476]	; (8002dec <HAL_DMA_IRQHandler+0x6b4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01d      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a76      	ldr	r2, [pc, #472]	; (8002df0 <HAL_DMA_IRQHandler+0x6b8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d018      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a74      	ldr	r2, [pc, #464]	; (8002df4 <HAL_DMA_IRQHandler+0x6bc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a73      	ldr	r2, [pc, #460]	; (8002df8 <HAL_DMA_IRQHandler+0x6c0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00e      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a71      	ldr	r2, [pc, #452]	; (8002dfc <HAL_DMA_IRQHandler+0x6c4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a70      	ldr	r2, [pc, #448]	; (8002e00 <HAL_DMA_IRQHandler+0x6c8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x516>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_DMA_IRQHandler+0x6cc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10a      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x52c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	e009      	b.n	8002c78 <HAL_DMA_IRQHandler+0x540>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d03e      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2210      	movs	r2, #16
 8002c86:	409a      	lsls	r2, r3
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d018      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d024      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e01f      	b.n	8002cfa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01b      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
 8002cca:	e016      	b.n	8002cfa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0208 	bic.w	r2, r2, #8
 8002ce8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2220      	movs	r2, #32
 8002d04:	409a      	lsls	r2, r3
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8110 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2c      	ldr	r2, [pc, #176]	; (8002dc8 <HAL_DMA_IRQHandler+0x690>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d04a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <HAL_DMA_IRQHandler+0x694>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d045      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <HAL_DMA_IRQHandler+0x698>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d040      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <HAL_DMA_IRQHandler+0x69c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d03b      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d036      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <HAL_DMA_IRQHandler+0x6a4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d031      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <HAL_DMA_IRQHandler+0x6a8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02c      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_DMA_IRQHandler+0x6ac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d027      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a20      	ldr	r2, [pc, #128]	; (8002de8 <HAL_DMA_IRQHandler+0x6b0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_DMA_IRQHandler+0x6b4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01d      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <HAL_DMA_IRQHandler+0x6b8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_DMA_IRQHandler+0x6bc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_DMA_IRQHandler+0x6c0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_DMA_IRQHandler+0x6c4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_DMA_IRQHandler+0x6c8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x678>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <HAL_DMA_IRQHandler+0x6cc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d12b      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x6d0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	e02a      	b.n	8002e1c <HAL_DMA_IRQHandler+0x6e4>
 8002dc6:	bf00      	nop
 8002dc8:	40020010 	.word	0x40020010
 8002dcc:	40020028 	.word	0x40020028
 8002dd0:	40020040 	.word	0x40020040
 8002dd4:	40020058 	.word	0x40020058
 8002dd8:	40020070 	.word	0x40020070
 8002ddc:	40020088 	.word	0x40020088
 8002de0:	400200a0 	.word	0x400200a0
 8002de4:	400200b8 	.word	0x400200b8
 8002de8:	40020410 	.word	0x40020410
 8002dec:	40020428 	.word	0x40020428
 8002df0:	40020440 	.word	0x40020440
 8002df4:	40020458 	.word	0x40020458
 8002df8:	40020470 	.word	0x40020470
 8002dfc:	40020488 	.word	0x40020488
 8002e00:	400204a0 	.word	0x400204a0
 8002e04:	400204b8 	.word	0x400204b8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf14      	ite	ne
 8002e16:	2301      	movne	r3, #1
 8002e18:	2300      	moveq	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8087 	beq.w	8002f30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d139      	bne.n	8002eb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0216 	bic.w	r2, r2, #22
 8002e4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x736>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0208 	bic.w	r2, r2, #8
 8002e7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	223f      	movs	r2, #63	; 0x3f
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 834a 	beq.w	800353c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
          }
          return;
 8002eb0:	e344      	b.n	800353c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d018      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d108      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02c      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
 8002ede:	e027      	b.n	8002f30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d023      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	e01e      	b.n	8002f30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10f      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0210 	bic.w	r2, r2, #16
 8002f0e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8306 	beq.w	8003546 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8088 	beq.w	8003058 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a7a      	ldr	r2, [pc, #488]	; (8003140 <HAL_DMA_IRQHandler+0xa08>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d04a      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a79      	ldr	r2, [pc, #484]	; (8003144 <HAL_DMA_IRQHandler+0xa0c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d045      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a77      	ldr	r2, [pc, #476]	; (8003148 <HAL_DMA_IRQHandler+0xa10>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d040      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a76      	ldr	r2, [pc, #472]	; (800314c <HAL_DMA_IRQHandler+0xa14>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d03b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a74      	ldr	r2, [pc, #464]	; (8003150 <HAL_DMA_IRQHandler+0xa18>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d036      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a73      	ldr	r2, [pc, #460]	; (8003154 <HAL_DMA_IRQHandler+0xa1c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d031      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a71      	ldr	r2, [pc, #452]	; (8003158 <HAL_DMA_IRQHandler+0xa20>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d02c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a70      	ldr	r2, [pc, #448]	; (800315c <HAL_DMA_IRQHandler+0xa24>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d027      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6e      	ldr	r2, [pc, #440]	; (8003160 <HAL_DMA_IRQHandler+0xa28>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d022      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6d      	ldr	r2, [pc, #436]	; (8003164 <HAL_DMA_IRQHandler+0xa2c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d01d      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6b      	ldr	r2, [pc, #428]	; (8003168 <HAL_DMA_IRQHandler+0xa30>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d018      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6a      	ldr	r2, [pc, #424]	; (800316c <HAL_DMA_IRQHandler+0xa34>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a68      	ldr	r2, [pc, #416]	; (8003170 <HAL_DMA_IRQHandler+0xa38>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_DMA_IRQHandler+0xa3c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d009      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_DMA_IRQHandler+0xa40>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x8b8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a64      	ldr	r2, [pc, #400]	; (800317c <HAL_DMA_IRQHandler+0xa44>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <HAL_DMA_IRQHandler+0x8ca>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e007      	b.n	8003012 <HAL_DMA_IRQHandler+0x8da>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301a:	429a      	cmp	r2, r3
 800301c:	d307      	bcc.n	800302e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f2      	bne.n	8003012 <HAL_DMA_IRQHandler+0x8da>
 800302c:	e000      	b.n	8003030 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800302e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2203      	movs	r2, #3
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800304e:	e003      	b.n	8003058 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8272 	beq.w	8003546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
 800306a:	e26c      	b.n	8003546 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a43      	ldr	r2, [pc, #268]	; (8003180 <HAL_DMA_IRQHandler+0xa48>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d022      	beq.n	80030bc <HAL_DMA_IRQHandler+0x984>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a42      	ldr	r2, [pc, #264]	; (8003184 <HAL_DMA_IRQHandler+0xa4c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d01d      	beq.n	80030bc <HAL_DMA_IRQHandler+0x984>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a40      	ldr	r2, [pc, #256]	; (8003188 <HAL_DMA_IRQHandler+0xa50>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d018      	beq.n	80030bc <HAL_DMA_IRQHandler+0x984>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3f      	ldr	r2, [pc, #252]	; (800318c <HAL_DMA_IRQHandler+0xa54>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d013      	beq.n	80030bc <HAL_DMA_IRQHandler+0x984>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3d      	ldr	r2, [pc, #244]	; (8003190 <HAL_DMA_IRQHandler+0xa58>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00e      	beq.n	80030bc <HAL_DMA_IRQHandler+0x984>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3c      	ldr	r2, [pc, #240]	; (8003194 <HAL_DMA_IRQHandler+0xa5c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_DMA_IRQHandler+0x984>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <HAL_DMA_IRQHandler+0xa60>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_IRQHandler+0x984>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a39      	ldr	r2, [pc, #228]	; (800319c <HAL_DMA_IRQHandler+0xa64>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x988>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_DMA_IRQHandler+0x98a>
 80030c0:	2300      	movs	r3, #0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 823f 	beq.w	8003546 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2204      	movs	r2, #4
 80030da:	409a      	lsls	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80cd 	beq.w	8003280 <HAL_DMA_IRQHandler+0xb48>
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80c7 	beq.w	8003280 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2204      	movs	r2, #4
 80030fc:	409a      	lsls	r2, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d049      	beq.n	80031a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8210 	beq.w	8003540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003128:	e20a      	b.n	8003540 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8206 	beq.w	8003540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800313c:	e200      	b.n	8003540 <HAL_DMA_IRQHandler+0xe08>
 800313e:	bf00      	nop
 8003140:	40020010 	.word	0x40020010
 8003144:	40020028 	.word	0x40020028
 8003148:	40020040 	.word	0x40020040
 800314c:	40020058 	.word	0x40020058
 8003150:	40020070 	.word	0x40020070
 8003154:	40020088 	.word	0x40020088
 8003158:	400200a0 	.word	0x400200a0
 800315c:	400200b8 	.word	0x400200b8
 8003160:	40020410 	.word	0x40020410
 8003164:	40020428 	.word	0x40020428
 8003168:	40020440 	.word	0x40020440
 800316c:	40020458 	.word	0x40020458
 8003170:	40020470 	.word	0x40020470
 8003174:	40020488 	.word	0x40020488
 8003178:	400204a0 	.word	0x400204a0
 800317c:	400204b8 	.word	0x400204b8
 8003180:	58025408 	.word	0x58025408
 8003184:	5802541c 	.word	0x5802541c
 8003188:	58025430 	.word	0x58025430
 800318c:	58025444 	.word	0x58025444
 8003190:	58025458 	.word	0x58025458
 8003194:	5802546c 	.word	0x5802546c
 8003198:	58025480 	.word	0x58025480
 800319c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d160      	bne.n	800326c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a8c      	ldr	r2, [pc, #560]	; (80033e0 <HAL_DMA_IRQHandler+0xca8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d04a      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a8a      	ldr	r2, [pc, #552]	; (80033e4 <HAL_DMA_IRQHandler+0xcac>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d045      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a89      	ldr	r2, [pc, #548]	; (80033e8 <HAL_DMA_IRQHandler+0xcb0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d040      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a87      	ldr	r2, [pc, #540]	; (80033ec <HAL_DMA_IRQHandler+0xcb4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d03b      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a86      	ldr	r2, [pc, #536]	; (80033f0 <HAL_DMA_IRQHandler+0xcb8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d036      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a84      	ldr	r2, [pc, #528]	; (80033f4 <HAL_DMA_IRQHandler+0xcbc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d031      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a83      	ldr	r2, [pc, #524]	; (80033f8 <HAL_DMA_IRQHandler+0xcc0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d02c      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a81      	ldr	r2, [pc, #516]	; (80033fc <HAL_DMA_IRQHandler+0xcc4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d027      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a80      	ldr	r2, [pc, #512]	; (8003400 <HAL_DMA_IRQHandler+0xcc8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d022      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <HAL_DMA_IRQHandler+0xccc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01d      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7d      	ldr	r2, [pc, #500]	; (8003408 <HAL_DMA_IRQHandler+0xcd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d018      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7b      	ldr	r2, [pc, #492]	; (800340c <HAL_DMA_IRQHandler+0xcd4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7a      	ldr	r2, [pc, #488]	; (8003410 <HAL_DMA_IRQHandler+0xcd8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a78      	ldr	r2, [pc, #480]	; (8003414 <HAL_DMA_IRQHandler+0xcdc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_DMA_IRQHandler+0xce0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_DMA_IRQHandler+0xb12>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a75      	ldr	r2, [pc, #468]	; (800341c <HAL_DMA_IRQHandler+0xce4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d108      	bne.n	800325c <HAL_DMA_IRQHandler+0xb24>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0208 	bic.w	r2, r2, #8
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e007      	b.n	800326c <HAL_DMA_IRQHandler+0xb34>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8165 	beq.w	8003540 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800327e:	e15f      	b.n	8003540 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2202      	movs	r2, #2
 800328a:	409a      	lsls	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80c5 	beq.w	8003420 <HAL_DMA_IRQHandler+0xce8>
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80bf 	beq.w	8003420 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2202      	movs	r2, #2
 80032ac:	409a      	lsls	r2, r3
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 813a 	beq.w	8003544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032d8:	e134      	b.n	8003544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8130 	beq.w	8003544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ec:	e12a      	b.n	8003544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d168      	bne.n	80033ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_DMA_IRQHandler+0xca8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d04a      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_DMA_IRQHandler+0xcac>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d045      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <HAL_DMA_IRQHandler+0xcb0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d040      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_DMA_IRQHandler+0xcb4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d03b      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_DMA_IRQHandler+0xcb8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d036      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <HAL_DMA_IRQHandler+0xcbc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d031      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <HAL_DMA_IRQHandler+0xcc0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d02c      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <HAL_DMA_IRQHandler+0xcc4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d027      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <HAL_DMA_IRQHandler+0xcc8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d022      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_DMA_IRQHandler+0xccc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d01d      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a29      	ldr	r2, [pc, #164]	; (8003408 <HAL_DMA_IRQHandler+0xcd0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d018      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a28      	ldr	r2, [pc, #160]	; (800340c <HAL_DMA_IRQHandler+0xcd4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <HAL_DMA_IRQHandler+0xcd8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00e      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a25      	ldr	r2, [pc, #148]	; (8003414 <HAL_DMA_IRQHandler+0xcdc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a23      	ldr	r2, [pc, #140]	; (8003418 <HAL_DMA_IRQHandler+0xce0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <HAL_DMA_IRQHandler+0xc60>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_DMA_IRQHandler+0xce4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <HAL_DMA_IRQHandler+0xc72>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0214 	bic.w	r2, r2, #20
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e007      	b.n	80033ba <HAL_DMA_IRQHandler+0xc82>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 020a 	bic.w	r2, r2, #10
 80033b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80b8 	beq.w	8003544 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033dc:	e0b2      	b.n	8003544 <HAL_DMA_IRQHandler+0xe0c>
 80033de:	bf00      	nop
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	40020040 	.word	0x40020040
 80033ec:	40020058 	.word	0x40020058
 80033f0:	40020070 	.word	0x40020070
 80033f4:	40020088 	.word	0x40020088
 80033f8:	400200a0 	.word	0x400200a0
 80033fc:	400200b8 	.word	0x400200b8
 8003400:	40020410 	.word	0x40020410
 8003404:	40020428 	.word	0x40020428
 8003408:	40020440 	.word	0x40020440
 800340c:	40020458 	.word	0x40020458
 8003410:	40020470 	.word	0x40020470
 8003414:	40020488 	.word	0x40020488
 8003418:	400204a0 	.word	0x400204a0
 800341c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	2208      	movs	r2, #8
 800342a:	409a      	lsls	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8088 	beq.w	8003546 <HAL_DMA_IRQHandler+0xe0e>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8082 	beq.w	8003546 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a41      	ldr	r2, [pc, #260]	; (800354c <HAL_DMA_IRQHandler+0xe14>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d04a      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3f      	ldr	r2, [pc, #252]	; (8003550 <HAL_DMA_IRQHandler+0xe18>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d045      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a3e      	ldr	r2, [pc, #248]	; (8003554 <HAL_DMA_IRQHandler+0xe1c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d040      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <HAL_DMA_IRQHandler+0xe20>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d03b      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_DMA_IRQHandler+0xe24>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d036      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a39      	ldr	r2, [pc, #228]	; (8003560 <HAL_DMA_IRQHandler+0xe28>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d031      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a38      	ldr	r2, [pc, #224]	; (8003564 <HAL_DMA_IRQHandler+0xe2c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d02c      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a36      	ldr	r2, [pc, #216]	; (8003568 <HAL_DMA_IRQHandler+0xe30>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a35      	ldr	r2, [pc, #212]	; (800356c <HAL_DMA_IRQHandler+0xe34>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a33      	ldr	r2, [pc, #204]	; (8003570 <HAL_DMA_IRQHandler+0xe38>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a32      	ldr	r2, [pc, #200]	; (8003574 <HAL_DMA_IRQHandler+0xe3c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_DMA_IRQHandler+0xe40>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2f      	ldr	r2, [pc, #188]	; (800357c <HAL_DMA_IRQHandler+0xe44>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <HAL_DMA_IRQHandler+0xe48>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <HAL_DMA_IRQHandler+0xe4c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_DMA_IRQHandler+0xdaa>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <HAL_DMA_IRQHandler+0xe50>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d108      	bne.n	80034f4 <HAL_DMA_IRQHandler+0xdbc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 021c 	bic.w	r2, r2, #28
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e007      	b.n	8003504 <HAL_DMA_IRQHandler+0xdcc>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 020e 	bic.w	r2, r2, #14
 8003502:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	2201      	movs	r2, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
 800353a:	e004      	b.n	8003546 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800353c:	bf00      	nop
 800353e:	e002      	b.n	8003546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003540:	bf00      	nop
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003544:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003546:	3728      	adds	r7, #40	; 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8

0800358c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a84      	ldr	r2, [pc, #528]	; (80037bc <DMA_SetConfig+0x230>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d072      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a82      	ldr	r2, [pc, #520]	; (80037c0 <DMA_SetConfig+0x234>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d06d      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a81      	ldr	r2, [pc, #516]	; (80037c4 <DMA_SetConfig+0x238>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d068      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a7f      	ldr	r2, [pc, #508]	; (80037c8 <DMA_SetConfig+0x23c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d063      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7e      	ldr	r2, [pc, #504]	; (80037cc <DMA_SetConfig+0x240>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d05e      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a7c      	ldr	r2, [pc, #496]	; (80037d0 <DMA_SetConfig+0x244>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d059      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7b      	ldr	r2, [pc, #492]	; (80037d4 <DMA_SetConfig+0x248>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d054      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a79      	ldr	r2, [pc, #484]	; (80037d8 <DMA_SetConfig+0x24c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d04f      	beq.n	8003696 <DMA_SetConfig+0x10a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a78      	ldr	r2, [pc, #480]	; (80037dc <DMA_SetConfig+0x250>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d04a      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a76      	ldr	r2, [pc, #472]	; (80037e0 <DMA_SetConfig+0x254>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d045      	beq.n	8003696 <DMA_SetConfig+0x10a>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a75      	ldr	r2, [pc, #468]	; (80037e4 <DMA_SetConfig+0x258>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d040      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <DMA_SetConfig+0x25c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d03b      	beq.n	8003696 <DMA_SetConfig+0x10a>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a72      	ldr	r2, [pc, #456]	; (80037ec <DMA_SetConfig+0x260>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d036      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a70      	ldr	r2, [pc, #448]	; (80037f0 <DMA_SetConfig+0x264>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d031      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6f      	ldr	r2, [pc, #444]	; (80037f4 <DMA_SetConfig+0x268>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d02c      	beq.n	8003696 <DMA_SetConfig+0x10a>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6d      	ldr	r2, [pc, #436]	; (80037f8 <DMA_SetConfig+0x26c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d027      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6c      	ldr	r2, [pc, #432]	; (80037fc <DMA_SetConfig+0x270>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d022      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a6a      	ldr	r2, [pc, #424]	; (8003800 <DMA_SetConfig+0x274>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01d      	beq.n	8003696 <DMA_SetConfig+0x10a>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a69      	ldr	r2, [pc, #420]	; (8003804 <DMA_SetConfig+0x278>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a67      	ldr	r2, [pc, #412]	; (8003808 <DMA_SetConfig+0x27c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <DMA_SetConfig+0x10a>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a66      	ldr	r2, [pc, #408]	; (800380c <DMA_SetConfig+0x280>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a64      	ldr	r2, [pc, #400]	; (8003810 <DMA_SetConfig+0x284>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <DMA_SetConfig+0x10a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a63      	ldr	r2, [pc, #396]	; (8003814 <DMA_SetConfig+0x288>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <DMA_SetConfig+0x10a>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a61      	ldr	r2, [pc, #388]	; (8003818 <DMA_SetConfig+0x28c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <DMA_SetConfig+0x10e>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <DMA_SetConfig+0x110>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <DMA_SetConfig+0x230>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d04a      	beq.n	800375c <DMA_SetConfig+0x1d0>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <DMA_SetConfig+0x234>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d045      	beq.n	800375c <DMA_SetConfig+0x1d0>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <DMA_SetConfig+0x238>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d040      	beq.n	800375c <DMA_SetConfig+0x1d0>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <DMA_SetConfig+0x23c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d03b      	beq.n	800375c <DMA_SetConfig+0x1d0>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a38      	ldr	r2, [pc, #224]	; (80037cc <DMA_SetConfig+0x240>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d036      	beq.n	800375c <DMA_SetConfig+0x1d0>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a37      	ldr	r2, [pc, #220]	; (80037d0 <DMA_SetConfig+0x244>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d031      	beq.n	800375c <DMA_SetConfig+0x1d0>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a35      	ldr	r2, [pc, #212]	; (80037d4 <DMA_SetConfig+0x248>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02c      	beq.n	800375c <DMA_SetConfig+0x1d0>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <DMA_SetConfig+0x24c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d027      	beq.n	800375c <DMA_SetConfig+0x1d0>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a32      	ldr	r2, [pc, #200]	; (80037dc <DMA_SetConfig+0x250>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d022      	beq.n	800375c <DMA_SetConfig+0x1d0>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a31      	ldr	r2, [pc, #196]	; (80037e0 <DMA_SetConfig+0x254>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01d      	beq.n	800375c <DMA_SetConfig+0x1d0>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2f      	ldr	r2, [pc, #188]	; (80037e4 <DMA_SetConfig+0x258>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <DMA_SetConfig+0x1d0>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2e      	ldr	r2, [pc, #184]	; (80037e8 <DMA_SetConfig+0x25c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <DMA_SetConfig+0x1d0>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <DMA_SetConfig+0x260>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <DMA_SetConfig+0x1d0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <DMA_SetConfig+0x264>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <DMA_SetConfig+0x1d0>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <DMA_SetConfig+0x268>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <DMA_SetConfig+0x1d0>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <DMA_SetConfig+0x26c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <DMA_SetConfig+0x1d4>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <DMA_SetConfig+0x1d6>
 8003760:	2300      	movs	r3, #0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d05a      	beq.n	800381c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	223f      	movs	r2, #63	; 0x3f
 8003770:	409a      	lsls	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003784:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d108      	bne.n	80037a8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037a6:	e087      	b.n	80038b8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	60da      	str	r2, [r3, #12]
}
 80037b8:	e07e      	b.n	80038b8 <DMA_SetConfig+0x32c>
 80037ba:	bf00      	nop
 80037bc:	40020010 	.word	0x40020010
 80037c0:	40020028 	.word	0x40020028
 80037c4:	40020040 	.word	0x40020040
 80037c8:	40020058 	.word	0x40020058
 80037cc:	40020070 	.word	0x40020070
 80037d0:	40020088 	.word	0x40020088
 80037d4:	400200a0 	.word	0x400200a0
 80037d8:	400200b8 	.word	0x400200b8
 80037dc:	40020410 	.word	0x40020410
 80037e0:	40020428 	.word	0x40020428
 80037e4:	40020440 	.word	0x40020440
 80037e8:	40020458 	.word	0x40020458
 80037ec:	40020470 	.word	0x40020470
 80037f0:	40020488 	.word	0x40020488
 80037f4:	400204a0 	.word	0x400204a0
 80037f8:	400204b8 	.word	0x400204b8
 80037fc:	58025408 	.word	0x58025408
 8003800:	5802541c 	.word	0x5802541c
 8003804:	58025430 	.word	0x58025430
 8003808:	58025444 	.word	0x58025444
 800380c:	58025458 	.word	0x58025458
 8003810:	5802546c 	.word	0x5802546c
 8003814:	58025480 	.word	0x58025480
 8003818:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <DMA_SetConfig+0x338>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <DMA_SetConfig+0x2e0>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <DMA_SetConfig+0x33c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01d      	beq.n	800386c <DMA_SetConfig+0x2e0>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a25      	ldr	r2, [pc, #148]	; (80038cc <DMA_SetConfig+0x340>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <DMA_SetConfig+0x2e0>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a24      	ldr	r2, [pc, #144]	; (80038d0 <DMA_SetConfig+0x344>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <DMA_SetConfig+0x2e0>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <DMA_SetConfig+0x348>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <DMA_SetConfig+0x2e0>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <DMA_SetConfig+0x34c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <DMA_SetConfig+0x2e0>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <DMA_SetConfig+0x350>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <DMA_SetConfig+0x2e0>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <DMA_SetConfig+0x354>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d101      	bne.n	8003870 <DMA_SetConfig+0x2e4>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <DMA_SetConfig+0x2e6>
 8003870:	2300      	movs	r3, #0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d020      	beq.n	80038b8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d108      	bne.n	80038a8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	60da      	str	r2, [r3, #12]
}
 80038a6:	e007      	b.n	80038b8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	58025408 	.word	0x58025408
 80038c8:	5802541c 	.word	0x5802541c
 80038cc:	58025430 	.word	0x58025430
 80038d0:	58025444 	.word	0x58025444
 80038d4:	58025458 	.word	0x58025458
 80038d8:	5802546c 	.word	0x5802546c
 80038dc:	58025480 	.word	0x58025480
 80038e0:	58025494 	.word	0x58025494

080038e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a42      	ldr	r2, [pc, #264]	; (80039fc <DMA_CalcBaseAndBitshift+0x118>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04a      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a41      	ldr	r2, [pc, #260]	; (8003a00 <DMA_CalcBaseAndBitshift+0x11c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d045      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <DMA_CalcBaseAndBitshift+0x120>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d040      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <DMA_CalcBaseAndBitshift+0x124>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d03b      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3c      	ldr	r2, [pc, #240]	; (8003a0c <DMA_CalcBaseAndBitshift+0x128>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d036      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <DMA_CalcBaseAndBitshift+0x12c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d031      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a39      	ldr	r2, [pc, #228]	; (8003a14 <DMA_CalcBaseAndBitshift+0x130>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02c      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <DMA_CalcBaseAndBitshift+0x134>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d027      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a36      	ldr	r2, [pc, #216]	; (8003a1c <DMA_CalcBaseAndBitshift+0x138>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <DMA_CalcBaseAndBitshift+0x13c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01d      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a33      	ldr	r2, [pc, #204]	; (8003a24 <DMA_CalcBaseAndBitshift+0x140>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a32      	ldr	r2, [pc, #200]	; (8003a28 <DMA_CalcBaseAndBitshift+0x144>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <DMA_CalcBaseAndBitshift+0x148>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <DMA_CalcBaseAndBitshift+0x14c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <DMA_CalcBaseAndBitshift+0x150>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <DMA_CalcBaseAndBitshift+0xa8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <DMA_CalcBaseAndBitshift+0x154>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <DMA_CalcBaseAndBitshift+0xac>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <DMA_CalcBaseAndBitshift+0xae>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d024      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3b10      	subs	r3, #16
 800399e:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <DMA_CalcBaseAndBitshift+0x158>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	4a24      	ldr	r2, [pc, #144]	; (8003a40 <DMA_CalcBaseAndBitshift+0x15c>)
 80039b0:	5cd3      	ldrb	r3, [r2, r3]
 80039b2:	461a      	mov	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d908      	bls.n	80039d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <DMA_CalcBaseAndBitshift+0x160>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	659a      	str	r2, [r3, #88]	; 0x58
 80039ce:	e00d      	b.n	80039ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <DMA_CalcBaseAndBitshift+0x160>)
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6593      	str	r3, [r2, #88]	; 0x58
 80039de:	e005      	b.n	80039ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40020010 	.word	0x40020010
 8003a00:	40020028 	.word	0x40020028
 8003a04:	40020040 	.word	0x40020040
 8003a08:	40020058 	.word	0x40020058
 8003a0c:	40020070 	.word	0x40020070
 8003a10:	40020088 	.word	0x40020088
 8003a14:	400200a0 	.word	0x400200a0
 8003a18:	400200b8 	.word	0x400200b8
 8003a1c:	40020410 	.word	0x40020410
 8003a20:	40020428 	.word	0x40020428
 8003a24:	40020440 	.word	0x40020440
 8003a28:	40020458 	.word	0x40020458
 8003a2c:	40020470 	.word	0x40020470
 8003a30:	40020488 	.word	0x40020488
 8003a34:	400204a0 	.word	0x400204a0
 8003a38:	400204b8 	.word	0x400204b8
 8003a3c:	aaaaaaab 	.word	0xaaaaaaab
 8003a40:	0800a85c 	.word	0x0800a85c
 8003a44:	fffffc00 	.word	0xfffffc00

08003a48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d120      	bne.n	8003a9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d858      	bhi.n	8003b16 <DMA_CheckFifoParam+0xce>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <DMA_CheckFifoParam+0x24>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8f 	.word	0x08003a8f
 8003a74:	08003a7d 	.word	0x08003a7d
 8003a78:	08003b17 	.word	0x08003b17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d048      	beq.n	8003b1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a8c:	e045      	b.n	8003b1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a96:	d142      	bne.n	8003b1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a9c:	e03f      	b.n	8003b1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d123      	bne.n	8003af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d838      	bhi.n	8003b22 <DMA_CheckFifoParam+0xda>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <DMA_CheckFifoParam+0x70>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003ac9 	.word	0x08003ac9
 8003abc:	08003acf 	.word	0x08003acf
 8003ac0:	08003ac9 	.word	0x08003ac9
 8003ac4:	08003ae1 	.word	0x08003ae1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
        break;
 8003acc:	e030      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d025      	beq.n	8003b26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ade:	e022      	b.n	8003b26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae8:	d11f      	bne.n	8003b2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003aee:	e01c      	b.n	8003b2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d902      	bls.n	8003afe <DMA_CheckFifoParam+0xb6>
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d003      	beq.n	8003b04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003afc:	e018      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
        break;
 8003b02:	e015      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00e      	beq.n	8003b2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
    break;
 8003b14:	e00b      	b.n	8003b2e <DMA_CheckFifoParam+0xe6>
        break;
 8003b16:	bf00      	nop
 8003b18:	e00a      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
        break;
 8003b1a:	bf00      	nop
 8003b1c:	e008      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e006      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
        break;
 8003b22:	bf00      	nop
 8003b24:	e004      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
        break;
 8003b26:	bf00      	nop
 8003b28:	e002      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <DMA_CheckFifoParam+0xe8>
    break;
 8003b2e:	bf00      	nop
    }
  }

  return status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a38      	ldr	r2, [pc, #224]	; (8003c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d022      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a36      	ldr	r2, [pc, #216]	; (8003c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01d      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a35      	ldr	r2, [pc, #212]	; (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d018      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a33      	ldr	r2, [pc, #204]	; (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a32      	ldr	r2, [pc, #200]	; (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d101      	bne.n	8003ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01a      	beq.n	8003bde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3b08      	subs	r3, #8
 8003bb0:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003bcc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003bdc:	e024      	b.n	8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3b10      	subs	r3, #16
 8003be6:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d806      	bhi.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d902      	bls.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3308      	adds	r3, #8
 8003c04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003c18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	2201      	movs	r2, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	58025408 	.word	0x58025408
 8003c38:	5802541c 	.word	0x5802541c
 8003c3c:	58025430 	.word	0x58025430
 8003c40:	58025444 	.word	0x58025444
 8003c44:	58025458 	.word	0x58025458
 8003c48:	5802546c 	.word	0x5802546c
 8003c4c:	58025480 	.word	0x58025480
 8003c50:	58025494 	.word	0x58025494
 8003c54:	cccccccd 	.word	0xcccccccd
 8003c58:	16009600 	.word	0x16009600
 8003c5c:	58025880 	.word	0x58025880
 8003c60:	aaaaaaab 	.word	0xaaaaaaab
 8003c64:	400204b8 	.word	0x400204b8
 8003c68:	4002040f 	.word	0x4002040f
 8003c6c:	10008200 	.word	0x10008200
 8003c70:	40020880 	.word	0x40020880

08003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04a      	beq.n	8003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d847      	bhi.n	8003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d022      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d01d      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d018      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003cfc:	671a      	str	r2, [r3, #112]	; 0x70
 8003cfe:	e009      	b.n	8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003d12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	58025408 	.word	0x58025408
 8003d30:	5802541c 	.word	0x5802541c
 8003d34:	58025430 	.word	0x58025430
 8003d38:	58025444 	.word	0x58025444
 8003d3c:	58025458 	.word	0x58025458
 8003d40:	5802546c 	.word	0x5802546c
 8003d44:	58025480 	.word	0x58025480
 8003d48:	58025494 	.word	0x58025494
 8003d4c:	1600963f 	.word	0x1600963f
 8003d50:	58025940 	.word	0x58025940
 8003d54:	1000823f 	.word	0x1000823f
 8003d58:	40020940 	.word	0x40020940

08003d5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0c6      	b.n	8003efc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd f87e 	bl	8000e78 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2223      	movs	r2, #35	; 0x23
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d82:	4b60      	ldr	r3, [pc, #384]	; (8003f04 <HAL_ETH_Init+0x1a8>)
 8003d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d88:	4a5e      	ldr	r2, [pc, #376]	; (8003f04 <HAL_ETH_Init+0x1a8>)
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d92:	4b5c      	ldr	r3, [pc, #368]	; (8003f04 <HAL_ETH_Init+0x1a8>)
 8003d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7a1b      	ldrb	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7fd fbc7 	bl	800153c <HAL_SYSCFG_ETHInterfaceSelect>
 8003dae:	e003      	b.n	8003db8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003db0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003db4:	f7fd fbc2 	bl	800153c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd0:	f7fd fb7a 	bl	80014c8 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003dd6:	e00f      	b.n	8003df8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003dd8:	f7fd fb76 	bl	80014c8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003de6:	d907      	bls.n	8003df8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2204      	movs	r2, #4
 8003dec:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	22e0      	movs	r2, #224	; 0xe0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e081      	b.n	8003efc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e6      	bne.n	8003dd8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fac0 	bl	8004390 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e10:	f001 fcbe 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <HAL_ETH_Init+0x1ac>)
 8003e18:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1c:	0c9a      	lsrs	r2, r3, #18
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3a01      	subs	r2, #1
 8003e24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fa13 	bl	8004254 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e44:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	22e0      	movs	r2, #224	; 0xe0
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e04a      	b.n	8003efc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	f241 1308 	movw	r3, #4360	; 0x1108
 8003e6e:	4413      	add	r3, r2
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <HAL_ETH_Init+0x1b0>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6952      	ldr	r2, [r2, #20]
 8003e7a:	0052      	lsls	r2, r2, #1
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	6809      	ldr	r1, [r1, #0]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	f241 1308 	movw	r3, #4360	; 0x1108
 8003e86:	440b      	add	r3, r1
 8003e88:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fad8 	bl	8004440 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb1c 	bl	80044ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	3305      	adds	r3, #5
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	021a      	lsls	r2, r3, #8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	3303      	adds	r3, #3
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	061a      	lsls	r2, r3, #24
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ed4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ee2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ee4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	58024400 	.word	0x58024400
 8003f08:	431bde83 	.word	0x431bde83
 8003f0c:	ffff8001 	.word	0xffff8001

08003f10 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003f22:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	791b      	ldrb	r3, [r3, #4]
 8003f28:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003f2a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	7b1b      	ldrb	r3, [r3, #12]
 8003f30:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003f32:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7b5b      	ldrb	r3, [r3, #13]
 8003f38:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f3a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	7b9b      	ldrb	r3, [r3, #14]
 8003f40:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003f42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	7bdb      	ldrb	r3, [r3, #15]
 8003f48:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003f4a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	7c12      	ldrb	r2, [r2, #16]
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d102      	bne.n	8003f5a <ETH_SetMACConfig+0x4a>
 8003f54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f58:	e000      	b.n	8003f5c <ETH_SetMACConfig+0x4c>
 8003f5a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003f5c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	7c52      	ldrb	r2, [r2, #17]
 8003f62:	2a00      	cmp	r2, #0
 8003f64:	d102      	bne.n	8003f6c <ETH_SetMACConfig+0x5c>
 8003f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f6a:	e000      	b.n	8003f6e <ETH_SetMACConfig+0x5e>
 8003f6c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003f6e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	7c9b      	ldrb	r3, [r3, #18]
 8003f74:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003f76:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003f7c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003f82:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	7f1b      	ldrb	r3, [r3, #28]
 8003f88:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003f8a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	7f5b      	ldrb	r3, [r3, #29]
 8003f90:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003f92:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	7f92      	ldrb	r2, [r2, #30]
 8003f98:	2a00      	cmp	r2, #0
 8003f9a:	d102      	bne.n	8003fa2 <ETH_SetMACConfig+0x92>
 8003f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa0:	e000      	b.n	8003fa4 <ETH_SetMACConfig+0x94>
 8003fa2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003fa4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	7fdb      	ldrb	r3, [r3, #31]
 8003faa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003fac:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fb4:	2a00      	cmp	r2, #0
 8003fb6:	d102      	bne.n	8003fbe <ETH_SetMACConfig+0xae>
 8003fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fbc:	e000      	b.n	8003fc0 <ETH_SetMACConfig+0xb0>
 8003fbe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003fc0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003fc6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fce:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003fd0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b56      	ldr	r3, [pc, #344]	; (800413c <ETH_SetMACConfig+0x22c>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ffa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003ffc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004004:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004006:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800400e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004010:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004018:	2a00      	cmp	r2, #0
 800401a:	d102      	bne.n	8004022 <ETH_SetMACConfig+0x112>
 800401c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004020:	e000      	b.n	8004024 <ETH_SetMACConfig+0x114>
 8004022:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004024:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	4b42      	ldr	r3, [pc, #264]	; (8004140 <ETH_SetMACConfig+0x230>)
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	430b      	orrs	r3, r1
 8004040:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004048:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	4b3a      	ldr	r3, [pc, #232]	; (8004144 <ETH_SetMACConfig+0x234>)
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	68f9      	ldr	r1, [r7, #12]
 8004062:	430b      	orrs	r3, r1
 8004064:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800406c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004072:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800407a:	2a00      	cmp	r2, #0
 800407c:	d101      	bne.n	8004082 <ETH_SetMACConfig+0x172>
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	e000      	b.n	8004084 <ETH_SetMACConfig+0x174>
 8004082:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004084:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004096:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800409a:	4013      	ands	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	68f9      	ldr	r1, [r7, #12]
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80040ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80040b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f023 0103 	bic.w	r1, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80040da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	d101      	bne.n	80040fe <ETH_SetMACConfig+0x1ee>
 80040fa:	2240      	movs	r2, #64	; 0x40
 80040fc:	e000      	b.n	8004100 <ETH_SetMACConfig+0x1f0>
 80040fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004100:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004108:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800410a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004112:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004120:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	430a      	orrs	r2, r1
 800412c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	00048083 	.word	0x00048083
 8004140:	c0f88000 	.word	0xc0f88000
 8004144:	fffffef0 	.word	0xfffffef0

08004148 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b38      	ldr	r3, [pc, #224]	; (8004240 <ETH_SetDMAConfig+0xf8>)
 800415e:	4013      	ands	r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	6809      	ldr	r1, [r1, #0]
 8004168:	431a      	orrs	r2, r3
 800416a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800416e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	791b      	ldrb	r3, [r3, #4]
 8004174:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800417a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	7b1b      	ldrb	r3, [r3, #12]
 8004180:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f241 0304 	movw	r3, #4100	; 0x1004
 800418e:	4413      	add	r3, r2
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b2c      	ldr	r3, [pc, #176]	; (8004244 <ETH_SetDMAConfig+0xfc>)
 8004194:	4013      	ands	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6811      	ldr	r1, [r2, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	431a      	orrs	r2, r3
 800419e:	f241 0304 	movw	r3, #4100	; 0x1004
 80041a2:	440b      	add	r3, r1
 80041a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	7b5b      	ldrb	r3, [r3, #13]
 80041aa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <ETH_SetDMAConfig+0x100>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6811      	ldr	r1, [r2, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80041ce:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	7d1b      	ldrb	r3, [r3, #20]
 80041d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80041da:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	7f5b      	ldrb	r3, [r3, #29]
 80041e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80041ee:	4413      	add	r3, r2
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <ETH_SetDMAConfig+0x104>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6811      	ldr	r1, [r2, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8004202:	440b      	add	r3, r1
 8004204:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7f1b      	ldrb	r3, [r3, #28]
 800420a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	f241 1308 	movw	r3, #4360	; 0x1108
 800421c:	4413      	add	r3, r2
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <ETH_SetDMAConfig+0x108>)
 8004222:	4013      	ands	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6811      	ldr	r1, [r2, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	431a      	orrs	r2, r3
 800422c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004230:	440b      	add	r3, r1
 8004232:	601a      	str	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	ffff87fd 	.word	0xffff87fd
 8004244:	ffff2ffe 	.word	0xffff2ffe
 8004248:	fffec000 	.word	0xfffec000
 800424c:	ffc0efef 	.word	0xffc0efef
 8004250:	7fc0ffff 	.word	0x7fc0ffff

08004254 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b0a4      	sub	sp, #144	; 0x90
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004262:	2300      	movs	r3, #0
 8004264:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800426c:	2300      	movs	r3, #0
 800426e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004294:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800429c:	2300      	movs	r3, #0
 800429e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80042ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80042b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80042b8:	2300      	movs	r3, #0
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80042ce:	2300      	movs	r3, #0
 80042d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80042d6:	2300      	movs	r3, #0
 80042d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80042ec:	2320      	movs	r3, #32
 80042ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80042fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800430a:	2300      	movs	r3, #0
 800430c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004310:	2302      	movs	r3, #2
 8004312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800432e:	2300      	movs	r3, #0
 8004330:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fde6 	bl	8003f10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004344:	2301      	movs	r3, #1
 8004346:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004348:	2301      	movs	r3, #1
 800434a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004356:	2300      	movs	r3, #0
 8004358:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800435a:	2300      	movs	r3, #0
 800435c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800435e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004362:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800436c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800436e:	2300      	movs	r3, #0
 8004370:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004374:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fee1 	bl	8004148 <ETH_SetDMAConfig>
}
 8004386:	bf00      	nop
 8004388:	3790      	adds	r7, #144	; 0x90
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043aa:	f001 f9f1 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80043ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d908      	bls.n	80043ca <ETH_MAC_MDIO_ClkConfig+0x3a>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d804      	bhi.n	80043ca <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e027      	b.n	800441a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a18      	ldr	r2, [pc, #96]	; (8004430 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d908      	bls.n	80043e4 <ETH_MAC_MDIO_ClkConfig+0x54>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d804      	bhi.n	80043e4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e01a      	b.n	800441a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a13      	ldr	r2, [pc, #76]	; (8004434 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d903      	bls.n	80043f4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4a12      	ldr	r2, [pc, #72]	; (8004438 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d911      	bls.n	8004418 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d908      	bls.n	800440e <ETH_MAC_MDIO_ClkConfig+0x7e>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4a0f      	ldr	r2, [pc, #60]	; (800443c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d804      	bhi.n	800440e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e005      	b.n	800441a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e000      	b.n	800441a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004418:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	01312cff 	.word	0x01312cff
 8004430:	02160ebf 	.word	0x02160ebf
 8004434:	039386ff 	.word	0x039386ff
 8004438:	05f5e0ff 	.word	0x05f5e0ff
 800443c:	08f0d17f 	.word	0x08f0d17f

08004440 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e01d      	b.n	800448a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	3206      	adds	r2, #6
 8004480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d9de      	bls.n	800444e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f241 132c 	movw	r3, #4396	; 0x112c
 800449e:	4413      	add	r3, r2
 80044a0:	2203      	movs	r2, #3
 80044a2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68d9      	ldr	r1, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f241 1314 	movw	r3, #4372	; 0x1114
 80044b0:	4413      	add	r3, r2
 80044b2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e024      	b.n	8004526 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6919      	ldr	r1, [r3, #16]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	440b      	add	r3, r1
 80044ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2200      	movs	r2, #0
 8004504:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2200      	movs	r2, #0
 8004510:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	330a      	adds	r3, #10
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d9d7      	bls.n	80044dc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	f241 1330 	movw	r3, #4400	; 0x1130
 8004552:	4413      	add	r3, r2
 8004554:	2203      	movs	r2, #3
 8004556:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6919      	ldr	r1, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	f241 131c 	movw	r3, #4380	; 0x111c
 8004564:	4413      	add	r3, r2
 8004566:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	f241 1328 	movw	r3, #4392	; 0x1128
 8004578:	4413      	add	r3, r2
 800457a:	6019      	str	r1, [r3, #0]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004596:	4b89      	ldr	r3, [pc, #548]	; (80047bc <HAL_GPIO_Init+0x234>)
 8004598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800459a:	e194      	b.n	80048c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8186 	beq.w	80048c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d00b      	beq.n	80045d4 <HAL_GPIO_Init+0x4c>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d007      	beq.n	80045d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045c8:	2b11      	cmp	r3, #17
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b12      	cmp	r3, #18
 80045d2:	d130      	bne.n	8004636 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	2203      	movs	r2, #3
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800460a:	2201      	movs	r2, #1
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	f003 0201 	and.w	r2, r3, #1
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	2203      	movs	r2, #3
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0xee>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b12      	cmp	r3, #18
 8004674:	d123      	bne.n	80046be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	08da      	lsrs	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3208      	adds	r2, #8
 800467e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	220f      	movs	r2, #15
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	08da      	lsrs	r2, r3, #3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3208      	adds	r2, #8
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	2203      	movs	r2, #3
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 0203 	and.w	r2, r3, #3
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80e0 	beq.w	80048c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004700:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <HAL_GPIO_Init+0x238>)
 8004702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004706:	4a2e      	ldr	r2, [pc, #184]	; (80047c0 <HAL_GPIO_Init+0x238>)
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_GPIO_Init+0x238>)
 8004712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800471e:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <HAL_GPIO_Init+0x23c>)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	3302      	adds	r3, #2
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	220f      	movs	r2, #15
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <HAL_GPIO_Init+0x240>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d052      	beq.n	80047f0 <HAL_GPIO_Init+0x268>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_GPIO_Init+0x244>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d031      	beq.n	80047b6 <HAL_GPIO_Init+0x22e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_GPIO_Init+0x248>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d02b      	beq.n	80047b2 <HAL_GPIO_Init+0x22a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_GPIO_Init+0x24c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d025      	beq.n	80047ae <HAL_GPIO_Init+0x226>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <HAL_GPIO_Init+0x250>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01f      	beq.n	80047aa <HAL_GPIO_Init+0x222>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_GPIO_Init+0x254>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d019      	beq.n	80047a6 <HAL_GPIO_Init+0x21e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_GPIO_Init+0x258>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0x21a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_GPIO_Init+0x25c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00d      	beq.n	800479e <HAL_GPIO_Init+0x216>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_GPIO_Init+0x260>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <HAL_GPIO_Init+0x212>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a17      	ldr	r2, [pc, #92]	; (80047ec <HAL_GPIO_Init+0x264>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d101      	bne.n	8004796 <HAL_GPIO_Init+0x20e>
 8004792:	2309      	movs	r3, #9
 8004794:	e02d      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 8004796:	230a      	movs	r3, #10
 8004798:	e02b      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 800479a:	2308      	movs	r3, #8
 800479c:	e029      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 800479e:	2307      	movs	r3, #7
 80047a0:	e027      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 80047a2:	2306      	movs	r3, #6
 80047a4:	e025      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 80047a6:	2305      	movs	r3, #5
 80047a8:	e023      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 80047aa:	2304      	movs	r3, #4
 80047ac:	e021      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 80047ae:	2303      	movs	r3, #3
 80047b0:	e01f      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e01d      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e01b      	b.n	80047f2 <HAL_GPIO_Init+0x26a>
 80047ba:	bf00      	nop
 80047bc:	58000080 	.word	0x58000080
 80047c0:	58024400 	.word	0x58024400
 80047c4:	58000400 	.word	0x58000400
 80047c8:	58020000 	.word	0x58020000
 80047cc:	58020400 	.word	0x58020400
 80047d0:	58020800 	.word	0x58020800
 80047d4:	58020c00 	.word	0x58020c00
 80047d8:	58021000 	.word	0x58021000
 80047dc:	58021400 	.word	0x58021400
 80047e0:	58021800 	.word	0x58021800
 80047e4:	58021c00 	.word	0x58021c00
 80047e8:	58022000 	.word	0x58022000
 80047ec:	58022400 	.word	0x58022400
 80047f0:	2300      	movs	r3, #0
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	f002 0203 	and.w	r2, r2, #3
 80047f8:	0092      	lsls	r2, r2, #2
 80047fa:	4093      	lsls	r3, r2
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004802:	4938      	ldr	r1, [pc, #224]	; (80048e4 <HAL_GPIO_Init+0x35c>)
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	3302      	adds	r3, #2
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	43db      	mvns	r3, r3
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4013      	ands	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	43db      	mvns	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800488a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3301      	adds	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f47f ae63 	bne.w	800459c <HAL_GPIO_Init+0x14>
  }
}
 80048d6:	bf00      	nop
 80048d8:	3724      	adds	r7, #36	; 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	58000400 	.word	0x58000400

080048e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	807b      	strh	r3, [r7, #2]
 80048f4:	4613      	mov	r3, r2
 80048f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f8:	787b      	ldrb	r3, [r7, #1]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004904:	e003      	b.n	800490e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	041a      	lsls	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	619a      	str	r2, [r3, #24]
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b04      	cmp	r3, #4
 800492e:	d00a      	beq.n	8004946 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004930:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e01f      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e01d      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f023 0207 	bic.w	r2, r3, #7
 800494e:	490f      	ldr	r1, [pc, #60]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4313      	orrs	r3, r2
 8004954:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004956:	f7fc fdb7 	bl	80014c8 <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800495c:	e009      	b.n	8004972 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800495e:	f7fc fdb3 	bl	80014c8 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496c:	d901      	bls.n	8004972 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e007      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_PWREx_ConfigSupply+0x70>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800497a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497e:	d1ee      	bne.n	800495e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	58024800 	.word	0x58024800

08004990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	; 0x30
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e3c4      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8087 	beq.w	8004abe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b0:	4ba2      	ldr	r3, [pc, #648]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ba:	4ba0      	ldr	r3, [pc, #640]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d007      	beq.n	80049d6 <HAL_RCC_OscConfig+0x46>
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	2b18      	cmp	r3, #24
 80049ca:	d110      	bne.n	80049ee <HAL_RCC_OscConfig+0x5e>
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d10b      	bne.n	80049ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d6:	4b99      	ldr	r3, [pc, #612]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d06c      	beq.n	8004abc <HAL_RCC_OscConfig+0x12c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d168      	bne.n	8004abc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e39e      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x76>
 80049f8:	4b90      	ldr	r3, [pc, #576]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a8f      	ldr	r2, [pc, #572]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e02e      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x98>
 8004a0e:	4b8b      	ldr	r3, [pc, #556]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a8a      	ldr	r2, [pc, #552]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b88      	ldr	r3, [pc, #544]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a87      	ldr	r2, [pc, #540]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0xbc>
 8004a32:	4b82      	ldr	r3, [pc, #520]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a81      	ldr	r2, [pc, #516]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b7f      	ldr	r3, [pc, #508]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7e      	ldr	r2, [pc, #504]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a4c:	4b7b      	ldr	r3, [pc, #492]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a7a      	ldr	r2, [pc, #488]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b78      	ldr	r3, [pc, #480]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a77      	ldr	r2, [pc, #476]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fc fd2c 	bl	80014c8 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fc fd28 	bl	80014c8 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e352      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a86:	4b6d      	ldr	r3, [pc, #436]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0xe4>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fc fd18 	bl	80014c8 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fc fd14 	bl	80014c8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e33e      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aae:	4b63      	ldr	r3, [pc, #396]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x10c>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8092 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004acc:	4b5b      	ldr	r3, [pc, #364]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ad6:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCC_OscConfig+0x162>
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	2b18      	cmp	r3, #24
 8004ae6:	d12d      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1b4>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d128      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af2:	4b52      	ldr	r3, [pc, #328]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_RCC_OscConfig+0x17a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e310      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0a:	f7fc fd0b 	bl	8001524 <HAL_GetREVID>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d80a      	bhi.n	8004b2e <HAL_RCC_OscConfig+0x19e>
 8004b18:	4b48      	ldr	r3, [pc, #288]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	031b      	lsls	r3, r3, #12
 8004b26:	4945      	ldr	r1, [pc, #276]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2c:	e060      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2e:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	061b      	lsls	r3, r3, #24
 8004b3c:	493f      	ldr	r1, [pc, #252]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b42:	e055      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d038      	beq.n	8004bbe <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 0219 	bic.w	r2, r3, #25
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4938      	ldr	r1, [pc, #224]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fcb3 	bl	80014c8 <HAL_GetTick>
 8004b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fc fcaf 	bl	80014c8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e2d9      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b78:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	f7fc fcce 	bl	8001524 <HAL_GetREVID>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d80a      	bhi.n	8004ba8 <HAL_RCC_OscConfig+0x218>
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	4926      	ldr	r1, [pc, #152]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
 8004ba6:	e023      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	4921      	ldr	r1, [pc, #132]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
 8004bbc:	e018      	b.n	8004bf0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fc fc7d 	bl	80014c8 <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fc fc79 	bl	80014c8 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e2a3      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004be4:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8091 	beq.w	8004d20 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d007      	beq.n	8004c24 <HAL_RCC_OscConfig+0x294>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b18      	cmp	r3, #24
 8004c18:	d12f      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d12a      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_OscConfig+0x2ac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2b0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	2b80      	cmp	r3, #128	; 0x80
 8004c36:	d003      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e277      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
 8004c3c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c40:	f7fc fc70 	bl	8001524 <HAL_GetREVID>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d80a      	bhi.n	8004c64 <HAL_RCC_OscConfig+0x2d4>
 8004c4e:	4ba2      	ldr	r3, [pc, #648]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	499e      	ldr	r1, [pc, #632]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c62:	e05d      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c64:	4b9c      	ldr	r3, [pc, #624]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	4999      	ldr	r1, [pc, #612]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c78:	e052      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d035      	beq.n	8004cee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c82:	4b95      	ldr	r3, [pc, #596]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a94      	ldr	r2, [pc, #592]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fc fc1b 	bl	80014c8 <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c96:	f7fc fc17 	bl	80014c8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e241      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca8:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb4:	f7fc fc36 	bl	8001524 <HAL_GetREVID>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	f241 0303 	movw	r3, #4099	; 0x1003
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d80a      	bhi.n	8004cd8 <HAL_RCC_OscConfig+0x348>
 8004cc2:	4b85      	ldr	r3, [pc, #532]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	069b      	lsls	r3, r3, #26
 8004cd0:	4981      	ldr	r1, [pc, #516]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
 8004cd6:	e023      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
 8004cd8:	4b7f      	ldr	r3, [pc, #508]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	497c      	ldr	r1, [pc, #496]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60cb      	str	r3, [r1, #12]
 8004cec:	e018      	b.n	8004d20 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004cee:	4b7a      	ldr	r3, [pc, #488]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a79      	ldr	r2, [pc, #484]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fc fbe5 	bl	80014c8 <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d02:	f7fc fbe1 	bl	80014c8 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e20b      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d14:	4b70      	ldr	r3, [pc, #448]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d036      	beq.n	8004d9a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d34:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d38:	4a67      	ldr	r2, [pc, #412]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fc fbc2 	bl	80014c8 <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fc fbbe 	bl	80014c8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e1e8      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x3b8>
 8004d66:	e018      	b.n	8004d9a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d68:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6c:	4a5a      	ldr	r2, [pc, #360]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d74:	f7fc fba8 	bl	80014c8 <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7c:	f7fc fba4 	bl	80014c8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e1ce      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d8e:	4b52      	ldr	r3, [pc, #328]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d019      	beq.n	8004de2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dae:	4b4a      	ldr	r3, [pc, #296]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a49      	ldr	r2, [pc, #292]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dba:	f7fc fb85 	bl	80014c8 <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004dc2:	f7fc fb81 	bl	80014c8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e1ab      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x432>
 8004de0:	e018      	b.n	8004e14 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004de2:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dee:	f7fc fb6b 	bl	80014c8 <HAL_GetTick>
 8004df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004df6:	f7fc fb67 	bl	80014c8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e191      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e08:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8086 	beq.w	8004f2e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <HAL_RCC_OscConfig+0x54c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <HAL_RCC_OscConfig+0x54c>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2e:	f7fc fb4b 	bl	80014c8 <HAL_GetTick>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e36:	f7fc fb47 	bl	80014c8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e171      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCC_OscConfig+0x54c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCC_OscConfig+0x4da>
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	; 0x70
 8004e68:	e02d      	b.n	8004ec6 <HAL_RCC_OscConfig+0x536>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4fc>
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8a:	e01c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x536>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d10c      	bne.n	8004eae <HAL_RCC_OscConfig+0x51e>
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	e00b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x536>
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <HAL_RCC_OscConfig+0x548>)
 8004ec0:	f023 0304 	bic.w	r3, r3, #4
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01a      	beq.n	8004f04 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fc fafb 	bl	80014c8 <HAL_GetTick>
 8004ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed4:	e00f      	b.n	8004ef6 <HAL_RCC_OscConfig+0x566>
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fc faf2 	bl	80014c8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e11a      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef6:	4b8f      	ldr	r3, [pc, #572]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ee      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x550>
 8004f02:	e014      	b.n	8004f2e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f04:	f7fc fae0 	bl	80014c8 <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fc fadc 	bl	80014c8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e104      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f22:	4b84      	ldr	r3, [pc, #528]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ee      	bne.n	8004f0c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80f9 	beq.w	800512a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f38:	4b7e      	ldr	r3, [pc, #504]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f40:	2b18      	cmp	r3, #24
 8004f42:	f000 80b4 	beq.w	80050ae <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	f040 8095 	bne.w	800507a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f50:	4b78      	ldr	r3, [pc, #480]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a77      	ldr	r2, [pc, #476]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fc fab4 	bl	80014c8 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f64:	f7fc fab0 	bl	80014c8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0da      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f76:	4b6f      	ldr	r3, [pc, #444]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f82:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f86:	4b6c      	ldr	r3, [pc, #432]	; (8005138 <HAL_RCC_OscConfig+0x7a8>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f92:	0112      	lsls	r2, r2, #4
 8004f94:	430a      	orrs	r2, r1
 8004f96:	4967      	ldr	r1, [pc, #412]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	3b01      	subs	r3, #1
 8004fac:	025b      	lsls	r3, r3, #9
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fcc:	4959      	ldr	r1, [pc, #356]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004fd2:	4b58      	ldr	r3, [pc, #352]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	4a57      	ldr	r2, [pc, #348]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fde:	4b55      	ldr	r3, [pc, #340]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe2:	4b56      	ldr	r3, [pc, #344]	; (800513c <HAL_RCC_OscConfig+0x7ac>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fea:	00d2      	lsls	r2, r2, #3
 8004fec:	4951      	ldr	r1, [pc, #324]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ff2:	4b50      	ldr	r3, [pc, #320]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	f023 020c 	bic.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	494d      	ldr	r1, [pc, #308]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005004:	4b4b      	ldr	r3, [pc, #300]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f023 0202 	bic.w	r2, r3, #2
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	4948      	ldr	r1, [pc, #288]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005016:	4b47      	ldr	r3, [pc, #284]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	4a46      	ldr	r2, [pc, #280]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005022:	4b44      	ldr	r3, [pc, #272]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	4a43      	ldr	r2, [pc, #268]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800502e:	4b41      	ldr	r3, [pc, #260]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	4a40      	ldr	r2, [pc, #256]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800503a:	4b3e      	ldr	r3, [pc, #248]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	4a3d      	ldr	r2, [pc, #244]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005046:	4b3b      	ldr	r3, [pc, #236]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a3a      	ldr	r2, [pc, #232]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800504c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005052:	f7fc fa39 	bl	80014c8 <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800505a:	f7fc fa35 	bl	80014c8 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e05f      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800506c:	4b31      	ldr	r3, [pc, #196]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x6ca>
 8005078:	e057      	b.n	800512a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507a:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 8005080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fc fa1f 	bl	80014c8 <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508e:	f7fc fa1b 	bl	80014c8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e045      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <HAL_RCC_OscConfig+0x6fe>
 80050ac:	e03d      	b.n	800512a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050ae:	4b21      	ldr	r3, [pc, #132]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050b4:	4b1f      	ldr	r3, [pc, #124]	; (8005134 <HAL_RCC_OscConfig+0x7a4>)
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d031      	beq.n	8005126 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0203 	and.w	r2, r3, #3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d12a      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d122      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d11a      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	0a5b      	lsrs	r3, r3, #9
 80050f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d111      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d108      	bne.n	8005126 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	0e1b      	lsrs	r3, r3, #24
 8005118:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d001      	beq.n	800512a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3730      	adds	r7, #48	; 0x30
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	58024400 	.word	0x58024400
 8005138:	fffffc0c 	.word	0xfffffc0c
 800513c:	ffff0007 	.word	0xffff0007

08005140 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e19c      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005154:	4b8a      	ldr	r3, [pc, #552]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d910      	bls.n	8005184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b87      	ldr	r3, [pc, #540]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 020f 	bic.w	r2, r3, #15
 800516a:	4985      	ldr	r1, [pc, #532]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b83      	ldr	r3, [pc, #524]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e184      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d010      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	4b7b      	ldr	r3, [pc, #492]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800519c:	429a      	cmp	r2, r3
 800519e:	d908      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051a0:	4b78      	ldr	r3, [pc, #480]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	4975      	ldr	r1, [pc, #468]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d010      	beq.n	80051e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	4b70      	ldr	r3, [pc, #448]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d908      	bls.n	80051e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051ce:	4b6d      	ldr	r3, [pc, #436]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	496a      	ldr	r1, [pc, #424]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d010      	beq.n	800520e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d908      	bls.n	800520e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051fc:	4b61      	ldr	r3, [pc, #388]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	495e      	ldr	r1, [pc, #376]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800520a:	4313      	orrs	r3, r2
 800520c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d010      	beq.n	800523c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	4b59      	ldr	r3, [pc, #356]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005226:	429a      	cmp	r2, r3
 8005228:	d908      	bls.n	800523c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800522a:	4b56      	ldr	r3, [pc, #344]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	4953      	ldr	r1, [pc, #332]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005238:	4313      	orrs	r3, r2
 800523a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	429a      	cmp	r2, r3
 8005256:	d908      	bls.n	800526a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005258:	4b4a      	ldr	r3, [pc, #296]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f023 020f 	bic.w	r2, r3, #15
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4947      	ldr	r1, [pc, #284]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005266:	4313      	orrs	r3, r2
 8005268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d055      	beq.n	8005322 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005276:	4b43      	ldr	r3, [pc, #268]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	4940      	ldr	r1, [pc, #256]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005284:	4313      	orrs	r3, r2
 8005286:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005290:	4b3c      	ldr	r3, [pc, #240]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d121      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0f6      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d115      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0ea      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052c0:	4b30      	ldr	r3, [pc, #192]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0de      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052d0:	4b2c      	ldr	r3, [pc, #176]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0d6      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f023 0207 	bic.w	r2, r3, #7
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4925      	ldr	r1, [pc, #148]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fc f8e9 	bl	80014c8 <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f8:	e00a      	b.n	8005310 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fa:	f7fc f8e5 	bl	80014c8 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e0be      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005310:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	429a      	cmp	r2, r3
 8005320:	d1eb      	bne.n	80052fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d010      	beq.n	8005350 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	429a      	cmp	r2, r3
 800533c:	d208      	bcs.n	8005350 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f023 020f 	bic.w	r2, r3, #15
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	490e      	ldr	r1, [pc, #56]	; (8005384 <HAL_RCC_ClockConfig+0x244>)
 800534c:	4313      	orrs	r3, r2
 800534e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d214      	bcs.n	8005388 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 020f 	bic.w	r2, r3, #15
 8005366:	4906      	ldr	r1, [pc, #24]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HAL_RCC_ClockConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e086      	b.n	800548e <HAL_RCC_ClockConfig+0x34e>
 8005380:	52002000 	.word	0x52002000
 8005384:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d208      	bcs.n	80053b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053a4:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	4939      	ldr	r1, [pc, #228]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d010      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	4b34      	ldr	r3, [pc, #208]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d208      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053d2:	4b31      	ldr	r3, [pc, #196]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	492e      	ldr	r1, [pc, #184]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	4b28      	ldr	r3, [pc, #160]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d208      	bcs.n	8005412 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	4922      	ldr	r1, [pc, #136]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 800540e:	4313      	orrs	r3, r2
 8005410:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d010      	beq.n	8005440 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800542a:	429a      	cmp	r2, r3
 800542c:	d208      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800542e:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	4917      	ldr	r1, [pc, #92]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 800543c:	4313      	orrs	r3, r2
 800543e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005440:	f000 f834 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8005444:	4601      	mov	r1, r0
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <HAL_RCC_ClockConfig+0x35c>)
 8005452:	5cd3      	ldrb	r3, [r2, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa21 f303 	lsr.w	r3, r1, r3
 800545c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_RCC_ClockConfig+0x358>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	4a0d      	ldr	r2, [pc, #52]	; (800549c <HAL_RCC_ClockConfig+0x35c>)
 8005468:	5cd3      	ldrb	r3, [r2, r3]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
 8005474:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <HAL_RCC_ClockConfig+0x360>)
 8005476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005478:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <HAL_RCC_ClockConfig+0x364>)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <HAL_RCC_ClockConfig+0x368>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fb fe9c 	bl	80011c0 <HAL_InitTick>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	58024400 	.word	0x58024400
 800549c:	0800a84c 	.word	0x0800a84c
 80054a0:	24000004 	.word	0x24000004
 80054a4:	24000000 	.word	0x24000000
 80054a8:	24000008 	.word	0x24000008

080054ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b2:	4baf      	ldr	r3, [pc, #700]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ba:	2b18      	cmp	r3, #24
 80054bc:	f200 814e 	bhi.w	800575c <HAL_RCC_GetSysClockFreq+0x2b0>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	0800575d 	.word	0x0800575d
 80054d0:	0800575d 	.word	0x0800575d
 80054d4:	0800575d 	.word	0x0800575d
 80054d8:	0800575d 	.word	0x0800575d
 80054dc:	0800575d 	.word	0x0800575d
 80054e0:	0800575d 	.word	0x0800575d
 80054e4:	0800575d 	.word	0x0800575d
 80054e8:	08005553 	.word	0x08005553
 80054ec:	0800575d 	.word	0x0800575d
 80054f0:	0800575d 	.word	0x0800575d
 80054f4:	0800575d 	.word	0x0800575d
 80054f8:	0800575d 	.word	0x0800575d
 80054fc:	0800575d 	.word	0x0800575d
 8005500:	0800575d 	.word	0x0800575d
 8005504:	0800575d 	.word	0x0800575d
 8005508:	08005559 	.word	0x08005559
 800550c:	0800575d 	.word	0x0800575d
 8005510:	0800575d 	.word	0x0800575d
 8005514:	0800575d 	.word	0x0800575d
 8005518:	0800575d 	.word	0x0800575d
 800551c:	0800575d 	.word	0x0800575d
 8005520:	0800575d 	.word	0x0800575d
 8005524:	0800575d 	.word	0x0800575d
 8005528:	0800555f 	.word	0x0800555f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800552c:	4b90      	ldr	r3, [pc, #576]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005538:	4b8d      	ldr	r3, [pc, #564]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	08db      	lsrs	r3, r3, #3
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	4a8c      	ldr	r2, [pc, #560]	; (8005774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800554a:	e10a      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800554c:	4b89      	ldr	r3, [pc, #548]	; (8005774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800554e:	61bb      	str	r3, [r7, #24]
    break;
 8005550:	e107      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005552:	4b89      	ldr	r3, [pc, #548]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005554:	61bb      	str	r3, [r7, #24]
    break;
 8005556:	e104      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005558:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800555a:	61bb      	str	r3, [r7, #24]
    break;
 800555c:	e101      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800555e:	4b84      	ldr	r3, [pc, #528]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005568:	4b81      	ldr	r3, [pc, #516]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005572:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005574:	4b7e      	ldr	r3, [pc, #504]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800557e:	4b7c      	ldr	r3, [pc, #496]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	08db      	lsrs	r3, r3, #3
 8005584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80da 	beq.w	8005756 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d05a      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x1b2>
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d302      	bcc.n	80055b2 <HAL_RCC_GetSysClockFreq+0x106>
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d078      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80055b0:	e099      	b.n	80056e6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055b2:	4b6f      	ldr	r3, [pc, #444]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d02d      	beq.n	800561a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055be:	4b6c      	ldr	r3, [pc, #432]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	08db      	lsrs	r3, r3, #3
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	4a6a      	ldr	r2, [pc, #424]	; (8005774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	ee07 3a90 	vmov	s15, r3
 80055e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e8:	4b61      	ldr	r3, [pc, #388]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80055fc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005614:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005618:	e087      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005624:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005784 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562c:	4b50      	ldr	r3, [pc, #320]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005640:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800565c:	e065      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005668:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2dc>
 800566c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005670:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005680:	ed97 6a02 	vldr	s12, [r7, #8]
 8005684:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056a0:	e043      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ac:	eddf 6a37 	vldr	s13, [pc, #220]	; 800578c <HAL_RCC_GetSysClockFreq+0x2e0>
 80056b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b4:	4b2e      	ldr	r3, [pc, #184]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056e4:	e021      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005788 <HAL_RCC_GetSysClockFreq+0x2dc>
 80056f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	ee07 3a90 	vmov	s15, r3
 8005704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005708:	ed97 6a02 	vldr	s12, [r7, #8]
 800570c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005728:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	0a5b      	lsrs	r3, r3, #9
 8005730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005734:	3301      	adds	r3, #1
 8005736:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005742:	edd7 6a07 	vldr	s13, [r7, #28]
 8005746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574e:	ee17 3a90 	vmov	r3, s15
 8005752:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005754:	e005      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]
    break;
 800575a:	e002      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800575e:	61bb      	str	r3, [r7, #24]
    break;
 8005760:	bf00      	nop
  }

  return sysclockfreq;
 8005762:	69bb      	ldr	r3, [r7, #24]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3724      	adds	r7, #36	; 0x24
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	58024400 	.word	0x58024400
 8005774:	03d09000 	.word	0x03d09000
 8005778:	003d0900 	.word	0x003d0900
 800577c:	007a1200 	.word	0x007a1200
 8005780:	46000000 	.word	0x46000000
 8005784:	4c742400 	.word	0x4c742400
 8005788:	4a742400 	.word	0x4a742400
 800578c:	4af42400 	.word	0x4af42400

08005790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005796:	f7ff fe89 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800579a:	4601      	mov	r1, r0
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	4a0f      	ldr	r2, [pc, #60]	; (80057e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80057a8:	5cd3      	ldrb	r3, [r2, r3]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	fa21 f303 	lsr.w	r3, r1, r3
 80057b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057b4:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ca:	4a07      	ldr	r2, [pc, #28]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80057cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057ce:	4a07      	ldr	r2, [pc, #28]	; (80057ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80057d6:	681b      	ldr	r3, [r3, #0]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	58024400 	.word	0x58024400
 80057e4:	0800a84c 	.word	0x0800a84c
 80057e8:	24000004 	.word	0x24000004
 80057ec:	24000000 	.word	0x24000000

080057f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057f4:	f7ff ffcc 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057f8:	4601      	mov	r1, r0
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	4a04      	ldr	r2, [pc, #16]	; (8005818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005806:	5cd3      	ldrb	r3, [r2, r3]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	58024400 	.word	0x58024400
 8005818:	0800a84c 	.word	0x0800a84c

0800581c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005820:	f7ff ffb6 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 8005824:	4601      	mov	r1, r0
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	4a04      	ldr	r2, [pc, #16]	; (8005844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005832:	5cd3      	ldrb	r3, [r2, r3]
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	58024400 	.word	0x58024400
 8005844:	0800a84c 	.word	0x0800a84c

08005848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	223f      	movs	r2, #63	; 0x3f
 8005856:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <HAL_RCC_GetClockConfig+0x7c>)
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0207 	and.w	r2, r3, #7
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005864:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005870:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f003 020f 	and.w	r2, r3, #15
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_RCC_GetClockConfig+0x7c>)
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005888:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <HAL_RCC_GetClockConfig+0x7c>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <HAL_RCC_GetClockConfig+0x7c>)
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCC_GetClockConfig+0x80>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	601a      	str	r2, [r3, #0]
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	58024400 	.word	0x58024400
 80058c8:	52002000 	.word	0x52002000

080058cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058d4:	2300      	movs	r3, #0
 80058d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058d8:	2300      	movs	r3, #0
 80058da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d03d      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f0:	d013      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f6:	d802      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80058fc:	e01f      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80058fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005902:	d013      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005908:	d01c      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800590a:	e018      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800590c:	4baf      	ldr	r3, [pc, #700]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	4aae      	ldr	r2, [pc, #696]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005918:	e015      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	2102      	movs	r1, #2
 8005920:	4618      	mov	r0, r3
 8005922:	f001 f95f 	bl	8006be4 <RCCEx_PLL2_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800592a:	e00c      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3324      	adds	r3, #36	; 0x24
 8005930:	2102      	movs	r1, #2
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fa08 	bl	8006d48 <RCCEx_PLL3_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800593c:	e003      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
      break;
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800594c:	4b9f      	ldr	r3, [pc, #636]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005958:	499c      	ldr	r1, [pc, #624]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800595a:	4313      	orrs	r3, r2
 800595c:	650b      	str	r3, [r1, #80]	; 0x50
 800595e:	e001      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d03d      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005974:	2b04      	cmp	r3, #4
 8005976:	d826      	bhi.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	08005995 	.word	0x08005995
 8005984:	080059a3 	.word	0x080059a3
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059cd 	.word	0x080059cd
 8005990:	080059cd 	.word	0x080059cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005994:	4b8d      	ldr	r3, [pc, #564]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	4a8c      	ldr	r2, [pc, #560]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800599a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059a0:	e015      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 f91b 	bl	8006be4 <RCCEx_PLL2_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059b2:	e00c      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3324      	adds	r3, #36	; 0x24
 80059b8:	2100      	movs	r1, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 f9c4 	bl	8006d48 <RCCEx_PLL3_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059c4:	e003      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ca:	e000      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80059cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059d4:	4b7d      	ldr	r3, [pc, #500]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	f023 0207 	bic.w	r2, r3, #7
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	497a      	ldr	r1, [pc, #488]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	650b      	str	r3, [r1, #80]	; 0x50
 80059e6:	e001      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d03e      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d01c      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d804      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d00d      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005a0c:	e01e      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005a10:	d01f      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a16:	d01e      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a18:	e018      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1a:	4b6c      	ldr	r3, [pc, #432]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a6b      	ldr	r2, [pc, #428]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a26:	e017      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f8d8 	bl	8006be4 <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a38:	e00e      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3324      	adds	r3, #36	; 0x24
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f981 	bl	8006d48 <RCCEx_PLL3_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a4a:	e005      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a50:	e002      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005a52:	bf00      	nop
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	4958      	ldr	r1, [pc, #352]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	650b      	str	r3, [r1, #80]	; 0x50
 8005a70:	e001      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d044      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a8c:	d01f      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a92:	d805      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a9c:	d00e      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005a9e:	e01f      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005aa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005aa4:	d01f      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005aaa:	d01e      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005aac:	e018      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	4a46      	ldr	r2, [pc, #280]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005aba:	e017      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 f88e 	bl	8006be4 <RCCEx_PLL2_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005acc:	e00e      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3324      	adds	r3, #36	; 0x24
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f937 	bl	8006d48 <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ade:	e005      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae4:	e002      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005af2:	4b36      	ldr	r3, [pc, #216]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b00:	4932      	ldr	r1, [pc, #200]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	658b      	str	r3, [r1, #88]	; 0x58
 8005b06:	e001      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d044      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b22:	d01f      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b28:	d805      	bhi.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005b2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b32:	d00e      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b34:	e01f      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005b36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b3a:	d01f      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b40:	d01e      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b42:	e018      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b44:	4b21      	ldr	r3, [pc, #132]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b50:	e017      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 f843 	bl	8006be4 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b62:	e00e      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3324      	adds	r3, #36	; 0x24
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 f8ec 	bl	8006d48 <RCCEx_PLL3_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b74:	e005      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7a:	e002      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b88:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b96:	490d      	ldr	r1, [pc, #52]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b9c:	e001      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d035      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d00c      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d802      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01b      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005bbe:	e017      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d00c      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d018      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005bc8:	e012      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005bca:	bf00      	nop
 8005bcc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd0:	4baf      	ldr	r3, [pc, #700]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	4aae      	ldr	r2, [pc, #696]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bdc:	e00e      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2102      	movs	r1, #2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fffd 	bl	8006be4 <RCCEx_PLL2_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005bee:	e005      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf4:	e002      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c02:	4ba3      	ldr	r3, [pc, #652]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0e:	49a0      	ldr	r1, [pc, #640]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c14:	e001      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d042      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	d01f      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c34:	d805      	bhi.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d00e      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005c40:	e01f      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005c42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c46:	d01f      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c4c:	d01e      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005c4e:	e018      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c50:	4b8f      	ldr	r3, [pc, #572]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	4a8e      	ldr	r2, [pc, #568]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c5c:	e017      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 ffbd 	bl	8006be4 <RCCEx_PLL2_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c6e:	e00e      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 f866 	bl	8006d48 <RCCEx_PLL3_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005c80:	e005      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
      break;
 8005c86:	e002      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c94:	4b7e      	ldr	r3, [pc, #504]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca0:	497b      	ldr	r1, [pc, #492]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	650b      	str	r3, [r1, #80]	; 0x50
 8005ca6:	e001      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d042      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc0:	d01b      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc6:	d805      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d022      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd0:	d00a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005cd2:	e01b      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cd8:	d01d      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cde:	d01c      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ce4:	d01b      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005ce6:	e011      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	2101      	movs	r1, #1
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 ff78 	bl	8006be4 <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005cf8:	e012      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3324      	adds	r3, #36	; 0x24
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 f821 	bl	8006d48 <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d0a:	e009      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	e006      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005d12:	bf00      	nop
 8005d14:	e004      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d26:	4b5a      	ldr	r3, [pc, #360]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d32:	4957      	ldr	r1, [pc, #348]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	650b      	str	r3, [r1, #80]	; 0x50
 8005d38:	e001      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d044      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d54:	d01b      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5a:	d805      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d022      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005d66:	e01b      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6c:	d01d      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d72:	d01c      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005d74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d78:	d01b      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005d7a:	e011      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	2101      	movs	r1, #1
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 ff2e 	bl	8006be4 <RCCEx_PLL2_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d8c:	e012      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3324      	adds	r3, #36	; 0x24
 8005d92:	2101      	movs	r1, #1
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 ffd7 	bl	8006d48 <RCCEx_PLL3_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d9e:	e009      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	e006      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005da6:	bf00      	nop
 8005da8:	e004      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dba:	4b35      	ldr	r3, [pc, #212]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005dc8:	4931      	ldr	r1, [pc, #196]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	658b      	str	r3, [r1, #88]	; 0x58
 8005dce:	e001      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d02d      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de8:	d005      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dee:	d009      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d013      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005df4:	e00f      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df6:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e02:	e00c      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 feea 	bl	8006be4 <RCCEx_PLL2_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e14:	e003      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1a:	e000      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e24:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e30:	4917      	ldr	r1, [pc, #92]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	650b      	str	r3, [r1, #80]	; 0x50
 8005e36:	e001      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d035      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d81b      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e95 	.word	0x08005e95
 8005e5c:	08005e69 	.word	0x08005e69
 8005e60:	08005e77 	.word	0x08005e77
 8005e64:	08005e95 	.word	0x08005e95
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e74:	e00f      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 feb1 	bl	8006be4 <RCCEx_PLL2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005e86:	e006      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
      break;
 8005e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e9c:	4bba      	ldr	r3, [pc, #744]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea0:	f023 0203 	bic.w	r2, r3, #3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	49b7      	ldr	r1, [pc, #732]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005eae:	e001      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8086 	beq.w	8005fce <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec2:	4bb2      	ldr	r3, [pc, #712]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4ab1      	ldr	r2, [pc, #708]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ece:	f7fb fafb 	bl	80014c8 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed4:	e009      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed6:	f7fb faf7 	bl	80014c8 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b64      	cmp	r3, #100	; 0x64
 8005ee2:	d902      	bls.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	75fb      	strb	r3, [r7, #23]
        break;
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eea:	4ba8      	ldr	r3, [pc, #672]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0ef      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d166      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005efc:	4ba2      	ldr	r3, [pc, #648]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f06:	4053      	eors	r3, r2
 8005f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f10:	4b9d      	ldr	r3, [pc, #628]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f1a:	4b9b      	ldr	r3, [pc, #620]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	4a9a      	ldr	r2, [pc, #616]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f26:	4b98      	ldr	r3, [pc, #608]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	4a97      	ldr	r2, [pc, #604]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f32:	4a95      	ldr	r2, [pc, #596]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	d115      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fb fac0 	bl	80014c8 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f4a:	e00b      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4c:	f7fb fabc 	bl	80014c8 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d902      	bls.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	75fb      	strb	r3, [r7, #23]
            break;
 8005f62:	e005      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f64:	4b88      	ldr	r3, [pc, #544]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0ed      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d126      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f84:	d10d      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005f86:	4b80      	ldr	r3, [pc, #512]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f94:	0919      	lsrs	r1, r3, #4
 8005f96:	4b7e      	ldr	r3, [pc, #504]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005f98:	400b      	ands	r3, r1
 8005f9a:	497b      	ldr	r1, [pc, #492]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	610b      	str	r3, [r1, #16]
 8005fa0:	e005      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005fa2:	4b79      	ldr	r3, [pc, #484]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	4a78      	ldr	r2, [pc, #480]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fac:	6113      	str	r3, [r2, #16]
 8005fae:	4b76      	ldr	r3, [pc, #472]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fbc:	4972      	ldr	r1, [pc, #456]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	670b      	str	r3, [r1, #112]	; 0x70
 8005fc2:	e004      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	75bb      	strb	r3, [r7, #22]
 8005fc8:	e001      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d07d      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fde:	2b28      	cmp	r3, #40	; 0x28
 8005fe0:	d866      	bhi.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	080060b7 	.word	0x080060b7
 8005fec:	080060b1 	.word	0x080060b1
 8005ff0:	080060b1 	.word	0x080060b1
 8005ff4:	080060b1 	.word	0x080060b1
 8005ff8:	080060b1 	.word	0x080060b1
 8005ffc:	080060b1 	.word	0x080060b1
 8006000:	080060b1 	.word	0x080060b1
 8006004:	080060b1 	.word	0x080060b1
 8006008:	0800608d 	.word	0x0800608d
 800600c:	080060b1 	.word	0x080060b1
 8006010:	080060b1 	.word	0x080060b1
 8006014:	080060b1 	.word	0x080060b1
 8006018:	080060b1 	.word	0x080060b1
 800601c:	080060b1 	.word	0x080060b1
 8006020:	080060b1 	.word	0x080060b1
 8006024:	080060b1 	.word	0x080060b1
 8006028:	0800609f 	.word	0x0800609f
 800602c:	080060b1 	.word	0x080060b1
 8006030:	080060b1 	.word	0x080060b1
 8006034:	080060b1 	.word	0x080060b1
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060b1 	.word	0x080060b1
 8006040:	080060b1 	.word	0x080060b1
 8006044:	080060b1 	.word	0x080060b1
 8006048:	080060b7 	.word	0x080060b7
 800604c:	080060b1 	.word	0x080060b1
 8006050:	080060b1 	.word	0x080060b1
 8006054:	080060b1 	.word	0x080060b1
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060b1 	.word	0x080060b1
 8006060:	080060b1 	.word	0x080060b1
 8006064:	080060b1 	.word	0x080060b1
 8006068:	080060b7 	.word	0x080060b7
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060b1 	.word	0x080060b1
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060b1 	.word	0x080060b1
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060b7 	.word	0x080060b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3304      	adds	r3, #4
 8006090:	2101      	movs	r1, #1
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fda6 	bl	8006be4 <RCCEx_PLL2_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800609c:	e00c      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3324      	adds	r3, #36	; 0x24
 80060a2:	2101      	movs	r1, #1
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fe4f 	bl	8006d48 <RCCEx_PLL3_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80060ae:	e003      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
      break;
 80060b4:	e000      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80060b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060be:	4b32      	ldr	r3, [pc, #200]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ca:	492f      	ldr	r1, [pc, #188]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	654b      	str	r3, [r1, #84]	; 0x54
 80060d0:	e001      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d037      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d820      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006133 	.word	0x08006133
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800611b 	.word	0x0800611b
 80060fc:	08006133 	.word	0x08006133
 8006100:	08006133 	.word	0x08006133
 8006104:	08006133 	.word	0x08006133
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	2101      	movs	r1, #1
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fd68 	bl	8006be4 <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006118:	e00c      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3324      	adds	r3, #36	; 0x24
 800611e:	2101      	movs	r1, #1
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fe11 	bl	8006d48 <RCCEx_PLL3_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	75fb      	strb	r3, [r7, #23]
      break;
 8006130:	e000      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800613a:	4b13      	ldr	r3, [pc, #76]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	f023 0207 	bic.w	r2, r3, #7
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006146:	4910      	ldr	r1, [pc, #64]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	654b      	str	r3, [r1, #84]	; 0x54
 800614c:	e001      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d040      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006164:	2b05      	cmp	r3, #5
 8006166:	d827      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006168:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	080061bf 	.word	0x080061bf
 8006174:	08006195 	.word	0x08006195
 8006178:	080061a7 	.word	0x080061a7
 800617c:	080061bf 	.word	0x080061bf
 8006180:	080061bf 	.word	0x080061bf
 8006184:	080061bf 	.word	0x080061bf
 8006188:	58024400 	.word	0x58024400
 800618c:	58024800 	.word	0x58024800
 8006190:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	2101      	movs	r1, #1
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fd22 	bl	8006be4 <RCCEx_PLL2_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061a4:	e00c      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3324      	adds	r3, #36	; 0x24
 80061aa:	2101      	movs	r1, #1
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fdcb 	bl	8006d48 <RCCEx_PLL3_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80061b6:	e003      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
      break;
 80061bc:	e000      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80061be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061c6:	4bb2      	ldr	r3, [pc, #712]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80061c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ca:	f023 0207 	bic.w	r2, r3, #7
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d4:	49ae      	ldr	r1, [pc, #696]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	658b      	str	r3, [r1, #88]	; 0x58
 80061da:	e001      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d044      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f6:	d01b      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80061f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061fc:	d805      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d022      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006206:	d00a      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006208:	e01b      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620e:	d01d      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006214:	d01c      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006216:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800621a:	d01b      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800621c:	e011      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3304      	adds	r3, #4
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fcdd 	bl	8006be4 <RCCEx_PLL2_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800622e:	e012      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3324      	adds	r3, #36	; 0x24
 8006234:	2102      	movs	r1, #2
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fd86 	bl	8006d48 <RCCEx_PLL3_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006240:	e009      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	75fb      	strb	r3, [r7, #23]
      break;
 8006246:	e006      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006248:	bf00      	nop
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006256:	7dfb      	ldrb	r3, [r7, #23]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800625c:	4b8c      	ldr	r3, [pc, #560]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800625e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006260:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626a:	4989      	ldr	r1, [pc, #548]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800626c:	4313      	orrs	r3, r2
 800626e:	654b      	str	r3, [r1, #84]	; 0x54
 8006270:	e001      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d044      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800628c:	d01b      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006292:	d805      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d022      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800629e:	e01b      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a4:	d01d      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80062a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062aa:	d01c      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80062ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b0:	d01b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80062b2:	e011      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3304      	adds	r3, #4
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fc92 	bl	8006be4 <RCCEx_PLL2_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062c4:	e012      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3324      	adds	r3, #36	; 0x24
 80062ca:	2102      	movs	r1, #2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fd3b 	bl	8006d48 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80062d6:	e009      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
      break;
 80062dc:	e006      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80062de:	bf00      	nop
 80062e0:	e004      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80062e2:	bf00      	nop
 80062e4:	e002      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80062ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062f2:	4b67      	ldr	r3, [pc, #412]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006300:	4963      	ldr	r1, [pc, #396]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006302:	4313      	orrs	r3, r2
 8006304:	658b      	str	r3, [r1, #88]	; 0x58
 8006306:	e001      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d044      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800631e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006322:	d01b      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006328:	d805      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d022      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800632e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006334:	e01b      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633a:	d01d      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800633c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006340:	d01c      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006342:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006346:	d01b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006348:	e011      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fc47 	bl	8006be4 <RCCEx_PLL2_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800635a:	e012      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3324      	adds	r3, #36	; 0x24
 8006360:	2102      	movs	r1, #2
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fcf0 	bl	8006d48 <RCCEx_PLL3_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800636c:	e009      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
      break;
 8006372:	e006      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006374:	bf00      	nop
 8006376:	e004      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006378:	bf00      	nop
 800637a:	e002      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800637c:	bf00      	nop
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006388:	4b41      	ldr	r3, [pc, #260]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006396:	493e      	ldr	r1, [pc, #248]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006398:	4313      	orrs	r3, r2
 800639a:	658b      	str	r3, [r1, #88]	; 0x58
 800639c:	e001      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01a      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b8:	d10a      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3324      	adds	r3, #36	; 0x24
 80063be:	2102      	movs	r1, #2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fcc1 	bl	8006d48 <RCCEx_PLL3_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063d0:	4b2f      	ldr	r3, [pc, #188]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	492c      	ldr	r1, [pc, #176]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fa:	d10a      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3324      	adds	r3, #36	; 0x24
 8006400:	2102      	movs	r1, #2
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fca0 	bl	8006d48 <RCCEx_PLL3_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006412:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006420:	491b      	ldr	r1, [pc, #108]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006422:	4313      	orrs	r3, r2
 8006424:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d032      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d00d      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800643e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006442:	d016      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d111      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fbc8 	bl	8006be4 <RCCEx_PLL2_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006458:	e00c      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3324      	adds	r3, #36	; 0x24
 800645e:	2102      	movs	r1, #2
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fc71 	bl	8006d48 <RCCEx_PLL3_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800646a:	e003      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
      break;
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10c      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006488:	4901      	ldr	r1, [pc, #4]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	658b      	str	r3, [r1, #88]	; 0x58
 800648e:	e003      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d02f      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ae:	d00c      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80064b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064b4:	d015      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80064b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ba:	d10f      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064bc:	4b71      	ldr	r3, [pc, #452]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	4a70      	ldr	r2, [pc, #448]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80064c8:	e00c      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3324      	adds	r3, #36	; 0x24
 80064ce:	2101      	movs	r1, #1
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fc39 	bl	8006d48 <RCCEx_PLL3_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80064e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ea:	4b66      	ldr	r3, [pc, #408]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f8:	4962      	ldr	r1, [pc, #392]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	654b      	str	r3, [r1, #84]	; 0x54
 80064fe:	e001      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d029      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d007      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800651e:	e00f      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006520:	4b58      	ldr	r3, [pc, #352]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a57      	ldr	r2, [pc, #348]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800652c:	e00b      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	2102      	movs	r1, #2
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fb55 	bl	8006be4 <RCCEx_PLL2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800653e:	e002      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800654c:	4b4d      	ldr	r3, [pc, #308]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800654e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006550:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006558:	494a      	ldr	r1, [pc, #296]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800655a:	4313      	orrs	r3, r2
 800655c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800655e:	e001      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3324      	adds	r3, #36	; 0x24
 8006574:	2102      	movs	r1, #2
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fbe6 	bl	8006d48 <RCCEx_PLL3_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d02f      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659a:	d00c      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800659c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a0:	d802      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80065a6:	e00d      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ac:	d00f      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80065ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065b2:	d00e      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80065b4:	e006      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b6:	4b33      	ldr	r3, [pc, #204]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	4a32      	ldr	r2, [pc, #200]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80065bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80065c2:	e007      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80065ca:	bf00      	nop
 80065cc:	e002      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80065d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065da:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e6:	4927      	ldr	r1, [pc, #156]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	654b      	str	r3, [r1, #84]	; 0x54
 80065ec:	e001      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065fe:	4b21      	ldr	r3, [pc, #132]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006602:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	491e      	ldr	r1, [pc, #120]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800660c:	4313      	orrs	r3, r2
 800660e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800661c:	4b19      	ldr	r3, [pc, #100]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006628:	4916      	ldr	r1, [pc, #88]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800662a:	4313      	orrs	r3, r2
 800662c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	4a11      	ldr	r2, [pc, #68]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006640:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006644:	6113      	str	r3, [r2, #16]
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006650:	490c      	ldr	r1, [pc, #48]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006652:	4313      	orrs	r3, r2
 8006654:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	da08      	bge.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	4906      	ldr	r1, [pc, #24]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800666c:	4313      	orrs	r3, r2
 800666e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006670:	7dbb      	ldrb	r3, [r7, #22]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	e000      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	58024400 	.word	0x58024400

08006688 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800668c:	f7ff f880 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 8006690:	4601      	mov	r1, r0
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	091b      	lsrs	r3, r3, #4
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800669e:	5cd3      	ldrb	r3, [r2, r3]
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	58024400 	.word	0x58024400
 80066b0:	0800a84c 	.word	0x0800a84c

080066b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	; 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066bc:	4b9d      	ldr	r3, [pc, #628]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80066c6:	4b9b      	ldr	r3, [pc, #620]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	0b1b      	lsrs	r3, r3, #12
 80066cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80066d2:	4b98      	ldr	r3, [pc, #608]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80066de:	4b95      	ldr	r3, [pc, #596]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	08db      	lsrs	r3, r3, #3
 80066e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 810a 	beq.w	8006916 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d05a      	beq.n	80067be <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006708:	2b01      	cmp	r3, #1
 800670a:	d302      	bcc.n	8006712 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800670c:	2b02      	cmp	r3, #2
 800670e:	d078      	beq.n	8006802 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006710:	e099      	b.n	8006846 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006712:	4b88      	ldr	r3, [pc, #544]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d02d      	beq.n	800677a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800671e:	4b85      	ldr	r3, [pc, #532]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	08db      	lsrs	r3, r3, #3
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	4a83      	ldr	r2, [pc, #524]	; (8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800672a:	fa22 f303 	lsr.w	r3, r2, r3
 800672e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006748:	4b7a      	ldr	r3, [pc, #488]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006758:	ed97 6a03 	vldr	s12, [r7, #12]
 800675c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800693c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006774:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006778:	e087      	b.n	800688a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006784:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678c:	4b69      	ldr	r3, [pc, #420]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679c:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800693c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80067a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067bc:	e065      	b.n	800688a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80067cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d0:	4b58      	ldr	r3, [pc, #352]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800693c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80067e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006800:	e043      	b.n	800688a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006814:	4b47      	ldr	r3, [pc, #284]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006824:	ed97 6a03 	vldr	s12, [r7, #12]
 8006828:	eddf 5a44 	vldr	s11, [pc, #272]	; 800693c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800682c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006840:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006844:	e021      	b.n	800688a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006850:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006944 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006858:	4b36      	ldr	r3, [pc, #216]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006868:	ed97 6a03 	vldr	s12, [r7, #12]
 800686c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800693c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006884:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006888:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800688a:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	0a5b      	lsrs	r3, r3, #9
 8006890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b0:	ee17 2a90 	vmov	r2, s15
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80068b8:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068de:	ee17 2a90 	vmov	r2, s15
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	0e1b      	lsrs	r3, r3, #24
 80068ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f0:	ee07 3a90 	vmov	s15, r3
 80068f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006900:	edd7 6a07 	vldr	s13, [r7, #28]
 8006904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800690c:	ee17 2a90 	vmov	r2, s15
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006914:	e008      	b.n	8006928 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	bf00      	nop
 800692a:	3724      	adds	r7, #36	; 0x24
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	58024400 	.word	0x58024400
 8006938:	03d09000 	.word	0x03d09000
 800693c:	46000000 	.word	0x46000000
 8006940:	4c742400 	.word	0x4c742400
 8006944:	4a742400 	.word	0x4a742400
 8006948:	4af42400 	.word	0x4af42400

0800694c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800694c:	b480      	push	{r7}
 800694e:	b089      	sub	sp, #36	; 0x24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006954:	4b9d      	ldr	r3, [pc, #628]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800695e:	4b9b      	ldr	r3, [pc, #620]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	0d1b      	lsrs	r3, r3, #20
 8006964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006968:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800696a:	4b98      	ldr	r3, [pc, #608]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006976:	4b95      	ldr	r3, [pc, #596]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	08db      	lsrs	r3, r3, #3
 800697c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	fb02 f303 	mul.w	r3, r2, r3
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 810a 	beq.w	8006bae <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d05a      	beq.n	8006a56 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d302      	bcc.n	80069aa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d078      	beq.n	8006a9a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80069a8:	e099      	b.n	8006ade <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069aa:	4b88      	ldr	r3, [pc, #544]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d02d      	beq.n	8006a12 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069b6:	4b85      	ldr	r3, [pc, #532]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	08db      	lsrs	r3, r3, #3
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	4a83      	ldr	r2, [pc, #524]	; (8006bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80069c2:	fa22 f303 	lsr.w	r3, r2, r3
 80069c6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	ee07 3a90 	vmov	s15, r3
 80069d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e0:	4b7a      	ldr	r3, [pc, #488]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e8:	ee07 3a90 	vmov	s15, r3
 80069ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80069f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a10:	e087      	b.n	8006b22 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	ee07 3a90 	vmov	s15, r3
 8006a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a24:	4b69      	ldr	r3, [pc, #420]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a38:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a54:	e065      	b.n	8006b22 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a60:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a68:	4b58      	ldr	r3, [pc, #352]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a98:	e043      	b.n	8006b22 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aac:	4b47      	ldr	r3, [pc, #284]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006adc:	e021      	b.n	8006b22 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af0:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b04:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b20:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b22:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	0a5b      	lsrs	r3, r3, #9
 8006b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b48:	ee17 2a90 	vmov	r2, s15
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b50:	4b1e      	ldr	r3, [pc, #120]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b76:	ee17 2a90 	vmov	r2, s15
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	0e1b      	lsrs	r3, r3, #24
 8006b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba4:	ee17 2a90 	vmov	r2, s15
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006bac:	e008      	b.n	8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	3724      	adds	r7, #36	; 0x24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	03d09000 	.word	0x03d09000
 8006bd4:	46000000 	.word	0x46000000
 8006bd8:	4c742400 	.word	0x4c742400
 8006bdc:	4a742400 	.word	0x4a742400
 8006be0:	4af42400 	.word	0x4af42400

08006be4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bf2:	4b53      	ldr	r3, [pc, #332]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d101      	bne.n	8006c02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e099      	b.n	8006d36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c02:	4b4f      	ldr	r3, [pc, #316]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a4e      	ldr	r2, [pc, #312]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c0e:	f7fa fc5b 	bl	80014c8 <HAL_GetTick>
 8006c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c14:	e008      	b.n	8006c28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c16:	f7fa fc57 	bl	80014c8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e086      	b.n	8006d36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c28:	4b45      	ldr	r3, [pc, #276]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f0      	bne.n	8006c16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c34:	4b42      	ldr	r3, [pc, #264]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	031b      	lsls	r3, r3, #12
 8006c42:	493f      	ldr	r1, [pc, #252]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	628b      	str	r3, [r1, #40]	; 0x28
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	025b      	lsls	r3, r3, #9
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	061b      	lsls	r3, r3, #24
 8006c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c78:	4931      	ldr	r1, [pc, #196]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c7e:	4b30      	ldr	r3, [pc, #192]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	492d      	ldr	r1, [pc, #180]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	f023 0220 	bic.w	r2, r3, #32
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	4928      	ldr	r1, [pc, #160]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ca2:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	f023 0310 	bic.w	r3, r3, #16
 8006cac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb2:	4b24      	ldr	r3, [pc, #144]	; (8006d44 <RCCEx_PLL2_Config+0x160>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	69d2      	ldr	r2, [r2, #28]
 8006cba:	00d2      	lsls	r2, r2, #3
 8006cbc:	4920      	ldr	r1, [pc, #128]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	4a1e      	ldr	r2, [pc, #120]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	f043 0310 	orr.w	r3, r3, #16
 8006ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d106      	bne.n	8006ce2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cd4:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ce0:	e00f      	b.n	8006d02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d106      	bne.n	8006cf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ce8:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cf4:	e005      	b.n	8006d02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cf6:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d02:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a0e      	ldr	r2, [pc, #56]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d0e:	f7fa fbdb 	bl	80014c8 <HAL_GetTick>
 8006d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d14:	e008      	b.n	8006d28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d16:	f7fa fbd7 	bl	80014c8 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e006      	b.n	8006d36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0f0      	beq.n	8006d16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	58024400 	.word	0x58024400
 8006d44:	ffff0007 	.word	0xffff0007

08006d48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d56:	4b53      	ldr	r3, [pc, #332]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d101      	bne.n	8006d66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e099      	b.n	8006e9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d66:	4b4f      	ldr	r3, [pc, #316]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a4e      	ldr	r2, [pc, #312]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d72:	f7fa fba9 	bl	80014c8 <HAL_GetTick>
 8006d76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d78:	e008      	b.n	8006d8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d7a:	f7fa fba5 	bl	80014c8 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e086      	b.n	8006e9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d8c:	4b45      	ldr	r3, [pc, #276]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1f0      	bne.n	8006d7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d98:	4b42      	ldr	r3, [pc, #264]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	051b      	lsls	r3, r3, #20
 8006da6:	493f      	ldr	r1, [pc, #252]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	628b      	str	r3, [r1, #40]	; 0x28
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	025b      	lsls	r3, r3, #9
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	061b      	lsls	r3, r3, #24
 8006dd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ddc:	4931      	ldr	r1, [pc, #196]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006de2:	4b30      	ldr	r3, [pc, #192]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	492d      	ldr	r1, [pc, #180]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006df4:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	4928      	ldr	r1, [pc, #160]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e06:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e12:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e16:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <RCCEx_PLL3_Config+0x160>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	69d2      	ldr	r2, [r2, #28]
 8006e1e:	00d2      	lsls	r2, r2, #3
 8006e20:	4920      	ldr	r1, [pc, #128]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e26:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d106      	bne.n	8006e46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e38:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a19      	ldr	r2, [pc, #100]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e44:	e00f      	b.n	8006e66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d106      	bne.n	8006e5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e58:	e005      	b.n	8006e66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a11      	ldr	r2, [pc, #68]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e72:	f7fa fb29 	bl	80014c8 <HAL_GetTick>
 8006e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e78:	e008      	b.n	8006e8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e7a:	f7fa fb25 	bl	80014c8 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e006      	b.n	8006e9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	58024400 	.word	0x58024400
 8006ea8:	ffff0007 	.word	0xffff0007

08006eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e01d      	b.n	8006efa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa f89e 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f000 fa4c 	bl	8007388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <HAL_TIM_Base_Start_IT+0x50>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b06      	cmp	r3, #6
 8006f2c:	d00b      	beq.n	8006f46 <HAL_TIM_Base_Start_IT+0x42>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f34:	d007      	beq.n	8006f46 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	00010007 	.word	0x00010007

08006f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d122      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d11b      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f06f 0202 	mvn.w	r2, #2
 8006f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9d6 	bl	800734c <HAL_TIM_IC_CaptureCallback>
 8006fa0:	e005      	b.n	8006fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f9c8 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f9d9 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d122      	bne.n	8007008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d11b      	bne.n	8007008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0204 	mvn.w	r2, #4
 8006fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9ac 	bl	800734c <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e005      	b.n	8007002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f99e 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9af 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b08      	cmp	r3, #8
 8007014:	d122      	bne.n	800705c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b08      	cmp	r3, #8
 8007022:	d11b      	bne.n	800705c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0208 	mvn.w	r2, #8
 800702c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2204      	movs	r2, #4
 8007032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f982 	bl	800734c <HAL_TIM_IC_CaptureCallback>
 8007048:	e005      	b.n	8007056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f974 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f985 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	2b10      	cmp	r3, #16
 8007068:	d122      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b10      	cmp	r3, #16
 8007076:	d11b      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0210 	mvn.w	r2, #16
 8007080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2208      	movs	r2, #8
 8007086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f958 	bl	800734c <HAL_TIM_IC_CaptureCallback>
 800709c:	e005      	b.n	80070aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f94a 	bl	8007338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f95b 	bl	8007360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d10e      	bne.n	80070dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d107      	bne.n	80070dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0201 	mvn.w	r2, #1
 80070d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7f9 fe90 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e6:	2b80      	cmp	r3, #128	; 0x80
 80070e8:	d10e      	bne.n	8007108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d107      	bne.n	8007108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fb0a 	bl	800771c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007116:	d10e      	bne.n	8007136 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007122:	2b80      	cmp	r3, #128	; 0x80
 8007124:	d107      	bne.n	8007136 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800712e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fafd 	bl	8007730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d10e      	bne.n	8007162 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714e:	2b40      	cmp	r3, #64	; 0x40
 8007150:	d107      	bne.n	8007162 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800715a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f909 	bl	8007374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b20      	cmp	r3, #32
 800716e:	d10e      	bne.n	800718e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b20      	cmp	r3, #32
 800717c:	d107      	bne.n	800718e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f06f 0220 	mvn.w	r2, #32
 8007186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fabd 	bl	8007708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_TIM_ConfigClockSource+0x18>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e0b7      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x188>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4b57      	ldr	r3, [pc, #348]	; (8007328 <HAL_TIM_ConfigClockSource+0x190>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b70      	cmp	r3, #112	; 0x70
 80071e6:	d02e      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0xae>
 80071e8:	2b70      	cmp	r3, #112	; 0x70
 80071ea:	d812      	bhi.n	8007212 <HAL_TIM_ConfigClockSource+0x7a>
 80071ec:	2b30      	cmp	r3, #48	; 0x30
 80071ee:	f000 8084 	beq.w	80072fa <HAL_TIM_ConfigClockSource+0x162>
 80071f2:	2b30      	cmp	r3, #48	; 0x30
 80071f4:	d806      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x6c>
 80071f6:	2b10      	cmp	r3, #16
 80071f8:	d07f      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d07d      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d07b      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007202:	e084      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007204:	2b50      	cmp	r3, #80	; 0x50
 8007206:	d048      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x102>
 8007208:	2b60      	cmp	r3, #96	; 0x60
 800720a:	d056      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0x122>
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d064      	beq.n	80072da <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007210:	e07d      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007212:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007216:	d070      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
 8007218:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800721c:	d809      	bhi.n	8007232 <HAL_TIM_ConfigClockSource+0x9a>
 800721e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007222:	d027      	beq.n	8007274 <HAL_TIM_ConfigClockSource+0xdc>
 8007224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007228:	d067      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722e:	d06d      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007230:	e06d      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007232:	4a3e      	ldr	r2, [pc, #248]	; (800732c <HAL_TIM_ConfigClockSource+0x194>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d060      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
 8007238:	4a3d      	ldr	r2, [pc, #244]	; (8007330 <HAL_TIM_ConfigClockSource+0x198>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d05d      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
 800723e:	4a3d      	ldr	r2, [pc, #244]	; (8007334 <HAL_TIM_ConfigClockSource+0x19c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d05a      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x162>
      break;
 8007244:	e063      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6899      	ldr	r1, [r3, #8]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f000 f9af 	bl	80075b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007268:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	609a      	str	r2, [r3, #8]
      break;
 8007272:	e04c      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	6899      	ldr	r1, [r3, #8]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f000 f998 	bl	80075b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007296:	609a      	str	r2, [r3, #8]
      break;
 8007298:	e039      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6859      	ldr	r1, [r3, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f000 f908 	bl	80074bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2150      	movs	r1, #80	; 0x50
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f962 	bl	800757c <TIM_ITRx_SetConfig>
      break;
 80072b8:	e029      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6859      	ldr	r1, [r3, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f000 f927 	bl	800751a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2160      	movs	r1, #96	; 0x60
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f952 	bl	800757c <TIM_ITRx_SetConfig>
      break;
 80072d8:	e019      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6859      	ldr	r1, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f000 f8e8 	bl	80074bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2140      	movs	r1, #64	; 0x40
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f942 	bl	800757c <TIM_ITRx_SetConfig>
      break;
 80072f8:	e009      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f000 f939 	bl	800757c <TIM_ITRx_SetConfig>
      break;
 800730a:	e000      	b.n	800730e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800730c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	ffceff88 	.word	0xffceff88
 800732c:	00100030 	.word	0x00100030
 8007330:	00100040 	.word	0x00100040
 8007334:	00100020 	.word	0x00100020

08007338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a40      	ldr	r2, [pc, #256]	; (800749c <TIM_Base_SetConfig+0x114>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <TIM_Base_SetConfig+0x40>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a6:	d00f      	beq.n	80073c8 <TIM_Base_SetConfig+0x40>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a3d      	ldr	r2, [pc, #244]	; (80074a0 <TIM_Base_SetConfig+0x118>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00b      	beq.n	80073c8 <TIM_Base_SetConfig+0x40>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a3c      	ldr	r2, [pc, #240]	; (80074a4 <TIM_Base_SetConfig+0x11c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d007      	beq.n	80073c8 <TIM_Base_SetConfig+0x40>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a3b      	ldr	r2, [pc, #236]	; (80074a8 <TIM_Base_SetConfig+0x120>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d003      	beq.n	80073c8 <TIM_Base_SetConfig+0x40>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a3a      	ldr	r2, [pc, #232]	; (80074ac <TIM_Base_SetConfig+0x124>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d108      	bne.n	80073da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a2f      	ldr	r2, [pc, #188]	; (800749c <TIM_Base_SetConfig+0x114>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01f      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e8:	d01b      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2c      	ldr	r2, [pc, #176]	; (80074a0 <TIM_Base_SetConfig+0x118>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d017      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a2b      	ldr	r2, [pc, #172]	; (80074a4 <TIM_Base_SetConfig+0x11c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a2a      	ldr	r2, [pc, #168]	; (80074a8 <TIM_Base_SetConfig+0x120>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00f      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a29      	ldr	r2, [pc, #164]	; (80074ac <TIM_Base_SetConfig+0x124>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00b      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <TIM_Base_SetConfig+0x128>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d007      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a27      	ldr	r2, [pc, #156]	; (80074b4 <TIM_Base_SetConfig+0x12c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_Base_SetConfig+0x9a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <TIM_Base_SetConfig+0x130>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d108      	bne.n	8007434 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a10      	ldr	r2, [pc, #64]	; (800749c <TIM_Base_SetConfig+0x114>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00f      	beq.n	8007480 <TIM_Base_SetConfig+0xf8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a12      	ldr	r2, [pc, #72]	; (80074ac <TIM_Base_SetConfig+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00b      	beq.n	8007480 <TIM_Base_SetConfig+0xf8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a11      	ldr	r2, [pc, #68]	; (80074b0 <TIM_Base_SetConfig+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d007      	beq.n	8007480 <TIM_Base_SetConfig+0xf8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a10      	ldr	r2, [pc, #64]	; (80074b4 <TIM_Base_SetConfig+0x12c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d003      	beq.n	8007480 <TIM_Base_SetConfig+0xf8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a0f      	ldr	r2, [pc, #60]	; (80074b8 <TIM_Base_SetConfig+0x130>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d103      	bne.n	8007488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	615a      	str	r2, [r3, #20]
}
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000
 80074a0:	40000400 	.word	0x40000400
 80074a4:	40000800 	.word	0x40000800
 80074a8:	40000c00 	.word	0x40000c00
 80074ac:	40010400 	.word	0x40010400
 80074b0:	40014000 	.word	0x40014000
 80074b4:	40014400 	.word	0x40014400
 80074b8:	40014800 	.word	0x40014800

080074bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f023 0201 	bic.w	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f023 030a 	bic.w	r3, r3, #10
 80074f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800751a:	b480      	push	{r7}
 800751c:	b087      	sub	sp, #28
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f023 0210 	bic.w	r2, r3, #16
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	031b      	lsls	r3, r3, #12
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
	...

0800757c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <TIM_ITRx_SetConfig+0x38>)
 8007590:	4013      	ands	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	f043 0307 	orr.w	r3, r3, #7
 800759e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	609a      	str	r2, [r3, #8]
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	ffcfff8f 	.word	0xffcfff8f

080075b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	431a      	orrs	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4313      	orrs	r3, r2
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	609a      	str	r2, [r3, #8]
}
 80075ec:	bf00      	nop
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800760c:	2302      	movs	r3, #2
 800760e:	e068      	b.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a2e      	ldr	r2, [pc, #184]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a2d      	ldr	r2, [pc, #180]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d108      	bne.n	8007656 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800764a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d01d      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007682:	d018      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d013      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a1a      	ldr	r2, [pc, #104]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00e      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a18      	ldr	r2, [pc, #96]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d009      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a13      	ldr	r2, [pc, #76]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d004      	beq.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a14      	ldr	r2, [pc, #80]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d10c      	bne.n	80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40010000 	.word	0x40010000
 80076f4:	40010400 	.word	0x40010400
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40000800 	.word	0x40000800
 8007700:	40000c00 	.word	0x40000c00
 8007704:	40001800 	.word	0x40001800

08007708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e042      	b.n	80077dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7f9 fc75 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2224      	movs	r2, #36	; 0x24
 8007772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 faf2 	bl	8007d70 <UART_SetConfig>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e022      	b.n	80077dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f002 fc64 	bl	800a06c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f002 fceb 	bl	800a1b0 <UART_CheckIdleState>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	f040 8083 	bne.w	8007906 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_UART_Transmit+0x28>
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e07b      	b.n	8007908 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_UART_Transmit+0x3a>
 800781a:	2302      	movs	r3, #2
 800781c:	e074      	b.n	8007908 <HAL_UART_Transmit+0x124>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2221      	movs	r2, #33	; 0x21
 8007832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007836:	f7f9 fe47 	bl	80014c8 <HAL_GetTick>
 800783a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	88fa      	ldrh	r2, [r7, #6]
 8007840:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	88fa      	ldrh	r2, [r7, #6]
 8007848:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007854:	d108      	bne.n	8007868 <HAL_UART_Transmit+0x84>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d104      	bne.n	8007868 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	e003      	b.n	8007870 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800786c:	2300      	movs	r3, #0
 800786e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007870:	e02c      	b.n	80078cc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f002 fcdf 	bl	800a240 <UART_WaitOnFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e03d      	b.n	8007908 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	3302      	adds	r3, #2
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	e007      	b.n	80078ba <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	3301      	adds	r3, #1
 80078b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1cc      	bne.n	8007872 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2200      	movs	r2, #0
 80078e0:	2140      	movs	r1, #64	; 0x40
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f002 fcac 	bl	800a240 <UART_WaitOnFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e00a      	b.n	8007908 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007906:	2302      	movs	r3, #2
  }
}
 8007908:	4618      	mov	r0, r3
 800790a:	3720      	adds	r7, #32
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	2b20      	cmp	r3, #32
 8007926:	d170      	bne.n	8007a0a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_UART_Receive_DMA+0x24>
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e069      	b.n	8007a0c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_UART_Receive_DMA+0x36>
 8007942:	2302      	movs	r3, #2
 8007944:	e062      	b.n	8007a0c <HAL_UART_Receive_DMA+0xfc>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2222      	movs	r2, #34	; 0x22
 8007968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007970:	2b00      	cmp	r3, #0
 8007972:	d02c      	beq.n	80079ce <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007978:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <HAL_UART_Receive_DMA+0x104>)
 800797a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007980:	4a25      	ldr	r2, [pc, #148]	; (8007a18 <HAL_UART_Receive_DMA+0x108>)
 8007982:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007988:	4a24      	ldr	r2, [pc, #144]	; (8007a1c <HAL_UART_Receive_DMA+0x10c>)
 800798a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007990:	2200      	movs	r2, #0
 8007992:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3324      	adds	r3, #36	; 0x24
 800799e:	4619      	mov	r1, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	461a      	mov	r2, r3
 80079a6:	88fb      	ldrh	r3, [r7, #6]
 80079a8:	f7fa fa18 	bl	8001ddc <HAL_DMA_Start_IT>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2210      	movs	r2, #16
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e01e      	b.n	8007a0c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079e4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0201 	orr.w	r2, r2, #1
 80079f4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a04:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	0800a3c5 	.word	0x0800a3c5
 8007a18:	0800a42b 	.word	0x0800a42b
 8007a1c:	0800a447 	.word	0x0800a447

08007a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a46:	4013      	ands	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d118      	bne.n	8007a82 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d013      	beq.n	8007a82 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 8145 	beq.w	8007d02 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
      }
      return;
 8007a80:	e13f      	b.n	8007d02 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80e8 	beq.w	8007c5a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4ba1      	ldr	r3, [pc, #644]	; (8007d14 <HAL_UART_IRQHandler+0x2f4>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	4ba0      	ldr	r3, [pc, #640]	; (8007d18 <HAL_UART_IRQHandler+0x2f8>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80dd 	beq.w	8007c5a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d010      	beq.n	8007acc <HAL_UART_IRQHandler+0xac>
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac2:	f043 0201 	orr.w	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <HAL_UART_IRQHandler+0xd8>
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aee:	f043 0204 	orr.w	r2, r3, #4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d010      	beq.n	8007b24 <HAL_UART_IRQHandler+0x104>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2204      	movs	r2, #4
 8007b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f043 0202 	orr.w	r2, r3, #2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f003 0308 	and.w	r3, r3, #8
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d015      	beq.n	8007b5a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4b76      	ldr	r3, [pc, #472]	; (8007d14 <HAL_UART_IRQHandler+0x2f4>)
 8007b3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2208      	movs	r2, #8
 8007b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	f043 0208 	orr.w	r2, r3, #8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d011      	beq.n	8007b88 <HAL_UART_IRQHandler+0x168>
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00c      	beq.n	8007b88 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80b9 	beq.w	8007d06 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d011      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d004      	beq.n	8007be2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d031      	beq.n	8007c46 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f002 fbca 	bl	800a37c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d123      	bne.n	8007c3e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d013      	beq.n	8007c36 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c12:	4a42      	ldr	r2, [pc, #264]	; (8007d1c <HAL_UART_IRQHandler+0x2fc>)
 8007c14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fa fb48 	bl	80022b0 <HAL_DMA_Abort_IT>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d017      	beq.n	8007c56 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	e00f      	b.n	8007c56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f890 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3c:	e00b      	b.n	8007c56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f88c 	bl	8007d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	e007      	b.n	8007c56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f888 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007c54:	e057      	b.n	8007d06 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c56:	bf00      	nop
    return;
 8007c58:	e055      	b.n	8007d06 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00d      	beq.n	8007c80 <HAL_UART_IRQHandler+0x260>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d008      	beq.n	8007c80 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f002 fc54 	bl	800a526 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c7e:	e045      	b.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d012      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d008      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d031      	beq.n	8007d0a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
    }
    return;
 8007cae:	e02c      	b.n	8007d0a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <HAL_UART_IRQHandler+0x2ac>
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f002 fc14 	bl	800a4f2 <UART_EndTransmit_IT>
    return;
 8007cca:	e01f      	b.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d008      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x2c8>
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f002 fc34 	bl	800a54e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ce6:	e011      	b.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00c      	beq.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	da09      	bge.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f002 fc1e 	bl	800a53a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cfe:	bf00      	nop
 8007d00:	e004      	b.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
      return;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
    return;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <HAL_UART_IRQHandler+0x2ec>
    return;
 8007d0a:	bf00      	nop
  }
}
 8007d0c:	3720      	adds	r7, #32
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	10000001 	.word	0x10000001
 8007d18:	04000120 	.word	0x04000120
 8007d1c:	0800a4c7 	.word	0x0800a4c7

08007d20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d70:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007d74:	b090      	sub	sp, #64	; 0x40
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007da6:	4313      	orrs	r3, r2
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	4bc1      	ldr	r3, [pc, #772]	; (80080b8 <UART_SetConfig+0x348>)
 8007db2:	4013      	ands	r3, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4ab7      	ldr	r2, [pc, #732]	; (80080bc <UART_SetConfig+0x34c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d004      	beq.n	8007dee <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dea:	4313      	orrs	r3, r2
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	4bb2      	ldr	r3, [pc, #712]	; (80080c0 <UART_SetConfig+0x350>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6812      	ldr	r2, [r2, #0]
 8007dfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	f023 010f 	bic.w	r1, r3, #15
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4aa9      	ldr	r2, [pc, #676]	; (80080c4 <UART_SetConfig+0x354>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d177      	bne.n	8007f12 <UART_SetConfig+0x1a2>
 8007e22:	4ba9      	ldr	r3, [pc, #676]	; (80080c8 <UART_SetConfig+0x358>)
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e2a:	2b28      	cmp	r3, #40	; 0x28
 8007e2c:	d86c      	bhi.n	8007f08 <UART_SetConfig+0x198>
 8007e2e:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <UART_SetConfig+0xc4>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007ed9 	.word	0x08007ed9
 8007e38:	08007f09 	.word	0x08007f09
 8007e3c:	08007f09 	.word	0x08007f09
 8007e40:	08007f09 	.word	0x08007f09
 8007e44:	08007f09 	.word	0x08007f09
 8007e48:	08007f09 	.word	0x08007f09
 8007e4c:	08007f09 	.word	0x08007f09
 8007e50:	08007f09 	.word	0x08007f09
 8007e54:	08007ee1 	.word	0x08007ee1
 8007e58:	08007f09 	.word	0x08007f09
 8007e5c:	08007f09 	.word	0x08007f09
 8007e60:	08007f09 	.word	0x08007f09
 8007e64:	08007f09 	.word	0x08007f09
 8007e68:	08007f09 	.word	0x08007f09
 8007e6c:	08007f09 	.word	0x08007f09
 8007e70:	08007f09 	.word	0x08007f09
 8007e74:	08007ee9 	.word	0x08007ee9
 8007e78:	08007f09 	.word	0x08007f09
 8007e7c:	08007f09 	.word	0x08007f09
 8007e80:	08007f09 	.word	0x08007f09
 8007e84:	08007f09 	.word	0x08007f09
 8007e88:	08007f09 	.word	0x08007f09
 8007e8c:	08007f09 	.word	0x08007f09
 8007e90:	08007f09 	.word	0x08007f09
 8007e94:	08007ef1 	.word	0x08007ef1
 8007e98:	08007f09 	.word	0x08007f09
 8007e9c:	08007f09 	.word	0x08007f09
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007f09 	.word	0x08007f09
 8007ea8:	08007f09 	.word	0x08007f09
 8007eac:	08007f09 	.word	0x08007f09
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007ef9 	.word	0x08007ef9
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	08007f09 	.word	0x08007f09
 8007ec0:	08007f09 	.word	0x08007f09
 8007ec4:	08007f09 	.word	0x08007f09
 8007ec8:	08007f09 	.word	0x08007f09
 8007ecc:	08007f09 	.word	0x08007f09
 8007ed0:	08007f09 	.word	0x08007f09
 8007ed4:	08007f01 	.word	0x08007f01
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ede:	e233      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ee6:	e22f      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007ee8:	2308      	movs	r3, #8
 8007eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007eee:	e22b      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007ef0:	2310      	movs	r3, #16
 8007ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ef6:	e227      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007ef8:	2320      	movs	r3, #32
 8007efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007efe:	e223      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f06:	e21f      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f0e:	bf00      	nop
 8007f10:	e21a      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a6d      	ldr	r2, [pc, #436]	; (80080cc <UART_SetConfig+0x35c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d132      	bne.n	8007f82 <UART_SetConfig+0x212>
 8007f1c:	4b6a      	ldr	r3, [pc, #424]	; (80080c8 <UART_SetConfig+0x358>)
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d827      	bhi.n	8007f78 <UART_SetConfig+0x208>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0x1c0>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f49 	.word	0x08007f49
 8007f34:	08007f51 	.word	0x08007f51
 8007f38:	08007f59 	.word	0x08007f59
 8007f3c:	08007f61 	.word	0x08007f61
 8007f40:	08007f69 	.word	0x08007f69
 8007f44:	08007f71 	.word	0x08007f71
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f4e:	e1fb      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f50:	2304      	movs	r3, #4
 8007f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f56:	e1f7      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f58:	2308      	movs	r3, #8
 8007f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f5e:	e1f3      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f60:	2310      	movs	r3, #16
 8007f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f66:	e1ef      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f68:	2320      	movs	r3, #32
 8007f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f6e:	e1eb      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f70:	2340      	movs	r3, #64	; 0x40
 8007f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f76:	e1e7      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f78:	2380      	movs	r3, #128	; 0x80
 8007f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f7e:	bf00      	nop
 8007f80:	e1e2      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a52      	ldr	r2, [pc, #328]	; (80080d0 <UART_SetConfig+0x360>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d132      	bne.n	8007ff2 <UART_SetConfig+0x282>
 8007f8c:	4b4e      	ldr	r3, [pc, #312]	; (80080c8 <UART_SetConfig+0x358>)
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	2b05      	cmp	r3, #5
 8007f96:	d827      	bhi.n	8007fe8 <UART_SetConfig+0x278>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <UART_SetConfig+0x230>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb9 	.word	0x08007fb9
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	08007fc9 	.word	0x08007fc9
 8007fac:	08007fd1 	.word	0x08007fd1
 8007fb0:	08007fd9 	.word	0x08007fd9
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fbe:	e1c3      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007fc0:	2304      	movs	r3, #4
 8007fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fc6:	e1bf      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fce:	e1bb      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fd6:	e1b7      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007fd8:	2320      	movs	r3, #32
 8007fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fde:	e1b3      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fe6:	e1af      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fee:	bf00      	nop
 8007ff0:	e1aa      	b.n	8008348 <UART_SetConfig+0x5d8>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a37      	ldr	r2, [pc, #220]	; (80080d4 <UART_SetConfig+0x364>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d132      	bne.n	8008062 <UART_SetConfig+0x2f2>
 8007ffc:	4b32      	ldr	r3, [pc, #200]	; (80080c8 <UART_SetConfig+0x358>)
 8007ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	2b05      	cmp	r3, #5
 8008006:	d827      	bhi.n	8008058 <UART_SetConfig+0x2e8>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <UART_SetConfig+0x2a0>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008029 	.word	0x08008029
 8008014:	08008031 	.word	0x08008031
 8008018:	08008039 	.word	0x08008039
 800801c:	08008041 	.word	0x08008041
 8008020:	08008049 	.word	0x08008049
 8008024:	08008051 	.word	0x08008051
 8008028:	2300      	movs	r3, #0
 800802a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800802e:	e18b      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008030:	2304      	movs	r3, #4
 8008032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008036:	e187      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008038:	2308      	movs	r3, #8
 800803a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800803e:	e183      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008040:	2310      	movs	r3, #16
 8008042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008046:	e17f      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008048:	2320      	movs	r3, #32
 800804a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800804e:	e17b      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008056:	e177      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008058:	2380      	movs	r3, #128	; 0x80
 800805a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800805e:	bf00      	nop
 8008060:	e172      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1c      	ldr	r2, [pc, #112]	; (80080d8 <UART_SetConfig+0x368>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d144      	bne.n	80080f6 <UART_SetConfig+0x386>
 800806c:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <UART_SetConfig+0x358>)
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	2b05      	cmp	r3, #5
 8008076:	d839      	bhi.n	80080ec <UART_SetConfig+0x37c>
 8008078:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <UART_SetConfig+0x310>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	08008099 	.word	0x08008099
 8008084:	080080a1 	.word	0x080080a1
 8008088:	080080a9 	.word	0x080080a9
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080e5 	.word	0x080080e5
 8008098:	2300      	movs	r3, #0
 800809a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800809e:	e153      	b.n	8008348 <UART_SetConfig+0x5d8>
 80080a0:	2304      	movs	r3, #4
 80080a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080a6:	e14f      	b.n	8008348 <UART_SetConfig+0x5d8>
 80080a8:	2308      	movs	r3, #8
 80080aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080ae:	e14b      	b.n	8008348 <UART_SetConfig+0x5d8>
 80080b0:	2310      	movs	r3, #16
 80080b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080b6:	e147      	b.n	8008348 <UART_SetConfig+0x5d8>
 80080b8:	cfff69f3 	.word	0xcfff69f3
 80080bc:	58000c00 	.word	0x58000c00
 80080c0:	11fff4ff 	.word	0x11fff4ff
 80080c4:	40011000 	.word	0x40011000
 80080c8:	58024400 	.word	0x58024400
 80080cc:	40004400 	.word	0x40004400
 80080d0:	40004800 	.word	0x40004800
 80080d4:	40004c00 	.word	0x40004c00
 80080d8:	40005000 	.word	0x40005000
 80080dc:	2320      	movs	r3, #32
 80080de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080e2:	e131      	b.n	8008348 <UART_SetConfig+0x5d8>
 80080e4:	2340      	movs	r3, #64	; 0x40
 80080e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080ea:	e12d      	b.n	8008348 <UART_SetConfig+0x5d8>
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080f2:	bf00      	nop
 80080f4:	e128      	b.n	8008348 <UART_SetConfig+0x5d8>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4ac3      	ldr	r2, [pc, #780]	; (8008408 <UART_SetConfig+0x698>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d178      	bne.n	80081f2 <UART_SetConfig+0x482>
 8008100:	4bc2      	ldr	r3, [pc, #776]	; (800840c <UART_SetConfig+0x69c>)
 8008102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008108:	2b28      	cmp	r3, #40	; 0x28
 800810a:	d86d      	bhi.n	80081e8 <UART_SetConfig+0x478>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <UART_SetConfig+0x3a4>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	080081b9 	.word	0x080081b9
 8008118:	080081e9 	.word	0x080081e9
 800811c:	080081e9 	.word	0x080081e9
 8008120:	080081e9 	.word	0x080081e9
 8008124:	080081e9 	.word	0x080081e9
 8008128:	080081e9 	.word	0x080081e9
 800812c:	080081e9 	.word	0x080081e9
 8008130:	080081e9 	.word	0x080081e9
 8008134:	080081c1 	.word	0x080081c1
 8008138:	080081e9 	.word	0x080081e9
 800813c:	080081e9 	.word	0x080081e9
 8008140:	080081e9 	.word	0x080081e9
 8008144:	080081e9 	.word	0x080081e9
 8008148:	080081e9 	.word	0x080081e9
 800814c:	080081e9 	.word	0x080081e9
 8008150:	080081e9 	.word	0x080081e9
 8008154:	080081c9 	.word	0x080081c9
 8008158:	080081e9 	.word	0x080081e9
 800815c:	080081e9 	.word	0x080081e9
 8008160:	080081e9 	.word	0x080081e9
 8008164:	080081e9 	.word	0x080081e9
 8008168:	080081e9 	.word	0x080081e9
 800816c:	080081e9 	.word	0x080081e9
 8008170:	080081e9 	.word	0x080081e9
 8008174:	080081d1 	.word	0x080081d1
 8008178:	080081e9 	.word	0x080081e9
 800817c:	080081e9 	.word	0x080081e9
 8008180:	080081e9 	.word	0x080081e9
 8008184:	080081e9 	.word	0x080081e9
 8008188:	080081e9 	.word	0x080081e9
 800818c:	080081e9 	.word	0x080081e9
 8008190:	080081e9 	.word	0x080081e9
 8008194:	080081d9 	.word	0x080081d9
 8008198:	080081e9 	.word	0x080081e9
 800819c:	080081e9 	.word	0x080081e9
 80081a0:	080081e9 	.word	0x080081e9
 80081a4:	080081e9 	.word	0x080081e9
 80081a8:	080081e9 	.word	0x080081e9
 80081ac:	080081e9 	.word	0x080081e9
 80081b0:	080081e9 	.word	0x080081e9
 80081b4:	080081e1 	.word	0x080081e1
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081be:	e0c3      	b.n	8008348 <UART_SetConfig+0x5d8>
 80081c0:	2304      	movs	r3, #4
 80081c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081c6:	e0bf      	b.n	8008348 <UART_SetConfig+0x5d8>
 80081c8:	2308      	movs	r3, #8
 80081ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081ce:	e0bb      	b.n	8008348 <UART_SetConfig+0x5d8>
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081d6:	e0b7      	b.n	8008348 <UART_SetConfig+0x5d8>
 80081d8:	2320      	movs	r3, #32
 80081da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081de:	e0b3      	b.n	8008348 <UART_SetConfig+0x5d8>
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081e6:	e0af      	b.n	8008348 <UART_SetConfig+0x5d8>
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80081ee:	bf00      	nop
 80081f0:	e0aa      	b.n	8008348 <UART_SetConfig+0x5d8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a86      	ldr	r2, [pc, #536]	; (8008410 <UART_SetConfig+0x6a0>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d132      	bne.n	8008262 <UART_SetConfig+0x4f2>
 80081fc:	4b83      	ldr	r3, [pc, #524]	; (800840c <UART_SetConfig+0x69c>)
 80081fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	2b05      	cmp	r3, #5
 8008206:	d827      	bhi.n	8008258 <UART_SetConfig+0x4e8>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <UART_SetConfig+0x4a0>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008229 	.word	0x08008229
 8008214:	08008231 	.word	0x08008231
 8008218:	08008239 	.word	0x08008239
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	2300      	movs	r3, #0
 800822a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800822e:	e08b      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008236:	e087      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800823e:	e083      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008246:	e07f      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008248:	2320      	movs	r3, #32
 800824a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800824e:	e07b      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008256:	e077      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800825e:	bf00      	nop
 8008260:	e072      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a6b      	ldr	r2, [pc, #428]	; (8008414 <UART_SetConfig+0x6a4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d132      	bne.n	80082d2 <UART_SetConfig+0x562>
 800826c:	4b67      	ldr	r3, [pc, #412]	; (800840c <UART_SetConfig+0x69c>)
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	2b05      	cmp	r3, #5
 8008276:	d827      	bhi.n	80082c8 <UART_SetConfig+0x558>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <UART_SetConfig+0x510>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008299 	.word	0x08008299
 8008284:	080082a1 	.word	0x080082a1
 8008288:	080082a9 	.word	0x080082a9
 800828c:	080082b1 	.word	0x080082b1
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082c1 	.word	0x080082c1
 8008298:	2300      	movs	r3, #0
 800829a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800829e:	e053      	b.n	8008348 <UART_SetConfig+0x5d8>
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80082a6:	e04f      	b.n	8008348 <UART_SetConfig+0x5d8>
 80082a8:	2308      	movs	r3, #8
 80082aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80082ae:	e04b      	b.n	8008348 <UART_SetConfig+0x5d8>
 80082b0:	2310      	movs	r3, #16
 80082b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80082b6:	e047      	b.n	8008348 <UART_SetConfig+0x5d8>
 80082b8:	2320      	movs	r3, #32
 80082ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80082be:	e043      	b.n	8008348 <UART_SetConfig+0x5d8>
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80082c6:	e03f      	b.n	8008348 <UART_SetConfig+0x5d8>
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80082ce:	bf00      	nop
 80082d0:	e03a      	b.n	8008348 <UART_SetConfig+0x5d8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a50      	ldr	r2, [pc, #320]	; (8008418 <UART_SetConfig+0x6a8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d132      	bne.n	8008342 <UART_SetConfig+0x5d2>
 80082dc:	4b4b      	ldr	r3, [pc, #300]	; (800840c <UART_SetConfig+0x69c>)
 80082de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e0:	f003 0307 	and.w	r3, r3, #7
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d827      	bhi.n	8008338 <UART_SetConfig+0x5c8>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <UART_SetConfig+0x580>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008309 	.word	0x08008309
 80082f4:	08008311 	.word	0x08008311
 80082f8:	08008319 	.word	0x08008319
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	2302      	movs	r3, #2
 800830a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800830e:	e01b      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008316:	e017      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800831e:	e013      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008326:	e00f      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008328:	2320      	movs	r3, #32
 800832a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800832e:	e00b      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008336:	e007      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008338:	2380      	movs	r3, #128	; 0x80
 800833a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800833e:	bf00      	nop
 8008340:	e002      	b.n	8008348 <UART_SetConfig+0x5d8>
 8008342:	2380      	movs	r3, #128	; 0x80
 8008344:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a32      	ldr	r2, [pc, #200]	; (8008418 <UART_SetConfig+0x6a8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	f040 86f7 	bne.w	8009142 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008354:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008358:	2b08      	cmp	r3, #8
 800835a:	f000 80c0 	beq.w	80084de <UART_SetConfig+0x76e>
 800835e:	2b08      	cmp	r3, #8
 8008360:	dc04      	bgt.n	800836c <UART_SetConfig+0x5fc>
 8008362:	2b02      	cmp	r3, #2
 8008364:	d00c      	beq.n	8008380 <UART_SetConfig+0x610>
 8008366:	2b04      	cmp	r3, #4
 8008368:	d065      	beq.n	8008436 <UART_SetConfig+0x6c6>
 800836a:	e27a      	b.n	8008862 <UART_SetConfig+0xaf2>
 800836c:	2b20      	cmp	r3, #32
 800836e:	f000 81b0 	beq.w	80086d2 <UART_SetConfig+0x962>
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	f000 821e 	beq.w	80087b4 <UART_SetConfig+0xa44>
 8008378:	2b10      	cmp	r3, #16
 800837a:	f000 8104 	beq.w	8008586 <UART_SetConfig+0x816>
 800837e:	e270      	b.n	8008862 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008380:	f7fe f982 	bl	8006688 <HAL_RCCEx_GetD3PCLK1Freq>
 8008384:	4602      	mov	r2, r0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d04e      	beq.n	800842c <UART_SetConfig+0x6bc>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b01      	cmp	r3, #1
 8008394:	d048      	beq.n	8008428 <UART_SetConfig+0x6b8>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b02      	cmp	r3, #2
 800839c:	d042      	beq.n	8008424 <UART_SetConfig+0x6b4>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d03c      	beq.n	8008420 <UART_SetConfig+0x6b0>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d036      	beq.n	800841c <UART_SetConfig+0x6ac>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b05      	cmp	r3, #5
 80083b4:	d026      	beq.n	8008404 <UART_SetConfig+0x694>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2b06      	cmp	r3, #6
 80083bc:	d020      	beq.n	8008400 <UART_SetConfig+0x690>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b07      	cmp	r3, #7
 80083c4:	d01a      	beq.n	80083fc <UART_SetConfig+0x68c>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d014      	beq.n	80083f8 <UART_SetConfig+0x688>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d00e      	beq.n	80083f4 <UART_SetConfig+0x684>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b0a      	cmp	r3, #10
 80083dc:	d008      	beq.n	80083f0 <UART_SetConfig+0x680>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b0b      	cmp	r3, #11
 80083e4:	d102      	bne.n	80083ec <UART_SetConfig+0x67c>
 80083e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ea:	e020      	b.n	800842e <UART_SetConfig+0x6be>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e01e      	b.n	800842e <UART_SetConfig+0x6be>
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	e01c      	b.n	800842e <UART_SetConfig+0x6be>
 80083f4:	2340      	movs	r3, #64	; 0x40
 80083f6:	e01a      	b.n	800842e <UART_SetConfig+0x6be>
 80083f8:	2320      	movs	r3, #32
 80083fa:	e018      	b.n	800842e <UART_SetConfig+0x6be>
 80083fc:	2310      	movs	r3, #16
 80083fe:	e016      	b.n	800842e <UART_SetConfig+0x6be>
 8008400:	230c      	movs	r3, #12
 8008402:	e014      	b.n	800842e <UART_SetConfig+0x6be>
 8008404:	230a      	movs	r3, #10
 8008406:	e012      	b.n	800842e <UART_SetConfig+0x6be>
 8008408:	40011400 	.word	0x40011400
 800840c:	58024400 	.word	0x58024400
 8008410:	40007800 	.word	0x40007800
 8008414:	40007c00 	.word	0x40007c00
 8008418:	58000c00 	.word	0x58000c00
 800841c:	2308      	movs	r3, #8
 800841e:	e006      	b.n	800842e <UART_SetConfig+0x6be>
 8008420:	2306      	movs	r3, #6
 8008422:	e004      	b.n	800842e <UART_SetConfig+0x6be>
 8008424:	2304      	movs	r3, #4
 8008426:	e002      	b.n	800842e <UART_SetConfig+0x6be>
 8008428:	2302      	movs	r3, #2
 800842a:	e000      	b.n	800842e <UART_SetConfig+0x6be>
 800842c:	2301      	movs	r3, #1
 800842e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008434:	e219      	b.n	800886a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008436:	f107 0318 	add.w	r3, r7, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe f93a 	bl	80066b4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	d044      	beq.n	80084d4 <UART_SetConfig+0x764>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	2b01      	cmp	r3, #1
 8008450:	d03e      	beq.n	80084d0 <UART_SetConfig+0x760>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b02      	cmp	r3, #2
 8008458:	d038      	beq.n	80084cc <UART_SetConfig+0x75c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	2b03      	cmp	r3, #3
 8008460:	d032      	beq.n	80084c8 <UART_SetConfig+0x758>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b04      	cmp	r3, #4
 8008468:	d02c      	beq.n	80084c4 <UART_SetConfig+0x754>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b05      	cmp	r3, #5
 8008470:	d026      	beq.n	80084c0 <UART_SetConfig+0x750>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b06      	cmp	r3, #6
 8008478:	d020      	beq.n	80084bc <UART_SetConfig+0x74c>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b07      	cmp	r3, #7
 8008480:	d01a      	beq.n	80084b8 <UART_SetConfig+0x748>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b08      	cmp	r3, #8
 8008488:	d014      	beq.n	80084b4 <UART_SetConfig+0x744>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b09      	cmp	r3, #9
 8008490:	d00e      	beq.n	80084b0 <UART_SetConfig+0x740>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b0a      	cmp	r3, #10
 8008498:	d008      	beq.n	80084ac <UART_SetConfig+0x73c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b0b      	cmp	r3, #11
 80084a0:	d102      	bne.n	80084a8 <UART_SetConfig+0x738>
 80084a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084a6:	e016      	b.n	80084d6 <UART_SetConfig+0x766>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e014      	b.n	80084d6 <UART_SetConfig+0x766>
 80084ac:	2380      	movs	r3, #128	; 0x80
 80084ae:	e012      	b.n	80084d6 <UART_SetConfig+0x766>
 80084b0:	2340      	movs	r3, #64	; 0x40
 80084b2:	e010      	b.n	80084d6 <UART_SetConfig+0x766>
 80084b4:	2320      	movs	r3, #32
 80084b6:	e00e      	b.n	80084d6 <UART_SetConfig+0x766>
 80084b8:	2310      	movs	r3, #16
 80084ba:	e00c      	b.n	80084d6 <UART_SetConfig+0x766>
 80084bc:	230c      	movs	r3, #12
 80084be:	e00a      	b.n	80084d6 <UART_SetConfig+0x766>
 80084c0:	230a      	movs	r3, #10
 80084c2:	e008      	b.n	80084d6 <UART_SetConfig+0x766>
 80084c4:	2308      	movs	r3, #8
 80084c6:	e006      	b.n	80084d6 <UART_SetConfig+0x766>
 80084c8:	2306      	movs	r3, #6
 80084ca:	e004      	b.n	80084d6 <UART_SetConfig+0x766>
 80084cc:	2304      	movs	r3, #4
 80084ce:	e002      	b.n	80084d6 <UART_SetConfig+0x766>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e000      	b.n	80084d6 <UART_SetConfig+0x766>
 80084d4:	2301      	movs	r3, #1
 80084d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084dc:	e1c5      	b.n	800886a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084de:	f107 030c 	add.w	r3, r7, #12
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fa32 	bl	800694c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d044      	beq.n	800857c <UART_SetConfig+0x80c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d03e      	beq.n	8008578 <UART_SetConfig+0x808>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d038      	beq.n	8008574 <UART_SetConfig+0x804>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b03      	cmp	r3, #3
 8008508:	d032      	beq.n	8008570 <UART_SetConfig+0x800>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b04      	cmp	r3, #4
 8008510:	d02c      	beq.n	800856c <UART_SetConfig+0x7fc>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b05      	cmp	r3, #5
 8008518:	d026      	beq.n	8008568 <UART_SetConfig+0x7f8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b06      	cmp	r3, #6
 8008520:	d020      	beq.n	8008564 <UART_SetConfig+0x7f4>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2b07      	cmp	r3, #7
 8008528:	d01a      	beq.n	8008560 <UART_SetConfig+0x7f0>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b08      	cmp	r3, #8
 8008530:	d014      	beq.n	800855c <UART_SetConfig+0x7ec>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b09      	cmp	r3, #9
 8008538:	d00e      	beq.n	8008558 <UART_SetConfig+0x7e8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b0a      	cmp	r3, #10
 8008540:	d008      	beq.n	8008554 <UART_SetConfig+0x7e4>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b0b      	cmp	r3, #11
 8008548:	d102      	bne.n	8008550 <UART_SetConfig+0x7e0>
 800854a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800854e:	e016      	b.n	800857e <UART_SetConfig+0x80e>
 8008550:	2301      	movs	r3, #1
 8008552:	e014      	b.n	800857e <UART_SetConfig+0x80e>
 8008554:	2380      	movs	r3, #128	; 0x80
 8008556:	e012      	b.n	800857e <UART_SetConfig+0x80e>
 8008558:	2340      	movs	r3, #64	; 0x40
 800855a:	e010      	b.n	800857e <UART_SetConfig+0x80e>
 800855c:	2320      	movs	r3, #32
 800855e:	e00e      	b.n	800857e <UART_SetConfig+0x80e>
 8008560:	2310      	movs	r3, #16
 8008562:	e00c      	b.n	800857e <UART_SetConfig+0x80e>
 8008564:	230c      	movs	r3, #12
 8008566:	e00a      	b.n	800857e <UART_SetConfig+0x80e>
 8008568:	230a      	movs	r3, #10
 800856a:	e008      	b.n	800857e <UART_SetConfig+0x80e>
 800856c:	2308      	movs	r3, #8
 800856e:	e006      	b.n	800857e <UART_SetConfig+0x80e>
 8008570:	2306      	movs	r3, #6
 8008572:	e004      	b.n	800857e <UART_SetConfig+0x80e>
 8008574:	2304      	movs	r3, #4
 8008576:	e002      	b.n	800857e <UART_SetConfig+0x80e>
 8008578:	2302      	movs	r3, #2
 800857a:	e000      	b.n	800857e <UART_SetConfig+0x80e>
 800857c:	2301      	movs	r3, #1
 800857e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008584:	e171      	b.n	800886a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008586:	4b7a      	ldr	r3, [pc, #488]	; (8008770 <UART_SetConfig+0xa00>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	d054      	beq.n	800863c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008592:	4b77      	ldr	r3, [pc, #476]	; (8008770 <UART_SetConfig+0xa00>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	08db      	lsrs	r3, r3, #3
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	4a75      	ldr	r2, [pc, #468]	; (8008774 <UART_SetConfig+0xa04>)
 800859e:	40da      	lsrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d044      	beq.n	8008632 <UART_SetConfig+0x8c2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d03e      	beq.n	800862e <UART_SetConfig+0x8be>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d038      	beq.n	800862a <UART_SetConfig+0x8ba>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d032      	beq.n	8008626 <UART_SetConfig+0x8b6>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d02c      	beq.n	8008622 <UART_SetConfig+0x8b2>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	2b05      	cmp	r3, #5
 80085ce:	d026      	beq.n	800861e <UART_SetConfig+0x8ae>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	2b06      	cmp	r3, #6
 80085d6:	d020      	beq.n	800861a <UART_SetConfig+0x8aa>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b07      	cmp	r3, #7
 80085de:	d01a      	beq.n	8008616 <UART_SetConfig+0x8a6>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d014      	beq.n	8008612 <UART_SetConfig+0x8a2>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b09      	cmp	r3, #9
 80085ee:	d00e      	beq.n	800860e <UART_SetConfig+0x89e>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b0a      	cmp	r3, #10
 80085f6:	d008      	beq.n	800860a <UART_SetConfig+0x89a>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b0b      	cmp	r3, #11
 80085fe:	d102      	bne.n	8008606 <UART_SetConfig+0x896>
 8008600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008604:	e016      	b.n	8008634 <UART_SetConfig+0x8c4>
 8008606:	2301      	movs	r3, #1
 8008608:	e014      	b.n	8008634 <UART_SetConfig+0x8c4>
 800860a:	2380      	movs	r3, #128	; 0x80
 800860c:	e012      	b.n	8008634 <UART_SetConfig+0x8c4>
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	e010      	b.n	8008634 <UART_SetConfig+0x8c4>
 8008612:	2320      	movs	r3, #32
 8008614:	e00e      	b.n	8008634 <UART_SetConfig+0x8c4>
 8008616:	2310      	movs	r3, #16
 8008618:	e00c      	b.n	8008634 <UART_SetConfig+0x8c4>
 800861a:	230c      	movs	r3, #12
 800861c:	e00a      	b.n	8008634 <UART_SetConfig+0x8c4>
 800861e:	230a      	movs	r3, #10
 8008620:	e008      	b.n	8008634 <UART_SetConfig+0x8c4>
 8008622:	2308      	movs	r3, #8
 8008624:	e006      	b.n	8008634 <UART_SetConfig+0x8c4>
 8008626:	2306      	movs	r3, #6
 8008628:	e004      	b.n	8008634 <UART_SetConfig+0x8c4>
 800862a:	2304      	movs	r3, #4
 800862c:	e002      	b.n	8008634 <UART_SetConfig+0x8c4>
 800862e:	2302      	movs	r3, #2
 8008630:	e000      	b.n	8008634 <UART_SetConfig+0x8c4>
 8008632:	2301      	movs	r3, #1
 8008634:	fbb2 f3f3 	udiv	r3, r2, r3
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800863a:	e116      	b.n	800886a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b00      	cmp	r3, #0
 8008642:	d043      	beq.n	80086cc <UART_SetConfig+0x95c>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	2b01      	cmp	r3, #1
 800864a:	d03d      	beq.n	80086c8 <UART_SetConfig+0x958>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2b02      	cmp	r3, #2
 8008652:	d037      	beq.n	80086c4 <UART_SetConfig+0x954>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b03      	cmp	r3, #3
 800865a:	d031      	beq.n	80086c0 <UART_SetConfig+0x950>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	2b04      	cmp	r3, #4
 8008662:	d02b      	beq.n	80086bc <UART_SetConfig+0x94c>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	2b05      	cmp	r3, #5
 800866a:	d025      	beq.n	80086b8 <UART_SetConfig+0x948>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b06      	cmp	r3, #6
 8008672:	d01f      	beq.n	80086b4 <UART_SetConfig+0x944>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b07      	cmp	r3, #7
 800867a:	d019      	beq.n	80086b0 <UART_SetConfig+0x940>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b08      	cmp	r3, #8
 8008682:	d013      	beq.n	80086ac <UART_SetConfig+0x93c>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	2b09      	cmp	r3, #9
 800868a:	d00d      	beq.n	80086a8 <UART_SetConfig+0x938>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	2b0a      	cmp	r3, #10
 8008692:	d007      	beq.n	80086a4 <UART_SetConfig+0x934>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	2b0b      	cmp	r3, #11
 800869a:	d101      	bne.n	80086a0 <UART_SetConfig+0x930>
 800869c:	4b36      	ldr	r3, [pc, #216]	; (8008778 <UART_SetConfig+0xa08>)
 800869e:	e016      	b.n	80086ce <UART_SetConfig+0x95e>
 80086a0:	4b34      	ldr	r3, [pc, #208]	; (8008774 <UART_SetConfig+0xa04>)
 80086a2:	e014      	b.n	80086ce <UART_SetConfig+0x95e>
 80086a4:	4b35      	ldr	r3, [pc, #212]	; (800877c <UART_SetConfig+0xa0c>)
 80086a6:	e012      	b.n	80086ce <UART_SetConfig+0x95e>
 80086a8:	4b35      	ldr	r3, [pc, #212]	; (8008780 <UART_SetConfig+0xa10>)
 80086aa:	e010      	b.n	80086ce <UART_SetConfig+0x95e>
 80086ac:	4b35      	ldr	r3, [pc, #212]	; (8008784 <UART_SetConfig+0xa14>)
 80086ae:	e00e      	b.n	80086ce <UART_SetConfig+0x95e>
 80086b0:	4b35      	ldr	r3, [pc, #212]	; (8008788 <UART_SetConfig+0xa18>)
 80086b2:	e00c      	b.n	80086ce <UART_SetConfig+0x95e>
 80086b4:	4b35      	ldr	r3, [pc, #212]	; (800878c <UART_SetConfig+0xa1c>)
 80086b6:	e00a      	b.n	80086ce <UART_SetConfig+0x95e>
 80086b8:	4b35      	ldr	r3, [pc, #212]	; (8008790 <UART_SetConfig+0xa20>)
 80086ba:	e008      	b.n	80086ce <UART_SetConfig+0x95e>
 80086bc:	4b35      	ldr	r3, [pc, #212]	; (8008794 <UART_SetConfig+0xa24>)
 80086be:	e006      	b.n	80086ce <UART_SetConfig+0x95e>
 80086c0:	4b35      	ldr	r3, [pc, #212]	; (8008798 <UART_SetConfig+0xa28>)
 80086c2:	e004      	b.n	80086ce <UART_SetConfig+0x95e>
 80086c4:	4b35      	ldr	r3, [pc, #212]	; (800879c <UART_SetConfig+0xa2c>)
 80086c6:	e002      	b.n	80086ce <UART_SetConfig+0x95e>
 80086c8:	4b35      	ldr	r3, [pc, #212]	; (80087a0 <UART_SetConfig+0xa30>)
 80086ca:	e000      	b.n	80086ce <UART_SetConfig+0x95e>
 80086cc:	4b29      	ldr	r3, [pc, #164]	; (8008774 <UART_SetConfig+0xa04>)
 80086ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086d0:	e0cb      	b.n	800886a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d046      	beq.n	8008768 <UART_SetConfig+0x9f8>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d040      	beq.n	8008764 <UART_SetConfig+0x9f4>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d03a      	beq.n	8008760 <UART_SetConfig+0x9f0>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d034      	beq.n	800875c <UART_SetConfig+0x9ec>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d02e      	beq.n	8008758 <UART_SetConfig+0x9e8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d028      	beq.n	8008754 <UART_SetConfig+0x9e4>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b06      	cmp	r3, #6
 8008708:	d022      	beq.n	8008750 <UART_SetConfig+0x9e0>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	2b07      	cmp	r3, #7
 8008710:	d01c      	beq.n	800874c <UART_SetConfig+0x9dc>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	2b08      	cmp	r3, #8
 8008718:	d016      	beq.n	8008748 <UART_SetConfig+0x9d8>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	2b09      	cmp	r3, #9
 8008720:	d00f      	beq.n	8008742 <UART_SetConfig+0x9d2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	2b0a      	cmp	r3, #10
 8008728:	d008      	beq.n	800873c <UART_SetConfig+0x9cc>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	2b0b      	cmp	r3, #11
 8008730:	d102      	bne.n	8008738 <UART_SetConfig+0x9c8>
 8008732:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008736:	e018      	b.n	800876a <UART_SetConfig+0x9fa>
 8008738:	4b13      	ldr	r3, [pc, #76]	; (8008788 <UART_SetConfig+0xa18>)
 800873a:	e016      	b.n	800876a <UART_SetConfig+0x9fa>
 800873c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008740:	e013      	b.n	800876a <UART_SetConfig+0x9fa>
 8008742:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008746:	e010      	b.n	800876a <UART_SetConfig+0x9fa>
 8008748:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <UART_SetConfig+0xa34>)
 800874a:	e00e      	b.n	800876a <UART_SetConfig+0x9fa>
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <UART_SetConfig+0xa08>)
 800874e:	e00c      	b.n	800876a <UART_SetConfig+0x9fa>
 8008750:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <UART_SetConfig+0xa38>)
 8008752:	e00a      	b.n	800876a <UART_SetConfig+0x9fa>
 8008754:	4b15      	ldr	r3, [pc, #84]	; (80087ac <UART_SetConfig+0xa3c>)
 8008756:	e008      	b.n	800876a <UART_SetConfig+0x9fa>
 8008758:	4b08      	ldr	r3, [pc, #32]	; (800877c <UART_SetConfig+0xa0c>)
 800875a:	e006      	b.n	800876a <UART_SetConfig+0x9fa>
 800875c:	4b14      	ldr	r3, [pc, #80]	; (80087b0 <UART_SetConfig+0xa40>)
 800875e:	e004      	b.n	800876a <UART_SetConfig+0x9fa>
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <UART_SetConfig+0xa10>)
 8008762:	e002      	b.n	800876a <UART_SetConfig+0x9fa>
 8008764:	4b07      	ldr	r3, [pc, #28]	; (8008784 <UART_SetConfig+0xa14>)
 8008766:	e000      	b.n	800876a <UART_SetConfig+0x9fa>
 8008768:	4b07      	ldr	r3, [pc, #28]	; (8008788 <UART_SetConfig+0xa18>)
 800876a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800876c:	e07d      	b.n	800886a <UART_SetConfig+0xafa>
 800876e:	bf00      	nop
 8008770:	58024400 	.word	0x58024400
 8008774:	03d09000 	.word	0x03d09000
 8008778:	0003d090 	.word	0x0003d090
 800877c:	0007a120 	.word	0x0007a120
 8008780:	000f4240 	.word	0x000f4240
 8008784:	001e8480 	.word	0x001e8480
 8008788:	003d0900 	.word	0x003d0900
 800878c:	00516155 	.word	0x00516155
 8008790:	0061a800 	.word	0x0061a800
 8008794:	007a1200 	.word	0x007a1200
 8008798:	00a2c2aa 	.word	0x00a2c2aa
 800879c:	00f42400 	.word	0x00f42400
 80087a0:	01e84800 	.word	0x01e84800
 80087a4:	0001e848 	.word	0x0001e848
 80087a8:	00051615 	.word	0x00051615
 80087ac:	00061a80 	.word	0x00061a80
 80087b0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d04e      	beq.n	800885a <UART_SetConfig+0xaea>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d047      	beq.n	8008854 <UART_SetConfig+0xae4>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d040      	beq.n	800884e <UART_SetConfig+0xade>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d039      	beq.n	8008848 <UART_SetConfig+0xad8>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d032      	beq.n	8008842 <UART_SetConfig+0xad2>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b05      	cmp	r3, #5
 80087e2:	d02b      	beq.n	800883c <UART_SetConfig+0xacc>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	2b06      	cmp	r3, #6
 80087ea:	d024      	beq.n	8008836 <UART_SetConfig+0xac6>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	2b07      	cmp	r3, #7
 80087f2:	d01d      	beq.n	8008830 <UART_SetConfig+0xac0>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d016      	beq.n	800882a <UART_SetConfig+0xaba>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2b09      	cmp	r3, #9
 8008802:	d00f      	beq.n	8008824 <UART_SetConfig+0xab4>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2b0a      	cmp	r3, #10
 800880a:	d008      	beq.n	800881e <UART_SetConfig+0xaae>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	2b0b      	cmp	r3, #11
 8008812:	d101      	bne.n	8008818 <UART_SetConfig+0xaa8>
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	e022      	b.n	800885e <UART_SetConfig+0xaee>
 8008818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800881c:	e01f      	b.n	800885e <UART_SetConfig+0xaee>
 800881e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008822:	e01c      	b.n	800885e <UART_SetConfig+0xaee>
 8008824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008828:	e019      	b.n	800885e <UART_SetConfig+0xaee>
 800882a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800882e:	e016      	b.n	800885e <UART_SetConfig+0xaee>
 8008830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008834:	e013      	b.n	800885e <UART_SetConfig+0xaee>
 8008836:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800883a:	e010      	b.n	800885e <UART_SetConfig+0xaee>
 800883c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008840:	e00d      	b.n	800885e <UART_SetConfig+0xaee>
 8008842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008846:	e00a      	b.n	800885e <UART_SetConfig+0xaee>
 8008848:	f241 5355 	movw	r3, #5461	; 0x1555
 800884c:	e007      	b.n	800885e <UART_SetConfig+0xaee>
 800884e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008852:	e004      	b.n	800885e <UART_SetConfig+0xaee>
 8008854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008858:	e001      	b.n	800885e <UART_SetConfig+0xaee>
 800885a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008860:	e003      	b.n	800886a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008868:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	2b00      	cmp	r3, #0
 800886e:	f001 83e8 	beq.w	800a042 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	4413      	add	r3, r2
 800887c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800887e:	429a      	cmp	r2, r3
 8008880:	d305      	bcc.n	800888e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800888a:	429a      	cmp	r2, r3
 800888c:	d904      	bls.n	8008898 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008894:	f001 bbd5 	b.w	800a042 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8008898:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800889c:	2b08      	cmp	r3, #8
 800889e:	f000 8154 	beq.w	8008b4a <UART_SetConfig+0xdda>
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	dc06      	bgt.n	80088b4 <UART_SetConfig+0xb44>
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d00f      	beq.n	80088ca <UART_SetConfig+0xb5a>
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	f000 80ac 	beq.w	8008a08 <UART_SetConfig+0xc98>
 80088b0:	f000 bc30 	b.w	8009114 <UART_SetConfig+0x13a4>
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	f000 832d 	beq.w	8008f14 <UART_SetConfig+0x11a4>
 80088ba:	2b40      	cmp	r3, #64	; 0x40
 80088bc:	f000 83a5 	beq.w	800900a <UART_SetConfig+0x129a>
 80088c0:	2b10      	cmp	r3, #16
 80088c2:	f000 81e3 	beq.w	8008c8c <UART_SetConfig+0xf1c>
 80088c6:	f000 bc25 	b.w	8009114 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088ca:	f7fd fedd 	bl	8006688 <HAL_RCCEx_GetD3PCLK1Freq>
 80088ce:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	4618      	mov	r0, r3
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d067      	beq.n	80089b0 <UART_SetConfig+0xc40>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d05e      	beq.n	80089a6 <UART_SetConfig+0xc36>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d055      	beq.n	800899c <UART_SetConfig+0xc2c>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d04c      	beq.n	8008992 <UART_SetConfig+0xc22>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d043      	beq.n	8008988 <UART_SetConfig+0xc18>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b05      	cmp	r3, #5
 8008906:	d03a      	beq.n	800897e <UART_SetConfig+0xc0e>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b06      	cmp	r3, #6
 800890e:	d031      	beq.n	8008974 <UART_SetConfig+0xc04>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b07      	cmp	r3, #7
 8008916:	d028      	beq.n	800896a <UART_SetConfig+0xbfa>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b08      	cmp	r3, #8
 800891e:	d01f      	beq.n	8008960 <UART_SetConfig+0xbf0>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b09      	cmp	r3, #9
 8008926:	d016      	beq.n	8008956 <UART_SetConfig+0xbe6>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b0a      	cmp	r3, #10
 800892e:	d00d      	beq.n	800894c <UART_SetConfig+0xbdc>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b0b      	cmp	r3, #11
 8008936:	d104      	bne.n	8008942 <UART_SetConfig+0xbd2>
 8008938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800893c:	f04f 0400 	mov.w	r4, #0
 8008940:	e03a      	b.n	80089b8 <UART_SetConfig+0xc48>
 8008942:	f04f 0301 	mov.w	r3, #1
 8008946:	f04f 0400 	mov.w	r4, #0
 800894a:	e035      	b.n	80089b8 <UART_SetConfig+0xc48>
 800894c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008950:	f04f 0400 	mov.w	r4, #0
 8008954:	e030      	b.n	80089b8 <UART_SetConfig+0xc48>
 8008956:	f04f 0340 	mov.w	r3, #64	; 0x40
 800895a:	f04f 0400 	mov.w	r4, #0
 800895e:	e02b      	b.n	80089b8 <UART_SetConfig+0xc48>
 8008960:	f04f 0320 	mov.w	r3, #32
 8008964:	f04f 0400 	mov.w	r4, #0
 8008968:	e026      	b.n	80089b8 <UART_SetConfig+0xc48>
 800896a:	f04f 0310 	mov.w	r3, #16
 800896e:	f04f 0400 	mov.w	r4, #0
 8008972:	e021      	b.n	80089b8 <UART_SetConfig+0xc48>
 8008974:	f04f 030c 	mov.w	r3, #12
 8008978:	f04f 0400 	mov.w	r4, #0
 800897c:	e01c      	b.n	80089b8 <UART_SetConfig+0xc48>
 800897e:	f04f 030a 	mov.w	r3, #10
 8008982:	f04f 0400 	mov.w	r4, #0
 8008986:	e017      	b.n	80089b8 <UART_SetConfig+0xc48>
 8008988:	f04f 0308 	mov.w	r3, #8
 800898c:	f04f 0400 	mov.w	r4, #0
 8008990:	e012      	b.n	80089b8 <UART_SetConfig+0xc48>
 8008992:	f04f 0306 	mov.w	r3, #6
 8008996:	f04f 0400 	mov.w	r4, #0
 800899a:	e00d      	b.n	80089b8 <UART_SetConfig+0xc48>
 800899c:	f04f 0304 	mov.w	r3, #4
 80089a0:	f04f 0400 	mov.w	r4, #0
 80089a4:	e008      	b.n	80089b8 <UART_SetConfig+0xc48>
 80089a6:	f04f 0302 	mov.w	r3, #2
 80089aa:	f04f 0400 	mov.w	r4, #0
 80089ae:	e003      	b.n	80089b8 <UART_SetConfig+0xc48>
 80089b0:	f04f 0301 	mov.w	r3, #1
 80089b4:	f04f 0400 	mov.w	r4, #0
 80089b8:	461a      	mov	r2, r3
 80089ba:	4623      	mov	r3, r4
 80089bc:	f7f7 fc94 	bl	80002e8 <__aeabi_uldivmod>
 80089c0:	4603      	mov	r3, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	4619      	mov	r1, r3
 80089c6:	4622      	mov	r2, r4
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	f04f 0400 	mov.w	r4, #0
 80089d0:	0214      	lsls	r4, r2, #8
 80089d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80089d6:	020b      	lsls	r3, r1, #8
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6852      	ldr	r2, [r2, #4]
 80089dc:	0852      	lsrs	r2, r2, #1
 80089de:	4611      	mov	r1, r2
 80089e0:	f04f 0200 	mov.w	r2, #0
 80089e4:	eb13 0b01 	adds.w	fp, r3, r1
 80089e8:	eb44 0c02 	adc.w	ip, r4, r2
 80089ec:	4658      	mov	r0, fp
 80089ee:	4661      	mov	r1, ip
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f04f 0400 	mov.w	r4, #0
 80089f8:	461a      	mov	r2, r3
 80089fa:	4623      	mov	r3, r4
 80089fc:	f7f7 fc74 	bl	80002e8 <__aeabi_uldivmod>
 8008a00:	4603      	mov	r3, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a06:	e389      	b.n	800911c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a08:	f107 0318 	add.w	r3, r7, #24
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fd fe51 	bl	80066b4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f04f 0100 	mov.w	r1, #0
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d067      	beq.n	8008af2 <UART_SetConfig+0xd82>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d05e      	beq.n	8008ae8 <UART_SetConfig+0xd78>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d055      	beq.n	8008ade <UART_SetConfig+0xd6e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d04c      	beq.n	8008ad4 <UART_SetConfig+0xd64>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d043      	beq.n	8008aca <UART_SetConfig+0xd5a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b05      	cmp	r3, #5
 8008a48:	d03a      	beq.n	8008ac0 <UART_SetConfig+0xd50>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b06      	cmp	r3, #6
 8008a50:	d031      	beq.n	8008ab6 <UART_SetConfig+0xd46>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	d028      	beq.n	8008aac <UART_SetConfig+0xd3c>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b08      	cmp	r3, #8
 8008a60:	d01f      	beq.n	8008aa2 <UART_SetConfig+0xd32>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b09      	cmp	r3, #9
 8008a68:	d016      	beq.n	8008a98 <UART_SetConfig+0xd28>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	2b0a      	cmp	r3, #10
 8008a70:	d00d      	beq.n	8008a8e <UART_SetConfig+0xd1e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	2b0b      	cmp	r3, #11
 8008a78:	d104      	bne.n	8008a84 <UART_SetConfig+0xd14>
 8008a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a7e:	f04f 0400 	mov.w	r4, #0
 8008a82:	e03a      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008a84:	f04f 0301 	mov.w	r3, #1
 8008a88:	f04f 0400 	mov.w	r4, #0
 8008a8c:	e035      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008a8e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008a92:	f04f 0400 	mov.w	r4, #0
 8008a96:	e030      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008a98:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008a9c:	f04f 0400 	mov.w	r4, #0
 8008aa0:	e02b      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008aa2:	f04f 0320 	mov.w	r3, #32
 8008aa6:	f04f 0400 	mov.w	r4, #0
 8008aaa:	e026      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008aac:	f04f 0310 	mov.w	r3, #16
 8008ab0:	f04f 0400 	mov.w	r4, #0
 8008ab4:	e021      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008ab6:	f04f 030c 	mov.w	r3, #12
 8008aba:	f04f 0400 	mov.w	r4, #0
 8008abe:	e01c      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008ac0:	f04f 030a 	mov.w	r3, #10
 8008ac4:	f04f 0400 	mov.w	r4, #0
 8008ac8:	e017      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008aca:	f04f 0308 	mov.w	r3, #8
 8008ace:	f04f 0400 	mov.w	r4, #0
 8008ad2:	e012      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008ad4:	f04f 0306 	mov.w	r3, #6
 8008ad8:	f04f 0400 	mov.w	r4, #0
 8008adc:	e00d      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008ade:	f04f 0304 	mov.w	r3, #4
 8008ae2:	f04f 0400 	mov.w	r4, #0
 8008ae6:	e008      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008ae8:	f04f 0302 	mov.w	r3, #2
 8008aec:	f04f 0400 	mov.w	r4, #0
 8008af0:	e003      	b.n	8008afa <UART_SetConfig+0xd8a>
 8008af2:	f04f 0301 	mov.w	r3, #1
 8008af6:	f04f 0400 	mov.w	r4, #0
 8008afa:	461a      	mov	r2, r3
 8008afc:	4623      	mov	r3, r4
 8008afe:	f7f7 fbf3 	bl	80002e8 <__aeabi_uldivmod>
 8008b02:	4603      	mov	r3, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	4619      	mov	r1, r3
 8008b08:	4622      	mov	r2, r4
 8008b0a:	f04f 0300 	mov.w	r3, #0
 8008b0e:	f04f 0400 	mov.w	r4, #0
 8008b12:	0214      	lsls	r4, r2, #8
 8008b14:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008b18:	020b      	lsls	r3, r1, #8
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6852      	ldr	r2, [r2, #4]
 8008b1e:	0852      	lsrs	r2, r2, #1
 8008b20:	4611      	mov	r1, r2
 8008b22:	f04f 0200 	mov.w	r2, #0
 8008b26:	eb13 0b01 	adds.w	fp, r3, r1
 8008b2a:	eb44 0c02 	adc.w	ip, r4, r2
 8008b2e:	4658      	mov	r0, fp
 8008b30:	4661      	mov	r1, ip
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f04f 0400 	mov.w	r4, #0
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	f7f7 fbd3 	bl	80002e8 <__aeabi_uldivmod>
 8008b42:	4603      	mov	r3, r0
 8008b44:	460c      	mov	r4, r1
 8008b46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b48:	e2e8      	b.n	800911c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b4a:	f107 030c 	add.w	r3, r7, #12
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fd fefc 	bl	800694c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f04f 0100 	mov.w	r1, #0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d067      	beq.n	8008c34 <UART_SetConfig+0xec4>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d05e      	beq.n	8008c2a <UART_SetConfig+0xeba>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d055      	beq.n	8008c20 <UART_SetConfig+0xeb0>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d04c      	beq.n	8008c16 <UART_SetConfig+0xea6>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d043      	beq.n	8008c0c <UART_SetConfig+0xe9c>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b05      	cmp	r3, #5
 8008b8a:	d03a      	beq.n	8008c02 <UART_SetConfig+0xe92>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b06      	cmp	r3, #6
 8008b92:	d031      	beq.n	8008bf8 <UART_SetConfig+0xe88>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b07      	cmp	r3, #7
 8008b9a:	d028      	beq.n	8008bee <UART_SetConfig+0xe7e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d01f      	beq.n	8008be4 <UART_SetConfig+0xe74>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b09      	cmp	r3, #9
 8008baa:	d016      	beq.n	8008bda <UART_SetConfig+0xe6a>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b0a      	cmp	r3, #10
 8008bb2:	d00d      	beq.n	8008bd0 <UART_SetConfig+0xe60>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b0b      	cmp	r3, #11
 8008bba:	d104      	bne.n	8008bc6 <UART_SetConfig+0xe56>
 8008bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bc0:	f04f 0400 	mov.w	r4, #0
 8008bc4:	e03a      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008bc6:	f04f 0301 	mov.w	r3, #1
 8008bca:	f04f 0400 	mov.w	r4, #0
 8008bce:	e035      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008bd0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008bd4:	f04f 0400 	mov.w	r4, #0
 8008bd8:	e030      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008bda:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008bde:	f04f 0400 	mov.w	r4, #0
 8008be2:	e02b      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008be4:	f04f 0320 	mov.w	r3, #32
 8008be8:	f04f 0400 	mov.w	r4, #0
 8008bec:	e026      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008bee:	f04f 0310 	mov.w	r3, #16
 8008bf2:	f04f 0400 	mov.w	r4, #0
 8008bf6:	e021      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008bf8:	f04f 030c 	mov.w	r3, #12
 8008bfc:	f04f 0400 	mov.w	r4, #0
 8008c00:	e01c      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008c02:	f04f 030a 	mov.w	r3, #10
 8008c06:	f04f 0400 	mov.w	r4, #0
 8008c0a:	e017      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008c0c:	f04f 0308 	mov.w	r3, #8
 8008c10:	f04f 0400 	mov.w	r4, #0
 8008c14:	e012      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008c16:	f04f 0306 	mov.w	r3, #6
 8008c1a:	f04f 0400 	mov.w	r4, #0
 8008c1e:	e00d      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008c20:	f04f 0304 	mov.w	r3, #4
 8008c24:	f04f 0400 	mov.w	r4, #0
 8008c28:	e008      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008c2a:	f04f 0302 	mov.w	r3, #2
 8008c2e:	f04f 0400 	mov.w	r4, #0
 8008c32:	e003      	b.n	8008c3c <UART_SetConfig+0xecc>
 8008c34:	f04f 0301 	mov.w	r3, #1
 8008c38:	f04f 0400 	mov.w	r4, #0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4623      	mov	r3, r4
 8008c40:	f7f7 fb52 	bl	80002e8 <__aeabi_uldivmod>
 8008c44:	4603      	mov	r3, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	f04f 0400 	mov.w	r4, #0
 8008c54:	0214      	lsls	r4, r2, #8
 8008c56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008c5a:	020b      	lsls	r3, r1, #8
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6852      	ldr	r2, [r2, #4]
 8008c60:	0852      	lsrs	r2, r2, #1
 8008c62:	4611      	mov	r1, r2
 8008c64:	f04f 0200 	mov.w	r2, #0
 8008c68:	eb13 0b01 	adds.w	fp, r3, r1
 8008c6c:	eb44 0c02 	adc.w	ip, r4, r2
 8008c70:	4658      	mov	r0, fp
 8008c72:	4661      	mov	r1, ip
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f04f 0400 	mov.w	r4, #0
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4623      	mov	r3, r4
 8008c80:	f7f7 fb32 	bl	80002e8 <__aeabi_uldivmod>
 8008c84:	4603      	mov	r3, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c8a:	e247      	b.n	800911c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c8c:	4b96      	ldr	r3, [pc, #600]	; (8008ee8 <UART_SetConfig+0x1178>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0320 	and.w	r3, r3, #32
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 80a3 	beq.w	8008de0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9a:	4b93      	ldr	r3, [pc, #588]	; (8008ee8 <UART_SetConfig+0x1178>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	08db      	lsrs	r3, r3, #3
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	4a91      	ldr	r2, [pc, #580]	; (8008eec <UART_SetConfig+0x117c>)
 8008ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8008caa:	4618      	mov	r0, r3
 8008cac:	f04f 0100 	mov.w	r1, #0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d067      	beq.n	8008d88 <UART_SetConfig+0x1018>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d05e      	beq.n	8008d7e <UART_SetConfig+0x100e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d055      	beq.n	8008d74 <UART_SetConfig+0x1004>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d04c      	beq.n	8008d6a <UART_SetConfig+0xffa>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d043      	beq.n	8008d60 <UART_SetConfig+0xff0>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	2b05      	cmp	r3, #5
 8008cde:	d03a      	beq.n	8008d56 <UART_SetConfig+0xfe6>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b06      	cmp	r3, #6
 8008ce6:	d031      	beq.n	8008d4c <UART_SetConfig+0xfdc>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2b07      	cmp	r3, #7
 8008cee:	d028      	beq.n	8008d42 <UART_SetConfig+0xfd2>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d01f      	beq.n	8008d38 <UART_SetConfig+0xfc8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	2b09      	cmp	r3, #9
 8008cfe:	d016      	beq.n	8008d2e <UART_SetConfig+0xfbe>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	2b0a      	cmp	r3, #10
 8008d06:	d00d      	beq.n	8008d24 <UART_SetConfig+0xfb4>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	2b0b      	cmp	r3, #11
 8008d0e:	d104      	bne.n	8008d1a <UART_SetConfig+0xfaa>
 8008d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d14:	f04f 0400 	mov.w	r4, #0
 8008d18:	e03a      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d1a:	f04f 0301 	mov.w	r3, #1
 8008d1e:	f04f 0400 	mov.w	r4, #0
 8008d22:	e035      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d24:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d28:	f04f 0400 	mov.w	r4, #0
 8008d2c:	e030      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008d32:	f04f 0400 	mov.w	r4, #0
 8008d36:	e02b      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d38:	f04f 0320 	mov.w	r3, #32
 8008d3c:	f04f 0400 	mov.w	r4, #0
 8008d40:	e026      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d42:	f04f 0310 	mov.w	r3, #16
 8008d46:	f04f 0400 	mov.w	r4, #0
 8008d4a:	e021      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d4c:	f04f 030c 	mov.w	r3, #12
 8008d50:	f04f 0400 	mov.w	r4, #0
 8008d54:	e01c      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d56:	f04f 030a 	mov.w	r3, #10
 8008d5a:	f04f 0400 	mov.w	r4, #0
 8008d5e:	e017      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d60:	f04f 0308 	mov.w	r3, #8
 8008d64:	f04f 0400 	mov.w	r4, #0
 8008d68:	e012      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d6a:	f04f 0306 	mov.w	r3, #6
 8008d6e:	f04f 0400 	mov.w	r4, #0
 8008d72:	e00d      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d74:	f04f 0304 	mov.w	r3, #4
 8008d78:	f04f 0400 	mov.w	r4, #0
 8008d7c:	e008      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d7e:	f04f 0302 	mov.w	r3, #2
 8008d82:	f04f 0400 	mov.w	r4, #0
 8008d86:	e003      	b.n	8008d90 <UART_SetConfig+0x1020>
 8008d88:	f04f 0301 	mov.w	r3, #1
 8008d8c:	f04f 0400 	mov.w	r4, #0
 8008d90:	461a      	mov	r2, r3
 8008d92:	4623      	mov	r3, r4
 8008d94:	f7f7 faa8 	bl	80002e8 <__aeabi_uldivmod>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4622      	mov	r2, r4
 8008da0:	f04f 0300 	mov.w	r3, #0
 8008da4:	f04f 0400 	mov.w	r4, #0
 8008da8:	0214      	lsls	r4, r2, #8
 8008daa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008dae:	020b      	lsls	r3, r1, #8
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6852      	ldr	r2, [r2, #4]
 8008db4:	0852      	lsrs	r2, r2, #1
 8008db6:	4611      	mov	r1, r2
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	eb13 0b01 	adds.w	fp, r3, r1
 8008dc0:	eb44 0c02 	adc.w	ip, r4, r2
 8008dc4:	4658      	mov	r0, fp
 8008dc6:	4661      	mov	r1, ip
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f04f 0400 	mov.w	r4, #0
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	f7f7 fa88 	bl	80002e8 <__aeabi_uldivmod>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8008dde:	e19d      	b.n	800911c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d05b      	beq.n	8008ea0 <UART_SetConfig+0x1130>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d053      	beq.n	8008e98 <UART_SetConfig+0x1128>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d04b      	beq.n	8008e90 <UART_SetConfig+0x1120>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d043      	beq.n	8008e88 <UART_SetConfig+0x1118>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d03b      	beq.n	8008e80 <UART_SetConfig+0x1110>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b05      	cmp	r3, #5
 8008e0e:	d033      	beq.n	8008e78 <UART_SetConfig+0x1108>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b06      	cmp	r3, #6
 8008e16:	d02b      	beq.n	8008e70 <UART_SetConfig+0x1100>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b07      	cmp	r3, #7
 8008e1e:	d023      	beq.n	8008e68 <UART_SetConfig+0x10f8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d01b      	beq.n	8008e60 <UART_SetConfig+0x10f0>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b09      	cmp	r3, #9
 8008e2e:	d013      	beq.n	8008e58 <UART_SetConfig+0x10e8>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b0a      	cmp	r3, #10
 8008e36:	d00b      	beq.n	8008e50 <UART_SetConfig+0x10e0>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b0b      	cmp	r3, #11
 8008e3e:	d103      	bne.n	8008e48 <UART_SetConfig+0x10d8>
 8008e40:	4b2a      	ldr	r3, [pc, #168]	; (8008eec <UART_SetConfig+0x117c>)
 8008e42:	f04f 0400 	mov.w	r4, #0
 8008e46:	e02e      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e48:	4b29      	ldr	r3, [pc, #164]	; (8008ef0 <UART_SetConfig+0x1180>)
 8008e4a:	f04f 0403 	mov.w	r4, #3
 8008e4e:	e02a      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e50:	4b28      	ldr	r3, [pc, #160]	; (8008ef4 <UART_SetConfig+0x1184>)
 8008e52:	f04f 0400 	mov.w	r4, #0
 8008e56:	e026      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e58:	4b27      	ldr	r3, [pc, #156]	; (8008ef8 <UART_SetConfig+0x1188>)
 8008e5a:	f04f 0400 	mov.w	r4, #0
 8008e5e:	e022      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e60:	4b26      	ldr	r3, [pc, #152]	; (8008efc <UART_SetConfig+0x118c>)
 8008e62:	f04f 0400 	mov.w	r4, #0
 8008e66:	e01e      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e68:	4b25      	ldr	r3, [pc, #148]	; (8008f00 <UART_SetConfig+0x1190>)
 8008e6a:	f04f 0400 	mov.w	r4, #0
 8008e6e:	e01a      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e70:	a419      	add	r4, pc, #100	; (adr r4, 8008ed8 <UART_SetConfig+0x1168>)
 8008e72:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008e76:	e016      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e78:	4b22      	ldr	r3, [pc, #136]	; (8008f04 <UART_SetConfig+0x1194>)
 8008e7a:	f04f 0400 	mov.w	r4, #0
 8008e7e:	e012      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e80:	4b21      	ldr	r3, [pc, #132]	; (8008f08 <UART_SetConfig+0x1198>)
 8008e82:	f04f 0400 	mov.w	r4, #0
 8008e86:	e00e      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e88:	a415      	add	r4, pc, #84	; (adr r4, 8008ee0 <UART_SetConfig+0x1170>)
 8008e8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008e8e:	e00a      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e90:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <UART_SetConfig+0x119c>)
 8008e92:	f04f 0400 	mov.w	r4, #0
 8008e96:	e006      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008e98:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <UART_SetConfig+0x11a0>)
 8008e9a:	f04f 0401 	mov.w	r4, #1
 8008e9e:	e002      	b.n	8008ea6 <UART_SetConfig+0x1136>
 8008ea0:	4b13      	ldr	r3, [pc, #76]	; (8008ef0 <UART_SetConfig+0x1180>)
 8008ea2:	f04f 0403 	mov.w	r4, #3
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6852      	ldr	r2, [r2, #4]
 8008eaa:	0852      	lsrs	r2, r2, #1
 8008eac:	4611      	mov	r1, r2
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	eb13 0b01 	adds.w	fp, r3, r1
 8008eb6:	eb44 0c02 	adc.w	ip, r4, r2
 8008eba:	4658      	mov	r0, fp
 8008ebc:	4661      	mov	r1, ip
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f04f 0400 	mov.w	r4, #0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	4623      	mov	r3, r4
 8008eca:	f7f7 fa0d 	bl	80002e8 <__aeabi_uldivmod>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ed4:	e122      	b.n	800911c <UART_SetConfig+0x13ac>
 8008ed6:	bf00      	nop
 8008ed8:	51615500 	.word	0x51615500
 8008edc:	00000000 	.word	0x00000000
 8008ee0:	a2c2aa00 	.word	0xa2c2aa00
 8008ee4:	00000000 	.word	0x00000000
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	03d09000 	.word	0x03d09000
 8008ef0:	d0900000 	.word	0xd0900000
 8008ef4:	07a12000 	.word	0x07a12000
 8008ef8:	0f424000 	.word	0x0f424000
 8008efc:	1e848000 	.word	0x1e848000
 8008f00:	3d090000 	.word	0x3d090000
 8008f04:	61a80000 	.word	0x61a80000
 8008f08:	7a120000 	.word	0x7a120000
 8008f0c:	f4240000 	.word	0xf4240000
 8008f10:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d05b      	beq.n	8008fd4 <UART_SetConfig+0x1264>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d053      	beq.n	8008fcc <UART_SetConfig+0x125c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d04b      	beq.n	8008fc4 <UART_SetConfig+0x1254>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d043      	beq.n	8008fbc <UART_SetConfig+0x124c>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d03b      	beq.n	8008fb4 <UART_SetConfig+0x1244>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	2b05      	cmp	r3, #5
 8008f42:	d033      	beq.n	8008fac <UART_SetConfig+0x123c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	2b06      	cmp	r3, #6
 8008f4a:	d02b      	beq.n	8008fa4 <UART_SetConfig+0x1234>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	2b07      	cmp	r3, #7
 8008f52:	d023      	beq.n	8008f9c <UART_SetConfig+0x122c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d01b      	beq.n	8008f94 <UART_SetConfig+0x1224>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	2b09      	cmp	r3, #9
 8008f62:	d013      	beq.n	8008f8c <UART_SetConfig+0x121c>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	2b0a      	cmp	r3, #10
 8008f6a:	d00b      	beq.n	8008f84 <UART_SetConfig+0x1214>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	2b0b      	cmp	r3, #11
 8008f72:	d103      	bne.n	8008f7c <UART_SetConfig+0x120c>
 8008f74:	4bc0      	ldr	r3, [pc, #768]	; (8009278 <UART_SetConfig+0x1508>)
 8008f76:	f04f 0400 	mov.w	r4, #0
 8008f7a:	e02e      	b.n	8008fda <UART_SetConfig+0x126a>
 8008f7c:	4bbf      	ldr	r3, [pc, #764]	; (800927c <UART_SetConfig+0x150c>)
 8008f7e:	f04f 0400 	mov.w	r4, #0
 8008f82:	e02a      	b.n	8008fda <UART_SetConfig+0x126a>
 8008f84:	4bbe      	ldr	r3, [pc, #760]	; (8009280 <UART_SetConfig+0x1510>)
 8008f86:	f04f 0400 	mov.w	r4, #0
 8008f8a:	e026      	b.n	8008fda <UART_SetConfig+0x126a>
 8008f8c:	4bbd      	ldr	r3, [pc, #756]	; (8009284 <UART_SetConfig+0x1514>)
 8008f8e:	f04f 0400 	mov.w	r4, #0
 8008f92:	e022      	b.n	8008fda <UART_SetConfig+0x126a>
 8008f94:	4bbc      	ldr	r3, [pc, #752]	; (8009288 <UART_SetConfig+0x1518>)
 8008f96:	f04f 0400 	mov.w	r4, #0
 8008f9a:	e01e      	b.n	8008fda <UART_SetConfig+0x126a>
 8008f9c:	4bbb      	ldr	r3, [pc, #748]	; (800928c <UART_SetConfig+0x151c>)
 8008f9e:	f04f 0400 	mov.w	r4, #0
 8008fa2:	e01a      	b.n	8008fda <UART_SetConfig+0x126a>
 8008fa4:	a4b0      	add	r4, pc, #704	; (adr r4, 8009268 <UART_SetConfig+0x14f8>)
 8008fa6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008faa:	e016      	b.n	8008fda <UART_SetConfig+0x126a>
 8008fac:	4bb8      	ldr	r3, [pc, #736]	; (8009290 <UART_SetConfig+0x1520>)
 8008fae:	f04f 0400 	mov.w	r4, #0
 8008fb2:	e012      	b.n	8008fda <UART_SetConfig+0x126a>
 8008fb4:	4bb7      	ldr	r3, [pc, #732]	; (8009294 <UART_SetConfig+0x1524>)
 8008fb6:	f04f 0400 	mov.w	r4, #0
 8008fba:	e00e      	b.n	8008fda <UART_SetConfig+0x126a>
 8008fbc:	a4ac      	add	r4, pc, #688	; (adr r4, 8009270 <UART_SetConfig+0x1500>)
 8008fbe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008fc2:	e00a      	b.n	8008fda <UART_SetConfig+0x126a>
 8008fc4:	4bb4      	ldr	r3, [pc, #720]	; (8009298 <UART_SetConfig+0x1528>)
 8008fc6:	f04f 0400 	mov.w	r4, #0
 8008fca:	e006      	b.n	8008fda <UART_SetConfig+0x126a>
 8008fcc:	4bb3      	ldr	r3, [pc, #716]	; (800929c <UART_SetConfig+0x152c>)
 8008fce:	f04f 0400 	mov.w	r4, #0
 8008fd2:	e002      	b.n	8008fda <UART_SetConfig+0x126a>
 8008fd4:	4ba9      	ldr	r3, [pc, #676]	; (800927c <UART_SetConfig+0x150c>)
 8008fd6:	f04f 0400 	mov.w	r4, #0
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6852      	ldr	r2, [r2, #4]
 8008fde:	0852      	lsrs	r2, r2, #1
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	eb13 0b01 	adds.w	fp, r3, r1
 8008fea:	eb44 0c02 	adc.w	ip, r4, r2
 8008fee:	4658      	mov	r0, fp
 8008ff0:	4661      	mov	r1, ip
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f04f 0400 	mov.w	r4, #0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	f7f7 f973 	bl	80002e8 <__aeabi_uldivmod>
 8009002:	4603      	mov	r3, r0
 8009004:	460c      	mov	r4, r1
 8009006:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009008:	e088      	b.n	800911c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	2b00      	cmp	r3, #0
 8009010:	d064      	beq.n	80090dc <UART_SetConfig+0x136c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009016:	2b01      	cmp	r3, #1
 8009018:	d05b      	beq.n	80090d2 <UART_SetConfig+0x1362>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	2b02      	cmp	r3, #2
 8009020:	d052      	beq.n	80090c8 <UART_SetConfig+0x1358>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	2b03      	cmp	r3, #3
 8009028:	d04a      	beq.n	80090c0 <UART_SetConfig+0x1350>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	2b04      	cmp	r3, #4
 8009030:	d041      	beq.n	80090b6 <UART_SetConfig+0x1346>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b05      	cmp	r3, #5
 8009038:	d039      	beq.n	80090ae <UART_SetConfig+0x133e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2b06      	cmp	r3, #6
 8009040:	d031      	beq.n	80090a6 <UART_SetConfig+0x1336>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	2b07      	cmp	r3, #7
 8009048:	d028      	beq.n	800909c <UART_SetConfig+0x132c>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b08      	cmp	r3, #8
 8009050:	d01f      	beq.n	8009092 <UART_SetConfig+0x1322>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b09      	cmp	r3, #9
 8009058:	d016      	beq.n	8009088 <UART_SetConfig+0x1318>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	2b0a      	cmp	r3, #10
 8009060:	d00d      	beq.n	800907e <UART_SetConfig+0x130e>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b0b      	cmp	r3, #11
 8009068:	d104      	bne.n	8009074 <UART_SetConfig+0x1304>
 800906a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800906e:	f04f 0400 	mov.w	r4, #0
 8009072:	e037      	b.n	80090e4 <UART_SetConfig+0x1374>
 8009074:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009078:	f04f 0400 	mov.w	r4, #0
 800907c:	e032      	b.n	80090e4 <UART_SetConfig+0x1374>
 800907e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009082:	f04f 0400 	mov.w	r4, #0
 8009086:	e02d      	b.n	80090e4 <UART_SetConfig+0x1374>
 8009088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800908c:	f04f 0400 	mov.w	r4, #0
 8009090:	e028      	b.n	80090e4 <UART_SetConfig+0x1374>
 8009092:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009096:	f04f 0400 	mov.w	r4, #0
 800909a:	e023      	b.n	80090e4 <UART_SetConfig+0x1374>
 800909c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090a0:	f04f 0400 	mov.w	r4, #0
 80090a4:	e01e      	b.n	80090e4 <UART_SetConfig+0x1374>
 80090a6:	4b7e      	ldr	r3, [pc, #504]	; (80092a0 <UART_SetConfig+0x1530>)
 80090a8:	f04f 0400 	mov.w	r4, #0
 80090ac:	e01a      	b.n	80090e4 <UART_SetConfig+0x1374>
 80090ae:	4b7d      	ldr	r3, [pc, #500]	; (80092a4 <UART_SetConfig+0x1534>)
 80090b0:	f04f 0400 	mov.w	r4, #0
 80090b4:	e016      	b.n	80090e4 <UART_SetConfig+0x1374>
 80090b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090ba:	f04f 0400 	mov.w	r4, #0
 80090be:	e011      	b.n	80090e4 <UART_SetConfig+0x1374>
 80090c0:	4b79      	ldr	r3, [pc, #484]	; (80092a8 <UART_SetConfig+0x1538>)
 80090c2:	f04f 0400 	mov.w	r4, #0
 80090c6:	e00d      	b.n	80090e4 <UART_SetConfig+0x1374>
 80090c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80090cc:	f04f 0400 	mov.w	r4, #0
 80090d0:	e008      	b.n	80090e4 <UART_SetConfig+0x1374>
 80090d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090d6:	f04f 0400 	mov.w	r4, #0
 80090da:	e003      	b.n	80090e4 <UART_SetConfig+0x1374>
 80090dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80090e0:	f04f 0400 	mov.w	r4, #0
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6852      	ldr	r2, [r2, #4]
 80090e8:	0852      	lsrs	r2, r2, #1
 80090ea:	4611      	mov	r1, r2
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	eb13 0b01 	adds.w	fp, r3, r1
 80090f4:	eb44 0c02 	adc.w	ip, r4, r2
 80090f8:	4658      	mov	r0, fp
 80090fa:	4661      	mov	r1, ip
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f04f 0400 	mov.w	r4, #0
 8009104:	461a      	mov	r2, r3
 8009106:	4623      	mov	r3, r4
 8009108:	f7f7 f8ee 	bl	80002e8 <__aeabi_uldivmod>
 800910c:	4603      	mov	r3, r0
 800910e:	460c      	mov	r4, r1
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009112:	e003      	b.n	800911c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800911a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800911c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009122:	d309      	bcc.n	8009138 <UART_SetConfig+0x13c8>
 8009124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800912a:	d205      	bcs.n	8009138 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009132:	60da      	str	r2, [r3, #12]
 8009134:	f000 bf85 	b.w	800a042 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913e:	f000 bf80 	b.w	800a042 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800914a:	f040 83da 	bne.w	8009902 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800914e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009152:	2b40      	cmp	r3, #64	; 0x40
 8009154:	f200 83b3 	bhi.w	80098be <UART_SetConfig+0x1b4e>
 8009158:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <UART_SetConfig+0x13f0>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	080092ad 	.word	0x080092ad
 8009164:	08009365 	.word	0x08009365
 8009168:	080098bf 	.word	0x080098bf
 800916c:	080098bf 	.word	0x080098bf
 8009170:	0800941d 	.word	0x0800941d
 8009174:	080098bf 	.word	0x080098bf
 8009178:	080098bf 	.word	0x080098bf
 800917c:	080098bf 	.word	0x080098bf
 8009180:	080094d9 	.word	0x080094d9
 8009184:	080098bf 	.word	0x080098bf
 8009188:	080098bf 	.word	0x080098bf
 800918c:	080098bf 	.word	0x080098bf
 8009190:	080098bf 	.word	0x080098bf
 8009194:	080098bf 	.word	0x080098bf
 8009198:	080098bf 	.word	0x080098bf
 800919c:	080098bf 	.word	0x080098bf
 80091a0:	08009595 	.word	0x08009595
 80091a4:	080098bf 	.word	0x080098bf
 80091a8:	080098bf 	.word	0x080098bf
 80091ac:	080098bf 	.word	0x080098bf
 80091b0:	080098bf 	.word	0x080098bf
 80091b4:	080098bf 	.word	0x080098bf
 80091b8:	080098bf 	.word	0x080098bf
 80091bc:	080098bf 	.word	0x080098bf
 80091c0:	080098bf 	.word	0x080098bf
 80091c4:	080098bf 	.word	0x080098bf
 80091c8:	080098bf 	.word	0x080098bf
 80091cc:	080098bf 	.word	0x080098bf
 80091d0:	080098bf 	.word	0x080098bf
 80091d4:	080098bf 	.word	0x080098bf
 80091d8:	080098bf 	.word	0x080098bf
 80091dc:	080098bf 	.word	0x080098bf
 80091e0:	08009707 	.word	0x08009707
 80091e4:	080098bf 	.word	0x080098bf
 80091e8:	080098bf 	.word	0x080098bf
 80091ec:	080098bf 	.word	0x080098bf
 80091f0:	080098bf 	.word	0x080098bf
 80091f4:	080098bf 	.word	0x080098bf
 80091f8:	080098bf 	.word	0x080098bf
 80091fc:	080098bf 	.word	0x080098bf
 8009200:	080098bf 	.word	0x080098bf
 8009204:	080098bf 	.word	0x080098bf
 8009208:	080098bf 	.word	0x080098bf
 800920c:	080098bf 	.word	0x080098bf
 8009210:	080098bf 	.word	0x080098bf
 8009214:	080098bf 	.word	0x080098bf
 8009218:	080098bf 	.word	0x080098bf
 800921c:	080098bf 	.word	0x080098bf
 8009220:	080098bf 	.word	0x080098bf
 8009224:	080098bf 	.word	0x080098bf
 8009228:	080098bf 	.word	0x080098bf
 800922c:	080098bf 	.word	0x080098bf
 8009230:	080098bf 	.word	0x080098bf
 8009234:	080098bf 	.word	0x080098bf
 8009238:	080098bf 	.word	0x080098bf
 800923c:	080098bf 	.word	0x080098bf
 8009240:	080098bf 	.word	0x080098bf
 8009244:	080098bf 	.word	0x080098bf
 8009248:	080098bf 	.word	0x080098bf
 800924c:	080098bf 	.word	0x080098bf
 8009250:	080098bf 	.word	0x080098bf
 8009254:	080098bf 	.word	0x080098bf
 8009258:	080098bf 	.word	0x080098bf
 800925c:	080098bf 	.word	0x080098bf
 8009260:	080097fd 	.word	0x080097fd
 8009264:	f3af 8000 	nop.w
 8009268:	05161500 	.word	0x05161500
 800926c:	00000000 	.word	0x00000000
 8009270:	0a2c2a00 	.word	0x0a2c2a00
 8009274:	00000000 	.word	0x00000000
 8009278:	003d0900 	.word	0x003d0900
 800927c:	3d090000 	.word	0x3d090000
 8009280:	007a1200 	.word	0x007a1200
 8009284:	00f42400 	.word	0x00f42400
 8009288:	01e84800 	.word	0x01e84800
 800928c:	03d09000 	.word	0x03d09000
 8009290:	061a8000 	.word	0x061a8000
 8009294:	07a12000 	.word	0x07a12000
 8009298:	0f424000 	.word	0x0f424000
 800929c:	1e848000 	.word	0x1e848000
 80092a0:	000aaa00 	.word	0x000aaa00
 80092a4:	000ccc00 	.word	0x000ccc00
 80092a8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092ac:	f7fc faa0 	bl	80057f0 <HAL_RCC_GetPCLK1Freq>
 80092b0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d044      	beq.n	8009344 <UART_SetConfig+0x15d4>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d03e      	beq.n	8009340 <UART_SetConfig+0x15d0>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d038      	beq.n	800933c <UART_SetConfig+0x15cc>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d032      	beq.n	8009338 <UART_SetConfig+0x15c8>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d02c      	beq.n	8009334 <UART_SetConfig+0x15c4>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d026      	beq.n	8009330 <UART_SetConfig+0x15c0>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	2b06      	cmp	r3, #6
 80092e8:	d020      	beq.n	800932c <UART_SetConfig+0x15bc>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	2b07      	cmp	r3, #7
 80092f0:	d01a      	beq.n	8009328 <UART_SetConfig+0x15b8>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d014      	beq.n	8009324 <UART_SetConfig+0x15b4>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	2b09      	cmp	r3, #9
 8009300:	d00e      	beq.n	8009320 <UART_SetConfig+0x15b0>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	2b0a      	cmp	r3, #10
 8009308:	d008      	beq.n	800931c <UART_SetConfig+0x15ac>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	2b0b      	cmp	r3, #11
 8009310:	d102      	bne.n	8009318 <UART_SetConfig+0x15a8>
 8009312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009316:	e016      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009318:	2301      	movs	r3, #1
 800931a:	e014      	b.n	8009346 <UART_SetConfig+0x15d6>
 800931c:	2380      	movs	r3, #128	; 0x80
 800931e:	e012      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009320:	2340      	movs	r3, #64	; 0x40
 8009322:	e010      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009324:	2320      	movs	r3, #32
 8009326:	e00e      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009328:	2310      	movs	r3, #16
 800932a:	e00c      	b.n	8009346 <UART_SetConfig+0x15d6>
 800932c:	230c      	movs	r3, #12
 800932e:	e00a      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009330:	230a      	movs	r3, #10
 8009332:	e008      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009334:	2308      	movs	r3, #8
 8009336:	e006      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009338:	2306      	movs	r3, #6
 800933a:	e004      	b.n	8009346 <UART_SetConfig+0x15d6>
 800933c:	2304      	movs	r3, #4
 800933e:	e002      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009340:	2302      	movs	r3, #2
 8009342:	e000      	b.n	8009346 <UART_SetConfig+0x15d6>
 8009344:	2301      	movs	r3, #1
 8009346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009348:	fbb2 f3f3 	udiv	r3, r2, r3
 800934c:	005a      	lsls	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	085b      	lsrs	r3, r3, #1
 8009354:	441a      	add	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	fbb2 f3f3 	udiv	r3, r2, r3
 800935e:	b29b      	uxth	r3, r3
 8009360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009362:	e2b0      	b.n	80098c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009364:	f7fc fa5a 	bl	800581c <HAL_RCC_GetPCLK2Freq>
 8009368:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936e:	2b00      	cmp	r3, #0
 8009370:	d044      	beq.n	80093fc <UART_SetConfig+0x168c>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	2b01      	cmp	r3, #1
 8009378:	d03e      	beq.n	80093f8 <UART_SetConfig+0x1688>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	2b02      	cmp	r3, #2
 8009380:	d038      	beq.n	80093f4 <UART_SetConfig+0x1684>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	2b03      	cmp	r3, #3
 8009388:	d032      	beq.n	80093f0 <UART_SetConfig+0x1680>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	2b04      	cmp	r3, #4
 8009390:	d02c      	beq.n	80093ec <UART_SetConfig+0x167c>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	2b05      	cmp	r3, #5
 8009398:	d026      	beq.n	80093e8 <UART_SetConfig+0x1678>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	2b06      	cmp	r3, #6
 80093a0:	d020      	beq.n	80093e4 <UART_SetConfig+0x1674>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	2b07      	cmp	r3, #7
 80093a8:	d01a      	beq.n	80093e0 <UART_SetConfig+0x1670>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d014      	beq.n	80093dc <UART_SetConfig+0x166c>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d00e      	beq.n	80093d8 <UART_SetConfig+0x1668>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	2b0a      	cmp	r3, #10
 80093c0:	d008      	beq.n	80093d4 <UART_SetConfig+0x1664>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	2b0b      	cmp	r3, #11
 80093c8:	d102      	bne.n	80093d0 <UART_SetConfig+0x1660>
 80093ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ce:	e016      	b.n	80093fe <UART_SetConfig+0x168e>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e014      	b.n	80093fe <UART_SetConfig+0x168e>
 80093d4:	2380      	movs	r3, #128	; 0x80
 80093d6:	e012      	b.n	80093fe <UART_SetConfig+0x168e>
 80093d8:	2340      	movs	r3, #64	; 0x40
 80093da:	e010      	b.n	80093fe <UART_SetConfig+0x168e>
 80093dc:	2320      	movs	r3, #32
 80093de:	e00e      	b.n	80093fe <UART_SetConfig+0x168e>
 80093e0:	2310      	movs	r3, #16
 80093e2:	e00c      	b.n	80093fe <UART_SetConfig+0x168e>
 80093e4:	230c      	movs	r3, #12
 80093e6:	e00a      	b.n	80093fe <UART_SetConfig+0x168e>
 80093e8:	230a      	movs	r3, #10
 80093ea:	e008      	b.n	80093fe <UART_SetConfig+0x168e>
 80093ec:	2308      	movs	r3, #8
 80093ee:	e006      	b.n	80093fe <UART_SetConfig+0x168e>
 80093f0:	2306      	movs	r3, #6
 80093f2:	e004      	b.n	80093fe <UART_SetConfig+0x168e>
 80093f4:	2304      	movs	r3, #4
 80093f6:	e002      	b.n	80093fe <UART_SetConfig+0x168e>
 80093f8:	2302      	movs	r3, #2
 80093fa:	e000      	b.n	80093fe <UART_SetConfig+0x168e>
 80093fc:	2301      	movs	r3, #1
 80093fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009400:	fbb2 f3f3 	udiv	r3, r2, r3
 8009404:	005a      	lsls	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	085b      	lsrs	r3, r3, #1
 800940c:	441a      	add	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	fbb2 f3f3 	udiv	r3, r2, r3
 8009416:	b29b      	uxth	r3, r3
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800941a:	e254      	b.n	80098c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800941c:	f107 0318 	add.w	r3, r7, #24
 8009420:	4618      	mov	r0, r3
 8009422:	f7fd f947 	bl	80066b4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009426:	69fa      	ldr	r2, [r7, #28]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	2b00      	cmp	r3, #0
 800942e:	d044      	beq.n	80094ba <UART_SetConfig+0x174a>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	2b01      	cmp	r3, #1
 8009436:	d03e      	beq.n	80094b6 <UART_SetConfig+0x1746>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	2b02      	cmp	r3, #2
 800943e:	d038      	beq.n	80094b2 <UART_SetConfig+0x1742>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	2b03      	cmp	r3, #3
 8009446:	d032      	beq.n	80094ae <UART_SetConfig+0x173e>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	2b04      	cmp	r3, #4
 800944e:	d02c      	beq.n	80094aa <UART_SetConfig+0x173a>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	2b05      	cmp	r3, #5
 8009456:	d026      	beq.n	80094a6 <UART_SetConfig+0x1736>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b06      	cmp	r3, #6
 800945e:	d020      	beq.n	80094a2 <UART_SetConfig+0x1732>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	2b07      	cmp	r3, #7
 8009466:	d01a      	beq.n	800949e <UART_SetConfig+0x172e>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	2b08      	cmp	r3, #8
 800946e:	d014      	beq.n	800949a <UART_SetConfig+0x172a>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	2b09      	cmp	r3, #9
 8009476:	d00e      	beq.n	8009496 <UART_SetConfig+0x1726>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	2b0a      	cmp	r3, #10
 800947e:	d008      	beq.n	8009492 <UART_SetConfig+0x1722>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2b0b      	cmp	r3, #11
 8009486:	d102      	bne.n	800948e <UART_SetConfig+0x171e>
 8009488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800948c:	e016      	b.n	80094bc <UART_SetConfig+0x174c>
 800948e:	2301      	movs	r3, #1
 8009490:	e014      	b.n	80094bc <UART_SetConfig+0x174c>
 8009492:	2380      	movs	r3, #128	; 0x80
 8009494:	e012      	b.n	80094bc <UART_SetConfig+0x174c>
 8009496:	2340      	movs	r3, #64	; 0x40
 8009498:	e010      	b.n	80094bc <UART_SetConfig+0x174c>
 800949a:	2320      	movs	r3, #32
 800949c:	e00e      	b.n	80094bc <UART_SetConfig+0x174c>
 800949e:	2310      	movs	r3, #16
 80094a0:	e00c      	b.n	80094bc <UART_SetConfig+0x174c>
 80094a2:	230c      	movs	r3, #12
 80094a4:	e00a      	b.n	80094bc <UART_SetConfig+0x174c>
 80094a6:	230a      	movs	r3, #10
 80094a8:	e008      	b.n	80094bc <UART_SetConfig+0x174c>
 80094aa:	2308      	movs	r3, #8
 80094ac:	e006      	b.n	80094bc <UART_SetConfig+0x174c>
 80094ae:	2306      	movs	r3, #6
 80094b0:	e004      	b.n	80094bc <UART_SetConfig+0x174c>
 80094b2:	2304      	movs	r3, #4
 80094b4:	e002      	b.n	80094bc <UART_SetConfig+0x174c>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e000      	b.n	80094bc <UART_SetConfig+0x174c>
 80094ba:	2301      	movs	r3, #1
 80094bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c0:	005a      	lsls	r2, r3, #1
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	085b      	lsrs	r3, r3, #1
 80094c8:	441a      	add	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094d6:	e1f6      	b.n	80098c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094d8:	f107 030c 	add.w	r3, r7, #12
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fd fa35 	bl	800694c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d044      	beq.n	8009576 <UART_SetConfig+0x1806>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d03e      	beq.n	8009572 <UART_SetConfig+0x1802>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d038      	beq.n	800956e <UART_SetConfig+0x17fe>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2b03      	cmp	r3, #3
 8009502:	d032      	beq.n	800956a <UART_SetConfig+0x17fa>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	2b04      	cmp	r3, #4
 800950a:	d02c      	beq.n	8009566 <UART_SetConfig+0x17f6>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b05      	cmp	r3, #5
 8009512:	d026      	beq.n	8009562 <UART_SetConfig+0x17f2>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b06      	cmp	r3, #6
 800951a:	d020      	beq.n	800955e <UART_SetConfig+0x17ee>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b07      	cmp	r3, #7
 8009522:	d01a      	beq.n	800955a <UART_SetConfig+0x17ea>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	2b08      	cmp	r3, #8
 800952a:	d014      	beq.n	8009556 <UART_SetConfig+0x17e6>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009530:	2b09      	cmp	r3, #9
 8009532:	d00e      	beq.n	8009552 <UART_SetConfig+0x17e2>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	2b0a      	cmp	r3, #10
 800953a:	d008      	beq.n	800954e <UART_SetConfig+0x17de>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b0b      	cmp	r3, #11
 8009542:	d102      	bne.n	800954a <UART_SetConfig+0x17da>
 8009544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009548:	e016      	b.n	8009578 <UART_SetConfig+0x1808>
 800954a:	2301      	movs	r3, #1
 800954c:	e014      	b.n	8009578 <UART_SetConfig+0x1808>
 800954e:	2380      	movs	r3, #128	; 0x80
 8009550:	e012      	b.n	8009578 <UART_SetConfig+0x1808>
 8009552:	2340      	movs	r3, #64	; 0x40
 8009554:	e010      	b.n	8009578 <UART_SetConfig+0x1808>
 8009556:	2320      	movs	r3, #32
 8009558:	e00e      	b.n	8009578 <UART_SetConfig+0x1808>
 800955a:	2310      	movs	r3, #16
 800955c:	e00c      	b.n	8009578 <UART_SetConfig+0x1808>
 800955e:	230c      	movs	r3, #12
 8009560:	e00a      	b.n	8009578 <UART_SetConfig+0x1808>
 8009562:	230a      	movs	r3, #10
 8009564:	e008      	b.n	8009578 <UART_SetConfig+0x1808>
 8009566:	2308      	movs	r3, #8
 8009568:	e006      	b.n	8009578 <UART_SetConfig+0x1808>
 800956a:	2306      	movs	r3, #6
 800956c:	e004      	b.n	8009578 <UART_SetConfig+0x1808>
 800956e:	2304      	movs	r3, #4
 8009570:	e002      	b.n	8009578 <UART_SetConfig+0x1808>
 8009572:	2302      	movs	r3, #2
 8009574:	e000      	b.n	8009578 <UART_SetConfig+0x1808>
 8009576:	2301      	movs	r3, #1
 8009578:	fbb2 f3f3 	udiv	r3, r2, r3
 800957c:	005a      	lsls	r2, r3, #1
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	441a      	add	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	b29b      	uxth	r3, r3
 8009590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009592:	e198      	b.n	80098c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009594:	4b87      	ldr	r3, [pc, #540]	; (80097b4 <UART_SetConfig+0x1a44>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d05e      	beq.n	800965e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a0:	4b84      	ldr	r3, [pc, #528]	; (80097b4 <UART_SetConfig+0x1a44>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	08db      	lsrs	r3, r3, #3
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	4a83      	ldr	r2, [pc, #524]	; (80097b8 <UART_SetConfig+0x1a48>)
 80095ac:	40da      	lsrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d044      	beq.n	8009640 <UART_SetConfig+0x18d0>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d03e      	beq.n	800963c <UART_SetConfig+0x18cc>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d038      	beq.n	8009638 <UART_SetConfig+0x18c8>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d032      	beq.n	8009634 <UART_SetConfig+0x18c4>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d02c      	beq.n	8009630 <UART_SetConfig+0x18c0>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d026      	beq.n	800962c <UART_SetConfig+0x18bc>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	2b06      	cmp	r3, #6
 80095e4:	d020      	beq.n	8009628 <UART_SetConfig+0x18b8>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	2b07      	cmp	r3, #7
 80095ec:	d01a      	beq.n	8009624 <UART_SetConfig+0x18b4>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d014      	beq.n	8009620 <UART_SetConfig+0x18b0>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	2b09      	cmp	r3, #9
 80095fc:	d00e      	beq.n	800961c <UART_SetConfig+0x18ac>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	2b0a      	cmp	r3, #10
 8009604:	d008      	beq.n	8009618 <UART_SetConfig+0x18a8>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b0b      	cmp	r3, #11
 800960c:	d102      	bne.n	8009614 <UART_SetConfig+0x18a4>
 800960e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009612:	e016      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009614:	2301      	movs	r3, #1
 8009616:	e014      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009618:	2380      	movs	r3, #128	; 0x80
 800961a:	e012      	b.n	8009642 <UART_SetConfig+0x18d2>
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	e010      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009620:	2320      	movs	r3, #32
 8009622:	e00e      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009624:	2310      	movs	r3, #16
 8009626:	e00c      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009628:	230c      	movs	r3, #12
 800962a:	e00a      	b.n	8009642 <UART_SetConfig+0x18d2>
 800962c:	230a      	movs	r3, #10
 800962e:	e008      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009630:	2308      	movs	r3, #8
 8009632:	e006      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009634:	2306      	movs	r3, #6
 8009636:	e004      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009638:	2304      	movs	r3, #4
 800963a:	e002      	b.n	8009642 <UART_SetConfig+0x18d2>
 800963c:	2302      	movs	r3, #2
 800963e:	e000      	b.n	8009642 <UART_SetConfig+0x18d2>
 8009640:	2301      	movs	r3, #1
 8009642:	fbb2 f3f3 	udiv	r3, r2, r3
 8009646:	005a      	lsls	r2, r3, #1
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	085b      	lsrs	r3, r3, #1
 800964e:	441a      	add	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	fbb2 f3f3 	udiv	r3, r2, r3
 8009658:	b29b      	uxth	r3, r3
 800965a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800965c:	e133      	b.n	80098c6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d043      	beq.n	80096ee <UART_SetConfig+0x197e>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	2b01      	cmp	r3, #1
 800966c:	d03d      	beq.n	80096ea <UART_SetConfig+0x197a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	2b02      	cmp	r3, #2
 8009674:	d037      	beq.n	80096e6 <UART_SetConfig+0x1976>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	2b03      	cmp	r3, #3
 800967c:	d031      	beq.n	80096e2 <UART_SetConfig+0x1972>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009682:	2b04      	cmp	r3, #4
 8009684:	d02b      	beq.n	80096de <UART_SetConfig+0x196e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	2b05      	cmp	r3, #5
 800968c:	d025      	beq.n	80096da <UART_SetConfig+0x196a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	2b06      	cmp	r3, #6
 8009694:	d01f      	beq.n	80096d6 <UART_SetConfig+0x1966>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	2b07      	cmp	r3, #7
 800969c:	d019      	beq.n	80096d2 <UART_SetConfig+0x1962>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d013      	beq.n	80096ce <UART_SetConfig+0x195e>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d00d      	beq.n	80096ca <UART_SetConfig+0x195a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	2b0a      	cmp	r3, #10
 80096b4:	d007      	beq.n	80096c6 <UART_SetConfig+0x1956>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	2b0b      	cmp	r3, #11
 80096bc:	d101      	bne.n	80096c2 <UART_SetConfig+0x1952>
 80096be:	4b3f      	ldr	r3, [pc, #252]	; (80097bc <UART_SetConfig+0x1a4c>)
 80096c0:	e016      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096c2:	4b3f      	ldr	r3, [pc, #252]	; (80097c0 <UART_SetConfig+0x1a50>)
 80096c4:	e014      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096c6:	4b3f      	ldr	r3, [pc, #252]	; (80097c4 <UART_SetConfig+0x1a54>)
 80096c8:	e012      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096ca:	4b3f      	ldr	r3, [pc, #252]	; (80097c8 <UART_SetConfig+0x1a58>)
 80096cc:	e010      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096ce:	4b3f      	ldr	r3, [pc, #252]	; (80097cc <UART_SetConfig+0x1a5c>)
 80096d0:	e00e      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096d2:	4b3f      	ldr	r3, [pc, #252]	; (80097d0 <UART_SetConfig+0x1a60>)
 80096d4:	e00c      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096d6:	4b3f      	ldr	r3, [pc, #252]	; (80097d4 <UART_SetConfig+0x1a64>)
 80096d8:	e00a      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096da:	4b3f      	ldr	r3, [pc, #252]	; (80097d8 <UART_SetConfig+0x1a68>)
 80096dc:	e008      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096de:	4b3f      	ldr	r3, [pc, #252]	; (80097dc <UART_SetConfig+0x1a6c>)
 80096e0:	e006      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096e2:	4b3f      	ldr	r3, [pc, #252]	; (80097e0 <UART_SetConfig+0x1a70>)
 80096e4:	e004      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096e6:	4b3f      	ldr	r3, [pc, #252]	; (80097e4 <UART_SetConfig+0x1a74>)
 80096e8:	e002      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096ea:	4b33      	ldr	r3, [pc, #204]	; (80097b8 <UART_SetConfig+0x1a48>)
 80096ec:	e000      	b.n	80096f0 <UART_SetConfig+0x1980>
 80096ee:	4b34      	ldr	r3, [pc, #208]	; (80097c0 <UART_SetConfig+0x1a50>)
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6852      	ldr	r2, [r2, #4]
 80096f4:	0852      	lsrs	r2, r2, #1
 80096f6:	441a      	add	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009704:	e0df      	b.n	80098c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	2b00      	cmp	r3, #0
 800970c:	d045      	beq.n	800979a <UART_SetConfig+0x1a2a>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	2b01      	cmp	r3, #1
 8009714:	d03f      	beq.n	8009796 <UART_SetConfig+0x1a26>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	2b02      	cmp	r3, #2
 800971c:	d039      	beq.n	8009792 <UART_SetConfig+0x1a22>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	2b03      	cmp	r3, #3
 8009724:	d033      	beq.n	800978e <UART_SetConfig+0x1a1e>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	2b04      	cmp	r3, #4
 800972c:	d02d      	beq.n	800978a <UART_SetConfig+0x1a1a>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	2b05      	cmp	r3, #5
 8009734:	d027      	beq.n	8009786 <UART_SetConfig+0x1a16>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	2b06      	cmp	r3, #6
 800973c:	d021      	beq.n	8009782 <UART_SetConfig+0x1a12>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	2b07      	cmp	r3, #7
 8009744:	d01b      	beq.n	800977e <UART_SetConfig+0x1a0e>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	2b08      	cmp	r3, #8
 800974c:	d015      	beq.n	800977a <UART_SetConfig+0x1a0a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	2b09      	cmp	r3, #9
 8009754:	d00f      	beq.n	8009776 <UART_SetConfig+0x1a06>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	2b0a      	cmp	r3, #10
 800975c:	d008      	beq.n	8009770 <UART_SetConfig+0x1a00>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b0b      	cmp	r3, #11
 8009764:	d102      	bne.n	800976c <UART_SetConfig+0x19fc>
 8009766:	f647 2312 	movw	r3, #31250	; 0x7a12
 800976a:	e017      	b.n	800979c <UART_SetConfig+0x1a2c>
 800976c:	4b18      	ldr	r3, [pc, #96]	; (80097d0 <UART_SetConfig+0x1a60>)
 800976e:	e015      	b.n	800979c <UART_SetConfig+0x1a2c>
 8009770:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009774:	e012      	b.n	800979c <UART_SetConfig+0x1a2c>
 8009776:	4b1c      	ldr	r3, [pc, #112]	; (80097e8 <UART_SetConfig+0x1a78>)
 8009778:	e010      	b.n	800979c <UART_SetConfig+0x1a2c>
 800977a:	4b1c      	ldr	r3, [pc, #112]	; (80097ec <UART_SetConfig+0x1a7c>)
 800977c:	e00e      	b.n	800979c <UART_SetConfig+0x1a2c>
 800977e:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <UART_SetConfig+0x1a4c>)
 8009780:	e00c      	b.n	800979c <UART_SetConfig+0x1a2c>
 8009782:	4b1b      	ldr	r3, [pc, #108]	; (80097f0 <UART_SetConfig+0x1a80>)
 8009784:	e00a      	b.n	800979c <UART_SetConfig+0x1a2c>
 8009786:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <UART_SetConfig+0x1a84>)
 8009788:	e008      	b.n	800979c <UART_SetConfig+0x1a2c>
 800978a:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <UART_SetConfig+0x1a54>)
 800978c:	e006      	b.n	800979c <UART_SetConfig+0x1a2c>
 800978e:	4b1a      	ldr	r3, [pc, #104]	; (80097f8 <UART_SetConfig+0x1a88>)
 8009790:	e004      	b.n	800979c <UART_SetConfig+0x1a2c>
 8009792:	4b0d      	ldr	r3, [pc, #52]	; (80097c8 <UART_SetConfig+0x1a58>)
 8009794:	e002      	b.n	800979c <UART_SetConfig+0x1a2c>
 8009796:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <UART_SetConfig+0x1a5c>)
 8009798:	e000      	b.n	800979c <UART_SetConfig+0x1a2c>
 800979a:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <UART_SetConfig+0x1a60>)
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6852      	ldr	r2, [r2, #4]
 80097a0:	0852      	lsrs	r2, r2, #1
 80097a2:	441a      	add	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097b0:	e089      	b.n	80098c6 <UART_SetConfig+0x1b56>
 80097b2:	bf00      	nop
 80097b4:	58024400 	.word	0x58024400
 80097b8:	03d09000 	.word	0x03d09000
 80097bc:	0007a120 	.word	0x0007a120
 80097c0:	07a12000 	.word	0x07a12000
 80097c4:	000f4240 	.word	0x000f4240
 80097c8:	001e8480 	.word	0x001e8480
 80097cc:	003d0900 	.word	0x003d0900
 80097d0:	007a1200 	.word	0x007a1200
 80097d4:	00a2c2aa 	.word	0x00a2c2aa
 80097d8:	00c35000 	.word	0x00c35000
 80097dc:	00f42400 	.word	0x00f42400
 80097e0:	01458554 	.word	0x01458554
 80097e4:	01e84800 	.word	0x01e84800
 80097e8:	0001e848 	.word	0x0001e848
 80097ec:	0003d090 	.word	0x0003d090
 80097f0:	000a2c2a 	.word	0x000a2c2a
 80097f4:	000c3500 	.word	0x000c3500
 80097f8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009800:	2b00      	cmp	r3, #0
 8009802:	d04f      	beq.n	80098a4 <UART_SetConfig+0x1b34>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	2b01      	cmp	r3, #1
 800980a:	d048      	beq.n	800989e <UART_SetConfig+0x1b2e>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	2b02      	cmp	r3, #2
 8009812:	d041      	beq.n	8009898 <UART_SetConfig+0x1b28>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	2b03      	cmp	r3, #3
 800981a:	d03a      	beq.n	8009892 <UART_SetConfig+0x1b22>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b04      	cmp	r3, #4
 8009822:	d033      	beq.n	800988c <UART_SetConfig+0x1b1c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	2b05      	cmp	r3, #5
 800982a:	d02c      	beq.n	8009886 <UART_SetConfig+0x1b16>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	2b06      	cmp	r3, #6
 8009832:	d025      	beq.n	8009880 <UART_SetConfig+0x1b10>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009838:	2b07      	cmp	r3, #7
 800983a:	d01e      	beq.n	800987a <UART_SetConfig+0x1b0a>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	2b08      	cmp	r3, #8
 8009842:	d017      	beq.n	8009874 <UART_SetConfig+0x1b04>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	2b09      	cmp	r3, #9
 800984a:	d010      	beq.n	800986e <UART_SetConfig+0x1afe>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	2b0a      	cmp	r3, #10
 8009852:	d009      	beq.n	8009868 <UART_SetConfig+0x1af8>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	2b0b      	cmp	r3, #11
 800985a:	d102      	bne.n	8009862 <UART_SetConfig+0x1af2>
 800985c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009860:	e022      	b.n	80098a8 <UART_SetConfig+0x1b38>
 8009862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009866:	e01f      	b.n	80098a8 <UART_SetConfig+0x1b38>
 8009868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800986c:	e01c      	b.n	80098a8 <UART_SetConfig+0x1b38>
 800986e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009872:	e019      	b.n	80098a8 <UART_SetConfig+0x1b38>
 8009874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009878:	e016      	b.n	80098a8 <UART_SetConfig+0x1b38>
 800987a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800987e:	e013      	b.n	80098a8 <UART_SetConfig+0x1b38>
 8009880:	f241 5354 	movw	r3, #5460	; 0x1554
 8009884:	e010      	b.n	80098a8 <UART_SetConfig+0x1b38>
 8009886:	f641 1398 	movw	r3, #6552	; 0x1998
 800988a:	e00d      	b.n	80098a8 <UART_SetConfig+0x1b38>
 800988c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009890:	e00a      	b.n	80098a8 <UART_SetConfig+0x1b38>
 8009892:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009896:	e007      	b.n	80098a8 <UART_SetConfig+0x1b38>
 8009898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800989c:	e004      	b.n	80098a8 <UART_SetConfig+0x1b38>
 800989e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098a2:	e001      	b.n	80098a8 <UART_SetConfig+0x1b38>
 80098a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6852      	ldr	r2, [r2, #4]
 80098ac:	0852      	lsrs	r2, r2, #1
 80098ae:	441a      	add	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098bc:	e003      	b.n	80098c6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80098c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c8:	2b0f      	cmp	r3, #15
 80098ca:	d916      	bls.n	80098fa <UART_SetConfig+0x1b8a>
 80098cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098d2:	d212      	bcs.n	80098fa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	f023 030f 	bic.w	r3, r3, #15
 80098dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e0:	085b      	lsrs	r3, r3, #1
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f003 0307 	and.w	r3, r3, #7
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098ec:	4313      	orrs	r3, r2
 80098ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80098f6:	60da      	str	r2, [r3, #12]
 80098f8:	e3a3      	b.n	800a042 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009900:	e39f      	b.n	800a042 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8009902:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009906:	2b40      	cmp	r3, #64	; 0x40
 8009908:	f200 8388 	bhi.w	800a01c <UART_SetConfig+0x22ac>
 800990c:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <UART_SetConfig+0x1ba4>)
 800990e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009912:	bf00      	nop
 8009914:	08009a19 	.word	0x08009a19
 8009918:	08009acf 	.word	0x08009acf
 800991c:	0800a01d 	.word	0x0800a01d
 8009920:	0800a01d 	.word	0x0800a01d
 8009924:	08009b85 	.word	0x08009b85
 8009928:	0800a01d 	.word	0x0800a01d
 800992c:	0800a01d 	.word	0x0800a01d
 8009930:	0800a01d 	.word	0x0800a01d
 8009934:	08009c3f 	.word	0x08009c3f
 8009938:	0800a01d 	.word	0x0800a01d
 800993c:	0800a01d 	.word	0x0800a01d
 8009940:	0800a01d 	.word	0x0800a01d
 8009944:	0800a01d 	.word	0x0800a01d
 8009948:	0800a01d 	.word	0x0800a01d
 800994c:	0800a01d 	.word	0x0800a01d
 8009950:	0800a01d 	.word	0x0800a01d
 8009954:	08009cf9 	.word	0x08009cf9
 8009958:	0800a01d 	.word	0x0800a01d
 800995c:	0800a01d 	.word	0x0800a01d
 8009960:	0800a01d 	.word	0x0800a01d
 8009964:	0800a01d 	.word	0x0800a01d
 8009968:	0800a01d 	.word	0x0800a01d
 800996c:	0800a01d 	.word	0x0800a01d
 8009970:	0800a01d 	.word	0x0800a01d
 8009974:	0800a01d 	.word	0x0800a01d
 8009978:	0800a01d 	.word	0x0800a01d
 800997c:	0800a01d 	.word	0x0800a01d
 8009980:	0800a01d 	.word	0x0800a01d
 8009984:	0800a01d 	.word	0x0800a01d
 8009988:	0800a01d 	.word	0x0800a01d
 800998c:	0800a01d 	.word	0x0800a01d
 8009990:	0800a01d 	.word	0x0800a01d
 8009994:	08009e69 	.word	0x08009e69
 8009998:	0800a01d 	.word	0x0800a01d
 800999c:	0800a01d 	.word	0x0800a01d
 80099a0:	0800a01d 	.word	0x0800a01d
 80099a4:	0800a01d 	.word	0x0800a01d
 80099a8:	0800a01d 	.word	0x0800a01d
 80099ac:	0800a01d 	.word	0x0800a01d
 80099b0:	0800a01d 	.word	0x0800a01d
 80099b4:	0800a01d 	.word	0x0800a01d
 80099b8:	0800a01d 	.word	0x0800a01d
 80099bc:	0800a01d 	.word	0x0800a01d
 80099c0:	0800a01d 	.word	0x0800a01d
 80099c4:	0800a01d 	.word	0x0800a01d
 80099c8:	0800a01d 	.word	0x0800a01d
 80099cc:	0800a01d 	.word	0x0800a01d
 80099d0:	0800a01d 	.word	0x0800a01d
 80099d4:	0800a01d 	.word	0x0800a01d
 80099d8:	0800a01d 	.word	0x0800a01d
 80099dc:	0800a01d 	.word	0x0800a01d
 80099e0:	0800a01d 	.word	0x0800a01d
 80099e4:	0800a01d 	.word	0x0800a01d
 80099e8:	0800a01d 	.word	0x0800a01d
 80099ec:	0800a01d 	.word	0x0800a01d
 80099f0:	0800a01d 	.word	0x0800a01d
 80099f4:	0800a01d 	.word	0x0800a01d
 80099f8:	0800a01d 	.word	0x0800a01d
 80099fc:	0800a01d 	.word	0x0800a01d
 8009a00:	0800a01d 	.word	0x0800a01d
 8009a04:	0800a01d 	.word	0x0800a01d
 8009a08:	0800a01d 	.word	0x0800a01d
 8009a0c:	0800a01d 	.word	0x0800a01d
 8009a10:	0800a01d 	.word	0x0800a01d
 8009a14:	08009f5d 	.word	0x08009f5d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a18:	f7fb feea 	bl	80057f0 <HAL_RCC_GetPCLK1Freq>
 8009a1c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d044      	beq.n	8009ab0 <UART_SetConfig+0x1d40>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d03e      	beq.n	8009aac <UART_SetConfig+0x1d3c>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d038      	beq.n	8009aa8 <UART_SetConfig+0x1d38>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d032      	beq.n	8009aa4 <UART_SetConfig+0x1d34>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d02c      	beq.n	8009aa0 <UART_SetConfig+0x1d30>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d026      	beq.n	8009a9c <UART_SetConfig+0x1d2c>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a52:	2b06      	cmp	r3, #6
 8009a54:	d020      	beq.n	8009a98 <UART_SetConfig+0x1d28>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	2b07      	cmp	r3, #7
 8009a5c:	d01a      	beq.n	8009a94 <UART_SetConfig+0x1d24>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	d014      	beq.n	8009a90 <UART_SetConfig+0x1d20>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	d00e      	beq.n	8009a8c <UART_SetConfig+0x1d1c>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	2b0a      	cmp	r3, #10
 8009a74:	d008      	beq.n	8009a88 <UART_SetConfig+0x1d18>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	2b0b      	cmp	r3, #11
 8009a7c:	d102      	bne.n	8009a84 <UART_SetConfig+0x1d14>
 8009a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a82:	e016      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e014      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009a88:	2380      	movs	r3, #128	; 0x80
 8009a8a:	e012      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009a8c:	2340      	movs	r3, #64	; 0x40
 8009a8e:	e010      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009a90:	2320      	movs	r3, #32
 8009a92:	e00e      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009a94:	2310      	movs	r3, #16
 8009a96:	e00c      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	e00a      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009a9c:	230a      	movs	r3, #10
 8009a9e:	e008      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	e006      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	e004      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	e002      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009aac:	2302      	movs	r3, #2
 8009aae:	e000      	b.n	8009ab2 <UART_SetConfig+0x1d42>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	085b      	lsrs	r3, r3, #1
 8009abe:	441a      	add	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009acc:	e2aa      	b.n	800a024 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ace:	f7fb fea5 	bl	800581c <HAL_RCC_GetPCLK2Freq>
 8009ad2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d044      	beq.n	8009b66 <UART_SetConfig+0x1df6>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d03e      	beq.n	8009b62 <UART_SetConfig+0x1df2>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d038      	beq.n	8009b5e <UART_SetConfig+0x1dee>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d032      	beq.n	8009b5a <UART_SetConfig+0x1dea>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	d02c      	beq.n	8009b56 <UART_SetConfig+0x1de6>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	2b05      	cmp	r3, #5
 8009b02:	d026      	beq.n	8009b52 <UART_SetConfig+0x1de2>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b08:	2b06      	cmp	r3, #6
 8009b0a:	d020      	beq.n	8009b4e <UART_SetConfig+0x1dde>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b10:	2b07      	cmp	r3, #7
 8009b12:	d01a      	beq.n	8009b4a <UART_SetConfig+0x1dda>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d014      	beq.n	8009b46 <UART_SetConfig+0x1dd6>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	2b09      	cmp	r3, #9
 8009b22:	d00e      	beq.n	8009b42 <UART_SetConfig+0x1dd2>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	2b0a      	cmp	r3, #10
 8009b2a:	d008      	beq.n	8009b3e <UART_SetConfig+0x1dce>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	2b0b      	cmp	r3, #11
 8009b32:	d102      	bne.n	8009b3a <UART_SetConfig+0x1dca>
 8009b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b38:	e016      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e014      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b3e:	2380      	movs	r3, #128	; 0x80
 8009b40:	e012      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	e010      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b46:	2320      	movs	r3, #32
 8009b48:	e00e      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	e00c      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	e00a      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b52:	230a      	movs	r3, #10
 8009b54:	e008      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b56:	2308      	movs	r3, #8
 8009b58:	e006      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b5a:	2306      	movs	r3, #6
 8009b5c:	e004      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b5e:	2304      	movs	r3, #4
 8009b60:	e002      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b62:	2302      	movs	r3, #2
 8009b64:	e000      	b.n	8009b68 <UART_SetConfig+0x1df8>
 8009b66:	2301      	movs	r3, #1
 8009b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	085b      	lsrs	r3, r3, #1
 8009b74:	441a      	add	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b82:	e24f      	b.n	800a024 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b84:	f107 0318 	add.w	r3, r7, #24
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fc fd93 	bl	80066b4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d044      	beq.n	8009c22 <UART_SetConfig+0x1eb2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d03e      	beq.n	8009c1e <UART_SetConfig+0x1eae>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d038      	beq.n	8009c1a <UART_SetConfig+0x1eaa>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d032      	beq.n	8009c16 <UART_SetConfig+0x1ea6>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d02c      	beq.n	8009c12 <UART_SetConfig+0x1ea2>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	2b05      	cmp	r3, #5
 8009bbe:	d026      	beq.n	8009c0e <UART_SetConfig+0x1e9e>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	2b06      	cmp	r3, #6
 8009bc6:	d020      	beq.n	8009c0a <UART_SetConfig+0x1e9a>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	2b07      	cmp	r3, #7
 8009bce:	d01a      	beq.n	8009c06 <UART_SetConfig+0x1e96>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d014      	beq.n	8009c02 <UART_SetConfig+0x1e92>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d00e      	beq.n	8009bfe <UART_SetConfig+0x1e8e>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b0a      	cmp	r3, #10
 8009be6:	d008      	beq.n	8009bfa <UART_SetConfig+0x1e8a>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	2b0b      	cmp	r3, #11
 8009bee:	d102      	bne.n	8009bf6 <UART_SetConfig+0x1e86>
 8009bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bf4:	e016      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e014      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009bfa:	2380      	movs	r3, #128	; 0x80
 8009bfc:	e012      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009bfe:	2340      	movs	r3, #64	; 0x40
 8009c00:	e010      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c02:	2320      	movs	r3, #32
 8009c04:	e00e      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c06:	2310      	movs	r3, #16
 8009c08:	e00c      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	e00a      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c0e:	230a      	movs	r3, #10
 8009c10:	e008      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c12:	2308      	movs	r3, #8
 8009c14:	e006      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c16:	2306      	movs	r3, #6
 8009c18:	e004      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c1a:	2304      	movs	r3, #4
 8009c1c:	e002      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e000      	b.n	8009c24 <UART_SetConfig+0x1eb4>
 8009c22:	2301      	movs	r3, #1
 8009c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	085b      	lsrs	r3, r3, #1
 8009c2e:	441a      	add	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c3c:	e1f2      	b.n	800a024 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c3e:	f107 030c 	add.w	r3, r7, #12
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fc fe82 	bl	800694c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d044      	beq.n	8009cdc <UART_SetConfig+0x1f6c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d03e      	beq.n	8009cd8 <UART_SetConfig+0x1f68>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d038      	beq.n	8009cd4 <UART_SetConfig+0x1f64>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d032      	beq.n	8009cd0 <UART_SetConfig+0x1f60>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d02c      	beq.n	8009ccc <UART_SetConfig+0x1f5c>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b05      	cmp	r3, #5
 8009c78:	d026      	beq.n	8009cc8 <UART_SetConfig+0x1f58>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	2b06      	cmp	r3, #6
 8009c80:	d020      	beq.n	8009cc4 <UART_SetConfig+0x1f54>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b07      	cmp	r3, #7
 8009c88:	d01a      	beq.n	8009cc0 <UART_SetConfig+0x1f50>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b08      	cmp	r3, #8
 8009c90:	d014      	beq.n	8009cbc <UART_SetConfig+0x1f4c>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b09      	cmp	r3, #9
 8009c98:	d00e      	beq.n	8009cb8 <UART_SetConfig+0x1f48>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b0a      	cmp	r3, #10
 8009ca0:	d008      	beq.n	8009cb4 <UART_SetConfig+0x1f44>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b0b      	cmp	r3, #11
 8009ca8:	d102      	bne.n	8009cb0 <UART_SetConfig+0x1f40>
 8009caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cae:	e016      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e014      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cb4:	2380      	movs	r3, #128	; 0x80
 8009cb6:	e012      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cb8:	2340      	movs	r3, #64	; 0x40
 8009cba:	e010      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cbc:	2320      	movs	r3, #32
 8009cbe:	e00e      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	e00c      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cc4:	230c      	movs	r3, #12
 8009cc6:	e00a      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cc8:	230a      	movs	r3, #10
 8009cca:	e008      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	e006      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cd0:	2306      	movs	r3, #6
 8009cd2:	e004      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	e002      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	e000      	b.n	8009cde <UART_SetConfig+0x1f6e>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	441a      	add	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cf6:	e195      	b.n	800a024 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cf8:	4b87      	ldr	r3, [pc, #540]	; (8009f18 <UART_SetConfig+0x21a8>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d05d      	beq.n	8009dc0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d04:	4b84      	ldr	r3, [pc, #528]	; (8009f18 <UART_SetConfig+0x21a8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	08db      	lsrs	r3, r3, #3
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	4a83      	ldr	r2, [pc, #524]	; (8009f1c <UART_SetConfig+0x21ac>)
 8009d10:	40da      	lsrs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d044      	beq.n	8009da4 <UART_SetConfig+0x2034>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d03e      	beq.n	8009da0 <UART_SetConfig+0x2030>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d038      	beq.n	8009d9c <UART_SetConfig+0x202c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d032      	beq.n	8009d98 <UART_SetConfig+0x2028>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d02c      	beq.n	8009d94 <UART_SetConfig+0x2024>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	2b05      	cmp	r3, #5
 8009d40:	d026      	beq.n	8009d90 <UART_SetConfig+0x2020>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b06      	cmp	r3, #6
 8009d48:	d020      	beq.n	8009d8c <UART_SetConfig+0x201c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b07      	cmp	r3, #7
 8009d50:	d01a      	beq.n	8009d88 <UART_SetConfig+0x2018>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d014      	beq.n	8009d84 <UART_SetConfig+0x2014>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	d00e      	beq.n	8009d80 <UART_SetConfig+0x2010>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	2b0a      	cmp	r3, #10
 8009d68:	d008      	beq.n	8009d7c <UART_SetConfig+0x200c>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	2b0b      	cmp	r3, #11
 8009d70:	d102      	bne.n	8009d78 <UART_SetConfig+0x2008>
 8009d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d76:	e016      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e014      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d7c:	2380      	movs	r3, #128	; 0x80
 8009d7e:	e012      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	e010      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d84:	2320      	movs	r3, #32
 8009d86:	e00e      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d88:	2310      	movs	r3, #16
 8009d8a:	e00c      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d8c:	230c      	movs	r3, #12
 8009d8e:	e00a      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d90:	230a      	movs	r3, #10
 8009d92:	e008      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d94:	2308      	movs	r3, #8
 8009d96:	e006      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d98:	2306      	movs	r3, #6
 8009d9a:	e004      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	e002      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e000      	b.n	8009da6 <UART_SetConfig+0x2036>
 8009da4:	2301      	movs	r3, #1
 8009da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	085b      	lsrs	r3, r3, #1
 8009db0:	441a      	add	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009dbe:	e131      	b.n	800a024 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d043      	beq.n	8009e50 <UART_SetConfig+0x20e0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d03d      	beq.n	8009e4c <UART_SetConfig+0x20dc>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d037      	beq.n	8009e48 <UART_SetConfig+0x20d8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d031      	beq.n	8009e44 <UART_SetConfig+0x20d4>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	d02b      	beq.n	8009e40 <UART_SetConfig+0x20d0>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	2b05      	cmp	r3, #5
 8009dee:	d025      	beq.n	8009e3c <UART_SetConfig+0x20cc>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	2b06      	cmp	r3, #6
 8009df6:	d01f      	beq.n	8009e38 <UART_SetConfig+0x20c8>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	2b07      	cmp	r3, #7
 8009dfe:	d019      	beq.n	8009e34 <UART_SetConfig+0x20c4>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	2b08      	cmp	r3, #8
 8009e06:	d013      	beq.n	8009e30 <UART_SetConfig+0x20c0>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	2b09      	cmp	r3, #9
 8009e0e:	d00d      	beq.n	8009e2c <UART_SetConfig+0x20bc>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	2b0a      	cmp	r3, #10
 8009e16:	d007      	beq.n	8009e28 <UART_SetConfig+0x20b8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	2b0b      	cmp	r3, #11
 8009e1e:	d101      	bne.n	8009e24 <UART_SetConfig+0x20b4>
 8009e20:	4b3f      	ldr	r3, [pc, #252]	; (8009f20 <UART_SetConfig+0x21b0>)
 8009e22:	e016      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e24:	4b3d      	ldr	r3, [pc, #244]	; (8009f1c <UART_SetConfig+0x21ac>)
 8009e26:	e014      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e28:	4b3e      	ldr	r3, [pc, #248]	; (8009f24 <UART_SetConfig+0x21b4>)
 8009e2a:	e012      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e2c:	4b3e      	ldr	r3, [pc, #248]	; (8009f28 <UART_SetConfig+0x21b8>)
 8009e2e:	e010      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e30:	4b3e      	ldr	r3, [pc, #248]	; (8009f2c <UART_SetConfig+0x21bc>)
 8009e32:	e00e      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e34:	4b3e      	ldr	r3, [pc, #248]	; (8009f30 <UART_SetConfig+0x21c0>)
 8009e36:	e00c      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e38:	4b3e      	ldr	r3, [pc, #248]	; (8009f34 <UART_SetConfig+0x21c4>)
 8009e3a:	e00a      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e3c:	4b3e      	ldr	r3, [pc, #248]	; (8009f38 <UART_SetConfig+0x21c8>)
 8009e3e:	e008      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e40:	4b3e      	ldr	r3, [pc, #248]	; (8009f3c <UART_SetConfig+0x21cc>)
 8009e42:	e006      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e44:	4b3e      	ldr	r3, [pc, #248]	; (8009f40 <UART_SetConfig+0x21d0>)
 8009e46:	e004      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e48:	4b3e      	ldr	r3, [pc, #248]	; (8009f44 <UART_SetConfig+0x21d4>)
 8009e4a:	e002      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e4c:	4b3e      	ldr	r3, [pc, #248]	; (8009f48 <UART_SetConfig+0x21d8>)
 8009e4e:	e000      	b.n	8009e52 <UART_SetConfig+0x20e2>
 8009e50:	4b32      	ldr	r3, [pc, #200]	; (8009f1c <UART_SetConfig+0x21ac>)
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6852      	ldr	r2, [r2, #4]
 8009e56:	0852      	lsrs	r2, r2, #1
 8009e58:	441a      	add	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e66:	e0dd      	b.n	800a024 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d046      	beq.n	8009efe <UART_SetConfig+0x218e>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d040      	beq.n	8009efa <UART_SetConfig+0x218a>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d03a      	beq.n	8009ef6 <UART_SetConfig+0x2186>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d034      	beq.n	8009ef2 <UART_SetConfig+0x2182>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d02e      	beq.n	8009eee <UART_SetConfig+0x217e>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	2b05      	cmp	r3, #5
 8009e96:	d028      	beq.n	8009eea <UART_SetConfig+0x217a>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b06      	cmp	r3, #6
 8009e9e:	d022      	beq.n	8009ee6 <UART_SetConfig+0x2176>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b07      	cmp	r3, #7
 8009ea6:	d01c      	beq.n	8009ee2 <UART_SetConfig+0x2172>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	2b08      	cmp	r3, #8
 8009eae:	d016      	beq.n	8009ede <UART_SetConfig+0x216e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d00f      	beq.n	8009ed8 <UART_SetConfig+0x2168>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b0a      	cmp	r3, #10
 8009ebe:	d008      	beq.n	8009ed2 <UART_SetConfig+0x2162>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	2b0b      	cmp	r3, #11
 8009ec6:	d102      	bne.n	8009ece <UART_SetConfig+0x215e>
 8009ec8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009ecc:	e018      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ece:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <UART_SetConfig+0x21c0>)
 8009ed0:	e016      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ed2:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009ed6:	e013      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ed8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009edc:	e010      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ede:	4b1b      	ldr	r3, [pc, #108]	; (8009f4c <UART_SetConfig+0x21dc>)
 8009ee0:	e00e      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <UART_SetConfig+0x21b0>)
 8009ee4:	e00c      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ee6:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <UART_SetConfig+0x21e0>)
 8009ee8:	e00a      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009eea:	4b1a      	ldr	r3, [pc, #104]	; (8009f54 <UART_SetConfig+0x21e4>)
 8009eec:	e008      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009eee:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <UART_SetConfig+0x21b4>)
 8009ef0:	e006      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ef2:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <UART_SetConfig+0x21e8>)
 8009ef4:	e004      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <UART_SetConfig+0x21b8>)
 8009ef8:	e002      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009efa:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <UART_SetConfig+0x21bc>)
 8009efc:	e000      	b.n	8009f00 <UART_SetConfig+0x2190>
 8009efe:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <UART_SetConfig+0x21c0>)
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6852      	ldr	r2, [r2, #4]
 8009f04:	0852      	lsrs	r2, r2, #1
 8009f06:	441a      	add	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f14:	e086      	b.n	800a024 <UART_SetConfig+0x22b4>
 8009f16:	bf00      	nop
 8009f18:	58024400 	.word	0x58024400
 8009f1c:	03d09000 	.word	0x03d09000
 8009f20:	0003d090 	.word	0x0003d090
 8009f24:	0007a120 	.word	0x0007a120
 8009f28:	000f4240 	.word	0x000f4240
 8009f2c:	001e8480 	.word	0x001e8480
 8009f30:	003d0900 	.word	0x003d0900
 8009f34:	00516155 	.word	0x00516155
 8009f38:	0061a800 	.word	0x0061a800
 8009f3c:	007a1200 	.word	0x007a1200
 8009f40:	00a2c2aa 	.word	0x00a2c2aa
 8009f44:	00f42400 	.word	0x00f42400
 8009f48:	01e84800 	.word	0x01e84800
 8009f4c:	0001e848 	.word	0x0001e848
 8009f50:	00051615 	.word	0x00051615
 8009f54:	00061a80 	.word	0x00061a80
 8009f58:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d04e      	beq.n	800a002 <UART_SetConfig+0x2292>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d047      	beq.n	8009ffc <UART_SetConfig+0x228c>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d040      	beq.n	8009ff6 <UART_SetConfig+0x2286>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d039      	beq.n	8009ff0 <UART_SetConfig+0x2280>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d032      	beq.n	8009fea <UART_SetConfig+0x227a>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	2b05      	cmp	r3, #5
 8009f8a:	d02b      	beq.n	8009fe4 <UART_SetConfig+0x2274>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	2b06      	cmp	r3, #6
 8009f92:	d024      	beq.n	8009fde <UART_SetConfig+0x226e>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	2b07      	cmp	r3, #7
 8009f9a:	d01d      	beq.n	8009fd8 <UART_SetConfig+0x2268>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d016      	beq.n	8009fd2 <UART_SetConfig+0x2262>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	2b09      	cmp	r3, #9
 8009faa:	d00f      	beq.n	8009fcc <UART_SetConfig+0x225c>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	2b0a      	cmp	r3, #10
 8009fb2:	d008      	beq.n	8009fc6 <UART_SetConfig+0x2256>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb8:	2b0b      	cmp	r3, #11
 8009fba:	d101      	bne.n	8009fc0 <UART_SetConfig+0x2250>
 8009fbc:	2380      	movs	r3, #128	; 0x80
 8009fbe:	e022      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc4:	e01f      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fca:	e01c      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fd0:	e019      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd6:	e016      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fdc:	e013      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fde:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009fe2:	e010      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fe4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009fe8:	e00d      	b.n	800a006 <UART_SetConfig+0x2296>
 8009fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fee:	e00a      	b.n	800a006 <UART_SetConfig+0x2296>
 8009ff0:	f241 5355 	movw	r3, #5461	; 0x1555
 8009ff4:	e007      	b.n	800a006 <UART_SetConfig+0x2296>
 8009ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ffa:	e004      	b.n	800a006 <UART_SetConfig+0x2296>
 8009ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a000:	e001      	b.n	800a006 <UART_SetConfig+0x2296>
 800a002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6852      	ldr	r2, [r2, #4]
 800a00a:	0852      	lsrs	r2, r2, #1
 800a00c:	441a      	add	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	fbb2 f3f3 	udiv	r3, r2, r3
 800a016:	b29b      	uxth	r3, r3
 800a018:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a01a:	e003      	b.n	800a024 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a022:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a026:	2b0f      	cmp	r3, #15
 800a028:	d908      	bls.n	800a03c <UART_SetConfig+0x22cc>
 800a02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a030:	d204      	bcs.n	800a03c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a038:	60da      	str	r2, [r3, #12]
 800a03a:	e002      	b.n	800a042 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a05e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a062:	4618      	mov	r0, r3
 800a064:	3740      	adds	r7, #64	; 0x40
 800a066:	46bd      	mov	sp, r7
 800a068:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a06c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00a      	beq.n	800a096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00a      	beq.n	800a0b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0bc:	f003 0304 	and.w	r3, r3, #4
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00a      	beq.n	800a0da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	f003 0308 	and.w	r3, r3, #8
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00a      	beq.n	800a11e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a122:	f003 0320 	and.w	r3, r3, #32
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00a      	beq.n	800a140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d01a      	beq.n	800a182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	430a      	orrs	r2, r1
 800a160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a16a:	d10a      	bne.n	800a182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	605a      	str	r2, [r3, #4]
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a1c0:	f7f7 f982 	bl	80014c8 <HAL_GetTick>
 800a1c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d10e      	bne.n	800a1f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f82c 	bl	800a240 <UART_WaitOnFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e022      	b.n	800a238 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0304 	and.w	r3, r3, #4
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d10e      	bne.n	800a21e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f816 	bl	800a240 <UART_WaitOnFlagUntilTimeout>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e00c      	b.n	800a238 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2220      	movs	r2, #32
 800a222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a250:	e062      	b.n	800a318 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a258:	d05e      	beq.n	800a318 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a25a:	f7f7 f935 	bl	80014c8 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	429a      	cmp	r2, r3
 800a268:	d302      	bcc.n	800a270 <UART_WaitOnFlagUntilTimeout+0x30>
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d11d      	bne.n	800a2ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a27e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689a      	ldr	r2, [r3, #8]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f022 0201 	bic.w	r2, r2, #1
 800a28e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2220      	movs	r2, #32
 800a294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2220      	movs	r2, #32
 800a29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e045      	b.n	800a338 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d02e      	beq.n	800a318 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2c8:	d126      	bne.n	800a318 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2d2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f022 0201 	bic.w	r2, r2, #1
 800a2f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2220      	movs	r2, #32
 800a308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e00f      	b.n	800a338 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	69da      	ldr	r2, [r3, #28]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4013      	ands	r3, r2
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	429a      	cmp	r2, r3
 800a326:	bf0c      	ite	eq
 800a328:	2301      	moveq	r3, #1
 800a32a:	2300      	movne	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	429a      	cmp	r2, r3
 800a334:	d08d      	beq.n	800a252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a356:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a366:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a392:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6899      	ldr	r1, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	4b08      	ldr	r3, [pc, #32]	; (800a3c0 <UART_EndRxTransfer+0x44>)
 800a3a0:	400b      	ands	r3, r1
 800a3a2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	effffffe 	.word	0xeffffffe

0800a3c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3da:	d01f      	beq.n	800a41c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3f2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f022 0201 	bic.w	r2, r2, #1
 800a402:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a412:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2220      	movs	r2, #32
 800a418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f7fd fc89 	bl	8007d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7fd fc85 	bl	8007d48 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b086      	sub	sp, #24
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a45a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a462:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46e:	2b80      	cmp	r3, #128	; 0x80
 800a470:	d109      	bne.n	800a486 <UART_DMAError+0x40>
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b21      	cmp	r3, #33	; 0x21
 800a476:	d106      	bne.n	800a486 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a480:	6978      	ldr	r0, [r7, #20]
 800a482:	f7ff ff5d 	bl	800a340 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a490:	2b40      	cmp	r3, #64	; 0x40
 800a492:	d109      	bne.n	800a4a8 <UART_DMAError+0x62>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b22      	cmp	r3, #34	; 0x22
 800a498:	d106      	bne.n	800a4a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a4a2:	6978      	ldr	r0, [r7, #20]
 800a4a4:	f7ff ff6a 	bl	800a37c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ae:	f043 0210 	orr.w	r2, r3, #16
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4b8:	6978      	ldr	r0, [r7, #20]
 800a4ba:	f7fd fc4f 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4be:	bf00      	nop
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f7fd fc39 	bl	8007d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ea:	bf00      	nop
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a508:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2220      	movs	r2, #32
 800a50e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7fd fc01 	bl	8007d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a542:	bf00      	nop
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a54e:	b480      	push	{r7}
 800a550:	b083      	sub	sp, #12
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a556:	bf00      	nop
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a570:	2b01      	cmp	r3, #1
 800a572:	d101      	bne.n	800a578 <HAL_UARTEx_DisableFifoMode+0x16>
 800a574:	2302      	movs	r3, #2
 800a576:	e027      	b.n	800a5c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2224      	movs	r2, #36	; 0x24
 800a584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 0201 	bic.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a5a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e02d      	b.n	800a648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2224      	movs	r2, #36	; 0x24
 800a5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0201 	bic.w	r2, r2, #1
 800a612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f84f 	bl	800a6cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a660:	2b01      	cmp	r3, #1
 800a662:	d101      	bne.n	800a668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a664:	2302      	movs	r3, #2
 800a666:	e02d      	b.n	800a6c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2224      	movs	r2, #36	; 0x24
 800a674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f022 0201 	bic.w	r2, r2, #1
 800a68e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f811 	bl	800a6cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b089      	sub	sp, #36	; 0x24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a6d4:	4a2f      	ldr	r2, [pc, #188]	; (800a794 <UARTEx_SetNbDataToProcess+0xc8>)
 800a6d6:	f107 0314 	add.w	r3, r7, #20
 800a6da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a6e2:	4a2d      	ldr	r2, [pc, #180]	; (800a798 <UARTEx_SetNbDataToProcess+0xcc>)
 800a6e4:	f107 030c 	add.w	r3, r7, #12
 800a6e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d108      	bne.n	800a70a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a708:	e03d      	b.n	800a786 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a70a:	2308      	movs	r3, #8
 800a70c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a70e:	2308      	movs	r3, #8
 800a710:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	0e5b      	lsrs	r3, r3, #25
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	f003 0307 	and.w	r3, r3, #7
 800a720:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	0f5b      	lsrs	r3, r3, #29
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a732:	7fbb      	ldrb	r3, [r7, #30]
 800a734:	7f3a      	ldrb	r2, [r7, #28]
 800a736:	f107 0120 	add.w	r1, r7, #32
 800a73a:	440a      	add	r2, r1
 800a73c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	7f3a      	ldrb	r2, [r7, #28]
 800a746:	f107 0120 	add.w	r1, r7, #32
 800a74a:	440a      	add	r2, r1
 800a74c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a750:	fb93 f3f2 	sdiv	r3, r3, r2
 800a754:	b29a      	uxth	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a75c:	7ffb      	ldrb	r3, [r7, #31]
 800a75e:	7f7a      	ldrb	r2, [r7, #29]
 800a760:	f107 0120 	add.w	r1, r7, #32
 800a764:	440a      	add	r2, r1
 800a766:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a76a:	fb02 f303 	mul.w	r3, r2, r3
 800a76e:	7f7a      	ldrb	r2, [r7, #29]
 800a770:	f107 0120 	add.w	r1, r7, #32
 800a774:	440a      	add	r2, r1
 800a776:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a77a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a786:	bf00      	nop
 800a788:	3724      	adds	r7, #36	; 0x24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	0800a83c 	.word	0x0800a83c
 800a798:	0800a844 	.word	0x0800a844

0800a79c <__libc_init_array>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	4e0d      	ldr	r6, [pc, #52]	; (800a7d4 <__libc_init_array+0x38>)
 800a7a0:	4c0d      	ldr	r4, [pc, #52]	; (800a7d8 <__libc_init_array+0x3c>)
 800a7a2:	1ba4      	subs	r4, r4, r6
 800a7a4:	10a4      	asrs	r4, r4, #2
 800a7a6:	2500      	movs	r5, #0
 800a7a8:	42a5      	cmp	r5, r4
 800a7aa:	d109      	bne.n	800a7c0 <__libc_init_array+0x24>
 800a7ac:	4e0b      	ldr	r6, [pc, #44]	; (800a7dc <__libc_init_array+0x40>)
 800a7ae:	4c0c      	ldr	r4, [pc, #48]	; (800a7e0 <__libc_init_array+0x44>)
 800a7b0:	f000 f820 	bl	800a7f4 <_init>
 800a7b4:	1ba4      	subs	r4, r4, r6
 800a7b6:	10a4      	asrs	r4, r4, #2
 800a7b8:	2500      	movs	r5, #0
 800a7ba:	42a5      	cmp	r5, r4
 800a7bc:	d105      	bne.n	800a7ca <__libc_init_array+0x2e>
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7c4:	4798      	blx	r3
 800a7c6:	3501      	adds	r5, #1
 800a7c8:	e7ee      	b.n	800a7a8 <__libc_init_array+0xc>
 800a7ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7ce:	4798      	blx	r3
 800a7d0:	3501      	adds	r5, #1
 800a7d2:	e7f2      	b.n	800a7ba <__libc_init_array+0x1e>
 800a7d4:	0800a86c 	.word	0x0800a86c
 800a7d8:	0800a86c 	.word	0x0800a86c
 800a7dc:	0800a86c 	.word	0x0800a86c
 800a7e0:	0800a870 	.word	0x0800a870

0800a7e4 <memset>:
 800a7e4:	4402      	add	r2, r0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d100      	bne.n	800a7ee <memset+0xa>
 800a7ec:	4770      	bx	lr
 800a7ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f2:	e7f9      	b.n	800a7e8 <memset+0x4>

0800a7f4 <_init>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	bf00      	nop
 800a7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fa:	bc08      	pop	{r3}
 800a7fc:	469e      	mov	lr, r3
 800a7fe:	4770      	bx	lr

0800a800 <_fini>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr
