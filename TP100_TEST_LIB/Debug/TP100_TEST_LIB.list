
TP100_TEST_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800b020  0800b020  0001b020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3b4  0800b3b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3b4  0800b3b4  0001b3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3bc  0800b3bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3bc  0800b3bc  0001b3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3c0  0800b3c0  0001b3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d28  200001e4  0800b5a8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f0c  0800b5a8  00022f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002011e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d16  00000000  00000000  00040332  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b0  00000000  00000000  00044048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c8  00000000  00000000  000459f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006ae6  00000000  00000000  000471c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015b56  00000000  00000000  0004dca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111cbb  00000000  00000000  000637fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001754b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076c4  00000000  00000000  00175534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b008 	.word	0x0800b008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b008 	.word	0x0800b008

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f006 fb82 	bl	800769a <osDelay>
  #else
  HAL_Delay(delay_ms);
  #endif  
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b088      	sub	sp, #32
 8000fa2:	af02      	add	r7, sp, #8
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	460b      	mov	r3, r1
 8000fac:	72fb      	strb	r3, [r7, #11]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	72bb      	strb	r3, [r7, #10]
  uint8_t tmp = 0xFF;
 8000fb2:	23ff      	movs	r3, #255	; 0xff
 8000fb4:	75fb      	strb	r3, [r7, #23]
	addr &= 0x7F;
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f002 feb6 	bl	8003d3c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6898      	ldr	r0, [r3, #8]
 8000fd4:	f107 010b 	add.w	r1, r7, #11
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f004 fa80 	bl	80054e0 <HAL_SPI_Transmit>
	while (n--)
 8000fe0:	e00c      	b.n	8000ffc <Max31865_readRegisterN+0x5e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6898      	ldr	r0, [r3, #8]
 8000fe6:	f107 0117 	add.w	r1, r7, #23
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	f004 fbdb 	bl	80057ac <HAL_SPI_TransmitReceive>
		buffer++;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
	while (n--)
 8000ffc:	7abb      	ldrb	r3, [r7, #10]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	72ba      	strb	r2, [r7, #10]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1ed      	bne.n	8000fe2 <Max31865_readRegisterN+0x44>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);      
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	889b      	ldrh	r3, [r3, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	4619      	mov	r1, r3
 8001012:	f002 fe93 	bl	8003d3c <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 800102e:	f107 020f 	add.w	r2, r7, #15
 8001032:	78f9      	ldrb	r1, [r7, #3]
 8001034:	2301      	movs	r3, #1
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb1 	bl	8000f9e <Max31865_readRegisterN>
	return ret;  
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0, 0};
 8001052:	2300      	movs	r3, #0
 8001054:	733b      	strb	r3, [r7, #12]
 8001056:	2300      	movs	r3, #0
 8001058:	737b      	strb	r3, [r7, #13]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 800105a:	f107 020c 	add.w	r2, r7, #12
 800105e:	78f9      	ldrb	r1, [r7, #3]
 8001060:	2302      	movs	r3, #2
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff9b 	bl	8000f9e <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	81fb      	strh	r3, [r7, #14]
	ret |=  buffer[1];
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b29a      	uxth	r2, r3
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	4313      	orrs	r3, r2
 800107a:	81fb      	strh	r3, [r7, #14]
	return ret;
 800107c:	89fb      	ldrh	r3, [r7, #14]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	70fb      	strb	r3, [r7, #3]
 8001092:	4613      	mov	r3, r2
 8001094:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	889b      	ldrh	r3, [r3, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	f002 fe4b 	bl	8003d3c <HAL_GPIO_WritePin>
  addr |= 0x80;
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);   
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6898      	ldr	r0, [r3, #8]
 80010b4:	1cf9      	adds	r1, r7, #3
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2201      	movs	r2, #1
 80010ba:	f004 fa11 	bl	80054e0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	1cb9      	adds	r1, r7, #2
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	f004 fa0a 	bl	80054e0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);          
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	889b      	ldrh	r3, [r3, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	f002 fe30 	bl	8003d3c <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 80010ec:	2107      	movs	r1, #7
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff95 	bl	800101e <Max31865_readRegister8>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001106:	2100      	movs	r1, #0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff88 	bl	800101e <Max31865_readRegister8>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
	t &= ~0x2C;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 8001118:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_FAULTSTAT;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	461a      	mov	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffac 	bl	8001086 <Max31865_writeRegister8>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001142:	2100      	movs	r1, #0
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff6a 	bl	800101e <Max31865_readRegister8>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
	if (enable)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <Max31865_enableBias+0x28>
		t |= MAX31856_CONFIG_BIAS;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e003      	b.n	8001166 <Max31865_enableBias+0x30>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001164:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	461a      	mov	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff8a 	bl	8001086 <Max31865_writeRegister8>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001186:	2100      	movs	r1, #0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff48 	bl	800101e <Max31865_readRegister8>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
	if (enable)
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d004      	beq.n	80011a2 <Max31865_autoConvert+0x28>
		t |= MAX31856_CONFIG_MODEAUTO;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e003      	b.n	80011aa <Max31865_autoConvert+0x30>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO; 
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a8:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff68 	bl	8001086 <Max31865_writeRegister8>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff26 	bl	800101e <Max31865_readRegister8>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
	if (numWires == 3)
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d104      	bne.n	80011e6 <Max31865_setWires+0x28>
		t |= MAX31856_CONFIG_3WIRE;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e003      	b.n	80011ee <Max31865_setWires+0x30>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f023 0310 	bic.w	r3, r3, #16
 80011ec:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	461a      	mov	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff46 	bl	8001086 <Max31865_writeRegister8>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800120e:	2100      	movs	r1, #0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff04 	bl	800101e <Max31865_readRegister8>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
	if (filterHz == 50)
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	2b32      	cmp	r3, #50	; 0x32
 800121e:	d104      	bne.n	800122a <Max31865_setFilter+0x28>
		t |= MAX31856_CONFIG_FILT50HZ;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e003      	b.n	8001232 <Max31865_setFilter+0x30>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	461a      	mov	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff24 	bl	8001086 <Max31865_writeRegister8>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff55 	bl	80010fe <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff6d 	bl	8001136 <Max31865_enableBias>
	Max31865_delay(10);
 800125c:	200a      	movs	r0, #10
 800125e:	f7ff fe93 	bl	8000f88 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff feda 	bl	800101e <Max31865_readRegister8>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_1SHOT;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	461a      	mov	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff02 	bl	8001086 <Max31865_writeRegister8>
	Max31865_delay(65);
 8001282:	2041      	movs	r0, #65	; 0x41
 8001284:	f7ff fe80 	bl	8000f88 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8001288:	2101      	movs	r1, #1
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fedb 	bl	8001046 <Max31865_readRegister16>
 8001290:	4603      	mov	r3, r0
 8001292:	81bb      	strh	r3, [r7, #12]
	rtd >>= 1;
 8001294:	89bb      	ldrh	r3, [r7, #12]
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	81bb      	strh	r3, [r7, #12]
	return rtd;
 800129a:	89bb      	ldrh	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	807b      	strh	r3, [r7, #2]
  if(max31865->lock == 1)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	7b1b      	ldrb	r3, [r3, #12]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <Max31865_init+0x1c>
    Max31865_delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fe64 	bl	8000f88 <Max31865_delay>
  max31865->lock = 1;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin; 
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	f002 fd2a 	bl	8003d3c <HAL_GPIO_WritePin>
  Max31865_delay(100);
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f7ff fe4d 	bl	8000f88 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 80012ee:	7e3b      	ldrb	r3, [r7, #24]
 80012f0:	4619      	mov	r1, r3
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff ff63 	bl	80011be <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff ff1b 	bl	8001136 <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff39 	bl	800117a <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f7ff fef8 	bl	80010fe <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);  
 800130e:	7f3b      	ldrb	r3, [r7, #28]
 8001310:	4619      	mov	r1, r3
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff ff75 	bl	8001202 <Max31865_setFilter>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <Max31865_readTempC>:
//#########################################################################################################################
bool Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  if(max31865->lock == 1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d102      	bne.n	8001338 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fe28 	bl	8000f88 <Max31865_delay>
  max31865->lock = 1;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	731a      	strb	r2, [r3, #12]
  bool isOk = false;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff7e 	bl	8001246 <Max31865_readRTD>
 800134a:	4603      	mov	r3, r0
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001354:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt /= 32768;
 8001358:	ed97 7a08 	vldr	s14, [r7, #32]
 800135c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80015c0 <Max31865_readTempC+0x2a0>
 8001360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001364:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= _MAX31865_RREF;
 8001368:	edd7 7a08 	vldr	s15, [r7, #32]
 800136c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80015c4 <Max31865_readTempC+0x2a4>
 8001370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001374:	edc7 7a08 	vstr	s15, [r7, #32]
	Z1 = -RTD_A;
 8001378:	4b93      	ldr	r3, [pc, #588]	; (80015c8 <Max31865_readTempC+0x2a8>)
 800137a:	61fb      	str	r3, [r7, #28]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 800137c:	4b93      	ldr	r3, [pc, #588]	; (80015cc <Max31865_readTempC+0x2ac>)
 800137e:	61bb      	str	r3, [r7, #24]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 8001380:	4b93      	ldr	r3, [pc, #588]	; (80015d0 <Max31865_readTempC+0x2b0>)
 8001382:	617b      	str	r3, [r7, #20]
	Z4 = 2 * RTD_B;
 8001384:	4b93      	ldr	r3, [pc, #588]	; (80015d4 <Max31865_readTempC+0x2b4>)
 8001386:	613b      	str	r3, [r7, #16]
	temp = Z2 + (Z3 * Rt);
 8001388:	ed97 7a05 	vldr	s14, [r7, #20]
 800138c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	ed97 7a06 	vldr	s14, [r7, #24]
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	edc7 7a03 	vstr	s15, [r7, #12]
	temp = (sqrtf(temp) + Z1) / Z4;
 80013a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80013a4:	f009 fc1e 	bl	800abe4 <sqrtf>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80013b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80013b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013bc:	edc7 7a03 	vstr	s15, [r7, #12]

	if (temp >= 0)
 80013c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	db11      	blt.n	80013f2 <Max31865_readTempC+0xd2>
  {
    *readTemp = temp; 
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	601a      	str	r2, [r3, #0]
    if(Max31865_readFault(max31865) == 0)
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe85 	bl	80010e4 <Max31865_readFault>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <Max31865_readTempC+0xc6>
      isOk = true;        
 80013e0:	2301      	movs	r3, #1
 80013e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    max31865->lock = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	731a      	strb	r2, [r3, #12]
    return isOk;
 80013ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f0:	e0cb      	b.n	800158a <Max31865_readTempC+0x26a>
  }
	Rt /= _MAX31865_RNOMINAL;
 80013f2:	ed97 7a08 	vldr	s14, [r7, #32]
 80013f6:	eddf 6a78 	vldr	s13, [pc, #480]	; 80015d8 <Max31865_readTempC+0x2b8>
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= 100;    
 8001402:	edd7 7a08 	vldr	s15, [r7, #32]
 8001406:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80015d8 <Max31865_readTempC+0x2b8>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	edc7 7a08 	vstr	s15, [r7, #32]
	float rpoly = Rt;
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	60bb      	str	r3, [r7, #8]
	temp = -242.02;
 8001416:	4b71      	ldr	r3, [pc, #452]	; (80015dc <Max31865_readTempC+0x2bc>)
 8001418:	60fb      	str	r3, [r7, #12]
	temp += 2.2228 * rpoly;
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f7ff f894 	bl	8000548 <__aeabi_f2d>
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_f2d>
 800142a:	a35b      	add	r3, pc, #364	; (adr r3, 8001598 <Max31865_readTempC+0x278>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f8e2 	bl	80005f8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7fe ff26 	bl	800028c <__adddf3>
 8001440:	4603      	mov	r3, r0
 8001442:	460c      	mov	r4, r1
 8001444:	4618      	mov	r0, r3
 8001446:	4621      	mov	r1, r4
 8001448:	f7ff fbce 	bl	8000be8 <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // square
 8001450:	ed97 7a02 	vldr	s14, [r7, #8]
 8001454:	edd7 7a08 	vldr	s15, [r7, #32]
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 2.5859e-3 * rpoly;
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff f871 	bl	8000548 <__aeabi_f2d>
 8001466:	4604      	mov	r4, r0
 8001468:	460d      	mov	r5, r1
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff f86c 	bl	8000548 <__aeabi_f2d>
 8001470:	a34b      	add	r3, pc, #300	; (adr r3, 80015a0 <Max31865_readTempC+0x280>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f8bf 	bl	80005f8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe ff03 	bl	800028c <__adddf3>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	4618      	mov	r0, r3
 800148c:	4621      	mov	r1, r4
 800148e:	f7ff fbab 	bl	8000be8 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^3
 8001496:	ed97 7a02 	vldr	s14, [r7, #8]
 800149a:	edd7 7a08 	vldr	s15, [r7, #32]
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 4.8260e-6 * rpoly;
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff f84e 	bl	8000548 <__aeabi_f2d>
 80014ac:	4604      	mov	r4, r0
 80014ae:	460d      	mov	r5, r1
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f7ff f849 	bl	8000548 <__aeabi_f2d>
 80014b6:	a33c      	add	r3, pc, #240	; (adr r3, 80015a8 <Max31865_readTempC+0x288>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f89c 	bl	80005f8 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fede 	bl	8000288 <__aeabi_dsub>
 80014cc:	4603      	mov	r3, r0
 80014ce:	460c      	mov	r4, r1
 80014d0:	4618      	mov	r0, r3
 80014d2:	4621      	mov	r1, r4
 80014d4:	f7ff fb88 	bl	8000be8 <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^4
 80014dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 2.8183e-8 * rpoly;
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff f82b 	bl	8000548 <__aeabi_f2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f7ff f826 	bl	8000548 <__aeabi_f2d>
 80014fc:	a32c      	add	r3, pc, #176	; (adr r3, 80015b0 <Max31865_readTempC+0x290>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f879 	bl	80005f8 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7fe febb 	bl	8000288 <__aeabi_dsub>
 8001512:	4603      	mov	r3, r0
 8001514:	460c      	mov	r4, r1
 8001516:	4618      	mov	r0, r3
 8001518:	4621      	mov	r1, r4
 800151a:	f7ff fb65 	bl	8000be8 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^5
 8001522:	ed97 7a02 	vldr	s14, [r7, #8]
 8001526:	edd7 7a08 	vldr	s15, [r7, #32]
 800152a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152e:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 1.5243e-10 * rpoly;
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff f808 	bl	8000548 <__aeabi_f2d>
 8001538:	4604      	mov	r4, r0
 800153a:	460d      	mov	r5, r1
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	a31d      	add	r3, pc, #116	; (adr r3, 80015b8 <Max31865_readTempC+0x298>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f856 	bl	80005f8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7fe fe9a 	bl	800028c <__adddf3>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	4618      	mov	r0, r3
 800155e:	4621      	mov	r1, r4
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]

  *readTemp = temp; 
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	601a      	str	r2, [r3, #0]
  if(Max31865_readFault(max31865) == 0)
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fdb8 	bl	80010e4 <Max31865_readFault>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <Max31865_readTempC+0x260>
    isOk = true;        
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  max31865->lock = 0;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	731a      	strb	r2, [r3, #12]
  return isOk;  
 8001586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800158a:	4618      	mov	r0, r3
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bdb0      	pop	{r4, r5, r7, pc}
 8001592:	bf00      	nop
 8001594:	f3af 8000 	nop.w
 8001598:	5dcc63f1 	.word	0x5dcc63f1
 800159c:	4001c84b 	.word	0x4001c84b
 80015a0:	7dc882bb 	.word	0x7dc882bb
 80015a4:	3f652f06 	.word	0x3f652f06
 80015a8:	c766c293 	.word	0xc766c293
 80015ac:	3ed43de0 	.word	0x3ed43de0
 80015b0:	513156ce 	.word	0x513156ce
 80015b4:	3e5e42e2 	.word	0x3e5e42e2
 80015b8:	61e4fa3e 	.word	0x61e4fa3e
 80015bc:	3de4f327 	.word	0x3de4f327
 80015c0:	47000000 	.word	0x47000000
 80015c4:	43d70000 	.word	0x43d70000
 80015c8:	bb801132 	.word	0xbb801132
 80015cc:	37938317 	.word	0x37938317
 80015d0:	b2c66d70 	.word	0xb2c66d70
 80015d4:	b59b057f 	.word	0xb59b057f
 80015d8:	42c80000 	.word	0x42c80000
 80015dc:	c372051f 	.word	0xc372051f

080015e0 <Max31865_Filter>:
  *readTemp = (*readTemp * 9.0f / 5.0f) + 32.0f;
  return isOk;
}
//#########################################################################################################################
float Max31865_Filter(float	newInput, float	lastOutput, float efectiveFactor)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80015ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80015ee:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((float)lastOutput*(1.0f-efectiveFactor)) + ((float)newInput*efectiveFactor) ;
 80015f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001606:	edd7 6a03 	vldr	s13, [r7, #12]
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001616:	eeb0 0a67 	vmov.f32	s0, s15
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
 8001644:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <MX_ADC1_Init+0xe8>)
 8001648:	4a31      	ldr	r2, [pc, #196]	; (8001710 <MX_ADC1_Init+0xec>)
 800164a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <MX_ADC1_Init+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <MX_ADC1_Init+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <MX_ADC1_Init+0xe8>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165e:	4b2b      	ldr	r3, [pc, #172]	; (800170c <MX_ADC1_Init+0xe8>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <MX_ADC1_Init+0xe8>)
 8001666:	2204      	movs	r2, #4
 8001668:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <MX_ADC1_Init+0xe8>)
 800166c:	2200      	movs	r2, #0
 800166e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <MX_ADC1_Init+0xe8>)
 8001672:	2200      	movs	r2, #0
 8001674:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_ADC1_Init+0xe8>)
 8001678:	2201      	movs	r2, #1
 800167a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <MX_ADC1_Init+0xe8>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_ADC1_Init+0xe8>)
 8001686:	2201      	movs	r2, #1
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_ADC1_Init+0xe8>)
 800168c:	2200      	movs	r2, #0
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_ADC1_Init+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_ADC1_Init+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_ADC1_Init+0xe8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_ADC1_Init+0xe8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ac:	4817      	ldr	r0, [pc, #92]	; (800170c <MX_ADC1_Init+0xe8>)
 80016ae:	f001 f93f 	bl	8002930 <HAL_ADC_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80016b8:	f000 fb98 	bl	8001dec <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4811      	ldr	r0, [pc, #68]	; (800170c <MX_ADC1_Init+0xe8>)
 80016c8:	f002 f802 	bl	80036d0 <HAL_ADCEx_MultiModeConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80016d2:	f000 fb8b 	bl	8001dec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_ADC1_Init+0xf0>)
 80016d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016da:	2306      	movs	r3, #6
 80016dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016e2:	237f      	movs	r3, #127	; 0x7f
 80016e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016e6:	2304      	movs	r3, #4
 80016e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_ADC1_Init+0xe8>)
 80016f4:	f001 fc08 	bl	8002f08 <HAL_ADC_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016fe:	f000 fb75 	bl	8001dec <Error_Handler>
  }

}
 8001702:	bf00      	nop
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20002cbc 	.word	0x20002cbc
 8001710:	50040000 	.word	0x50040000
 8001714:	2e300800 	.word	0x2e300800

08001718 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_ADC_MspInit+0x74>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d124      	bne.n	8001784 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_ADC_MspInit+0x78>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a14      	ldr	r2, [pc, #80]	; (8001790 <HAL_ADC_MspInit+0x78>)
 8001740:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_ADC_MspInit+0x78>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_ADC_MspInit+0x78>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_ADC_MspInit+0x78>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_ADC_MspInit+0x78>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800176e:	230b      	movs	r3, #11
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f002 f934 	bl	80039ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	50040000 	.word	0x50040000
 8001790:	40021000 	.word	0x40021000

08001794 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80017a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <vApplicationGetIdleTaskMemory+0x30>)
 80017aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000200 	.word	0x20000200
 80017c4:	20000254 	.word	0x20000254

080017c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b096      	sub	sp, #88	; 0x58
 80017cc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_FREERTOS_Init+0x7c>)
 80017d0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80017d4:	461d      	mov	r5, r3
 80017d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 ff0a 	bl	8007602 <osThreadCreate>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_FREERTOS_Init+0x80>)
 80017f2:	601a      	str	r2, [r3, #0]

  /* definition and creation of TP100 */
  osThreadDef(TP100, TP100_Test, osPriorityNormal, 0, 128);
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_FREERTOS_Init+0x84>)
 80017f6:	f107 0420 	add.w	r4, r7, #32
 80017fa:	461d      	mov	r5, r3
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TP100Handle = osThreadCreate(osThread(TP100), NULL);
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f005 fef7 	bl	8007602 <osThreadCreate>
 8001814:	4602      	mov	r2, r0
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_FREERTOS_Init+0x88>)
 8001818:	601a      	str	r2, [r3, #0]

  /* definition and creation of TBreakOut */
  osThreadDef(TBreakOut, TBreakOut_Init, osPriorityNormal, 0, 128);
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_FREERTOS_Init+0x8c>)
 800181c:	1d3c      	adds	r4, r7, #4
 800181e:	461d      	mov	r5, r3
 8001820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001824:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001828:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TBreakOutHandle = osThreadCreate(osThread(TBreakOut), NULL);
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f005 fee6 	bl	8007602 <osThreadCreate>
 8001836:	4602      	mov	r2, r0
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_FREERTOS_Init+0x90>)
 800183a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800183c:	bf00      	nop
 800183e:	3758      	adds	r7, #88	; 0x58
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	0800b02c 	.word	0x0800b02c
 8001848:	20002d20 	.word	0x20002d20
 800184c:	0800b050 	.word	0x0800b050
 8001850:	20002d34 	.word	0x20002d34
 8001854:	0800b078 	.word	0x0800b078
 8001858:	20002d28 	.word	0x20002d28

0800185c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f005 ff18 	bl	800769a <osDelay>
 800186a:	e7fb      	b.n	8001864 <StartDefaultTask+0x8>

0800186c <TP100_Test>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TP100_Test */
void TP100_Test(void const * argument)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b094      	sub	sp, #80	; 0x50
 8001870:	af02      	add	r7, sp, #8
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TP100_Test */
	Max31865_t  pt100;
	bool        pt100isOK;
	float       pt100Temp;
	Max31865_init(&pt100,&hspi2,GPIOC,GPIO_PIN_1,2,50);
 8001874:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001878:	2332      	movs	r3, #50	; 0x32
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2302      	movs	r3, #2
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2302      	movs	r3, #2
 8001882:	4a2e      	ldr	r2, [pc, #184]	; (800193c <TP100_Test+0xd0>)
 8001884:	492e      	ldr	r1, [pc, #184]	; (8001940 <TP100_Test+0xd4>)
 8001886:	f7ff fd0d 	bl	80012a4 <Max31865_init>
	char UART_SEND[30];
  /* Infinite loop */
  for(;;)
  {
	  	 float t;
	     pt100isOK = Max31865_readTempC(&pt100,&t);
 800188a:	f107 020c 	add.w	r2, r7, #12
 800188e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fd43 	bl	8001320 <Max31865_readTempC>
 800189a:	4603      	mov	r3, r0
 800189c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	     pt100Temp = Max31865_Filter(t,pt100Temp,1);   //  << For Smoothing data
 80018a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80018a8:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	f7ff fe96 	bl	80015e0 <Max31865_Filter>
 80018b4:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	     HAL_Delay(1000);
 80018b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018bc:	f000 fe40 	bl	8002540 <HAL_Delay>
	     sprintf(UART_SEND,"Temp is %i °C \r\n",(uint8_t)pt100Temp);
 80018c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c8:	edc7 7a00 	vstr	s15, [r7]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	491b      	ldr	r1, [pc, #108]	; (8001944 <TP100_Test+0xd8>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f007 fd2b 	bl	8009334 <siprintf>
	     HAL_UART_Transmit(&huart2, (uint8_t*)UART_SEND, strlen(UART_SEND), HAL_MAX_DELAY);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc74 	bl	80001d0 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f107 0110 	add.w	r1, r7, #16
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	4814      	ldr	r0, [pc, #80]	; (8001948 <TP100_Test+0xdc>)
 80018f6:	f005 f8fd 	bl	8006af4 <HAL_UART_Transmit>

	     if(pt100isOK != true){
 80018fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018fe:	f083 0301 	eor.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <TP100_Test+0xc8>
	    	 UART_SEND[20] = "Sensor Failure\r\n";
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <TP100_Test+0xe0>)
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	 HAL_UART_Transmit(&huart2, (uint8_t*)UART_SEND, strlen(UART_SEND), HAL_MAX_DELAY);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fc5b 	bl	80001d0 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	f107 0110 	add.w	r1, r7, #16
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <TP100_Test+0xdc>)
 8001928:	f005 f8e4 	bl	8006af4 <HAL_UART_Transmit>
	    	 HAL_Delay(500);
 800192c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001930:	f000 fe06 	bl	8002540 <HAL_Delay>
	     }
	    osDelay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f005 feb0 	bl	800769a <osDelay>
  {
 800193a:	e7a6      	b.n	800188a <TP100_Test+0x1e>
 800193c:	48000800 	.word	0x48000800
 8001940:	20002d3c 	.word	0x20002d3c
 8001944:	0800b094 	.word	0x0800b094
 8001948:	20002e84 	.word	0x20002e84
 800194c:	0800b0a8 	.word	0x0800b0a8

08001950 <TBreakOut_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TBreakOut_Init */
void TBreakOut_Init(void const * argument)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b09c      	sub	sp, #112	; 0x70
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TBreakOut_Init */
	const double balance_resistance = 72600;
 8001958:	a463      	add	r4, pc, #396	; (adr r4, 8001ae8 <TBreakOut_Init+0x198>)
 800195a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800195e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	const double adc_res = 4096;
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	4c5a      	ldr	r4, [pc, #360]	; (8001ad0 <TBreakOut_Init+0x180>)
 8001968:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	const double beta_value = 20564;
 800196c:	a450      	add	r4, pc, #320	; (adr r4, 8001ab0 <TBreakOut_Init+0x160>)
 800196e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001972:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	const double room_tempK = 294.15;
 8001976:	a450      	add	r4, pc, #320	; (adr r4, 8001ab8 <TBreakOut_Init+0x168>)
 8001978:	e9d4 3400 	ldrd	r3, r4, [r4]
 800197c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	const double room_tempR = 70000;
 8001980:	a44f      	add	r4, pc, #316	; (adr r4, 8001ac0 <TBreakOut_Init+0x170>)
 8001982:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001986:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	char UART_SEND[30];
  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start(&hadc1);
 800198a:	4852      	ldr	r0, [pc, #328]	; (8001ad4 <TBreakOut_Init+0x184>)
 800198c:	f001 f924 	bl	8002bd8 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8001990:	4951      	ldr	r1, [pc, #324]	; (8001ad8 <TBreakOut_Init+0x188>)
 8001992:	4850      	ldr	r0, [pc, #320]	; (8001ad4 <TBreakOut_Init+0x184>)
 8001994:	f001 f9da 	bl	8002d4c <HAL_ADC_PollForConversion>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <TBreakOut_Init+0x58>
		  	   	value_analog = HAL_ADC_GetValue(&hadc1);
 800199e:	484d      	ldr	r0, [pc, #308]	; (8001ad4 <TBreakOut_Init+0x184>)
 80019a0:	f001 faa4 	bl	8002eec <HAL_ADC_GetValue>
 80019a4:	4603      	mov	r3, r0
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
	      }

	  resistance_thermistor = balance_resistance * ((adc_res/value_analog)-1);
 80019a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdaa 	bl	8000504 <__aeabi_ui2d>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80019bc:	f7fe ff46 	bl	800084c <__aeabi_ddiv>
 80019c0:	4603      	mov	r3, r0
 80019c2:	460c      	mov	r4, r1
 80019c4:	4618      	mov	r0, r3
 80019c6:	4621      	mov	r1, r4
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b43      	ldr	r3, [pc, #268]	; (8001adc <TBreakOut_Init+0x18c>)
 80019ce:	f7fe fc5b 	bl	8000288 <__aeabi_dsub>
 80019d2:	4603      	mov	r3, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	4618      	mov	r0, r3
 80019d8:	4621      	mov	r1, r4
 80019da:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80019de:	f7fe fe0b 	bl	80005f8 <__aeabi_dmul>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	  temp_kelvin = (beta_value * room_tempK) / (beta_value + (room_tempK * log(resistance_thermistor/room_tempR)));
 80019ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019f2:	f7fe fe01 	bl	80005f8 <__aeabi_dmul>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	4625      	mov	r5, r4
 80019fc:	461c      	mov	r4, r3
 80019fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a06:	f7fe ff21 	bl	800084c <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	ec43 2b17 	vmov	d7, r2, r3
 8001a12:	eeb0 0a47 	vmov.f32	s0, s14
 8001a16:	eef0 0a67 	vmov.f32	s1, s15
 8001a1a:	f009 f863 	bl	800aae4 <log>
 8001a1e:	ec51 0b10 	vmov	r0, r1, d0
 8001a22:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a26:	f7fe fde7 	bl	80005f8 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a36:	f7fe fc29 	bl	800028c <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	f7fe ff03 	bl	800084c <__aeabi_ddiv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	460c      	mov	r4, r1
 8001a4a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	  temp_celcius = temp_kelvin - 273.15;
 8001a4e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a52:	a31d      	add	r3, pc, #116	; (adr r3, 8001ac8 <TBreakOut_Init+0x178>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fc16 	bl	8000288 <__aeabi_dsub>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	460c      	mov	r4, r1
 8001a60:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	  sprintf(UART_SEND,"NTC Temp is %d °C \r\n",(uint8_t)temp_celcius);
 8001a64:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001a68:	4618      	mov	r0, r3
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	f7ff f89c 	bl	8000ba8 <__aeabi_d2uiz>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4919      	ldr	r1, [pc, #100]	; (8001ae0 <TBreakOut_Init+0x190>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f007 fc59 	bl	8009334 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)UART_SEND, strlen(UART_SEND), HAL_MAX_DELAY);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fba2 	bl	80001d0 <strlen>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f107 0108 	add.w	r1, r7, #8
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <TBreakOut_Init+0x194>)
 8001a9a:	f005 f82b 	bl	8006af4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa2:	f000 fd4d 	bl	8002540 <HAL_Delay>
	//  UART_SEND[strlen(UART_SEND)]=0;
    osDelay(1);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f005 fdf7 	bl	800769a <osDelay>
	  HAL_ADC_Start(&hadc1);
 8001aac:	e76d      	b.n	800198a <TBreakOut_Init+0x3a>
 8001aae:	bf00      	nop
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40d41500 	.word	0x40d41500
 8001ab8:	66666666 	.word	0x66666666
 8001abc:	40726266 	.word	0x40726266
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40f11700 	.word	0x40f11700
 8001ac8:	66666666 	.word	0x66666666
 8001acc:	40711266 	.word	0x40711266
 8001ad0:	40b00000 	.word	0x40b00000
 8001ad4:	20002cbc 	.word	0x20002cbc
 8001ad8:	000f4240 	.word	0x000f4240
 8001adc:	3ff00000 	.word	0x3ff00000
 8001ae0:	0800b0bc 	.word	0x0800b0bc
 8001ae4:	20002e84 	.word	0x20002e84
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	40f1b980 	.word	0x40f1b980

08001af0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	4a5a      	ldr	r2, [pc, #360]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b12:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1e:	4b55      	ldr	r3, [pc, #340]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <MX_GPIO_Init+0x184>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2102      	movs	r1, #2
 8001b82:	483d      	ldr	r0, [pc, #244]	; (8001c78 <MX_GPIO_Init+0x188>)
 8001b84:	f002 f8da 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2130      	movs	r1, #48	; 0x30
 8001b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b90:	f002 f8d4 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <MX_GPIO_Init+0x18c>)
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4833      	ldr	r0, [pc, #204]	; (8001c78 <MX_GPIO_Init+0x188>)
 8001baa:	f001 ff1f 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 PC5 PC7 
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
 8001bae:	f240 33b1 	movw	r3, #945	; 0x3b1
 8001bb2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	482d      	ldr	r0, [pc, #180]	; (8001c78 <MX_GPIO_Init+0x188>)
 8001bc4:	f001 ff12 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4826      	ldr	r0, [pc, #152]	; (8001c78 <MX_GPIO_Init+0x188>)
 8001be0:	f001 ff04 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 8001be4:	f240 2301 	movw	r3, #513	; 0x201
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfc:	f001 fef6 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA7 PA8 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10 
 8001c00:	f649 5382 	movw	r3, #40322	; 0x9d82
 8001c04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c06:	2303      	movs	r3, #3
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c18:	f001 fee8 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001c1c:	2330      	movs	r3, #48	; 0x30
 8001c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f001 fed9 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 
                           PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11 
 8001c3a:	f64f 33f7 	movw	r3, #64503	; 0xfbf7
 8001c3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c40:	2303      	movs	r3, #3
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <MX_GPIO_Init+0x190>)
 8001c50:	f001 fecc 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c54:	2304      	movs	r3, #4
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <MX_GPIO_Init+0x194>)
 8001c68:	f001 fec0 	bl	80039ec <HAL_GPIO_Init>

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	10210000 	.word	0x10210000
 8001c80:	48000400 	.word	0x48000400
 8001c84:	48000c00 	.word	0x48000c00

08001c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8c:	f000 fc1a 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c90:	f000 f811 	bl	8001cb6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c94:	f7ff ff2c 	bl	8001af0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c98:	f000 fb78 	bl	800238c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001c9c:	f000 f8ae 	bl	8001dfc <MX_SPI2_Init>
  MX_ADC1_Init();
 8001ca0:	f7ff fcc0 	bl	8001624 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001ca4:	f000 f8e8 	bl	8001e78 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001ca8:	f000 fabc 	bl	8002224 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001cac:	f7ff fd8c 	bl	80017c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001cb0:	f005 fca0 	bl	80075f4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <main+0x2c>

08001cb6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b0b8      	sub	sp, #224	; 0xe0
 8001cba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cc0:	2244      	movs	r2, #68	; 0x44
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f006 fed0 	bl	8008a6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2288      	movs	r2, #136	; 0x88
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f006 fec2 	bl	8008a6a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d00:	2302      	movs	r3, #2
 8001d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001d0c:	2309      	movs	r3, #9
 8001d0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d12:	2307      	movs	r3, #7
 8001d14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 f883 	bl	8003e34 <HAL_RCC_OscConfig>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d34:	f000 f85a 	bl	8001dec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d38:	230f      	movs	r3, #15
 8001d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fc4e 	bl	8004600 <HAL_RCC_ClockConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001d6a:	f000 f83f 	bl	8001dec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001d6e:	f244 0302 	movw	r3, #16386	; 0x4002
 8001d72:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d7c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d86:	2308      	movs	r3, #8
 8001d88:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d9a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fe64 	bl	8004a6c <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001daa:	f000 f81f 	bl	8001dec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001dae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001db2:	f001 ffe9 	bl	8003d88 <HAL_PWREx_ControlVoltageScaling>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001dbc:	f000 f816 	bl	8001dec <Error_Handler>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	37e0      	adds	r7, #224	; 0xe0
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dda:	f000 fb93 	bl	8002504 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40012c00 	.word	0x40012c00

08001dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <MX_SPI2_Init+0x78>)
 8001e04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e32:	2230      	movs	r2, #48	; 0x30
 8001e34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e5c:	f003 fab6 	bl	80053cc <HAL_SPI_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e66:	f7ff ffc1 	bl	8001dec <Error_Handler>
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20002d3c 	.word	0x20002d3c
 8001e74:	40003800 	.word	0x40003800

08001e78 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_SPI3_Init+0x74>)
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <MX_SPI3_Init+0x78>)
 8001e80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_SPI3_Init+0x74>)
 8001e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_SPI3_Init+0x74>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_SPI3_Init+0x74>)
 8001e92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_SPI3_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_SPI3_Init+0x74>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_SPI3_Init+0x74>)
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_SPI3_Init+0x74>)
 8001eae:	2230      	movs	r2, #48	; 0x30
 8001eb0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_SPI3_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_SPI3_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_SPI3_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_SPI3_Init+0x74>)
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_SPI3_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_SPI3_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_SPI3_Init+0x74>)
 8001ed8:	f003 fa78 	bl	80053cc <HAL_SPI_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001ee2:	f7ff ff83 	bl	8001dec <Error_Handler>
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20002da0 	.word	0x20002da0
 8001ef0:	40003c00 	.word	0x40003c00

08001ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	; 0x30
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3d      	ldr	r2, [pc, #244]	; (8002008 <HAL_SPI_MspInit+0x114>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d145      	bne.n	8001fa2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	4a3c      	ldr	r2, [pc, #240]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a36      	ldr	r2, [pc, #216]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b2e      	ldr	r3, [pc, #184]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	4619      	mov	r1, r3
 8001f78:	4825      	ldr	r0, [pc, #148]	; (8002010 <HAL_SPI_MspInit+0x11c>)
 8001f7a:	f001 fd37 	bl	80039ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f90:	2305      	movs	r3, #5
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	481e      	ldr	r0, [pc, #120]	; (8002014 <HAL_SPI_MspInit+0x120>)
 8001f9c:	f001 fd26 	bl	80039ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001fa0:	e02d      	b.n	8001ffe <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_SPI_MspInit+0x124>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d128      	bne.n	8001ffe <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_SPI_MspInit+0x118>)
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <HAL_SPI_MspInit+0x11c>)
 8001ffa:	f001 fcf7 	bl	80039ec <HAL_GPIO_Init>
}
 8001ffe:	bf00      	nop
 8002000:	3730      	adds	r7, #48	; 0x30
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40003800 	.word	0x40003800
 800200c:	40021000 	.word	0x40021000
 8002010:	48000800 	.word	0x48000800
 8002014:	48000400 	.word	0x48000400
 8002018:	40003c00 	.word	0x40003c00

0800201c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_MspInit+0x4c>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_MspInit+0x4c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6613      	str	r3, [r2, #96]	; 0x60
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_MspInit+0x4c>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_MspInit+0x4c>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_MspInit+0x4c>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_MspInit+0x4c>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	210f      	movs	r1, #15
 8002056:	f06f 0001 	mvn.w	r0, #1
 800205a:	f001 fc9d 	bl	8003998 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	2019      	movs	r0, #25
 8002082:	f001 fc89 	bl	8003998 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8002086:	2019      	movs	r0, #25
 8002088:	f001 fca2 	bl	80039d0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_InitTick+0x9c>)
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_InitTick+0x9c>)
 8002092:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002096:	6613      	str	r3, [r2, #96]	; 0x60
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_InitTick+0x9c>)
 800209a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a4:	f107 0210 	add.w	r2, r7, #16
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fc4a 	bl	8004948 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020b4:	f002 fc32 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 80020b8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	4a13      	ldr	r2, [pc, #76]	; (800210c <HAL_InitTick+0xa0>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0c9b      	lsrs	r3, r3, #18
 80020c4:	3b01      	subs	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_InitTick+0xa4>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_InitTick+0xa8>)
 80020cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_InitTick+0xa4>)
 80020d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_InitTick+0xa4>)
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_InitTick+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_InitTick+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <HAL_InitTick+0xa4>)
 80020ea:	f003 fe8f 	bl	8005e0c <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d104      	bne.n	80020fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80020f4:	4806      	ldr	r0, [pc, #24]	; (8002110 <HAL_InitTick+0xa4>)
 80020f6:	f003 feb5 	bl	8005e64 <HAL_TIM_Base_Start_IT>
 80020fa:	4603      	mov	r3, r0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3730      	adds	r7, #48	; 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	431bde83 	.word	0x431bde83
 8002110:	20002e04 	.word	0x20002e04
 8002114:	40012c00 	.word	0x40012c00

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <MemManage_Handler+0x4>

08002132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <UsageFault_Handler+0x4>

0800213e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002152:	f003 fee6 	bl	8005f22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20002e04 	.word	0x20002e04

08002160 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <_sbrk+0x50>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x16>
		heap_end = &end;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <_sbrk+0x50>)
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <_sbrk+0x54>)
 8002174:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <_sbrk+0x50>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <_sbrk+0x50>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	466a      	mov	r2, sp
 8002186:	4293      	cmp	r3, r2
 8002188:	d907      	bls.n	800219a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800218a:	f006 fc39 	bl	8008a00 <__errno>
 800218e:	4602      	mov	r2, r0
 8002190:	230c      	movs	r3, #12
 8002192:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	e006      	b.n	80021a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <_sbrk+0x50>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <_sbrk+0x50>)
 80021a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000454 	.word	0x20000454
 80021b4:	20002f10 	.word	0x20002f10

080021b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <SystemInit+0x64>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	4a16      	ldr	r2, [pc, #88]	; (800221c <SystemInit+0x64>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <SystemInit+0x68>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a13      	ldr	r2, [pc, #76]	; (8002220 <SystemInit+0x68>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <SystemInit+0x68>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <SystemInit+0x68>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <SystemInit+0x68>)
 80021e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80021e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80021ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <SystemInit+0x68>)
 80021f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <SystemInit+0x68>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <SystemInit+0x68>)
 80021fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <SystemInit+0x68>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <SystemInit+0x64>)
 800220a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800220e:	609a      	str	r2, [r3, #8]
#endif
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	40021000 	.word	0x40021000

08002224 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <MX_TIM3_Init+0xd8>)
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <MX_TIM3_Init+0xdc>)
 8002254:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <MX_TIM3_Init+0xd8>)
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <MX_TIM3_Init+0xd8>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <MX_TIM3_Init+0xd8>)
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <MX_TIM3_Init+0xd8>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <MX_TIM3_Init+0xd8>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002274:	4821      	ldr	r0, [pc, #132]	; (80022fc <MX_TIM3_Init+0xd8>)
 8002276:	f003 fdc9 	bl	8005e0c <HAL_TIM_Base_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002280:	f7ff fdb4 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002288:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	4619      	mov	r1, r3
 8002290:	481a      	ldr	r0, [pc, #104]	; (80022fc <MX_TIM3_Init+0xd8>)
 8002292:	f004 f801 	bl	8006298 <HAL_TIM_ConfigClockSource>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800229c:	f7ff fda6 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <MX_TIM3_Init+0xd8>)
 80022a2:	f003 fe09 	bl	8005eb8 <HAL_TIM_IC_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80022ac:	f7ff fd9e 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <MX_TIM3_Init+0xd8>)
 80022c0:	f004 fb24 	bl	800690c <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80022ca:	f7ff fd8f 	bl	8001dec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022d2:	2301      	movs	r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM3_Init+0xd8>)
 80022e6:	f003 ff3b 	bl	8006160 <HAL_TIM_IC_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80022f0:	f7ff fd7c 	bl	8001dec <Error_Handler>
  }

}
 80022f4:	bf00      	nop
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20002e44 	.word	0x20002e44
 8002300:	40000400 	.word	0x40000400

08002304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_TIM_Base_MspInit+0x7c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d127      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_TIM_Base_MspInit+0x80>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_TIM_Base_MspInit+0x80>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_TIM_Base_MspInit+0x80>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_TIM_Base_MspInit+0x80>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_TIM_Base_MspInit+0x80>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_TIM_Base_MspInit+0x80>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002356:	2340      	movs	r3, #64	; 0x40
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002366:	2302      	movs	r3, #2
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_TIM_Base_MspInit+0x84>)
 8002372:	f001 fb3b 	bl	80039ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40000400 	.word	0x40000400
 8002384:	40021000 	.word	0x40021000
 8002388:	48000800 	.word	0x48000800

0800238c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <MX_USART2_UART_Init+0x5c>)
 8002394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 8002398:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800239c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_USART2_UART_Init+0x58>)
 80023d0:	f004 fb42 	bl	8006a58 <HAL_UART_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023da:	f7ff fd07 	bl	8001dec <Error_Handler>
  }

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20002e84 	.word	0x20002e84
 80023e8:	40004400 	.word	0x40004400

080023ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_UART_MspInit+0x7c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d128      	bne.n	8002460 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_UART_MspInit+0x80>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_UART_MspInit+0x80>)
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_UART_MspInit+0x80>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_UART_MspInit+0x80>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_UART_MspInit+0x80>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_UART_MspInit+0x80>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800243e:	230c      	movs	r3, #12
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800244e:	2307      	movs	r3, #7
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245c:	f001 fac6 	bl	80039ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40004400 	.word	0x40004400
 800246c:	40021000 	.word	0x40021000

08002470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002474:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002476:	e003      	b.n	8002480 <LoopCopyDataInit>

08002478 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800247a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800247c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800247e:	3104      	adds	r1, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002484:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002486:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002488:	d3f6      	bcc.n	8002478 <CopyDataInit>
	ldr	r2, =_sbss
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800248c:	e002      	b.n	8002494 <LoopFillZerobss>

0800248e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800248e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002490:	f842 3b04 	str.w	r3, [r2], #4

08002494 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <LoopForever+0x16>)
	cmp	r2, r3
 8002496:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002498:	d3f9      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800249a:	f7ff fe8d 	bl	80021b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f006 fab5 	bl	8008a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024a2:	f7ff fbf1 	bl	8001c88 <main>

080024a6 <LoopForever>:

LoopForever:
    b LoopForever
 80024a6:	e7fe      	b.n	80024a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024ac:	0800b3c4 	.word	0x0800b3c4
	ldr	r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024b4:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80024b8:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 80024bc:	20002f0c 	.word	0x20002f0c

080024c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC1_2_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_Init+0x3c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_Init+0x3c>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024da:	2003      	movs	r0, #3
 80024dc:	f001 fa51 	bl	8003982 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7ff fdc3 	bl	800206c <HAL_InitTick>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	71fb      	strb	r3, [r7, #7]
 80024f0:	e001      	b.n	80024f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f2:	f7ff fd93 	bl	800201c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f6:	79fb      	ldrb	r3, [r7, #7]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40022000 	.word	0x40022000

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_IncTick+0x1c>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_IncTick+0x20>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4413      	add	r3, r2
 8002512:	4a03      	ldr	r2, [pc, #12]	; (8002520 <HAL_IncTick+0x1c>)
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	20002f04 	.word	0x20002f04
 8002524:	20000008 	.word	0x20000008

08002528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return uwTick;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_GetTick+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20002f04 	.word	0x20002f04

08002540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff ffee 	bl	8002528 <HAL_GetTick>
 800254c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d004      	beq.n	8002564 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_Delay+0x40>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002564:	bf00      	nop
 8002566:	f7ff ffdf 	bl	8002528 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	429a      	cmp	r2, r3
 8002574:	d8f7      	bhi.n	8002566 <HAL_Delay+0x26>
  {
  }
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000008 	.word	0x20000008

08002584 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	609a      	str	r2, [r3, #8]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025ec:	b490      	push	{r4, r7}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <LL_ADC_SetOffset+0x40>)
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	4313      	orrs	r3, r2
 800261a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800261e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bc90      	pop	{r4, r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	03fff000 	.word	0x03fff000

08002630 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002630:	b490      	push	{r4, r7}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3360      	adds	r3, #96	; 0x60
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bc90      	pop	{r4, r7}
 8002656:	4770      	bx	lr

08002658 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002658:	b490      	push	{r4, r7}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4313      	orrs	r3, r2
 800267c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bc90      	pop	{r4, r7}
 8002686:	4770      	bx	lr

08002688 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ae:	b490      	push	{r4, r7}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3330      	adds	r3, #48	; 0x30
 80026be:	461a      	mov	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	4413      	add	r3, r2
 80026cc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80026ce:	6822      	ldr	r2, [r4, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	211f      	movs	r1, #31
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	401a      	ands	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	f003 011f 	and.w	r1, r3, #31
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc90      	pop	{r4, r7}
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002700:	b490      	push	{r4, r7}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3314      	adds	r3, #20
 8002710:	461a      	mov	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0e5b      	lsrs	r3, r3, #25
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	4413      	add	r3, r2
 800271e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0d1b      	lsrs	r3, r3, #20
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2107      	movs	r1, #7
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0d1b      	lsrs	r3, r3, #20
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bc90      	pop	{r4, r7}
 800274e:	4770      	bx	lr

08002750 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0318 	and.w	r3, r3, #24
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002774:	40d9      	lsrs	r1, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	400b      	ands	r3, r1
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	431a      	orrs	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	0007ffff 	.word	0x0007ffff

08002798 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 031f 	and.w	r3, r3, #31
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6093      	str	r3, [r2, #8]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002808:	d101      	bne.n	800280e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800282c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002830:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002858:	d101      	bne.n	800285e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <LL_ADC_IsEnabled+0x18>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_ADC_IsEnabled+0x1a>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028ce:	f043 0204 	orr.w	r2, r3, #4
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d101      	bne.n	80028fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b08      	cmp	r3, #8
 800291a:	d101      	bne.n	8002920 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e134      	b.n	8002bb4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fe fedd 	bl	8001718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff3f 	bl	80027f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff25 	bl	80027d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff5a 	bl	8002844 <LL_ADC_IsInternalRegulatorEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff3e 	bl	800281c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029a0:	4b86      	ldr	r3, [pc, #536]	; (8002bbc <HAL_ADC_Init+0x28c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	4a86      	ldr	r2, [pc, #536]	; (8002bc0 <HAL_ADC_Init+0x290>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029b0:	e002      	b.n	80029b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f9      	bne.n	80029b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff3e 	bl	8002844 <LL_ADC_IsInternalRegulatorEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d2:	f043 0210 	orr.w	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff77 	bl	80028e2 <LL_ADC_REG_IsConversionOngoing>
 80029f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 80cf 	bne.w	8002ba2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 80cb 	bne.w	8002ba2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a14:	f043 0202 	orr.w	r2, r3, #2
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff37 	bl	8002894 <LL_ADC_IsEnabled>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d115      	bne.n	8002a58 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a2c:	4865      	ldr	r0, [pc, #404]	; (8002bc4 <HAL_ADC_Init+0x294>)
 8002a2e:	f7ff ff31 	bl	8002894 <LL_ADC_IsEnabled>
 8002a32:	4604      	mov	r4, r0
 8002a34:	4864      	ldr	r0, [pc, #400]	; (8002bc8 <HAL_ADC_Init+0x298>)
 8002a36:	f7ff ff2d 	bl	8002894 <LL_ADC_IsEnabled>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	431c      	orrs	r4, r3
 8002a3e:	4863      	ldr	r0, [pc, #396]	; (8002bcc <HAL_ADC_Init+0x29c>)
 8002a40:	f7ff ff28 	bl	8002894 <LL_ADC_IsEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4323      	orrs	r3, r4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	485f      	ldr	r0, [pc, #380]	; (8002bd0 <HAL_ADC_Init+0x2a0>)
 8002a54:	f7ff fd96 	bl	8002584 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7e5b      	ldrb	r3, [r3, #25]
 8002a5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d106      	bne.n	8002a94 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	045b      	lsls	r3, r3, #17
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_ADC_Init+0x2a4>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff0a 	bl	80028e2 <LL_ADC_REG_IsConversionOngoing>
 8002ace:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff17 	bl	8002908 <LL_ADC_INJ_IsConversionOngoing>
 8002ada:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d13d      	bne.n	8002b5e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d13a      	bne.n	8002b5e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002aec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002af4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b04:	f023 0302 	bic.w	r3, r3, #2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	69b9      	ldr	r1, [r7, #24]
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d118      	bne.n	8002b4e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	e007      	b.n	8002b5e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10c      	bne.n	8002b80 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	f023 010f 	bic.w	r1, r3, #15
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	1e5a      	subs	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b7e:	e007      	b.n	8002b90 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 020f 	bic.w	r2, r2, #15
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f023 0303 	bic.w	r3, r3, #3
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
 8002ba0:	e007      	b.n	8002bb2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3724      	adds	r7, #36	; 0x24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	053e2d63 	.word	0x053e2d63
 8002bc4:	50040000 	.word	0x50040000
 8002bc8:	50040100 	.word	0x50040100
 8002bcc:	50040200 	.word	0x50040200
 8002bd0:	50040300 	.word	0x50040300
 8002bd4:	fff0c007 	.word	0xfff0c007

08002bd8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be0:	4857      	ldr	r0, [pc, #348]	; (8002d40 <HAL_ADC_Start+0x168>)
 8002be2:	f7ff fdd9 	bl	8002798 <LL_ADC_GetMultimode>
 8002be6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fe78 	bl	80028e2 <LL_ADC_REG_IsConversionOngoing>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f040 809c 	bne.w	8002d32 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_Start+0x30>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e097      	b.n	8002d38 <HAL_ADC_Start+0x160>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fcdd 	bl	80035d0 <ADC_Enable>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f040 8083 	bne.w	8002d28 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a42      	ldr	r2, [pc, #264]	; (8002d44 <HAL_ADC_Start+0x16c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d002      	beq.n	8002c46 <HAL_ADC_Start+0x6e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	e000      	b.n	8002c48 <HAL_ADC_Start+0x70>
 8002c46:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_ADC_Start+0x170>)
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d002      	beq.n	8002c56 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d105      	bne.n	8002c62 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d106      	bne.n	8002c7e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	f023 0206 	bic.w	r2, r3, #6
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7c:	e002      	b.n	8002c84 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	221c      	movs	r2, #28
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <HAL_ADC_Start+0x16c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d002      	beq.n	8002ca4 <HAL_ADC_Start+0xcc>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_Start+0xce>
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <HAL_ADC_Start+0x170>)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d008      	beq.n	8002cc0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d002      	beq.n	8002cc0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d114      	bne.n	8002cea <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fde9 	bl	80028ba <LL_ADC_REG_StartConversion>
 8002ce8:	e025      	b.n	8002d36 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <HAL_ADC_Start+0x16c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d002      	beq.n	8002d06 <HAL_ADC_Start+0x12e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	e000      	b.n	8002d08 <HAL_ADC_Start+0x130>
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_ADC_Start+0x170>)
 8002d08:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00f      	beq.n	8002d36 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
 8002d26:	e006      	b.n	8002d36 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d30:	e001      	b.n	8002d36 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
 8002d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	50040300 	.word	0x50040300
 8002d44:	50040100 	.word	0x50040100
 8002d48:	50040000 	.word	0x50040000

08002d4c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d56:	4862      	ldr	r0, [pc, #392]	; (8002ee0 <HAL_ADC_PollForConversion+0x194>)
 8002d58:	f7ff fd1e 	bl	8002798 <LL_ADC_GetMultimode>
 8002d5c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d102      	bne.n	8002d6c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d66:	2308      	movs	r3, #8
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e02a      	b.n	8002dc2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d002      	beq.n	8002d7e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	d111      	bne.n	8002da2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e09d      	b.n	8002ed8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002da0:	e00f      	b.n	8002dc2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002da2:	484f      	ldr	r0, [pc, #316]	; (8002ee0 <HAL_ADC_PollForConversion+0x194>)
 8002da4:	f7ff fd06 	bl	80027b4 <LL_ADC_GetMultiDMATransfer>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e08c      	b.n	8002ed8 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dc2:	f7ff fbb1 	bl	8002528 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dc8:	e01a      	b.n	8002e00 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d016      	beq.n	8002e00 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dd2:	f7ff fba9 	bl	8002528 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <HAL_ADC_PollForConversion+0x9c>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e06b      	b.n	8002ed8 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0dd      	beq.n	8002dca <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fc32 	bl	8002688 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01c      	beq.n	8002e64 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7e5b      	ldrb	r3, [r3, #25]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d118      	bne.n	8002e64 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d111      	bne.n	8002e64 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <HAL_ADC_PollForConversion+0x198>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d002      	beq.n	8002e74 <HAL_ADC_PollForConversion+0x128>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e000      	b.n	8002e76 <HAL_ADC_PollForConversion+0x12a>
 8002e74:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <HAL_ADC_PollForConversion+0x19c>)
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d008      	beq.n	8002e90 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d002      	beq.n	8002e90 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b09      	cmp	r3, #9
 8002e8e:	d104      	bne.n	8002e9a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e00c      	b.n	8002eb4 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_ADC_PollForConversion+0x198>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d002      	beq.n	8002eaa <HAL_ADC_PollForConversion+0x15e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_PollForConversion+0x160>
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_ADC_PollForConversion+0x19c>)
 8002eac:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d104      	bne.n	8002ec4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e008      	b.n	8002ed6 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	50040300 	.word	0x50040300
 8002ee4:	50040100 	.word	0x50040100
 8002ee8:	50040000 	.word	0x50040000

08002eec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0a6      	sub	sp, #152	; 0x98
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x22>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e348      	b.n	80035bc <HAL_ADC_ConfigChannel+0x6b4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fcd3 	bl	80028e2 <LL_ADC_REG_IsConversionOngoing>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 8329 	bne.w	8003596 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d824      	bhi.n	8002f96 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	3b02      	subs	r3, #2
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d81b      	bhi.n	8002f8e <HAL_ADC_ConfigChannel+0x86>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <HAL_ADC_ConfigChannel+0x54>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f75 	.word	0x08002f75
 8002f64:	08002f7d 	.word	0x08002f7d
 8002f68:	08002f85 	.word	0x08002f85
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	220c      	movs	r2, #12
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	e011      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2212      	movs	r2, #18
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e00d      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2218      	movs	r2, #24
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	e009      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	e004      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2206      	movs	r2, #6
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	e000      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f96:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f7ff fb82 	bl	80026ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fc97 	bl	80028e2 <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fca3 	bl	8002908 <LL_ADC_INJ_IsConversionOngoing>
 8002fc2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 8148 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 8143 	bne.w	8003260 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7ff fb8a 	bl	8002700 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	08db      	lsrs	r3, r3, #3
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00a      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6919      	ldr	r1, [r3, #16]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800301e:	f7ff fae5 	bl	80025ec <LL_ADC_SetOffset>
 8003022:	e11d      	b.n	8003260 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fb00 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x148>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff faf5 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	f003 021f 	and.w	r2, r3, #31
 800304e:	e012      	b.n	8003076 <HAL_ADC_ConfigChannel+0x16e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff faea 	bl	8002630 <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800306c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_ConfigChannel+0x186>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	e00a      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x19c>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800309c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d106      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fad1 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fab7 	bl	8002630 <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x1da>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff faac 	bl	8002630 <LL_ADC_GetOffsetChannel>
 80030d8:	4603      	mov	r3, r0
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	e010      	b.n	8003104 <HAL_ADC_ConfigChannel+0x1fc>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff faa1 	bl	8002630 <LL_ADC_GetOffsetChannel>
 80030ee:	4603      	mov	r3, r0
 80030f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_ADC_ConfigChannel+0x214>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0e9b      	lsrs	r3, r3, #26
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	e00a      	b.n	8003132 <HAL_ADC_ConfigChannel+0x22a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800312a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	429a      	cmp	r2, r3
 8003134:	d106      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fa8a 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fa70 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x268>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2102      	movs	r1, #2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fa65 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8003166:	4603      	mov	r3, r0
 8003168:	0e9b      	lsrs	r3, r3, #26
 800316a:	f003 021f 	and.w	r2, r3, #31
 800316e:	e010      	b.n	8003192 <HAL_ADC_ConfigChannel+0x28a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fa5a 	bl	8002630 <LL_ADC_GetOffsetChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x2a2>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0e9b      	lsrs	r3, r3, #26
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	e00a      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x2b8>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80031b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d106      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2102      	movs	r1, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fa43 	bl	8002658 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2103      	movs	r1, #3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fa29 	bl	8002630 <LL_ADC_GetOffsetChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x2f6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2103      	movs	r1, #3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fa1e 	bl	8002630 <LL_ADC_GetOffsetChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	0e9b      	lsrs	r3, r3, #26
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	e010      	b.n	8003220 <HAL_ADC_ConfigChannel+0x318>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2103      	movs	r1, #3
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fa13 	bl	8002630 <LL_ADC_GetOffsetChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x330>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	e00a      	b.n	800324e <HAL_ADC_ConfigChannel+0x346>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	429a      	cmp	r2, r3
 8003250:	d106      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	2103      	movs	r1, #3
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f9fc 	bl	8002658 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fb15 	bl	8002894 <LL_ADC_IsEnabled>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 810c 	bne.w	800348a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f7ff fa66 	bl	8002750 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4aad      	ldr	r2, [pc, #692]	; (8003540 <HAL_ADC_ConfigChannel+0x638>)
 800328a:	4293      	cmp	r3, r2
 800328c:	f040 80fd 	bne.w	800348a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x3b0>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	bf94      	ite	ls
 80032b0:	2301      	movls	r3, #1
 80032b2:	2300      	movhi	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e012      	b.n	80032de <HAL_ADC_ConfigChannel+0x3d6>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80032c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2b09      	cmp	r3, #9
 80032d6:	bf94      	ite	ls
 80032d8:	2301      	movls	r3, #1
 80032da:	2300      	movhi	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d064      	beq.n	80033ac <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d107      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x3f6>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0e9b      	lsrs	r3, r3, #26
 80032f4:	3301      	adds	r3, #1
 80032f6:	069b      	lsls	r3, r3, #26
 80032f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fc:	e00e      	b.n	800331c <HAL_ADC_ConfigChannel+0x414>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	069b      	lsls	r3, r3, #26
 8003318:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_ADC_ConfigChannel+0x434>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0e9b      	lsrs	r3, r3, #26
 800332e:	3301      	adds	r3, #1
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	e010      	b.n	800335e <HAL_ADC_ConfigChannel+0x456>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	3301      	adds	r3, #1
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	ea42 0103 	orr.w	r1, r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x47c>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0e9b      	lsrs	r3, r3, #26
 8003374:	3301      	adds	r3, #1
 8003376:	f003 021f 	and.w	r2, r3, #31
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	e011      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x4a0>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	3301      	adds	r3, #1
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a8:	430b      	orrs	r3, r1
 80033aa:	e069      	b.n	8003480 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x4c0>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	3301      	adds	r3, #1
 80033c0:	069b      	lsls	r3, r3, #26
 80033c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c6:	e00e      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x4de>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	61fb      	str	r3, [r7, #28]
  return result;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	069b      	lsls	r3, r3, #26
 80033e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x4fe>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	e010      	b.n	8003428 <HAL_ADC_ConfigChannel+0x520>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	617b      	str	r3, [r7, #20]
  return result;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	ea42 0103 	orr.w	r1, r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x54c>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	3301      	adds	r3, #1
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	3b1e      	subs	r3, #30
 800344c:	051b      	lsls	r3, r3, #20
 800344e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003452:	e014      	b.n	800347e <HAL_ADC_ConfigChannel+0x576>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	60fb      	str	r3, [r7, #12]
  return result;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	3b1e      	subs	r3, #30
 8003478:	051b      	lsls	r3, r3, #20
 800347a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347e:	430b      	orrs	r3, r1
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	6892      	ldr	r2, [r2, #8]
 8003484:	4619      	mov	r1, r3
 8003486:	f7ff f93b 	bl	8002700 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_ADC_ConfigChannel+0x63c>)
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 808c 	beq.w	80035b0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003498:	482b      	ldr	r0, [pc, #172]	; (8003548 <HAL_ADC_ConfigChannel+0x640>)
 800349a:	f7ff f899 	bl	80025d0 <LL_ADC_GetCommonPathInternalCh>
 800349e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_ADC_ConfigChannel+0x644>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d12b      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x5fc>
 80034ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d125      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a24      	ldr	r2, [pc, #144]	; (8003550 <HAL_ADC_ConfigChannel+0x648>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_ADC_ConfigChannel+0x5c4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a23      	ldr	r2, [pc, #140]	; (8003554 <HAL_ADC_ConfigChannel+0x64c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d16e      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034d4:	4619      	mov	r1, r3
 80034d6:	481c      	ldr	r0, [pc, #112]	; (8003548 <HAL_ADC_ConfigChannel+0x640>)
 80034d8:	f7ff f867 	bl	80025aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <HAL_ADC_ConfigChannel+0x650>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_ADC_ConfigChannel+0x654>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	099a      	lsrs	r2, r3, #6
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034f4:	e002      	b.n	80034fc <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f9      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003502:	e052      	b.n	80035aa <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_ADC_ConfigChannel+0x658>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d12a      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x65c>
 800350e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d124      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <HAL_ADC_ConfigChannel+0x648>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_ADC_ConfigChannel+0x626>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <HAL_ADC_ConfigChannel+0x64c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d13f      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800352e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003536:	4619      	mov	r1, r3
 8003538:	4803      	ldr	r0, [pc, #12]	; (8003548 <HAL_ADC_ConfigChannel+0x640>)
 800353a:	f7ff f836 	bl	80025aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800353e:	e036      	b.n	80035ae <HAL_ADC_ConfigChannel+0x6a6>
 8003540:	407f0000 	.word	0x407f0000
 8003544:	80080000 	.word	0x80080000
 8003548:	50040300 	.word	0x50040300
 800354c:	c7520000 	.word	0xc7520000
 8003550:	50040000 	.word	0x50040000
 8003554:	50040200 	.word	0x50040200
 8003558:	20000000 	.word	0x20000000
 800355c:	053e2d63 	.word	0x053e2d63
 8003560:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a16      	ldr	r2, [pc, #88]	; (80035c4 <HAL_ADC_ConfigChannel+0x6bc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d120      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800356e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d11a      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a12      	ldr	r2, [pc, #72]	; (80035c8 <HAL_ADC_ConfigChannel+0x6c0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d115      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800358c:	4619      	mov	r1, r3
 800358e:	480f      	ldr	r0, [pc, #60]	; (80035cc <HAL_ADC_ConfigChannel+0x6c4>)
 8003590:	f7ff f80b 	bl	80025aa <LL_ADC_SetCommonPathInternalCh>
 8003594:	e00c      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f043 0220 	orr.w	r2, r3, #32
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3798      	adds	r7, #152	; 0x98
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	80000001 	.word	0x80000001
 80035c8:	50040000 	.word	0x50040000
 80035cc:	50040300 	.word	0x50040300

080035d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff f959 	bl	8002894 <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d146      	bne.n	8003676 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	4b24      	ldr	r3, [pc, #144]	; (8003680 <ADC_Enable+0xb0>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	f043 0210 	orr.w	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e032      	b.n	8003678 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f928 	bl	800286c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800361c:	f7fe ff84 	bl	8002528 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003622:	e021      	b.n	8003668 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff f933 	bl	8002894 <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff f917 	bl	800286c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800363e:	f7fe ff73 	bl	8002528 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d90d      	bls.n	8003668 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d1d6      	bne.n	8003624 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	8000003f 	.word	0x8000003f

08003684 <LL_ADC_IsEnabled>:
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <LL_ADC_IsEnabled+0x18>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <LL_ADC_IsEnabled+0x1a>
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_ADC_REG_IsConversionOngoing>:
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d101      	bne.n	80036c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b09f      	sub	sp, #124	; 0x7c
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e08f      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a47      	ldr	r2, [pc, #284]	; (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d102      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	e001      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e072      	b.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ffbd 	bl	80036aa <LL_ADC_REG_IsConversionOngoing>
 8003730:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ffb7 	bl	80036aa <LL_ADC_REG_IsConversionOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d154      	bne.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003744:	2b00      	cmp	r3, #0
 8003746:	d151      	bne.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003748:	4b35      	ldr	r3, [pc, #212]	; (8003820 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800374a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02c      	beq.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003766:	035b      	lsls	r3, r3, #13
 8003768:	430b      	orrs	r3, r1
 800376a:	431a      	orrs	r2, r3
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003770:	4829      	ldr	r0, [pc, #164]	; (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003772:	f7ff ff87 	bl	8003684 <LL_ADC_IsEnabled>
 8003776:	4604      	mov	r4, r0
 8003778:	4828      	ldr	r0, [pc, #160]	; (800381c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800377a:	f7ff ff83 	bl	8003684 <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	431c      	orrs	r4, r3
 8003782:	4828      	ldr	r0, [pc, #160]	; (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003784:	f7ff ff7e 	bl	8003684 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	4323      	orrs	r3, r4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d137      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003798:	f023 030f 	bic.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	6811      	ldr	r1, [r2, #0]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6892      	ldr	r2, [r2, #8]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ac:	e028      	b.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ba:	4817      	ldr	r0, [pc, #92]	; (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80037bc:	f7ff ff62 	bl	8003684 <LL_ADC_IsEnabled>
 80037c0:	4604      	mov	r4, r0
 80037c2:	4816      	ldr	r0, [pc, #88]	; (800381c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80037c4:	f7ff ff5e 	bl	8003684 <LL_ADC_IsEnabled>
 80037c8:	4603      	mov	r3, r0
 80037ca:	431c      	orrs	r4, r3
 80037cc:	4815      	ldr	r0, [pc, #84]	; (8003824 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037ce:	f7ff ff59 	bl	8003684 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4323      	orrs	r3, r4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d112      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037e2:	f023 030f 	bic.w	r3, r3, #15
 80037e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ea:	e009      	b.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037fe:	e000      	b.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003800:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800380a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800380e:	4618      	mov	r0, r3
 8003810:	377c      	adds	r7, #124	; 0x7c
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}
 8003816:	bf00      	nop
 8003818:	50040000 	.word	0x50040000
 800381c:	50040100 	.word	0x50040100
 8003820:	50040300 	.word	0x50040300
 8003824:	50040200 	.word	0x50040200

08003828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <__NVIC_SetPriorityGrouping+0x44>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003844:	4013      	ands	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385a:	4a04      	ldr	r2, [pc, #16]	; (800386c <__NVIC_SetPriorityGrouping+0x44>)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	60d3      	str	r3, [r2, #12]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <__NVIC_GetPriorityGrouping+0x18>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f003 0307 	and.w	r3, r3, #7
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	2b00      	cmp	r3, #0
 800389c:	db0b      	blt.n	80038b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	f003 021f 	and.w	r2, r3, #31
 80038a4:	4907      	ldr	r1, [pc, #28]	; (80038c4 <__NVIC_EnableIRQ+0x38>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2001      	movs	r0, #1
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000e100 	.word	0xe000e100

080038c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	db0a      	blt.n	80038f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	490c      	ldr	r1, [pc, #48]	; (8003914 <__NVIC_SetPriority+0x4c>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	0112      	lsls	r2, r2, #4
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	440b      	add	r3, r1
 80038ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f0:	e00a      	b.n	8003908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4908      	ldr	r1, [pc, #32]	; (8003918 <__NVIC_SetPriority+0x50>)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3b04      	subs	r3, #4
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	440b      	add	r3, r1
 8003906:	761a      	strb	r2, [r3, #24]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000e100 	.word	0xe000e100
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f1c3 0307 	rsb	r3, r3, #7
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf28      	it	cs
 800393a:	2304      	movcs	r3, #4
 800393c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3304      	adds	r3, #4
 8003942:	2b06      	cmp	r3, #6
 8003944:	d902      	bls.n	800394c <NVIC_EncodePriority+0x30>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3b03      	subs	r3, #3
 800394a:	e000      	b.n	800394e <NVIC_EncodePriority+0x32>
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	401a      	ands	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43d9      	mvns	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	4313      	orrs	r3, r2
         );
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	; 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ff4c 	bl	8003828 <__NVIC_SetPriorityGrouping>
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039aa:	f7ff ff61 	bl	8003870 <__NVIC_GetPriorityGrouping>
 80039ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	6978      	ldr	r0, [r7, #20]
 80039b6:	f7ff ffb1 	bl	800391c <NVIC_EncodePriority>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff80 	bl	80038c8 <__NVIC_SetPriority>
}
 80039c8:	bf00      	nop
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff54 	bl	800388c <__NVIC_EnableIRQ>
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fa:	e17f      	b.n	8003cfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8171 	beq.w	8003cf6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d00b      	beq.n	8003a34 <HAL_GPIO_Init+0x48>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d007      	beq.n	8003a34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a28:	2b11      	cmp	r3, #17
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b12      	cmp	r3, #18
 8003a32:	d130      	bne.n	8003a96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0201 	and.w	r2, r3, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d118      	bne.n	8003ad4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f003 0201 	and.w	r2, r3, #1
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	2203      	movs	r2, #3
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x128>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b12      	cmp	r3, #18
 8003b12:	d123      	bne.n	8003b5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	08da      	lsrs	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3208      	adds	r2, #8
 8003b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	08da      	lsrs	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3208      	adds	r2, #8
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0203 	and.w	r2, r3, #3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80ac 	beq.w	8003cf6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9e:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_GPIO_Init+0x32c>)
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba2:	4a5d      	ldr	r2, [pc, #372]	; (8003d18 <HAL_GPIO_Init+0x32c>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_GPIO_Init+0x32c>)
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bb6:	4a59      	ldr	r2, [pc, #356]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	220f      	movs	r2, #15
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003be0:	d025      	beq.n	8003c2e <HAL_GPIO_Init+0x242>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4e      	ldr	r2, [pc, #312]	; (8003d20 <HAL_GPIO_Init+0x334>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01f      	beq.n	8003c2a <HAL_GPIO_Init+0x23e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4d      	ldr	r2, [pc, #308]	; (8003d24 <HAL_GPIO_Init+0x338>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d019      	beq.n	8003c26 <HAL_GPIO_Init+0x23a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4c      	ldr	r2, [pc, #304]	; (8003d28 <HAL_GPIO_Init+0x33c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_GPIO_Init+0x236>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4b      	ldr	r2, [pc, #300]	; (8003d2c <HAL_GPIO_Init+0x340>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00d      	beq.n	8003c1e <HAL_GPIO_Init+0x232>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4a      	ldr	r2, [pc, #296]	; (8003d30 <HAL_GPIO_Init+0x344>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <HAL_GPIO_Init+0x22e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a49      	ldr	r2, [pc, #292]	; (8003d34 <HAL_GPIO_Init+0x348>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <HAL_GPIO_Init+0x22a>
 8003c12:	2306      	movs	r3, #6
 8003c14:	e00c      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c16:	2307      	movs	r3, #7
 8003c18:	e00a      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	e008      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c1e:	2304      	movs	r3, #4
 8003c20:	e006      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c22:	2303      	movs	r3, #3
 8003c24:	e004      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e002      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_GPIO_Init+0x244>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	f002 0203 	and.w	r2, r2, #3
 8003c36:	0092      	lsls	r2, r2, #2
 8003c38:	4093      	lsls	r3, r2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c40:	4936      	ldr	r1, [pc, #216]	; (8003d1c <HAL_GPIO_Init+0x330>)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	089b      	lsrs	r3, r3, #2
 8003c46:	3302      	adds	r3, #2
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c72:	4a31      	ldr	r2, [pc, #196]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c9c:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca2:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cf0:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <HAL_GPIO_Init+0x34c>)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa22 f303 	lsr.w	r3, r2, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f47f ae78 	bne.w	80039fc <HAL_GPIO_Init+0x10>
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	48000400 	.word	0x48000400
 8003d24:	48000800 	.word	0x48000800
 8003d28:	48000c00 	.word	0x48000c00
 8003d2c:	48001000 	.word	0x48001000
 8003d30:	48001400 	.word	0x48001400
 8003d34:	48001800 	.word	0x48001800
 8003d38:	40010400 	.word	0x40010400

08003d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d4c:	787b      	ldrb	r3, [r7, #1]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d5a:	887a      	ldrh	r2, [r7, #2]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40007000 	.word	0x40007000

08003d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d96:	d130      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d038      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2232      	movs	r2, #50	; 0x32
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9b      	lsrs	r3, r3, #18
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dcc:	e002      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d102      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f2      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d110      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d007      	beq.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	431bde83 	.word	0x431bde83

08003e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e3d4      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e46:	4ba1      	ldr	r3, [pc, #644]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e50:	4b9e      	ldr	r3, [pc, #632]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80e4 	beq.w	8004030 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_RCC_OscConfig+0x4a>
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	f040 808b 	bne.w	8003f8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 8087 	bne.w	8003f8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e7e:	4b93      	ldr	r3, [pc, #588]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x62>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e3ac      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1a      	ldr	r2, [r3, #32]
 8003e9a:	4b8c      	ldr	r3, [pc, #560]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x7c>
 8003ea6:	4b89      	ldr	r3, [pc, #548]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eae:	e005      	b.n	8003ebc <HAL_RCC_OscConfig+0x88>
 8003eb0:	4b86      	ldr	r3, [pc, #536]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d223      	bcs.n	8003f08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fd71 	bl	80049ac <RCC_SetFlashLatencyFromMSIRange>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e38d      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed4:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a7c      	ldr	r2, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b7a      	ldr	r3, [pc, #488]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4977      	ldr	r1, [pc, #476]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef2:	4b76      	ldr	r3, [pc, #472]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	4972      	ldr	r1, [pc, #456]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
 8003f06:	e025      	b.n	8003f54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f08:	4b70      	ldr	r3, [pc, #448]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6f      	ldr	r2, [pc, #444]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f0e:	f043 0308 	orr.w	r3, r3, #8
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	496a      	ldr	r1, [pc, #424]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f26:	4b69      	ldr	r3, [pc, #420]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	4965      	ldr	r1, [pc, #404]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fd31 	bl	80049ac <RCC_SetFlashLatencyFromMSIRange>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e34d      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f54:	f000 fc36 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8003f58:	4601      	mov	r1, r0
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	4a5a      	ldr	r2, [pc, #360]	; (80040d0 <HAL_RCC_OscConfig+0x29c>)
 8003f66:	5cd3      	ldrb	r3, [r2, r3]
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	fa21 f303 	lsr.w	r3, r1, r3
 8003f70:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_RCC_OscConfig+0x2a0>)
 8003f72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f74:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <HAL_RCC_OscConfig+0x2a4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe f877 	bl	800206c <HAL_InitTick>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d052      	beq.n	800402e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	e331      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d032      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f94:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a4c      	ldr	r2, [pc, #304]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fac2 	bl	8002528 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa8:	f7fe fabe 	bl	8002528 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e31a      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fba:	4b44      	ldr	r3, [pc, #272]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc6:	4b41      	ldr	r3, [pc, #260]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a40      	ldr	r2, [pc, #256]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fcc:	f043 0308 	orr.w	r3, r3, #8
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	493b      	ldr	r1, [pc, #236]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe4:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	4936      	ldr	r1, [pc, #216]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
 8003ff8:	e01a      	b.n	8004030 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a33      	ldr	r2, [pc, #204]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004006:	f7fe fa8f 	bl	8002528 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800400e:	f7fe fa8b 	bl	8002528 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e2e7      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x1da>
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800402e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d074      	beq.n	8004126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b08      	cmp	r3, #8
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x21a>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b0c      	cmp	r3, #12
 8004046:	d10e      	bne.n	8004066 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d10b      	bne.n	8004066 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d064      	beq.n	8004124 <HAL_RCC_OscConfig+0x2f0>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d160      	bne.n	8004124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e2c4      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x24a>
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e01d      	b.n	80040ba <HAL_RCC_OscConfig+0x286>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004086:	d10c      	bne.n	80040a2 <HAL_RCC_OscConfig+0x26e>
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 800408e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 800409a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e00b      	b.n	80040ba <HAL_RCC_OscConfig+0x286>
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a06      	ldr	r2, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x298>)
 80040b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01c      	beq.n	80040fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe fa31 	bl	8002528 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c8:	e011      	b.n	80040ee <HAL_RCC_OscConfig+0x2ba>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800b104 	.word	0x0800b104
 80040d4:	20000000 	.word	0x20000000
 80040d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe fa24 	bl	8002528 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e280      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	4baf      	ldr	r3, [pc, #700]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x2a8>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe fa14 	bl	8002528 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe fa10 	bl	8002528 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e26c      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	4ba5      	ldr	r3, [pc, #660]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d0>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d060      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x310>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d119      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d116      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	4b99      	ldr	r3, [pc, #612]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_OscConfig+0x328>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e249      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b93      	ldr	r3, [pc, #588]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	4990      	ldr	r1, [pc, #576]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004170:	e040      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d023      	beq.n	80041c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417a:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a8b      	ldr	r2, [pc, #556]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fe f9cf 	bl	8002528 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418e:	f7fe f9cb 	bl	8002528 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e227      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b7f      	ldr	r3, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	497c      	ldr	r1, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	e018      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b7a      	ldr	r3, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a79      	ldr	r2, [pc, #484]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fe f9ab 	bl	8002528 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fe f9a7 	bl	8002528 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e203      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b70      	ldr	r3, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03c      	beq.n	800427a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01c      	beq.n	8004242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420e:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fe f986 	bl	8002528 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004220:	f7fe f982 	bl	8002528 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e1de      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ef      	beq.n	8004220 <HAL_RCC_OscConfig+0x3ec>
 8004240:	e01b      	b.n	800427a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	4a58      	ldr	r2, [pc, #352]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fe f969 	bl	8002528 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fe f965 	bl	8002528 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1c1      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426c:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ef      	bne.n	800425a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a6 	beq.w	80043d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800428c:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004298:	4b44      	ldr	r3, [pc, #272]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	4a43      	ldr	r2, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6593      	str	r3, [r2, #88]	; 0x58
 80042a4:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b0:	2301      	movs	r3, #1
 80042b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	4b3e      	ldr	r3, [pc, #248]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d118      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c0:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042cc:	f7fe f92c 	bl	8002528 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d4:	f7fe f928 	bl	8002528 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e184      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	4b32      	ldr	r3, [pc, #200]	; (80043b0 <HAL_RCC_OscConfig+0x57c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x4d8>
 80042fa:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430a:	e024      	b.n	8004356 <HAL_RCC_OscConfig+0x522>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d110      	bne.n	8004336 <HAL_RCC_OscConfig+0x502>
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a24      	ldr	r2, [pc, #144]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a20      	ldr	r2, [pc, #128]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004334:	e00f      	b.n	8004356 <HAL_RCC_OscConfig+0x522>
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004346:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800434e:	f023 0304 	bic.w	r3, r3, #4
 8004352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fe f8e3 	bl	8002528 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fe f8df 	bl	8002528 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e139      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x578>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ed      	beq.n	8004366 <HAL_RCC_OscConfig+0x532>
 800438a:	e01a      	b.n	80043c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fe f8cc 	bl	8002528 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004392:	e00f      	b.n	80043b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fe f8c8 	bl	8002528 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d906      	bls.n	80043b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e122      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b4:	4b90      	ldr	r3, [pc, #576]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e8      	bne.n	8004394 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4b8b      	ldr	r3, [pc, #556]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4a8a      	ldr	r2, [pc, #552]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8108 	beq.w	80045ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	f040 80d0 	bne.w	8004588 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043e8:	4b83      	ldr	r3, [pc, #524]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 0203 	and.w	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d130      	bne.n	800445e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	3b01      	subs	r3, #1
 8004408:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d127      	bne.n	800445e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004418:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d11f      	bne.n	800445e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004428:	2a07      	cmp	r2, #7
 800442a:	bf14      	ite	ne
 800442c:	2201      	movne	r2, #1
 800442e:	2200      	moveq	r2, #0
 8004430:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004432:	4293      	cmp	r3, r2
 8004434:	d113      	bne.n	800445e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	3b01      	subs	r3, #1
 8004444:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d109      	bne.n	800445e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	3b01      	subs	r3, #1
 8004458:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d06e      	beq.n	800453c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	d069      	beq.n	8004538 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004464:	4b64      	ldr	r3, [pc, #400]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004470:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b7      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004480:	4b5d      	ldr	r3, [pc, #372]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a5c      	ldr	r2, [pc, #368]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800448c:	f7fe f84c 	bl	8002528 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fe f848 	bl	8002528 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0a4      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a6:	4b54      	ldr	r3, [pc, #336]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b2:	4b51      	ldr	r3, [pc, #324]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	4b51      	ldr	r3, [pc, #324]	; (80045fc <HAL_RCC_OscConfig+0x7c8>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044c2:	3a01      	subs	r2, #1
 80044c4:	0112      	lsls	r2, r2, #4
 80044c6:	4311      	orrs	r1, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044cc:	0212      	lsls	r2, r2, #8
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044d4:	0852      	lsrs	r2, r2, #1
 80044d6:	3a01      	subs	r2, #1
 80044d8:	0552      	lsls	r2, r2, #21
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044e0:	0852      	lsrs	r2, r2, #1
 80044e2:	3a01      	subs	r2, #1
 80044e4:	0652      	lsls	r2, r2, #25
 80044e6:	4311      	orrs	r1, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044ec:	0912      	lsrs	r2, r2, #4
 80044ee:	0452      	lsls	r2, r2, #17
 80044f0:	430a      	orrs	r2, r1
 80044f2:	4941      	ldr	r1, [pc, #260]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044f8:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a3e      	ldr	r2, [pc, #248]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80044fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004502:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004504:	4b3c      	ldr	r3, [pc, #240]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a3b      	ldr	r2, [pc, #236]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800450a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004510:	f7fe f80a 	bl	8002528 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004518:	f7fe f806 	bl	8002528 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e062      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004536:	e05a      	b.n	80045ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e059      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d152      	bne.n	80045ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2a      	ldr	r2, [pc, #168]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800455a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004560:	f7fd ffe2 	bl	8002528 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd ffde 	bl	8002528 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03a      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x734>
 8004586:	e032      	b.n	80045ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d02d      	beq.n	80045ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 8004594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004598:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80045ac:	f023 0303 	bic.w	r3, r3, #3
 80045b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045b2:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80045b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fd ffb1 	bl	8002528 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fd ffad 	bl	8002528 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e009      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_OscConfig+0x7c4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x796>
 80045e8:	e001      	b.n	80045ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	f99d808c 	.word	0xf99d808c

08004600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0c8      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d910      	bls.n	8004644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b63      	ldr	r3, [pc, #396]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 0207 	bic.w	r2, r3, #7
 800462a:	4961      	ldr	r1, [pc, #388]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b0      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d04c      	beq.n	80046ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d107      	bne.n	8004668 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004658:	4b56      	ldr	r3, [pc, #344]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d121      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e09e      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d107      	bne.n	8004680 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004670:	4b50      	ldr	r3, [pc, #320]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d115      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e092      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d107      	bne.n	8004698 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004688:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e086      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004698:	4b46      	ldr	r3, [pc, #280]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e07e      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 0203 	bic.w	r2, r3, #3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	493f      	ldr	r1, [pc, #252]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ba:	f7fd ff35 	bl	8002528 <HAL_GetTick>
 80046be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c2:	f7fd ff31 	bl	8002528 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e066      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d8:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 020c 	and.w	r2, r3, #12
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d1eb      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	492c      	ldr	r1, [pc, #176]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d210      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 0207 	bic.w	r2, r3, #7
 800471e:	4924      	ldr	r1, [pc, #144]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_RCC_ClockConfig+0x1b0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e036      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4918      	ldr	r1, [pc, #96]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4910      	ldr	r1, [pc, #64]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004776:	f000 f825 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 800477a:	4601      	mov	r1, r0
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <HAL_RCC_ClockConfig+0x1b4>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004788:	5cd3      	ldrb	r3, [r2, r3]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	fa21 f303 	lsr.w	r3, r1, r3
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fc66 	bl	800206c <HAL_InitTick>
 80047a0:	4603      	mov	r3, r0
 80047a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80047a4:	7afb      	ldrb	r3, [r7, #11]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40022000 	.word	0x40022000
 80047b4:	40021000 	.word	0x40021000
 80047b8:	0800b104 	.word	0x0800b104
 80047bc:	20000000 	.word	0x20000000
 80047c0:	20000004 	.word	0x20000004

080047c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d2:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047dc:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x34>
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d121      	bne.n	8004836 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d11e      	bne.n	8004836 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047f8:	4b33      	ldr	r3, [pc, #204]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004804:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e005      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004814:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004820:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004828:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10d      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004834:	e00a      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d102      	bne.n	8004842 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e004      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b08      	cmp	r3, #8
 8004846:	d101      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004848:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800484a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b0c      	cmp	r3, #12
 8004850:	d133      	bne.n	80048ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d002      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0xa4>
 8004862:	2b03      	cmp	r3, #3
 8004864:	d003      	beq.n	800486e <HAL_RCC_GetSysClockFreq+0xaa>
 8004866:	e005      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800486a:	617b      	str	r3, [r7, #20]
      break;
 800486c:	e005      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004870:	617b      	str	r3, [r7, #20]
      break;
 8004872:	e002      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	617b      	str	r3, [r7, #20]
      break;
 8004878:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	3301      	adds	r3, #1
 8004886:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	fb02 f203 	mul.w	r2, r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	0e5b      	lsrs	r3, r3, #25
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	3301      	adds	r3, #1
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048ba:	69bb      	ldr	r3, [r7, #24]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3724      	adds	r7, #36	; 0x24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40021000 	.word	0x40021000
 80048cc:	0800b11c 	.word	0x0800b11c
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	007a1200 	.word	0x007a1200

080048d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_RCC_GetHCLKFreq+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000000 	.word	0x20000000

080048f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048f4:	f7ff fff0 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048f8:	4601      	mov	r1, r0
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004906:	5cd3      	ldrb	r3, [r2, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000
 8004918:	0800b114 	.word	0x0800b114

0800491c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004920:	f7ff ffda 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8004924:	4601      	mov	r1, r0
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0adb      	lsrs	r3, r3, #11
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	0800b114 	.word	0x0800b114

08004948 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004958:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <HAL_RCC_GetClockConfig+0x60>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0207 	and.w	r2, r3, #7
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	601a      	str	r2, [r3, #0]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40022000 	.word	0x40022000

080049ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049b8:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049c4:	f7ff f9d2 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 80049c8:	6178      	str	r0, [r7, #20]
 80049ca:	e014      	b.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6593      	str	r3, [r2, #88]	; 0x58
 80049d8:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049e4:	f7ff f9c2 	bl	8003d6c <HAL_PWREx_GetVoltageRange>
 80049e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ea:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fc:	d10b      	bne.n	8004a16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d919      	bls.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2ba0      	cmp	r3, #160	; 0xa0
 8004a08:	d902      	bls.n	8004a10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e013      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a10:	2301      	movs	r3, #1
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e010      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d902      	bls.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e00a      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d102      	bne.n	8004a2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a28:	2302      	movs	r3, #2
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	e004      	b.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b70      	cmp	r3, #112	; 0x70
 8004a32:	d101      	bne.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a34:	2301      	movs	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 0207 	bic.w	r2, r3, #7
 8004a40:	4909      	ldr	r1, [pc, #36]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a48:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40022000 	.word	0x40022000

08004a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a74:	2300      	movs	r3, #0
 8004a76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a78:	2300      	movs	r3, #0
 8004a7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d03f      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a90:	d01c      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a96:	d802      	bhi.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00e      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004a9c:	e01f      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aa8:	d01c      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004aaa:	e018      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aac:	4b85      	ldr	r3, [pc, #532]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a84      	ldr	r2, [pc, #528]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ab8:	e015      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fab9 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aca:	e00c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3320      	adds	r3, #32
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fba0 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aec:	4b75      	ldr	r3, [pc, #468]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afa:	4972      	ldr	r1, [pc, #456]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	7cfb      	ldrb	r3, [r7, #19]
 8004b06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d03f      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b1c:	d01c      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b22:	d802      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00e      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004b28:	e01f      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b2e:	d003      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b34:	d01c      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004b36:	e018      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b38:	4b62      	ldr	r3, [pc, #392]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a61      	ldr	r2, [pc, #388]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b44:	e015      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fa73 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b56:	e00c      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3320      	adds	r3, #32
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fb5a 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	74fb      	strb	r3, [r7, #19]
      break;
 8004b6e:	e000      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b78:	4b52      	ldr	r3, [pc, #328]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b86:	494f      	ldr	r1, [pc, #316]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b8e:	e001      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80a0 	beq.w	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ba6:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	4b41      	ldr	r3, [pc, #260]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	4a40      	ldr	r2, [pc, #256]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc8:	4b3e      	ldr	r3, [pc, #248]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3a      	ldr	r2, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004be4:	f7fd fca0 	bl	8002528 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bea:	e009      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bec:	f7fd fc9c 	bl	8002528 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d902      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	74fb      	strb	r3, [r7, #19]
        break;
 8004bfe:	e005      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c00:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ef      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d15c      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c12:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01f      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d019      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c30:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c3c:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c5c:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fd fc5b 	bl	8002528 <HAL_GetTick>
 8004c72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c74:	e00b      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fd fc57 	bl	8002528 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d902      	bls.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c8c:	e006      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ec      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb2:	4904      	ldr	r1, [pc, #16]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cba:	e009      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	74bb      	strb	r3, [r7, #18]
 8004cc0:	e006      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cd0:	7c7b      	ldrb	r3, [r7, #17]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d105      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd6:	4b9e      	ldr	r3, [pc, #632]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	4a9d      	ldr	r2, [pc, #628]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cee:	4b98      	ldr	r3, [pc, #608]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f023 0203 	bic.w	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	4994      	ldr	r1, [pc, #592]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d10:	4b8f      	ldr	r3, [pc, #572]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f023 020c 	bic.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	498c      	ldr	r1, [pc, #560]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d32:	4b87      	ldr	r3, [pc, #540]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	4983      	ldr	r1, [pc, #524]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d54:	4b7e      	ldr	r3, [pc, #504]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	497b      	ldr	r1, [pc, #492]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d84:	4972      	ldr	r1, [pc, #456]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d98:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	496a      	ldr	r1, [pc, #424]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dba:	4b65      	ldr	r3, [pc, #404]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	4961      	ldr	r1, [pc, #388]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ddc:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	4959      	ldr	r1, [pc, #356]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dfe:	4b54      	ldr	r3, [pc, #336]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	4950      	ldr	r1, [pc, #320]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e20:	4b4b      	ldr	r3, [pc, #300]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	4948      	ldr	r1, [pc, #288]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e42:	4b43      	ldr	r3, [pc, #268]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	493f      	ldr	r1, [pc, #252]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d028      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e64:	4b3a      	ldr	r3, [pc, #232]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e72:	4937      	ldr	r1, [pc, #220]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e82:	d106      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e84:	4b32      	ldr	r3, [pc, #200]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a31      	ldr	r2, [pc, #196]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8e:	60d3      	str	r3, [r2, #12]
 8004e90:	e011      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f8c8 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004eb2:	7cfb      	ldrb	r3, [r7, #19]
 8004eb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d028      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ec2:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	491f      	ldr	r1, [pc, #124]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eec:	60d3      	str	r3, [r2, #12]
 8004eee:	e011      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f899 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d02b      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2e:	4908      	ldr	r1, [pc, #32]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3e:	d109      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a02      	ldr	r2, [pc, #8]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]
 8004f4c:	e014      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2101      	movs	r1, #1
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f867 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f84:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f92:	4928      	ldr	r1, [pc, #160]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa2:	d10d      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	2102      	movs	r1, #2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f844 	bl	8005038 <RCCEx_PLLSAI1_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	74bb      	strb	r3, [r7, #18]
 8004fbe:	e011      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3320      	adds	r3, #32
 8004fce:	2102      	movs	r1, #2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f921 	bl	8005218 <RCCEx_PLLSAI2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ff0:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffe:	490d      	ldr	r1, [pc, #52]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005018:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005022:	4904      	ldr	r1, [pc, #16]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800502a:	7cbb      	ldrb	r3, [r7, #18]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000

08005038 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005046:	4b73      	ldr	r3, [pc, #460]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005052:	4b70      	ldr	r3, [pc, #448]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0203 	and.w	r2, r3, #3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d10d      	bne.n	800507e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
       ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800506a:	4b6a      	ldr	r3, [pc, #424]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
       ||
 800507a:	429a      	cmp	r2, r3
 800507c:	d044      	beq.n	8005108 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
 8005082:	e041      	b.n	8005108 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d00c      	beq.n	80050a6 <RCCEx_PLLSAI1_Config+0x6e>
 800508c:	2b03      	cmp	r3, #3
 800508e:	d013      	beq.n	80050b8 <RCCEx_PLLSAI1_Config+0x80>
 8005090:	2b01      	cmp	r3, #1
 8005092:	d120      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005094:	4b5f      	ldr	r3, [pc, #380]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d11d      	bne.n	80050dc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a4:	e01a      	b.n	80050dc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a6:	4b5b      	ldr	r3, [pc, #364]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d116      	bne.n	80050e0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b6:	e013      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050b8:	4b56      	ldr	r3, [pc, #344]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10f      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c4:	4b53      	ldr	r3, [pc, #332]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d4:	e006      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
      break;
 80050da:	e004      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80050dc:	bf00      	nop
 80050de:	e002      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80050e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10d      	bne.n	8005108 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ec:	4b49      	ldr	r3, [pc, #292]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	430b      	orrs	r3, r1
 8005102:	4944      	ldr	r1, [pc, #272]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005104:	4313      	orrs	r3, r2
 8005106:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d17d      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800510e:	4b41      	ldr	r3, [pc, #260]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a40      	ldr	r2, [pc, #256]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005114:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511a:	f7fd fa05 	bl	8002528 <HAL_GetTick>
 800511e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005120:	e009      	b.n	8005136 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005122:	f7fd fa01 	bl	8002528 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d902      	bls.n	8005136 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	73fb      	strb	r3, [r7, #15]
        break;
 8005134:	e005      	b.n	8005142 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005136:	4b37      	ldr	r3, [pc, #220]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ef      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d160      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d111      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6892      	ldr	r2, [r2, #8]
 800515e:	0211      	lsls	r1, r2, #8
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68d2      	ldr	r2, [r2, #12]
 8005164:	0912      	lsrs	r2, r2, #4
 8005166:	0452      	lsls	r2, r2, #17
 8005168:	430a      	orrs	r2, r1
 800516a:	492a      	ldr	r1, [pc, #168]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
 8005170:	e027      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d112      	bne.n	800519e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005178:	4b26      	ldr	r3, [pc, #152]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6892      	ldr	r2, [r2, #8]
 8005188:	0211      	lsls	r1, r2, #8
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6912      	ldr	r2, [r2, #16]
 800518e:	0852      	lsrs	r2, r2, #1
 8005190:	3a01      	subs	r2, #1
 8005192:	0552      	lsls	r2, r2, #21
 8005194:	430a      	orrs	r2, r1
 8005196:	491f      	ldr	r1, [pc, #124]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]
 800519c:	e011      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6892      	ldr	r2, [r2, #8]
 80051ae:	0211      	lsls	r1, r2, #8
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6952      	ldr	r2, [r2, #20]
 80051b4:	0852      	lsrs	r2, r2, #1
 80051b6:	3a01      	subs	r2, #1
 80051b8:	0652      	lsls	r2, r2, #25
 80051ba:	430a      	orrs	r2, r1
 80051bc:	4915      	ldr	r1, [pc, #84]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ce:	f7fd f9ab 	bl	8002528 <HAL_GetTick>
 80051d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051d4:	e009      	b.n	80051ea <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d6:	f7fd f9a7 	bl	8002528 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d902      	bls.n	80051ea <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	73fb      	strb	r3, [r7, #15]
          break;
 80051e8:	e005      	b.n	80051f6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0ef      	beq.n	80051d6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	4903      	ldr	r1, [pc, #12]	; (8005214 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000

08005218 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005226:	4b68      	ldr	r3, [pc, #416]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005232:	4b65      	ldr	r3, [pc, #404]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0203 	and.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d10d      	bne.n	800525e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
       ||
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800524a:	4b5f      	ldr	r3, [pc, #380]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
       ||
 800525a:	429a      	cmp	r2, r3
 800525c:	d044      	beq.n	80052e8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
 8005262:	e041      	b.n	80052e8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d00c      	beq.n	8005286 <RCCEx_PLLSAI2_Config+0x6e>
 800526c:	2b03      	cmp	r3, #3
 800526e:	d013      	beq.n	8005298 <RCCEx_PLLSAI2_Config+0x80>
 8005270:	2b01      	cmp	r3, #1
 8005272:	d120      	bne.n	80052b6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005274:	4b54      	ldr	r3, [pc, #336]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11d      	bne.n	80052bc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005284:	e01a      	b.n	80052bc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005286:	4b50      	ldr	r3, [pc, #320]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528e:	2b00      	cmp	r3, #0
 8005290:	d116      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005296:	e013      	b.n	80052c0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005298:	4b4b      	ldr	r3, [pc, #300]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a4:	4b48      	ldr	r3, [pc, #288]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b4:	e006      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
      break;
 80052ba:	e004      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80052bc:	bf00      	nop
 80052be:	e002      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80052c0:	bf00      	nop
 80052c2:	e000      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80052c4:	bf00      	nop
    }

    if(status == HAL_OK)
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052cc:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	3b01      	subs	r3, #1
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	430b      	orrs	r3, r1
 80052e2:	4939      	ldr	r1, [pc, #228]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d167      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052ee:	4b36      	ldr	r3, [pc, #216]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a35      	ldr	r2, [pc, #212]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fa:	f7fd f915 	bl	8002528 <HAL_GetTick>
 80052fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005300:	e009      	b.n	8005316 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005302:	f7fd f911 	bl	8002528 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d902      	bls.n	8005316 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	73fb      	strb	r3, [r7, #15]
        break;
 8005314:	e005      	b.n	8005322 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005316:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ef      	bne.n	8005302 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d14a      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d111      	bne.n	8005352 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800532e:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6892      	ldr	r2, [r2, #8]
 800533e:	0211      	lsls	r1, r2, #8
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68d2      	ldr	r2, [r2, #12]
 8005344:	0912      	lsrs	r2, r2, #4
 8005346:	0452      	lsls	r2, r2, #17
 8005348:	430a      	orrs	r2, r1
 800534a:	491f      	ldr	r1, [pc, #124]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	614b      	str	r3, [r1, #20]
 8005350:	e011      	b.n	8005376 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800535a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6892      	ldr	r2, [r2, #8]
 8005362:	0211      	lsls	r1, r2, #8
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6912      	ldr	r2, [r2, #16]
 8005368:	0852      	lsrs	r2, r2, #1
 800536a:	3a01      	subs	r2, #1
 800536c:	0652      	lsls	r2, r2, #25
 800536e:	430a      	orrs	r2, r1
 8005370:	4915      	ldr	r1, [pc, #84]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005372:	4313      	orrs	r3, r2
 8005374:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd f8d1 	bl	8002528 <HAL_GetTick>
 8005386:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005388:	e009      	b.n	800539e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800538a:	f7fd f8cd 	bl	8002528 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d902      	bls.n	800539e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	73fb      	strb	r3, [r7, #15]
          break;
 800539c:	e005      	b.n	80053aa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0ef      	beq.n	800538a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053be:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40021000 	.word	0x40021000

080053cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e07c      	b.n	80054d8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fc fd7b 	bl	8001ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005414:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800541e:	d902      	bls.n	8005426 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e002      	b.n	800542c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800542a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005434:	d007      	beq.n	8005446 <HAL_SPI_Init+0x7a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800543e:	d002      	beq.n	8005446 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005456:	d903      	bls.n	8005460 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
 800545e:	e002      	b.n	8005466 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	ea42 0103 	orr.w	r1, r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 0204 	and.w	r2, r3, #4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	ea42 0103 	orr.w	r1, r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_SPI_Transmit+0x22>
 80054fe:	2302      	movs	r3, #2
 8005500:	e150      	b.n	80057a4 <HAL_SPI_Transmit+0x2c4>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800550a:	f7fd f80d 	bl	8002528 <HAL_GetTick>
 800550e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d002      	beq.n	8005526 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005520:	2302      	movs	r3, #2
 8005522:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005524:	e135      	b.n	8005792 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_SPI_Transmit+0x52>
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005536:	e12c      	b.n	8005792 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005582:	d107      	bne.n	8005594 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005592:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	d007      	beq.n	80055b2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ba:	d94b      	bls.n	8005654 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_SPI_Transmit+0xea>
 80055c4:	8afb      	ldrh	r3, [r7, #22]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d13e      	bne.n	8005648 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	881a      	ldrh	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055ee:	e02b      	b.n	8005648 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d112      	bne.n	8005624 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	881a      	ldrh	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	1c9a      	adds	r2, r3, #2
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005622:	e011      	b.n	8005648 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005624:	f7fc ff80 	bl	8002528 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d803      	bhi.n	800563c <HAL_SPI_Transmit+0x15c>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d102      	bne.n	8005642 <HAL_SPI_Transmit+0x162>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005646:	e0a4      	b.n	8005792 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ce      	bne.n	80055f0 <HAL_SPI_Transmit+0x110>
 8005652:	e07c      	b.n	800574e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_SPI_Transmit+0x182>
 800565c:	8afb      	ldrh	r3, [r7, #22]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d170      	bne.n	8005744 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d912      	bls.n	8005692 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	881a      	ldrh	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b02      	subs	r3, #2
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005690:	e058      	b.n	8005744 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056b8:	e044      	b.n	8005744 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d12b      	bne.n	8005720 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d912      	bls.n	80056f8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	881a      	ldrh	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	1c9a      	adds	r2, r3, #2
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b02      	subs	r3, #2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056f6:	e025      	b.n	8005744 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	7812      	ldrb	r2, [r2, #0]
 8005704:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800571e:	e011      	b.n	8005744 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005720:	f7fc ff02 	bl	8002528 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d803      	bhi.n	8005738 <HAL_SPI_Transmit+0x258>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d102      	bne.n	800573e <HAL_SPI_Transmit+0x25e>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005742:	e026      	b.n	8005792 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1b5      	bne.n	80056ba <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fb14 	bl	8005d80 <SPI_EndRxTxTransaction>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e000      	b.n	8005792 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005790:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057ba:	2301      	movs	r3, #1
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_TransmitReceive+0x26>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e1fb      	b.n	8005bca <HAL_SPI_TransmitReceive+0x41e>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057da:	f7fc fea5 	bl	8002528 <HAL_GetTick>
 80057de:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80057ee:	887b      	ldrh	r3, [r7, #2]
 80057f0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057f6:	7efb      	ldrb	r3, [r7, #27]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d00e      	beq.n	800581a <HAL_SPI_TransmitReceive+0x6e>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005802:	d106      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x66>
 800580c:	7efb      	ldrb	r3, [r7, #27]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d003      	beq.n	800581a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005812:	2302      	movs	r3, #2
 8005814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005818:	e1cd      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_SPI_TransmitReceive+0x80>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_SPI_TransmitReceive+0x80>
 8005826:	887b      	ldrh	r3, [r7, #2]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d103      	bne.n	8005834 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005832:	e1c0      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b04      	cmp	r3, #4
 800583e:	d003      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2205      	movs	r2, #5
 8005844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	887a      	ldrh	r2, [r7, #2]
 800586e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	887a      	ldrh	r2, [r7, #2]
 8005874:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800588a:	d802      	bhi.n	8005892 <HAL_SPI_TransmitReceive+0xe6>
 800588c:	8a3b      	ldrh	r3, [r7, #16]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d908      	bls.n	80058a4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	e007      	b.n	80058b4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d007      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058da:	d97c      	bls.n	80059d6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_SPI_TransmitReceive+0x13e>
 80058e4:	8a7b      	ldrh	r3, [r7, #18]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d169      	bne.n	80059be <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	1c9a      	adds	r2, r3, #2
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	e056      	b.n	80059be <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d11b      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x1aa>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d016      	beq.n	8005956 <HAL_SPI_TransmitReceive+0x1aa>
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	2b01      	cmp	r3, #1
 800592c:	d113      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	881a      	ldrh	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d11c      	bne.n	800599e <HAL_SPI_TransmitReceive+0x1f2>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d016      	beq.n	800599e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	b292      	uxth	r2, r2
 800597c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	1c9a      	adds	r2, r3, #2
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800599a:	2301      	movs	r3, #1
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800599e:	f7fc fdc3 	bl	8002528 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d807      	bhi.n	80059be <HAL_SPI_TransmitReceive+0x212>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d003      	beq.n	80059be <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059bc:	e0fb      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1a3      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x164>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d19d      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x164>
 80059d4:	e0df      	b.n	8005b96 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0x23a>
 80059de:	8a7b      	ldrh	r3, [r7, #18]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	f040 80cb 	bne.w	8005b7c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d912      	bls.n	8005a16 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	881a      	ldrh	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	1c9a      	adds	r2, r3, #2
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b02      	subs	r3, #2
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a14:	e0b2      	b.n	8005b7c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	7812      	ldrb	r2, [r2, #0]
 8005a22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3c:	e09e      	b.n	8005b7c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d134      	bne.n	8005ab6 <HAL_SPI_TransmitReceive+0x30a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02f      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x30a>
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d12c      	bne.n	8005ab6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d912      	bls.n	8005a8c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	881a      	ldrh	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	1c9a      	adds	r2, r3, #2
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b02      	subs	r3, #2
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a8a:	e012      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d148      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x3aa>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d042      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d923      	bls.n	8005b24 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b02      	subs	r3, #2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d81f      	bhi.n	8005b52 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	e016      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f103 020c 	add.w	r2, r3, #12
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	7812      	ldrb	r2, [r2, #0]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b52:	2301      	movs	r3, #1
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b56:	f7fc fce7 	bl	8002528 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d803      	bhi.n	8005b6e <HAL_SPI_TransmitReceive+0x3c2>
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d102      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x3c8>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b7a:	e01c      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f47f af5b 	bne.w	8005a3e <HAL_SPI_TransmitReceive+0x292>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f af54 	bne.w	8005a3e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f8f0 	bl	8005d80 <SPI_EndRxTxTransaction>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d006      	beq.n	8005bb4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	661a      	str	r2, [r3, #96]	; 0x60
 8005bb2:	e000      	b.n	8005bb6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3728      	adds	r7, #40	; 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	4613      	mov	r3, r2
 8005be0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005be2:	e04c      	b.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d048      	beq.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005bec:	f7fc fc9c 	bl	8002528 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d902      	bls.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d13d      	bne.n	8005c7e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1a:	d111      	bne.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c24:	d004      	beq.n	8005c30 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2e:	d107      	bne.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c48:	d10f      	bne.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e00f      	b.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	bf0c      	ite	eq
 8005c8e:	2301      	moveq	r3, #1
 8005c90:	2300      	movne	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d1a3      	bne.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
 8005cb2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cb4:	e057      	b.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005cbc:	d106      	bne.n	8005ccc <SPI_WaitFifoStateUntilTimeout+0x26>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d048      	beq.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005cd4:	f7fc fc28 	bl	8002528 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d902      	bls.n	8005cea <SPI_WaitFifoStateUntilTimeout+0x44>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d13d      	bne.n	8005d66 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d02:	d111      	bne.n	8005d28 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0c:	d004      	beq.n	8005d18 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d16:	d107      	bne.n	8005d28 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d30:	d10f      	bne.n	8005d52 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e008      	b.n	8005d78 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d19f      	bne.n	8005cb6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ff84 	bl	8005ca6 <SPI_WaitFifoStateUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e027      	b.n	8005e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2180      	movs	r1, #128	; 0x80
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7ff ff07 	bl	8005bd2 <SPI_WaitFlagStateUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e014      	b.n	8005e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff ff5d 	bl	8005ca6 <SPI_WaitFifoStateUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e000      	b.n	8005e04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e01d      	b.n	8005e5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fc fa66 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 fb06 	bl	800645c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <HAL_TIM_Base_Start_IT+0x50>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b06      	cmp	r3, #6
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x42>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d007      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0201 	orr.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	00010007 	.word	0x00010007

08005eb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e01d      	b.n	8005f06 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f815 	bl	8005f0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f000 fab0 	bl	800645c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d122      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d11b      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f06f 0202 	mvn.w	r2, #2
 8005f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fa5a 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 8005f6a:	e005      	b.n	8005f78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa4c 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa5d 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d122      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d11b      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0204 	mvn.w	r2, #4
 8005fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fa30 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 8005fbe:	e005      	b.n	8005fcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fa22 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa33 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d122      	bne.n	8006026 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d11b      	bne.n	8006026 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0208 	mvn.w	r2, #8
 8005ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa06 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 8006012:	e005      	b.n	8006020 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9f8 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa09 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b10      	cmp	r3, #16
 8006032:	d122      	bne.n	800607a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b10      	cmp	r3, #16
 8006040:	d11b      	bne.n	800607a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0210 	mvn.w	r2, #16
 800604a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2208      	movs	r2, #8
 8006050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f9dc 	bl	800641e <HAL_TIM_IC_CaptureCallback>
 8006066:	e005      	b.n	8006074 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9ce 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f9df 	bl	8006432 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10e      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d107      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0201 	mvn.w	r2, #1
 800609e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fb fe91 	bl	8001dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d10e      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d107      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fcaf 	bl	8006a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fca2 	bl	8006a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d10e      	bne.n	800612c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d107      	bne.n	800612c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f98d 	bl	8006446 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	d10e      	bne.n	8006158 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b20      	cmp	r3, #32
 8006146:	d107      	bne.n	8006158 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0220 	mvn.w	r2, #32
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fc62 	bl	8006a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006176:	2302      	movs	r3, #2
 8006178:	e08a      	b.n	8006290 <HAL_TIM_IC_ConfigChannel+0x130>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d11b      	bne.n	80061c8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6819      	ldr	r1, [r3, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f000 f9f6 	bl	8006590 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 020c 	bic.w	r2, r2, #12
 80061b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6999      	ldr	r1, [r3, #24]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	619a      	str	r2, [r3, #24]
 80061c6:	e05a      	b.n	800627e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d11c      	bne.n	8006208 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6819      	ldr	r1, [r3, #0]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f000 fa74 	bl	80066ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6999      	ldr	r1, [r3, #24]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	021a      	lsls	r2, r3, #8
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	619a      	str	r2, [r3, #24]
 8006206:	e03a      	b.n	800627e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b08      	cmp	r3, #8
 800620c:	d11b      	bne.n	8006246 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f000 fac1 	bl	80067a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 020c 	bic.w	r2, r2, #12
 8006230:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69d9      	ldr	r1, [r3, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	61da      	str	r2, [r3, #28]
 8006244:	e01b      	b.n	800627e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f000 fae1 	bl	800681c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006268:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	021a      	lsls	r2, r3, #8
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIM_ConfigClockSource+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e0a8      	b.n	8006402 <HAL_TIM_ConfigClockSource+0x16a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d067      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0x124>
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d80b      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x70>
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d073      	beq.n	80063dc <HAL_TIM_ConfigClockSource+0x144>
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d802      	bhi.n	80062fe <HAL_TIM_ConfigClockSource+0x66>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d06f      	beq.n	80063dc <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80062fc:	e078      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d06c      	beq.n	80063dc <HAL_TIM_ConfigClockSource+0x144>
 8006302:	2b30      	cmp	r3, #48	; 0x30
 8006304:	d06a      	beq.n	80063dc <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006306:	e073      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006308:	2b70      	cmp	r3, #112	; 0x70
 800630a:	d00d      	beq.n	8006328 <HAL_TIM_ConfigClockSource+0x90>
 800630c:	2b70      	cmp	r3, #112	; 0x70
 800630e:	d804      	bhi.n	800631a <HAL_TIM_ConfigClockSource+0x82>
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d033      	beq.n	800637c <HAL_TIM_ConfigClockSource+0xe4>
 8006314:	2b60      	cmp	r3, #96	; 0x60
 8006316:	d041      	beq.n	800639c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006318:	e06a      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800631a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631e:	d066      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x156>
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006324:	d017      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006326:	e063      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	6899      	ldr	r1, [r3, #8]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f000 fac8 	bl	80068cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800634a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
      break;
 8006354:	e04c      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6899      	ldr	r1, [r3, #8]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f000 fab1 	bl	80068cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006378:	609a      	str	r2, [r3, #8]
      break;
 800637a:	e039      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	461a      	mov	r2, r3
 800638a:	f000 f96f 	bl	800666c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2150      	movs	r1, #80	; 0x50
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fa7e 	bl	8006896 <TIM_ITRx_SetConfig>
      break;
 800639a:	e029      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6859      	ldr	r1, [r3, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	461a      	mov	r2, r3
 80063aa:	f000 f9cb 	bl	8006744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2160      	movs	r1, #96	; 0x60
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fa6e 	bl	8006896 <TIM_ITRx_SetConfig>
      break;
 80063ba:	e019      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	461a      	mov	r2, r3
 80063ca:	f000 f94f 	bl	800666c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2140      	movs	r1, #64	; 0x40
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fa5e 	bl	8006896 <TIM_ITRx_SetConfig>
      break;
 80063da:	e009      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f000 fa55 	bl	8006896 <TIM_ITRx_SetConfig>
      break;
 80063ec:	e000      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80063ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a40      	ldr	r2, [pc, #256]	; (8006570 <TIM_Base_SetConfig+0x114>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d013      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647a:	d00f      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3d      	ldr	r2, [pc, #244]	; (8006574 <TIM_Base_SetConfig+0x118>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00b      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3c      	ldr	r2, [pc, #240]	; (8006578 <TIM_Base_SetConfig+0x11c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d007      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3b      	ldr	r2, [pc, #236]	; (800657c <TIM_Base_SetConfig+0x120>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3a      	ldr	r2, [pc, #232]	; (8006580 <TIM_Base_SetConfig+0x124>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2f      	ldr	r2, [pc, #188]	; (8006570 <TIM_Base_SetConfig+0x114>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01f      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064bc:	d01b      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2c      	ldr	r2, [pc, #176]	; (8006574 <TIM_Base_SetConfig+0x118>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d017      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2b      	ldr	r2, [pc, #172]	; (8006578 <TIM_Base_SetConfig+0x11c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2a      	ldr	r2, [pc, #168]	; (800657c <TIM_Base_SetConfig+0x120>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00f      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a29      	ldr	r2, [pc, #164]	; (8006580 <TIM_Base_SetConfig+0x124>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00b      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a28      	ldr	r2, [pc, #160]	; (8006584 <TIM_Base_SetConfig+0x128>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d007      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a27      	ldr	r2, [pc, #156]	; (8006588 <TIM_Base_SetConfig+0x12c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a26      	ldr	r2, [pc, #152]	; (800658c <TIM_Base_SetConfig+0x130>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d108      	bne.n	8006508 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a10      	ldr	r2, [pc, #64]	; (8006570 <TIM_Base_SetConfig+0x114>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00f      	beq.n	8006554 <TIM_Base_SetConfig+0xf8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a12      	ldr	r2, [pc, #72]	; (8006580 <TIM_Base_SetConfig+0x124>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_Base_SetConfig+0xf8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a11      	ldr	r2, [pc, #68]	; (8006584 <TIM_Base_SetConfig+0x128>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_Base_SetConfig+0xf8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a10      	ldr	r2, [pc, #64]	; (8006588 <TIM_Base_SetConfig+0x12c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0xf8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a0f      	ldr	r2, [pc, #60]	; (800658c <TIM_Base_SetConfig+0x130>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d103      	bne.n	800655c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	615a      	str	r2, [r3, #20]
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800

08006590 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0201 	bic.w	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a26      	ldr	r2, [pc, #152]	; (8006654 <TIM_TI1_SetConfig+0xc4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d017      	beq.n	80065ee <TIM_TI1_SetConfig+0x5e>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c4:	d013      	beq.n	80065ee <TIM_TI1_SetConfig+0x5e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a23      	ldr	r2, [pc, #140]	; (8006658 <TIM_TI1_SetConfig+0xc8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00f      	beq.n	80065ee <TIM_TI1_SetConfig+0x5e>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a22      	ldr	r2, [pc, #136]	; (800665c <TIM_TI1_SetConfig+0xcc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00b      	beq.n	80065ee <TIM_TI1_SetConfig+0x5e>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a21      	ldr	r2, [pc, #132]	; (8006660 <TIM_TI1_SetConfig+0xd0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <TIM_TI1_SetConfig+0x5e>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a20      	ldr	r2, [pc, #128]	; (8006664 <TIM_TI1_SetConfig+0xd4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_TI1_SetConfig+0x5e>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <TIM_TI1_SetConfig+0xd8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d101      	bne.n	80065f2 <TIM_TI1_SetConfig+0x62>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <TIM_TI1_SetConfig+0x64>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	e003      	b.n	8006612 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	b2db      	uxtb	r3, r3
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f023 030a 	bic.w	r3, r3, #10
 800662c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f003 030a 	and.w	r3, r3, #10
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40012c00 	.word	0x40012c00
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40013400 	.word	0x40013400
 8006668:	40014000 	.word	0x40014000

0800666c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 030a 	bic.w	r3, r3, #10
 80066a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
 80066d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f023 0210 	bic.w	r2, r3, #16
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	031b      	lsls	r3, r3, #12
 800670e:	b29b      	uxth	r3, r3
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800671c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 0210 	bic.w	r2, r3, #16
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800676e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	031b      	lsls	r3, r3, #12
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	621a      	str	r2, [r3, #32]
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 0303 	bic.w	r3, r3, #3
 80067d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80067f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	621a      	str	r2, [r3, #32]
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800685a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	031b      	lsls	r3, r3, #12
 8006860:	b29b      	uxth	r3, r3
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800686e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	031b      	lsls	r3, r3, #12
 8006874:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f043 0307 	orr.w	r3, r3, #7
 80068b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	609a      	str	r2, [r3, #8]
}
 80068c0:	bf00      	nop
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	021a      	lsls	r2, r3, #8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	609a      	str	r2, [r3, #8]
}
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006920:	2302      	movs	r3, #2
 8006922:	e068      	b.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a2e      	ldr	r2, [pc, #184]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a2d      	ldr	r2, [pc, #180]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d108      	bne.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800695e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006970:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01d      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d018      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1a      	ldr	r2, [pc, #104]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00e      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d10c      	bne.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40013400 	.word	0x40013400
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40014000 	.word	0x40014000

08006a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e040      	b.n	8006aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fb fcb6 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0201 	bic.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f8c0 	bl	8006c1c <UART_SetConfig>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e022      	b.n	8006aec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fc26 	bl	8007300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fcad 	bl	8007444 <UART_CheckIdleState>
 8006aea:	4603      	mov	r3, r0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	f040 8081 	bne.w	8006c10 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_UART_Transmit+0x26>
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e079      	b.n	8006c12 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_UART_Transmit+0x38>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e072      	b.n	8006c12 <HAL_UART_Transmit+0x11e>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2221      	movs	r2, #33	; 0x21
 8006b3e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006b40:	f7fb fcf2 	bl	8002528 <HAL_GetTick>
 8006b44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	88fa      	ldrh	r2, [r7, #6]
 8006b52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5e:	d108      	bne.n	8006b72 <HAL_UART_Transmit+0x7e>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d104      	bne.n	8006b72 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e003      	b.n	8006b7a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006b82:	e02d      	b.n	8006be0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2180      	movs	r1, #128	; 0x80
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fc9d 	bl	80074ce <UART_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e039      	b.n	8006c12 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10b      	bne.n	8006bbc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	881a      	ldrh	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb0:	b292      	uxth	r2, r2
 8006bb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e008      	b.n	8006bce <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1cb      	bne.n	8006b84 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2140      	movs	r1, #64	; 0x40
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fc69 	bl	80074ce <UART_WaitOnFlagUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e005      	b.n	8006c12 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006c20:	b08a      	sub	sp, #40	; 0x28
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4bb8      	ldr	r3, [pc, #736]	; (8006f34 <UART_SetConfig+0x318>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6812      	ldr	r2, [r2, #0]
 8006c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4aae      	ldr	r2, [pc, #696]	; (8006f38 <UART_SetConfig+0x31c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d004      	beq.n	8006c8e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4aa5      	ldr	r2, [pc, #660]	; (8006f3c <UART_SetConfig+0x320>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d126      	bne.n	8006cfa <UART_SetConfig+0xde>
 8006cac:	4ba4      	ldr	r3, [pc, #656]	; (8006f40 <UART_SetConfig+0x324>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d81a      	bhi.n	8006cf0 <UART_SetConfig+0xd4>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0xa4>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	08006cd9 	.word	0x08006cd9
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e105      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e101      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e0fd      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e0f9      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf6:	bf00      	nop
 8006cf8:	e0f4      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a91      	ldr	r2, [pc, #580]	; (8006f44 <UART_SetConfig+0x328>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d138      	bne.n	8006d76 <UART_SetConfig+0x15a>
 8006d04:	4b8e      	ldr	r3, [pc, #568]	; (8006f40 <UART_SetConfig+0x324>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	2b0c      	cmp	r3, #12
 8006d10:	d82c      	bhi.n	8006d6c <UART_SetConfig+0x150>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <UART_SetConfig+0xfc>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006d6d 	.word	0x08006d6d
 8006d20:	08006d6d 	.word	0x08006d6d
 8006d24:	08006d6d 	.word	0x08006d6d
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d6d 	.word	0x08006d6d
 8006d34:	08006d6d 	.word	0x08006d6d
 8006d38:	08006d55 	.word	0x08006d55
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d52:	e0c7      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006d54:	2302      	movs	r3, #2
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5a:	e0c3      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d62:	e0bf      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6a:	e0bb      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d72:	bf00      	nop
 8006d74:	e0b6      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a73      	ldr	r2, [pc, #460]	; (8006f48 <UART_SetConfig+0x32c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d125      	bne.n	8006dcc <UART_SetConfig+0x1b0>
 8006d80:	4b6f      	ldr	r3, [pc, #444]	; (8006f40 <UART_SetConfig+0x324>)
 8006d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d8a:	2b10      	cmp	r3, #16
 8006d8c:	d011      	beq.n	8006db2 <UART_SetConfig+0x196>
 8006d8e:	2b10      	cmp	r3, #16
 8006d90:	d802      	bhi.n	8006d98 <UART_SetConfig+0x17c>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <UART_SetConfig+0x186>
 8006d96:	e014      	b.n	8006dc2 <UART_SetConfig+0x1a6>
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d006      	beq.n	8006daa <UART_SetConfig+0x18e>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d00c      	beq.n	8006dba <UART_SetConfig+0x19e>
 8006da0:	e00f      	b.n	8006dc2 <UART_SetConfig+0x1a6>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da8:	e09c      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006daa:	2302      	movs	r3, #2
 8006dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db0:	e098      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006db2:	2304      	movs	r3, #4
 8006db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db8:	e094      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006dba:	2308      	movs	r3, #8
 8006dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc0:	e090      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc8:	bf00      	nop
 8006dca:	e08b      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a5e      	ldr	r2, [pc, #376]	; (8006f4c <UART_SetConfig+0x330>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d125      	bne.n	8006e22 <UART_SetConfig+0x206>
 8006dd6:	4b5a      	ldr	r3, [pc, #360]	; (8006f40 <UART_SetConfig+0x324>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ddc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d011      	beq.n	8006e08 <UART_SetConfig+0x1ec>
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d802      	bhi.n	8006dee <UART_SetConfig+0x1d2>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <UART_SetConfig+0x1dc>
 8006dec:	e014      	b.n	8006e18 <UART_SetConfig+0x1fc>
 8006dee:	2b80      	cmp	r3, #128	; 0x80
 8006df0:	d006      	beq.n	8006e00 <UART_SetConfig+0x1e4>
 8006df2:	2bc0      	cmp	r3, #192	; 0xc0
 8006df4:	d00c      	beq.n	8006e10 <UART_SetConfig+0x1f4>
 8006df6:	e00f      	b.n	8006e18 <UART_SetConfig+0x1fc>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfe:	e071      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e00:	2302      	movs	r3, #2
 8006e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e06:	e06d      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0e:	e069      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e10:	2308      	movs	r3, #8
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e16:	e065      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1e:	bf00      	nop
 8006e20:	e060      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a4a      	ldr	r2, [pc, #296]	; (8006f50 <UART_SetConfig+0x334>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d129      	bne.n	8006e80 <UART_SetConfig+0x264>
 8006e2c:	4b44      	ldr	r3, [pc, #272]	; (8006f40 <UART_SetConfig+0x324>)
 8006e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d014      	beq.n	8006e66 <UART_SetConfig+0x24a>
 8006e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e40:	d802      	bhi.n	8006e48 <UART_SetConfig+0x22c>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <UART_SetConfig+0x23a>
 8006e46:	e016      	b.n	8006e76 <UART_SetConfig+0x25a>
 8006e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4c:	d007      	beq.n	8006e5e <UART_SetConfig+0x242>
 8006e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e52:	d00c      	beq.n	8006e6e <UART_SetConfig+0x252>
 8006e54:	e00f      	b.n	8006e76 <UART_SetConfig+0x25a>
 8006e56:	2300      	movs	r3, #0
 8006e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e5c:	e042      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e64:	e03e      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e66:	2304      	movs	r3, #4
 8006e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6c:	e03a      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e6e:	2308      	movs	r3, #8
 8006e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e74:	e036      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e76:	2310      	movs	r3, #16
 8006e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7c:	bf00      	nop
 8006e7e:	e031      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2c      	ldr	r2, [pc, #176]	; (8006f38 <UART_SetConfig+0x31c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d129      	bne.n	8006ede <UART_SetConfig+0x2c2>
 8006e8a:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <UART_SetConfig+0x324>)
 8006e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e98:	d014      	beq.n	8006ec4 <UART_SetConfig+0x2a8>
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9e:	d802      	bhi.n	8006ea6 <UART_SetConfig+0x28a>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <UART_SetConfig+0x298>
 8006ea4:	e016      	b.n	8006ed4 <UART_SetConfig+0x2b8>
 8006ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eaa:	d007      	beq.n	8006ebc <UART_SetConfig+0x2a0>
 8006eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eb0:	d00c      	beq.n	8006ecc <UART_SetConfig+0x2b0>
 8006eb2:	e00f      	b.n	8006ed4 <UART_SetConfig+0x2b8>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eba:	e013      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec2:	e00f      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eca:	e00b      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed2:	e007      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eda:	bf00      	nop
 8006edc:	e002      	b.n	8006ee4 <UART_SetConfig+0x2c8>
 8006ede:	2310      	movs	r3, #16
 8006ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <UART_SetConfig+0x31c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	f040 80fe 	bne.w	80070ec <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d837      	bhi.n	8006f68 <UART_SetConfig+0x34c>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x2e4>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f69 	.word	0x08006f69
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f69 	.word	0x08006f69
 8006f10:	08006f59 	.word	0x08006f59
 8006f14:	08006f69 	.word	0x08006f69
 8006f18:	08006f69 	.word	0x08006f69
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f61 	.word	0x08006f61
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fd fce4 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8006f28:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f2a:	e020      	b.n	8006f6e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <UART_SetConfig+0x338>)
 8006f2e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f30:	e01d      	b.n	8006f6e <UART_SetConfig+0x352>
 8006f32:	bf00      	nop
 8006f34:	efff69f3 	.word	0xefff69f3
 8006f38:	40008000 	.word	0x40008000
 8006f3c:	40013800 	.word	0x40013800
 8006f40:	40021000 	.word	0x40021000
 8006f44:	40004400 	.word	0x40004400
 8006f48:	40004800 	.word	0x40004800
 8006f4c:	40004c00 	.word	0x40004c00
 8006f50:	40005000 	.word	0x40005000
 8006f54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006f58:	f7fd fc34 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8006f5c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f5e:	e006      	b.n	8006f6e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006f66:	e002      	b.n	8006f6e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	76fb      	strb	r3, [r7, #27]
        break;
 8006f6c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 81b9 	beq.w	80072e8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	4413      	add	r3, r2
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d305      	bcc.n	8006f92 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d902      	bls.n	8006f98 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	76fb      	strb	r3, [r7, #27]
 8006f96:	e1a7      	b.n	80072e8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8006f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	f200 8092 	bhi.w	80070c6 <UART_SetConfig+0x4aa>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x38c>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	080070c7 	.word	0x080070c7
 8006fb0:	0800701b 	.word	0x0800701b
 8006fb4:	080070c7 	.word	0x080070c7
 8006fb8:	0800704f 	.word	0x0800704f
 8006fbc:	080070c7 	.word	0x080070c7
 8006fc0:	080070c7 	.word	0x080070c7
 8006fc4:	080070c7 	.word	0x080070c7
 8006fc8:	0800709d 	.word	0x0800709d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006fcc:	f7fd fc90 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8006fd0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	f04f 0400 	mov.w	r4, #0
 8006fe2:	0214      	lsls	r4, r2, #8
 8006fe4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006fe8:	020b      	lsls	r3, r1, #8
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6852      	ldr	r2, [r2, #4]
 8006fee:	0852      	lsrs	r2, r2, #1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	eb13 0b01 	adds.w	fp, r3, r1
 8006ffa:	eb44 0c02 	adc.w	ip, r4, r2
 8006ffe:	4658      	mov	r0, fp
 8007000:	4661      	mov	r1, ip
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	461a      	mov	r2, r3
 800700c:	4623      	mov	r3, r4
 800700e:	f7f9 fe3b 	bl	8000c88 <__aeabi_uldivmod>
 8007012:	4603      	mov	r3, r0
 8007014:	460c      	mov	r4, r1
 8007016:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007018:	e058      	b.n	80070cc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	085b      	lsrs	r3, r3, #1
 8007020:	f04f 0400 	mov.w	r4, #0
 8007024:	49ae      	ldr	r1, [pc, #696]	; (80072e0 <UART_SetConfig+0x6c4>)
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	eb13 0b01 	adds.w	fp, r3, r1
 800702e:	eb44 0c02 	adc.w	ip, r4, r2
 8007032:	4658      	mov	r0, fp
 8007034:	4661      	mov	r1, ip
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f04f 0400 	mov.w	r4, #0
 800703e:	461a      	mov	r2, r3
 8007040:	4623      	mov	r3, r4
 8007042:	f7f9 fe21 	bl	8000c88 <__aeabi_uldivmod>
 8007046:	4603      	mov	r3, r0
 8007048:	460c      	mov	r4, r1
 800704a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800704c:	e03e      	b.n	80070cc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800704e:	f7fd fbb9 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8007052:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4619      	mov	r1, r3
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	f04f 0400 	mov.w	r4, #0
 8007064:	0214      	lsls	r4, r2, #8
 8007066:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800706a:	020b      	lsls	r3, r1, #8
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6852      	ldr	r2, [r2, #4]
 8007070:	0852      	lsrs	r2, r2, #1
 8007072:	4611      	mov	r1, r2
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	eb13 0b01 	adds.w	fp, r3, r1
 800707c:	eb44 0c02 	adc.w	ip, r4, r2
 8007080:	4658      	mov	r0, fp
 8007082:	4661      	mov	r1, ip
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f04f 0400 	mov.w	r4, #0
 800708c:	461a      	mov	r2, r3
 800708e:	4623      	mov	r3, r4
 8007090:	f7f9 fdfa 	bl	8000c88 <__aeabi_uldivmod>
 8007094:	4603      	mov	r3, r0
 8007096:	460c      	mov	r4, r1
 8007098:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800709a:	e017      	b.n	80070cc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	f04f 0400 	mov.w	r4, #0
 80070a6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80070aa:	f144 0100 	adc.w	r1, r4, #0
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f04f 0400 	mov.w	r4, #0
 80070b6:	461a      	mov	r2, r3
 80070b8:	4623      	mov	r3, r4
 80070ba:	f7f9 fde5 	bl	8000c88 <__aeabi_uldivmod>
 80070be:	4603      	mov	r3, r0
 80070c0:	460c      	mov	r4, r1
 80070c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80070c4:	e002      	b.n	80070cc <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	76fb      	strb	r3, [r7, #27]
            break;
 80070ca:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d2:	d308      	bcc.n	80070e6 <UART_SetConfig+0x4ca>
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070da:	d204      	bcs.n	80070e6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	60da      	str	r2, [r3, #12]
 80070e4:	e100      	b.n	80072e8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	76fb      	strb	r3, [r7, #27]
 80070ea:	e0fd      	b.n	80072e8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f4:	f040 8084 	bne.w	8007200 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80070f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d85f      	bhi.n	80071c0 <UART_SetConfig+0x5a4>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <UART_SetConfig+0x4ec>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	0800712d 	.word	0x0800712d
 800710c:	0800714d 	.word	0x0800714d
 8007110:	0800716d 	.word	0x0800716d
 8007114:	080071c1 	.word	0x080071c1
 8007118:	08007189 	.word	0x08007189
 800711c:	080071c1 	.word	0x080071c1
 8007120:	080071c1 	.word	0x080071c1
 8007124:	080071c1 	.word	0x080071c1
 8007128:	080071a9 	.word	0x080071a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800712c:	f7fd fbe0 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8007130:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	005a      	lsls	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	441a      	add	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	fbb2 f3f3 	udiv	r3, r2, r3
 8007146:	b29b      	uxth	r3, r3
 8007148:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800714a:	e03c      	b.n	80071c6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800714c:	f7fd fbe6 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8007150:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	005a      	lsls	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	441a      	add	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	fbb2 f3f3 	udiv	r3, r2, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800716a:	e02c      	b.n	80071c6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007176:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6852      	ldr	r2, [r2, #4]
 800717e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007182:	b29b      	uxth	r3, r3
 8007184:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007186:	e01e      	b.n	80071c6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007188:	f7fd fb1c 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 800718c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	005a      	lsls	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	441a      	add	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80071a6:	e00e      	b.n	80071c6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80071be:	e002      	b.n	80071c6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	76fb      	strb	r3, [r7, #27]
        break;
 80071c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2b0f      	cmp	r3, #15
 80071ca:	d916      	bls.n	80071fa <UART_SetConfig+0x5de>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d2:	d212      	bcs.n	80071fa <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f023 030f 	bic.w	r3, r3, #15
 80071dc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	89fb      	ldrh	r3, [r7, #14]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	89fa      	ldrh	r2, [r7, #14]
 80071f6:	60da      	str	r2, [r3, #12]
 80071f8:	e076      	b.n	80072e8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	76fb      	strb	r3, [r7, #27]
 80071fe:	e073      	b.n	80072e8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8007200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007204:	2b08      	cmp	r3, #8
 8007206:	d85c      	bhi.n	80072c2 <UART_SetConfig+0x6a6>
 8007208:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0x5f4>)
 800720a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720e:	bf00      	nop
 8007210:	08007235 	.word	0x08007235
 8007214:	08007253 	.word	0x08007253
 8007218:	08007271 	.word	0x08007271
 800721c:	080072c3 	.word	0x080072c3
 8007220:	0800728d 	.word	0x0800728d
 8007224:	080072c3 	.word	0x080072c3
 8007228:	080072c3 	.word	0x080072c3
 800722c:	080072c3 	.word	0x080072c3
 8007230:	080072ab 	.word	0x080072ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007234:	f7fd fb5c 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8007238:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	085a      	lsrs	r2, r3, #1
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	441a      	add	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	b29b      	uxth	r3, r3
 800724e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007250:	e03a      	b.n	80072c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007252:	f7fd fb63 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8007256:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	085a      	lsrs	r2, r3, #1
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	441a      	add	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	fbb2 f3f3 	udiv	r3, r2, r3
 800726a:	b29b      	uxth	r3, r3
 800726c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800726e:	e02b      	b.n	80072c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800727a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6852      	ldr	r2, [r2, #4]
 8007282:	fbb3 f3f2 	udiv	r3, r3, r2
 8007286:	b29b      	uxth	r3, r3
 8007288:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800728a:	e01d      	b.n	80072c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728c:	f7fd fa9a 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8007290:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	085a      	lsrs	r2, r3, #1
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	441a      	add	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80072a8:	e00e      	b.n	80072c8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072bc:	b29b      	uxth	r3, r3
 80072be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80072c0:	e002      	b.n	80072c8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	76fb      	strb	r3, [r7, #27]
        break;
 80072c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	2b0f      	cmp	r3, #15
 80072cc:	d90a      	bls.n	80072e4 <UART_SetConfig+0x6c8>
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d4:	d206      	bcs.n	80072e4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	60da      	str	r2, [r3, #12]
 80072de:	e003      	b.n	80072e8 <UART_SetConfig+0x6cc>
 80072e0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80072f4:	7efb      	ldrb	r3, [r7, #27]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3728      	adds	r7, #40	; 0x28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08007300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01a      	beq.n	8007416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073fe:	d10a      	bne.n	8007416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af02      	add	r7, sp, #8
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007452:	f7fb f869 	bl	8002528 <HAL_GetTick>
 8007456:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b08      	cmp	r3, #8
 8007464:	d10e      	bne.n	8007484 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007466:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f82a 	bl	80074ce <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e020      	b.n	80074c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b04      	cmp	r3, #4
 8007490:	d10e      	bne.n	80074b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007492:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f814 	bl	80074ce <UART_WaitOnFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e00a      	b.n	80074c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	4613      	mov	r3, r2
 80074dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074de:	e05d      	b.n	800759c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d059      	beq.n	800759c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e8:	f7fb f81e 	bl	8002528 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d302      	bcc.n	80074fe <UART_WaitOnFlagUntilTimeout+0x30>
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d11b      	bne.n	8007536 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800750c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2220      	movs	r2, #32
 8007522:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e042      	b.n	80075bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d02b      	beq.n	800759c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800754e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007552:	d123      	bne.n	800759c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800755c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800756c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0201 	bic.w	r2, r2, #1
 800757c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e00f      	b.n	80075bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69da      	ldr	r2, [r3, #28]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4013      	ands	r3, r2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d092      	beq.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80075d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075d6:	2b84      	cmp	r3, #132	; 0x84
 80075d8:	d005      	beq.n	80075e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	3303      	adds	r3, #3
 80075e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80075e6:	68fb      	ldr	r3, [r7, #12]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80075f8:	f000 fada 	bl	8007bb0 <vTaskStartScheduler>
  
  return osOK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	bd80      	pop	{r7, pc}

08007602 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007604:	b089      	sub	sp, #36	; 0x24
 8007606:	af04      	add	r7, sp, #16
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d020      	beq.n	8007656 <osThreadCreate+0x54>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01c      	beq.n	8007656 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685c      	ldr	r4, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681d      	ldr	r5, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691e      	ldr	r6, [r3, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff ffc8 	bl	80075c4 <makeFreeRtosPriority>
 8007634:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800763e:	9202      	str	r2, [sp, #8]
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	9100      	str	r1, [sp, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	4632      	mov	r2, r6
 8007648:	4629      	mov	r1, r5
 800764a:	4620      	mov	r0, r4
 800764c:	f000 f8ed 	bl	800782a <xTaskCreateStatic>
 8007650:	4603      	mov	r3, r0
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	e01c      	b.n	8007690 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685c      	ldr	r4, [r3, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007662:	b29e      	uxth	r6, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff ffaa 	bl	80075c4 <makeFreeRtosPriority>
 8007670:	4602      	mov	r2, r0
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	9200      	str	r2, [sp, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	4632      	mov	r2, r6
 800767e:	4629      	mov	r1, r5
 8007680:	4620      	mov	r0, r4
 8007682:	f000 f92c 	bl	80078de <xTaskCreate>
 8007686:	4603      	mov	r3, r0
 8007688:	2b01      	cmp	r3, #1
 800768a:	d001      	beq.n	8007690 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	e000      	b.n	8007692 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007690:	68fb      	ldr	r3, [r7, #12]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800769a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <osDelay+0x16>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	e000      	b.n	80076b2 <osDelay+0x18>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa48 	bl	8007b48 <vTaskDelay>
  
  return osOK;
 80076b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f103 0208 	add.w	r2, r3, #8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f04f 32ff 	mov.w	r2, #4294967295
 80076da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f103 0208 	add.w	r2, r3, #8
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0208 	add.w	r2, r3, #8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d103      	bne.n	8007784 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	e00c      	b.n	800779e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3308      	adds	r3, #8
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e002      	b.n	8007792 <vListInsert+0x2e>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	429a      	cmp	r2, r3
 800779c:	d2f6      	bcs.n	800778c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
}
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6892      	ldr	r2, [r2, #8]
 80077ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6852      	ldr	r2, [r2, #4]
 80077f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d103      	bne.n	800780a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	1e5a      	subs	r2, r3, #1
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800782a:	b580      	push	{r7, lr}
 800782c:	b08e      	sub	sp, #56	; 0x38
 800782e:	af04      	add	r7, sp, #16
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	623b      	str	r3, [r7, #32]
 8007850:	e7fe      	b.n	8007850 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <xTaskCreateStatic+0x42>
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e7fe      	b.n	800786a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800786c:	2354      	movs	r3, #84	; 0x54
 800786e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b54      	cmp	r3, #84	; 0x54
 8007874:	d009      	beq.n	800788a <xTaskCreateStatic+0x60>
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	e7fe      	b.n	8007888 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800788a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01e      	beq.n	80078d0 <xTaskCreateStatic+0xa6>
 8007892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01b      	beq.n	80078d0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078aa:	2300      	movs	r3, #0
 80078ac:	9303      	str	r3, [sp, #12]
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	9302      	str	r3, [sp, #8]
 80078b2:	f107 0314 	add.w	r3, r7, #20
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f850 	bl	8007968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ca:	f000 f8d3 	bl	8007a74 <prvAddNewTaskToReadyList>
 80078ce:	e001      	b.n	80078d4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078d4:	697b      	ldr	r3, [r7, #20]
	}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3728      	adds	r7, #40	; 0x28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b08c      	sub	sp, #48	; 0x30
 80078e2:	af04      	add	r7, sp, #16
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 feae 	bl	8008654 <pvPortMalloc>
 80078f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007900:	2054      	movs	r0, #84	; 0x54
 8007902:	f000 fea7 	bl	8008654 <pvPortMalloc>
 8007906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
 8007914:	e005      	b.n	8007922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007916:	6978      	ldr	r0, [r7, #20]
 8007918:	f000 ff5e 	bl	80087d8 <vPortFree>
 800791c:	e001      	b.n	8007922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d017      	beq.n	8007958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007930:	88fa      	ldrh	r2, [r7, #6]
 8007932:	2300      	movs	r3, #0
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	9302      	str	r3, [sp, #8]
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f80e 	bl	8007968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800794c:	69f8      	ldr	r0, [r7, #28]
 800794e:	f000 f891 	bl	8007a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007952:	2301      	movs	r3, #1
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	e002      	b.n	800795e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007958:	f04f 33ff 	mov.w	r3, #4294967295
 800795c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800795e:	69bb      	ldr	r3, [r7, #24]
	}
 8007960:	4618      	mov	r0, r3
 8007962:	3720      	adds	r7, #32
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007980:	3b01      	subs	r3, #1
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f023 0307 	bic.w	r3, r3, #7
 800798e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <prvInitialiseNewTask+0x46>
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	e7fe      	b.n	80079ac <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01f      	beq.n	80079f4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	e012      	b.n	80079e0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	4413      	add	r3, r2
 80079c0:	7819      	ldrb	r1, [r3, #0]
 80079c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4413      	add	r3, r2
 80079c8:	3334      	adds	r3, #52	; 0x34
 80079ca:	460a      	mov	r2, r1
 80079cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d006      	beq.n	80079e8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3301      	adds	r3, #1
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b0f      	cmp	r3, #15
 80079e4:	d9e9      	bls.n	80079ba <prvInitialiseNewTask+0x52>
 80079e6:	e000      	b.n	80079ea <prvInitialiseNewTask+0x82>
			{
				break;
 80079e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079f2:	e003      	b.n	80079fc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	2b06      	cmp	r3, #6
 8007a00:	d901      	bls.n	8007a06 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a02:	2306      	movs	r3, #6
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	2200      	movs	r2, #0
 8007a16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff fe70 	bl	8007702 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	3318      	adds	r3, #24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff fe6b 	bl	8007702 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	f1c3 0207 	rsb	r2, r3, #7
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	2200      	movs	r2, #0
 8007a46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	69b8      	ldr	r0, [r7, #24]
 8007a56:	f000 fbfd 	bl	8008254 <pxPortInitialiseStack>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a6c:	bf00      	nop
 8007a6e:	3720      	adds	r7, #32
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a7c:	f000 fd0e 	bl	800849c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a80:	4b2a      	ldr	r3, [pc, #168]	; (8007b2c <prvAddNewTaskToReadyList+0xb8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	4a29      	ldr	r2, [pc, #164]	; (8007b2c <prvAddNewTaskToReadyList+0xb8>)
 8007a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a8a:	4b29      	ldr	r3, [pc, #164]	; (8007b30 <prvAddNewTaskToReadyList+0xbc>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a92:	4a27      	ldr	r2, [pc, #156]	; (8007b30 <prvAddNewTaskToReadyList+0xbc>)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a98:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <prvAddNewTaskToReadyList+0xb8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d110      	bne.n	8007ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007aa0:	f000 fab8 	bl	8008014 <prvInitialiseTaskLists>
 8007aa4:	e00d      	b.n	8007ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aa6:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <prvAddNewTaskToReadyList+0xc0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aae:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <prvAddNewTaskToReadyList+0xbc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d802      	bhi.n	8007ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007abc:	4a1c      	ldr	r2, [pc, #112]	; (8007b30 <prvAddNewTaskToReadyList+0xbc>)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <prvAddNewTaskToReadyList+0xc4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <prvAddNewTaskToReadyList+0xc4>)
 8007aca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	409a      	lsls	r2, r3
 8007ad4:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <prvAddNewTaskToReadyList+0xc8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <prvAddNewTaskToReadyList+0xc8>)
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4a15      	ldr	r2, [pc, #84]	; (8007b40 <prvAddNewTaskToReadyList+0xcc>)
 8007aec:	441a      	add	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7ff fe11 	bl	800771c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007afa:	f000 fcfd 	bl	80084f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007afe:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <prvAddNewTaskToReadyList+0xc0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b06:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <prvAddNewTaskToReadyList+0xbc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d207      	bcs.n	8007b24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b14:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <prvAddNewTaskToReadyList+0xd0>)
 8007b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000558 	.word	0x20000558
 8007b30:	20000458 	.word	0x20000458
 8007b34:	20000564 	.word	0x20000564
 8007b38:	20000574 	.word	0x20000574
 8007b3c:	20000560 	.word	0x20000560
 8007b40:	2000045c 	.word	0x2000045c
 8007b44:	e000ed04 	.word	0xe000ed04

08007b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d016      	beq.n	8007b88 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b5a:	4b13      	ldr	r3, [pc, #76]	; (8007ba8 <vTaskDelay+0x60>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <vTaskDelay+0x2e>
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	60bb      	str	r3, [r7, #8]
 8007b74:	e7fe      	b.n	8007b74 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007b76:	f000 f879 	bl	8007c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fb03 	bl	8008188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b82:	f000 f881 	bl	8007c88 <xTaskResumeAll>
 8007b86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d107      	bne.n	8007b9e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007b8e:	4b07      	ldr	r3, [pc, #28]	; (8007bac <vTaskDelay+0x64>)
 8007b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000580 	.word	0x20000580
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bbe:	463a      	mov	r2, r7
 8007bc0:	1d39      	adds	r1, r7, #4
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7f9 fde4 	bl	8001794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	9202      	str	r2, [sp, #8]
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	460a      	mov	r2, r1
 8007bde:	491d      	ldr	r1, [pc, #116]	; (8007c54 <vTaskStartScheduler+0xa4>)
 8007be0:	481d      	ldr	r0, [pc, #116]	; (8007c58 <vTaskStartScheduler+0xa8>)
 8007be2:	f7ff fe22 	bl	800782a <xTaskCreateStatic>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <vTaskStartScheduler+0xac>)
 8007bea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bec:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <vTaskStartScheduler+0xac>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e001      	b.n	8007bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d115      	bne.n	8007c30 <vTaskStartScheduler+0x80>
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <vTaskStartScheduler+0xb0>)
 8007c18:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <vTaskStartScheduler+0xb4>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c24:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <vTaskStartScheduler+0xb8>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c2a:	f000 fb99 	bl	8008360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c2e:	e00d      	b.n	8007c4c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c36:	d109      	bne.n	8007c4c <vTaskStartScheduler+0x9c>
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	e7fe      	b.n	8007c4a <vTaskStartScheduler+0x9a>
}
 8007c4c:	bf00      	nop
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	0800b0fc 	.word	0x0800b0fc
 8007c58:	08007fe5 	.word	0x08007fe5
 8007c5c:	2000057c 	.word	0x2000057c
 8007c60:	20000578 	.word	0x20000578
 8007c64:	20000564 	.word	0x20000564
 8007c68:	2000055c 	.word	0x2000055c

08007c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c70:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <vTaskSuspendAll+0x18>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	4a03      	ldr	r2, [pc, #12]	; (8007c84 <vTaskSuspendAll+0x18>)
 8007c78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c7a:	bf00      	nop
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	20000580 	.word	0x20000580

08007c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c96:	4b41      	ldr	r3, [pc, #260]	; (8007d9c <xTaskResumeAll+0x114>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <xTaskResumeAll+0x2a>
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	e7fe      	b.n	8007cb0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cb2:	f000 fbf3 	bl	800849c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cb6:	4b39      	ldr	r3, [pc, #228]	; (8007d9c <xTaskResumeAll+0x114>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	4a37      	ldr	r2, [pc, #220]	; (8007d9c <xTaskResumeAll+0x114>)
 8007cbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cc0:	4b36      	ldr	r3, [pc, #216]	; (8007d9c <xTaskResumeAll+0x114>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d161      	bne.n	8007d8c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cc8:	4b35      	ldr	r3, [pc, #212]	; (8007da0 <xTaskResumeAll+0x118>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d05d      	beq.n	8007d8c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cd0:	e02e      	b.n	8007d30 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd2:	4b34      	ldr	r3, [pc, #208]	; (8007da4 <xTaskResumeAll+0x11c>)
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3318      	adds	r3, #24
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fd79 	bl	80077d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fd74 	bl	80077d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	409a      	lsls	r2, r3
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <xTaskResumeAll+0x120>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	4a2a      	ldr	r2, [pc, #168]	; (8007da8 <xTaskResumeAll+0x120>)
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a27      	ldr	r2, [pc, #156]	; (8007dac <xTaskResumeAll+0x124>)
 8007d0e:	441a      	add	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7ff fd00 	bl	800771c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d20:	4b23      	ldr	r3, [pc, #140]	; (8007db0 <xTaskResumeAll+0x128>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d302      	bcc.n	8007d30 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007d2a:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <xTaskResumeAll+0x12c>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d30:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <xTaskResumeAll+0x11c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1cc      	bne.n	8007cd2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d3e:	f000 fa03 	bl	8008148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <xTaskResumeAll+0x130>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d010      	beq.n	8007d70 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d4e:	f000 f837 	bl	8007dc0 <xTaskIncrementTick>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007d58:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <xTaskResumeAll+0x12c>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f1      	bne.n	8007d4e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <xTaskResumeAll+0x130>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d70:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <xTaskResumeAll+0x12c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <xTaskResumeAll+0x134>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d8c:	f000 fbb4 	bl	80084f8 <vPortExitCritical>

	return xAlreadyYielded;
 8007d90:	68bb      	ldr	r3, [r7, #8]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000580 	.word	0x20000580
 8007da0:	20000558 	.word	0x20000558
 8007da4:	20000518 	.word	0x20000518
 8007da8:	20000560 	.word	0x20000560
 8007dac:	2000045c 	.word	0x2000045c
 8007db0:	20000458 	.word	0x20000458
 8007db4:	2000056c 	.word	0x2000056c
 8007db8:	20000568 	.word	0x20000568
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dca:	4b4e      	ldr	r3, [pc, #312]	; (8007f04 <xTaskIncrementTick+0x144>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 8087 	bne.w	8007ee2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dd4:	4b4c      	ldr	r3, [pc, #304]	; (8007f08 <xTaskIncrementTick+0x148>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ddc:	4a4a      	ldr	r2, [pc, #296]	; (8007f08 <xTaskIncrementTick+0x148>)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d11f      	bne.n	8007e28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007de8:	4b48      	ldr	r3, [pc, #288]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <xTaskIncrementTick+0x46>
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	e7fe      	b.n	8007e04 <xTaskIncrementTick+0x44>
 8007e06:	4b41      	ldr	r3, [pc, #260]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	4b40      	ldr	r3, [pc, #256]	; (8007f10 <xTaskIncrementTick+0x150>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a3e      	ldr	r2, [pc, #248]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	4a3e      	ldr	r2, [pc, #248]	; (8007f10 <xTaskIncrementTick+0x150>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	4b3e      	ldr	r3, [pc, #248]	; (8007f14 <xTaskIncrementTick+0x154>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	4a3c      	ldr	r2, [pc, #240]	; (8007f14 <xTaskIncrementTick+0x154>)
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	f000 f990 	bl	8008148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e28:	4b3b      	ldr	r3, [pc, #236]	; (8007f18 <xTaskIncrementTick+0x158>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d348      	bcc.n	8007ec4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e32:	4b36      	ldr	r3, [pc, #216]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e3c:	4b36      	ldr	r3, [pc, #216]	; (8007f18 <xTaskIncrementTick+0x158>)
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	601a      	str	r2, [r3, #0]
					break;
 8007e44:	e03e      	b.n	8007ec4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e46:	4b31      	ldr	r3, [pc, #196]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d203      	bcs.n	8007e66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e5e:	4a2e      	ldr	r2, [pc, #184]	; (8007f18 <xTaskIncrementTick+0x158>)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e64:	e02e      	b.n	8007ec4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff fcb3 	bl	80077d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	3318      	adds	r3, #24
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fcaa 	bl	80077d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	2201      	movs	r2, #1
 8007e88:	409a      	lsls	r2, r3
 8007e8a:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <xTaskIncrementTick+0x15c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	4a22      	ldr	r2, [pc, #136]	; (8007f1c <xTaskIncrementTick+0x15c>)
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <xTaskIncrementTick+0x160>)
 8007ea2:	441a      	add	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f7ff fc36 	bl	800771c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb4:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <xTaskIncrementTick+0x164>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d3b9      	bcc.n	8007e32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec2:	e7b6      	b.n	8007e32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ec4:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <xTaskIncrementTick+0x164>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	4915      	ldr	r1, [pc, #84]	; (8007f20 <xTaskIncrementTick+0x160>)
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d907      	bls.n	8007eec <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007edc:	2301      	movs	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e004      	b.n	8007eec <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ee2:	4b11      	ldr	r3, [pc, #68]	; (8007f28 <xTaskIncrementTick+0x168>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	4a0f      	ldr	r2, [pc, #60]	; (8007f28 <xTaskIncrementTick+0x168>)
 8007eea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007eec:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <xTaskIncrementTick+0x16c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ef8:	697b      	ldr	r3, [r7, #20]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000580 	.word	0x20000580
 8007f08:	2000055c 	.word	0x2000055c
 8007f0c:	20000510 	.word	0x20000510
 8007f10:	20000514 	.word	0x20000514
 8007f14:	20000570 	.word	0x20000570
 8007f18:	20000578 	.word	0x20000578
 8007f1c:	20000560 	.word	0x20000560
 8007f20:	2000045c 	.word	0x2000045c
 8007f24:	20000458 	.word	0x20000458
 8007f28:	20000568 	.word	0x20000568
 8007f2c:	2000056c 	.word	0x2000056c

08007f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f36:	4b26      	ldr	r3, [pc, #152]	; (8007fd0 <vTaskSwitchContext+0xa0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f3e:	4b25      	ldr	r3, [pc, #148]	; (8007fd4 <vTaskSwitchContext+0xa4>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f44:	e03e      	b.n	8007fc4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007f46:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <vTaskSwitchContext+0xa4>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4c:	4b22      	ldr	r3, [pc, #136]	; (8007fd8 <vTaskSwitchContext+0xa8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	fab3 f383 	clz	r3, r3
 8007f58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	f1c3 031f 	rsb	r3, r3, #31
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	491e      	ldr	r1, [pc, #120]	; (8007fdc <vTaskSwitchContext+0xac>)
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d109      	bne.n	8007f8a <vTaskSwitchContext+0x5a>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	e7fe      	b.n	8007f88 <vTaskSwitchContext+0x58>
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4a11      	ldr	r2, [pc, #68]	; (8007fdc <vTaskSwitchContext+0xac>)
 8007f96:	4413      	add	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	605a      	str	r2, [r3, #4]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	3308      	adds	r3, #8
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d104      	bne.n	8007fba <vTaskSwitchContext+0x8a>
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	605a      	str	r2, [r3, #4]
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <vTaskSwitchContext+0xb0>)
 8007fc2:	6013      	str	r3, [r2, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000580 	.word	0x20000580
 8007fd4:	2000056c 	.word	0x2000056c
 8007fd8:	20000560 	.word	0x20000560
 8007fdc:	2000045c 	.word	0x2000045c
 8007fe0:	20000458 	.word	0x20000458

08007fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fec:	f000 f852 	bl	8008094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <prvIdleTask+0x28>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d9f9      	bls.n	8007fec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ff8:	4b05      	ldr	r3, [pc, #20]	; (8008010 <prvIdleTask+0x2c>)
 8007ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008008:	e7f0      	b.n	8007fec <prvIdleTask+0x8>
 800800a:	bf00      	nop
 800800c:	2000045c 	.word	0x2000045c
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800801a:	2300      	movs	r3, #0
 800801c:	607b      	str	r3, [r7, #4]
 800801e:	e00c      	b.n	800803a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <prvInitialiseTaskLists+0x60>)
 800802c:	4413      	add	r3, r2
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fb47 	bl	80076c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3301      	adds	r3, #1
 8008038:	607b      	str	r3, [r7, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b06      	cmp	r3, #6
 800803e:	d9ef      	bls.n	8008020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008040:	480d      	ldr	r0, [pc, #52]	; (8008078 <prvInitialiseTaskLists+0x64>)
 8008042:	f7ff fb3e 	bl	80076c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008046:	480d      	ldr	r0, [pc, #52]	; (800807c <prvInitialiseTaskLists+0x68>)
 8008048:	f7ff fb3b 	bl	80076c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800804c:	480c      	ldr	r0, [pc, #48]	; (8008080 <prvInitialiseTaskLists+0x6c>)
 800804e:	f7ff fb38 	bl	80076c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008052:	480c      	ldr	r0, [pc, #48]	; (8008084 <prvInitialiseTaskLists+0x70>)
 8008054:	f7ff fb35 	bl	80076c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008058:	480b      	ldr	r0, [pc, #44]	; (8008088 <prvInitialiseTaskLists+0x74>)
 800805a:	f7ff fb32 	bl	80076c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800805e:	4b0b      	ldr	r3, [pc, #44]	; (800808c <prvInitialiseTaskLists+0x78>)
 8008060:	4a05      	ldr	r2, [pc, #20]	; (8008078 <prvInitialiseTaskLists+0x64>)
 8008062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvInitialiseTaskLists+0x7c>)
 8008066:	4a05      	ldr	r2, [pc, #20]	; (800807c <prvInitialiseTaskLists+0x68>)
 8008068:	601a      	str	r2, [r3, #0]
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	2000045c 	.word	0x2000045c
 8008078:	200004e8 	.word	0x200004e8
 800807c:	200004fc 	.word	0x200004fc
 8008080:	20000518 	.word	0x20000518
 8008084:	2000052c 	.word	0x2000052c
 8008088:	20000544 	.word	0x20000544
 800808c:	20000510 	.word	0x20000510
 8008090:	20000514 	.word	0x20000514

08008094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800809a:	e019      	b.n	80080d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800809c:	f000 f9fe 	bl	800849c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a0:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <prvCheckTasksWaitingTermination+0x4c>)
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff fb92 	bl	80077d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080b2:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <prvCheckTasksWaitingTermination+0x50>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	4a0a      	ldr	r2, [pc, #40]	; (80080e4 <prvCheckTasksWaitingTermination+0x50>)
 80080ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <prvCheckTasksWaitingTermination+0x54>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <prvCheckTasksWaitingTermination+0x54>)
 80080c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080c6:	f000 fa17 	bl	80084f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f80e 	bl	80080ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080d0:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <prvCheckTasksWaitingTermination+0x54>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e1      	bne.n	800809c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	2000052c 	.word	0x2000052c
 80080e4:	20000558 	.word	0x20000558
 80080e8:	20000540 	.word	0x20000540

080080ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fb68 	bl	80087d8 <vPortFree>
				vPortFree( pxTCB );
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fb65 	bl	80087d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800810e:	e017      	b.n	8008140 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008116:	2b01      	cmp	r3, #1
 8008118:	d103      	bne.n	8008122 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb5c 	bl	80087d8 <vPortFree>
	}
 8008120:	e00e      	b.n	8008140 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008128:	2b02      	cmp	r3, #2
 800812a:	d009      	beq.n	8008140 <prvDeleteTCB+0x54>
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	e7fe      	b.n	800813e <prvDeleteTCB+0x52>
	}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <prvResetNextTaskUnblockTime+0x38>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <prvResetNextTaskUnblockTime+0x3c>)
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008160:	e008      	b.n	8008174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <prvResetNextTaskUnblockTime+0x38>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4a04      	ldr	r2, [pc, #16]	; (8008184 <prvResetNextTaskUnblockTime+0x3c>)
 8008172:	6013      	str	r3, [r2, #0]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	20000510 	.word	0x20000510
 8008184:	20000578 	.word	0x20000578

08008188 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008192:	4b29      	ldr	r3, [pc, #164]	; (8008238 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008198:	4b28      	ldr	r3, [pc, #160]	; (800823c <prvAddCurrentTaskToDelayedList+0xb4>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fb19 	bl	80077d6 <uxListRemove>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10b      	bne.n	80081c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80081aa:	4b24      	ldr	r3, [pc, #144]	; (800823c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	2201      	movs	r2, #1
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	43da      	mvns	r2, r3
 80081b8:	4b21      	ldr	r3, [pc, #132]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4013      	ands	r3, r2
 80081be:	4a20      	ldr	r2, [pc, #128]	; (8008240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80081c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d10a      	bne.n	80081e0 <prvAddCurrentTaskToDelayedList+0x58>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d007      	beq.n	80081e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081d0:	4b1a      	ldr	r3, [pc, #104]	; (800823c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4619      	mov	r1, r3
 80081d8:	481a      	ldr	r0, [pc, #104]	; (8008244 <prvAddCurrentTaskToDelayedList+0xbc>)
 80081da:	f7ff fa9f 	bl	800771c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081de:	e026      	b.n	800822e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4413      	add	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081e8:	4b14      	ldr	r3, [pc, #80]	; (800823c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d209      	bcs.n	800820c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <prvAddCurrentTaskToDelayedList+0xc0>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <prvAddCurrentTaskToDelayedList+0xb4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3304      	adds	r3, #4
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f7ff faad 	bl	8007764 <vListInsert>
}
 800820a:	e010      	b.n	800822e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800820c:	4b0f      	ldr	r3, [pc, #60]	; (800824c <prvAddCurrentTaskToDelayedList+0xc4>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3304      	adds	r3, #4
 8008216:	4619      	mov	r1, r3
 8008218:	4610      	mov	r0, r2
 800821a:	f7ff faa3 	bl	8007764 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	429a      	cmp	r2, r3
 8008226:	d202      	bcs.n	800822e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008228:	4a09      	ldr	r2, [pc, #36]	; (8008250 <prvAddCurrentTaskToDelayedList+0xc8>)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6013      	str	r3, [r2, #0]
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	2000055c 	.word	0x2000055c
 800823c:	20000458 	.word	0x20000458
 8008240:	20000560 	.word	0x20000560
 8008244:	20000544 	.word	0x20000544
 8008248:	20000514 	.word	0x20000514
 800824c:	20000510 	.word	0x20000510
 8008250:	20000578 	.word	0x20000578

08008254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3b04      	subs	r3, #4
 8008264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800826c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3b04      	subs	r3, #4
 8008272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f023 0201 	bic.w	r2, r3, #1
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3b04      	subs	r3, #4
 8008282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008284:	4a0c      	ldr	r2, [pc, #48]	; (80082b8 <pxPortInitialiseStack+0x64>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3b14      	subs	r3, #20
 800828e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3b04      	subs	r3, #4
 800829a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f06f 0202 	mvn.w	r2, #2
 80082a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3b20      	subs	r3, #32
 80082a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082aa:	68fb      	ldr	r3, [r7, #12]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	080082bd 	.word	0x080082bd

080082bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082c6:	4b11      	ldr	r3, [pc, #68]	; (800830c <prvTaskExitError+0x50>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ce:	d009      	beq.n	80082e4 <prvTaskExitError+0x28>
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e7fe      	b.n	80082e2 <prvTaskExitError+0x26>
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082f6:	bf00      	nop
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0fc      	beq.n	80082f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082fe:	bf00      	nop
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	2000000c 	.word	0x2000000c

08008310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008310:	4b07      	ldr	r3, [pc, #28]	; (8008330 <pxCurrentTCBConst2>)
 8008312:	6819      	ldr	r1, [r3, #0]
 8008314:	6808      	ldr	r0, [r1, #0]
 8008316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	f380 8809 	msr	PSP, r0
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8811 	msr	BASEPRI, r0
 800832a:	4770      	bx	lr
 800832c:	f3af 8000 	nop.w

08008330 <pxCurrentTCBConst2>:
 8008330:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008338:	4808      	ldr	r0, [pc, #32]	; (800835c <prvPortStartFirstTask+0x24>)
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	6800      	ldr	r0, [r0, #0]
 800833e:	f380 8808 	msr	MSP, r0
 8008342:	f04f 0000 	mov.w	r0, #0
 8008346:	f380 8814 	msr	CONTROL, r0
 800834a:	b662      	cpsie	i
 800834c:	b661      	cpsie	f
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	df00      	svc	0
 8008358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800835a:	bf00      	nop
 800835c:	e000ed08 	.word	0xe000ed08

08008360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008366:	4b44      	ldr	r3, [pc, #272]	; (8008478 <xPortStartScheduler+0x118>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a44      	ldr	r2, [pc, #272]	; (800847c <xPortStartScheduler+0x11c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d109      	bne.n	8008384 <xPortStartScheduler+0x24>
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	e7fe      	b.n	8008382 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008384:	4b3c      	ldr	r3, [pc, #240]	; (8008478 <xPortStartScheduler+0x118>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a3d      	ldr	r2, [pc, #244]	; (8008480 <xPortStartScheduler+0x120>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d109      	bne.n	80083a2 <xPortStartScheduler+0x42>
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e7fe      	b.n	80083a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083a2:	4b38      	ldr	r3, [pc, #224]	; (8008484 <xPortStartScheduler+0x124>)
 80083a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	22ff      	movs	r2, #255	; 0xff
 80083b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	4b30      	ldr	r3, [pc, #192]	; (8008488 <xPortStartScheduler+0x128>)
 80083c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083ca:	4b30      	ldr	r3, [pc, #192]	; (800848c <xPortStartScheduler+0x12c>)
 80083cc:	2207      	movs	r2, #7
 80083ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083d0:	e009      	b.n	80083e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80083d2:	4b2e      	ldr	r3, [pc, #184]	; (800848c <xPortStartScheduler+0x12c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4a2c      	ldr	r2, [pc, #176]	; (800848c <xPortStartScheduler+0x12c>)
 80083da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ee:	2b80      	cmp	r3, #128	; 0x80
 80083f0:	d0ef      	beq.n	80083d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083f2:	4b26      	ldr	r3, [pc, #152]	; (800848c <xPortStartScheduler+0x12c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f1c3 0307 	rsb	r3, r3, #7
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d009      	beq.n	8008412 <xPortStartScheduler+0xb2>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60bb      	str	r3, [r7, #8]
 8008410:	e7fe      	b.n	8008410 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008412:	4b1e      	ldr	r3, [pc, #120]	; (800848c <xPortStartScheduler+0x12c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	021b      	lsls	r3, r3, #8
 8008418:	4a1c      	ldr	r2, [pc, #112]	; (800848c <xPortStartScheduler+0x12c>)
 800841a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800841c:	4b1b      	ldr	r3, [pc, #108]	; (800848c <xPortStartScheduler+0x12c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008424:	4a19      	ldr	r2, [pc, #100]	; (800848c <xPortStartScheduler+0x12c>)
 8008426:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008430:	4b17      	ldr	r3, [pc, #92]	; (8008490 <xPortStartScheduler+0x130>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a16      	ldr	r2, [pc, #88]	; (8008490 <xPortStartScheduler+0x130>)
 8008436:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800843a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800843c:	4b14      	ldr	r3, [pc, #80]	; (8008490 <xPortStartScheduler+0x130>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a13      	ldr	r2, [pc, #76]	; (8008490 <xPortStartScheduler+0x130>)
 8008442:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008446:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008448:	f000 f8d6 	bl	80085f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800844c:	4b11      	ldr	r3, [pc, #68]	; (8008494 <xPortStartScheduler+0x134>)
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008452:	f000 f8f5 	bl	8008640 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008456:	4b10      	ldr	r3, [pc, #64]	; (8008498 <xPortStartScheduler+0x138>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a0f      	ldr	r2, [pc, #60]	; (8008498 <xPortStartScheduler+0x138>)
 800845c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008460:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008462:	f7ff ff69 	bl	8008338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008466:	f7ff fd63 	bl	8007f30 <vTaskSwitchContext>
	prvTaskExitError();
 800846a:	f7ff ff27 	bl	80082bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	e000ed00 	.word	0xe000ed00
 800847c:	410fc271 	.word	0x410fc271
 8008480:	410fc270 	.word	0x410fc270
 8008484:	e000e400 	.word	0xe000e400
 8008488:	20000584 	.word	0x20000584
 800848c:	20000588 	.word	0x20000588
 8008490:	e000ed20 	.word	0xe000ed20
 8008494:	2000000c 	.word	0x2000000c
 8008498:	e000ef34 	.word	0xe000ef34

0800849c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084b4:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <vPortEnterCritical+0x54>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3301      	adds	r3, #1
 80084ba:	4a0d      	ldr	r2, [pc, #52]	; (80084f0 <vPortEnterCritical+0x54>)
 80084bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084be:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <vPortEnterCritical+0x54>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d10e      	bne.n	80084e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <vPortEnterCritical+0x58>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d009      	beq.n	80084e4 <vPortEnterCritical+0x48>
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	603b      	str	r3, [r7, #0]
 80084e2:	e7fe      	b.n	80084e2 <vPortEnterCritical+0x46>
	}
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	2000000c 	.word	0x2000000c
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084fe:	4b11      	ldr	r3, [pc, #68]	; (8008544 <vPortExitCritical+0x4c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <vPortExitCritical+0x22>
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	607b      	str	r3, [r7, #4]
 8008518:	e7fe      	b.n	8008518 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800851a:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <vPortExitCritical+0x4c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3b01      	subs	r3, #1
 8008520:	4a08      	ldr	r2, [pc, #32]	; (8008544 <vPortExitCritical+0x4c>)
 8008522:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008524:	4b07      	ldr	r3, [pc, #28]	; (8008544 <vPortExitCritical+0x4c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <vPortExitCritical+0x3e>
 800852c:	2300      	movs	r3, #0
 800852e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	2000000c 	.word	0x2000000c
	...

08008550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008550:	f3ef 8009 	mrs	r0, PSP
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <pxCurrentTCBConst>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	f01e 0f10 	tst.w	lr, #16
 8008560:	bf08      	it	eq
 8008562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	6010      	str	r0, [r2, #0]
 800856c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008574:	f380 8811 	msr	BASEPRI, r0
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f7ff fcd6 	bl	8007f30 <vTaskSwitchContext>
 8008584:	f04f 0000 	mov.w	r0, #0
 8008588:	f380 8811 	msr	BASEPRI, r0
 800858c:	bc09      	pop	{r0, r3}
 800858e:	6819      	ldr	r1, [r3, #0]
 8008590:	6808      	ldr	r0, [r1, #0]
 8008592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008596:	f01e 0f10 	tst.w	lr, #16
 800859a:	bf08      	it	eq
 800859c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085a0:	f380 8809 	msr	PSP, r0
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	f3af 8000 	nop.w

080085b0 <pxCurrentTCBConst>:
 80085b0:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop

080085b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085d0:	f7ff fbf6 	bl	8007dc0 <xTaskIncrementTick>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085da:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <SysTick_Handler+0x3c>)
 80085dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	2300      	movs	r3, #0
 80085e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <vPortSetupTimerInterrupt+0x34>)
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008602:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <vPortSetupTimerInterrupt+0x38>)
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <vPortSetupTimerInterrupt+0x3c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a0a      	ldr	r2, [pc, #40]	; (8008638 <vPortSetupTimerInterrupt+0x40>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	099b      	lsrs	r3, r3, #6
 8008614:	4a09      	ldr	r2, [pc, #36]	; (800863c <vPortSetupTimerInterrupt+0x44>)
 8008616:	3b01      	subs	r3, #1
 8008618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800861a:	4b04      	ldr	r3, [pc, #16]	; (800862c <vPortSetupTimerInterrupt+0x34>)
 800861c:	2207      	movs	r2, #7
 800861e:	601a      	str	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	e000e010 	.word	0xe000e010
 8008630:	e000e018 	.word	0xe000e018
 8008634:	20000000 	.word	0x20000000
 8008638:	10624dd3 	.word	0x10624dd3
 800863c:	e000e014 	.word	0xe000e014

08008640 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008640:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008650 <vPortEnableVFP+0x10>
 8008644:	6801      	ldr	r1, [r0, #0]
 8008646:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800864a:	6001      	str	r1, [r0, #0]
 800864c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800864e:	bf00      	nop
 8008650:	e000ed88 	.word	0xe000ed88

08008654 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	; 0x28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800865c:	2300      	movs	r3, #0
 800865e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008660:	f7ff fb04 	bl	8007c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008664:	4b57      	ldr	r3, [pc, #348]	; (80087c4 <pvPortMalloc+0x170>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800866c:	f000 f90c 	bl	8008888 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008670:	4b55      	ldr	r3, [pc, #340]	; (80087c8 <pvPortMalloc+0x174>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4013      	ands	r3, r2
 8008678:	2b00      	cmp	r3, #0
 800867a:	f040 808c 	bne.w	8008796 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01c      	beq.n	80086be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008684:	2208      	movs	r2, #8
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4413      	add	r3, r2
 800868a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	2b00      	cmp	r3, #0
 8008694:	d013      	beq.n	80086be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f023 0307 	bic.w	r3, r3, #7
 800869c:	3308      	adds	r3, #8
 800869e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <pvPortMalloc+0x6a>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	e7fe      	b.n	80086bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d068      	beq.n	8008796 <pvPortMalloc+0x142>
 80086c4:	4b41      	ldr	r3, [pc, #260]	; (80087cc <pvPortMalloc+0x178>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d863      	bhi.n	8008796 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086ce:	4b40      	ldr	r3, [pc, #256]	; (80087d0 <pvPortMalloc+0x17c>)
 80086d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086d2:	4b3f      	ldr	r3, [pc, #252]	; (80087d0 <pvPortMalloc+0x17c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086d8:	e004      	b.n	80086e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d903      	bls.n	80086f6 <pvPortMalloc+0xa2>
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1f1      	bne.n	80086da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086f6:	4b33      	ldr	r3, [pc, #204]	; (80087c4 <pvPortMalloc+0x170>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d04a      	beq.n	8008796 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2208      	movs	r2, #8
 8008706:	4413      	add	r3, r2
 8008708:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	1ad2      	subs	r2, r2, r3
 800871a:	2308      	movs	r3, #8
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	429a      	cmp	r2, r3
 8008720:	d91e      	bls.n	8008760 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4413      	add	r3, r2
 8008728:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	2b00      	cmp	r3, #0
 8008732:	d009      	beq.n	8008748 <pvPortMalloc+0xf4>
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	e7fe      	b.n	8008746 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800875a:	69b8      	ldr	r0, [r7, #24]
 800875c:	f000 f8f6 	bl	800894c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008760:	4b1a      	ldr	r3, [pc, #104]	; (80087cc <pvPortMalloc+0x178>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	4a18      	ldr	r2, [pc, #96]	; (80087cc <pvPortMalloc+0x178>)
 800876c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800876e:	4b17      	ldr	r3, [pc, #92]	; (80087cc <pvPortMalloc+0x178>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4b18      	ldr	r3, [pc, #96]	; (80087d4 <pvPortMalloc+0x180>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d203      	bcs.n	8008782 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <pvPortMalloc+0x178>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a15      	ldr	r2, [pc, #84]	; (80087d4 <pvPortMalloc+0x180>)
 8008780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <pvPortMalloc+0x174>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	431a      	orrs	r2, r3
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008796:	f7ff fa77 	bl	8007c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	f003 0307 	and.w	r3, r3, #7
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d009      	beq.n	80087b8 <pvPortMalloc+0x164>
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	e7fe      	b.n	80087b6 <pvPortMalloc+0x162>
	return pvReturn;
 80087b8:	69fb      	ldr	r3, [r7, #28]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3728      	adds	r7, #40	; 0x28
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20002ca4 	.word	0x20002ca4
 80087c8:	20002cb0 	.word	0x20002cb0
 80087cc:	20002ca8 	.word	0x20002ca8
 80087d0:	20002c9c 	.word	0x20002c9c
 80087d4:	20002cac 	.word	0x20002cac

080087d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d046      	beq.n	8008878 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087ea:	2308      	movs	r3, #8
 80087ec:	425b      	negs	r3, r3
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4413      	add	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	4b20      	ldr	r3, [pc, #128]	; (8008880 <vPortFree+0xa8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4013      	ands	r3, r2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <vPortFree+0x42>
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	e7fe      	b.n	8008818 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d009      	beq.n	8008836 <vPortFree+0x5e>
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60bb      	str	r3, [r7, #8]
 8008834:	e7fe      	b.n	8008834 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	4b11      	ldr	r3, [pc, #68]	; (8008880 <vPortFree+0xa8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d019      	beq.n	8008878 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d115      	bne.n	8008878 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <vPortFree+0xa8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	43db      	mvns	r3, r3
 8008856:	401a      	ands	r2, r3
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800885c:	f7ff fa06 	bl	8007c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	4b07      	ldr	r3, [pc, #28]	; (8008884 <vPortFree+0xac>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4413      	add	r3, r2
 800886a:	4a06      	ldr	r2, [pc, #24]	; (8008884 <vPortFree+0xac>)
 800886c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800886e:	6938      	ldr	r0, [r7, #16]
 8008870:	f000 f86c 	bl	800894c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008874:	f7ff fa08 	bl	8007c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008878:	bf00      	nop
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20002cb0 	.word	0x20002cb0
 8008884:	20002ca8 	.word	0x20002ca8

08008888 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800888e:	f242 7310 	movw	r3, #10000	; 0x2710
 8008892:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008894:	4b27      	ldr	r3, [pc, #156]	; (8008934 <prvHeapInit+0xac>)
 8008896:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3307      	adds	r3, #7
 80088a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f023 0307 	bic.w	r3, r3, #7
 80088ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <prvHeapInit+0xac>)
 80088b8:	4413      	add	r3, r2
 80088ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088c0:	4a1d      	ldr	r2, [pc, #116]	; (8008938 <prvHeapInit+0xb0>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088c6:	4b1c      	ldr	r3, [pc, #112]	; (8008938 <prvHeapInit+0xb0>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088d4:	2208      	movs	r2, #8
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0307 	bic.w	r3, r3, #7
 80088e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a15      	ldr	r2, [pc, #84]	; (800893c <prvHeapInit+0xb4>)
 80088e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088ea:	4b14      	ldr	r3, [pc, #80]	; (800893c <prvHeapInit+0xb4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2200      	movs	r2, #0
 80088f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088f2:	4b12      	ldr	r3, [pc, #72]	; (800893c <prvHeapInit+0xb4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008908:	4b0c      	ldr	r3, [pc, #48]	; (800893c <prvHeapInit+0xb4>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	4a0a      	ldr	r2, [pc, #40]	; (8008940 <prvHeapInit+0xb8>)
 8008916:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4a09      	ldr	r2, [pc, #36]	; (8008944 <prvHeapInit+0xbc>)
 800891e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008920:	4b09      	ldr	r3, [pc, #36]	; (8008948 <prvHeapInit+0xc0>)
 8008922:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008926:	601a      	str	r2, [r3, #0]
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	2000058c 	.word	0x2000058c
 8008938:	20002c9c 	.word	0x20002c9c
 800893c:	20002ca4 	.word	0x20002ca4
 8008940:	20002cac 	.word	0x20002cac
 8008944:	20002ca8 	.word	0x20002ca8
 8008948:	20002cb0 	.word	0x20002cb0

0800894c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008954:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <prvInsertBlockIntoFreeList+0xac>)
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e002      	b.n	8008960 <prvInsertBlockIntoFreeList+0x14>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d8f7      	bhi.n	800895a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4413      	add	r3, r2
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	429a      	cmp	r2, r3
 800897a:	d108      	bne.n	800898e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	441a      	add	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	441a      	add	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d118      	bne.n	80089d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4b15      	ldr	r3, [pc, #84]	; (80089fc <prvInsertBlockIntoFreeList+0xb0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d00d      	beq.n	80089ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	441a      	add	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	e008      	b.n	80089dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089ca:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <prvInsertBlockIntoFreeList+0xb0>)
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	e003      	b.n	80089dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d002      	beq.n	80089ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089ea:	bf00      	nop
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	20002c9c 	.word	0x20002c9c
 80089fc:	20002ca4 	.word	0x20002ca4

08008a00 <__errno>:
 8008a00:	4b01      	ldr	r3, [pc, #4]	; (8008a08 <__errno+0x8>)
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000010 	.word	0x20000010

08008a0c <__libc_init_array>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	4e0d      	ldr	r6, [pc, #52]	; (8008a44 <__libc_init_array+0x38>)
 8008a10:	4c0d      	ldr	r4, [pc, #52]	; (8008a48 <__libc_init_array+0x3c>)
 8008a12:	1ba4      	subs	r4, r4, r6
 8008a14:	10a4      	asrs	r4, r4, #2
 8008a16:	2500      	movs	r5, #0
 8008a18:	42a5      	cmp	r5, r4
 8008a1a:	d109      	bne.n	8008a30 <__libc_init_array+0x24>
 8008a1c:	4e0b      	ldr	r6, [pc, #44]	; (8008a4c <__libc_init_array+0x40>)
 8008a1e:	4c0c      	ldr	r4, [pc, #48]	; (8008a50 <__libc_init_array+0x44>)
 8008a20:	f002 faf2 	bl	800b008 <_init>
 8008a24:	1ba4      	subs	r4, r4, r6
 8008a26:	10a4      	asrs	r4, r4, #2
 8008a28:	2500      	movs	r5, #0
 8008a2a:	42a5      	cmp	r5, r4
 8008a2c:	d105      	bne.n	8008a3a <__libc_init_array+0x2e>
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a34:	4798      	blx	r3
 8008a36:	3501      	adds	r5, #1
 8008a38:	e7ee      	b.n	8008a18 <__libc_init_array+0xc>
 8008a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a3e:	4798      	blx	r3
 8008a40:	3501      	adds	r5, #1
 8008a42:	e7f2      	b.n	8008a2a <__libc_init_array+0x1e>
 8008a44:	0800b3bc 	.word	0x0800b3bc
 8008a48:	0800b3bc 	.word	0x0800b3bc
 8008a4c:	0800b3bc 	.word	0x0800b3bc
 8008a50:	0800b3c0 	.word	0x0800b3c0

08008a54 <memcpy>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	1e43      	subs	r3, r0, #1
 8008a58:	440a      	add	r2, r1
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	d100      	bne.n	8008a60 <memcpy+0xc>
 8008a5e:	bd10      	pop	{r4, pc}
 8008a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a68:	e7f7      	b.n	8008a5a <memcpy+0x6>

08008a6a <memset>:
 8008a6a:	4402      	add	r2, r0
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d100      	bne.n	8008a74 <memset+0xa>
 8008a72:	4770      	bx	lr
 8008a74:	f803 1b01 	strb.w	r1, [r3], #1
 8008a78:	e7f9      	b.n	8008a6e <memset+0x4>

08008a7a <__cvt>:
 8008a7a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7e:	ec55 4b10 	vmov	r4, r5, d0
 8008a82:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008a84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	460e      	mov	r6, r1
 8008a8c:	4691      	mov	r9, r2
 8008a8e:	4619      	mov	r1, r3
 8008a90:	bfb8      	it	lt
 8008a92:	4622      	movlt	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	f027 0720 	bic.w	r7, r7, #32
 8008a9a:	bfbb      	ittet	lt
 8008a9c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008aa0:	461d      	movlt	r5, r3
 8008aa2:	2300      	movge	r3, #0
 8008aa4:	232d      	movlt	r3, #45	; 0x2d
 8008aa6:	bfb8      	it	lt
 8008aa8:	4614      	movlt	r4, r2
 8008aaa:	2f46      	cmp	r7, #70	; 0x46
 8008aac:	700b      	strb	r3, [r1, #0]
 8008aae:	d004      	beq.n	8008aba <__cvt+0x40>
 8008ab0:	2f45      	cmp	r7, #69	; 0x45
 8008ab2:	d100      	bne.n	8008ab6 <__cvt+0x3c>
 8008ab4:	3601      	adds	r6, #1
 8008ab6:	2102      	movs	r1, #2
 8008ab8:	e000      	b.n	8008abc <__cvt+0x42>
 8008aba:	2103      	movs	r1, #3
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	ab02      	add	r3, sp, #8
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4653      	mov	r3, sl
 8008ac8:	ec45 4b10 	vmov	d0, r4, r5
 8008acc:	f000 fce0 	bl	8009490 <_dtoa_r>
 8008ad0:	2f47      	cmp	r7, #71	; 0x47
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	d102      	bne.n	8008adc <__cvt+0x62>
 8008ad6:	f019 0f01 	tst.w	r9, #1
 8008ada:	d026      	beq.n	8008b2a <__cvt+0xb0>
 8008adc:	2f46      	cmp	r7, #70	; 0x46
 8008ade:	eb08 0906 	add.w	r9, r8, r6
 8008ae2:	d111      	bne.n	8008b08 <__cvt+0x8e>
 8008ae4:	f898 3000 	ldrb.w	r3, [r8]
 8008ae8:	2b30      	cmp	r3, #48	; 0x30
 8008aea:	d10a      	bne.n	8008b02 <__cvt+0x88>
 8008aec:	2200      	movs	r2, #0
 8008aee:	2300      	movs	r3, #0
 8008af0:	4620      	mov	r0, r4
 8008af2:	4629      	mov	r1, r5
 8008af4:	f7f7 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008af8:	b918      	cbnz	r0, 8008b02 <__cvt+0x88>
 8008afa:	f1c6 0601 	rsb	r6, r6, #1
 8008afe:	f8ca 6000 	str.w	r6, [sl]
 8008b02:	f8da 3000 	ldr.w	r3, [sl]
 8008b06:	4499      	add	r9, r3
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b14:	b938      	cbnz	r0, 8008b26 <__cvt+0xac>
 8008b16:	2230      	movs	r2, #48	; 0x30
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	454b      	cmp	r3, r9
 8008b1c:	d205      	bcs.n	8008b2a <__cvt+0xb0>
 8008b1e:	1c59      	adds	r1, r3, #1
 8008b20:	9103      	str	r1, [sp, #12]
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	e7f8      	b.n	8008b18 <__cvt+0x9e>
 8008b26:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b2e:	eba3 0308 	sub.w	r3, r3, r8
 8008b32:	4640      	mov	r0, r8
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	b004      	add	sp, #16
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008b3c <__exponent>:
 8008b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	4604      	mov	r4, r0
 8008b42:	bfba      	itte	lt
 8008b44:	4249      	neglt	r1, r1
 8008b46:	232d      	movlt	r3, #45	; 0x2d
 8008b48:	232b      	movge	r3, #43	; 0x2b
 8008b4a:	2909      	cmp	r1, #9
 8008b4c:	f804 2b02 	strb.w	r2, [r4], #2
 8008b50:	7043      	strb	r3, [r0, #1]
 8008b52:	dd20      	ble.n	8008b96 <__exponent+0x5a>
 8008b54:	f10d 0307 	add.w	r3, sp, #7
 8008b58:	461f      	mov	r7, r3
 8008b5a:	260a      	movs	r6, #10
 8008b5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008b60:	fb06 1115 	mls	r1, r6, r5, r1
 8008b64:	3130      	adds	r1, #48	; 0x30
 8008b66:	2d09      	cmp	r5, #9
 8008b68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b6c:	f103 32ff 	add.w	r2, r3, #4294967295
 8008b70:	4629      	mov	r1, r5
 8008b72:	dc09      	bgt.n	8008b88 <__exponent+0x4c>
 8008b74:	3130      	adds	r1, #48	; 0x30
 8008b76:	3b02      	subs	r3, #2
 8008b78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b7c:	42bb      	cmp	r3, r7
 8008b7e:	4622      	mov	r2, r4
 8008b80:	d304      	bcc.n	8008b8c <__exponent+0x50>
 8008b82:	1a10      	subs	r0, r2, r0
 8008b84:	b003      	add	sp, #12
 8008b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b88:	4613      	mov	r3, r2
 8008b8a:	e7e7      	b.n	8008b5c <__exponent+0x20>
 8008b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b90:	f804 2b01 	strb.w	r2, [r4], #1
 8008b94:	e7f2      	b.n	8008b7c <__exponent+0x40>
 8008b96:	2330      	movs	r3, #48	; 0x30
 8008b98:	4419      	add	r1, r3
 8008b9a:	7083      	strb	r3, [r0, #2]
 8008b9c:	1d02      	adds	r2, r0, #4
 8008b9e:	70c1      	strb	r1, [r0, #3]
 8008ba0:	e7ef      	b.n	8008b82 <__exponent+0x46>
	...

08008ba4 <_printf_float>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	b08d      	sub	sp, #52	; 0x34
 8008baa:	460c      	mov	r4, r1
 8008bac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	461f      	mov	r7, r3
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	f001 fa23 	bl	800a000 <_localeconv_r>
 8008bba:	6803      	ldr	r3, [r0, #0]
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7f7 fb06 	bl	80001d0 <strlen>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bcc:	9005      	str	r0, [sp, #20]
 8008bce:	3307      	adds	r3, #7
 8008bd0:	f023 0307 	bic.w	r3, r3, #7
 8008bd4:	f103 0208 	add.w	r2, r3, #8
 8008bd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8008be0:	f8c8 2000 	str.w	r2, [r8]
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bf4:	9307      	str	r3, [sp, #28]
 8008bf6:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfe:	4ba7      	ldr	r3, [pc, #668]	; (8008e9c <_printf_float+0x2f8>)
 8008c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c04:	f7f7 ff92 	bl	8000b2c <__aeabi_dcmpun>
 8008c08:	bb70      	cbnz	r0, 8008c68 <_printf_float+0xc4>
 8008c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0e:	4ba3      	ldr	r3, [pc, #652]	; (8008e9c <_printf_float+0x2f8>)
 8008c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c14:	f7f7 ff6c 	bl	8000af0 <__aeabi_dcmple>
 8008c18:	bb30      	cbnz	r0, 8008c68 <_printf_float+0xc4>
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4640      	mov	r0, r8
 8008c20:	4649      	mov	r1, r9
 8008c22:	f7f7 ff5b 	bl	8000adc <__aeabi_dcmplt>
 8008c26:	b110      	cbz	r0, 8008c2e <_printf_float+0x8a>
 8008c28:	232d      	movs	r3, #45	; 0x2d
 8008c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c2e:	4a9c      	ldr	r2, [pc, #624]	; (8008ea0 <_printf_float+0x2fc>)
 8008c30:	4b9c      	ldr	r3, [pc, #624]	; (8008ea4 <_printf_float+0x300>)
 8008c32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008c36:	bf8c      	ite	hi
 8008c38:	4690      	movhi	r8, r2
 8008c3a:	4698      	movls	r8, r3
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	f02b 0204 	bic.w	r2, fp, #4
 8008c42:	6123      	str	r3, [r4, #16]
 8008c44:	6022      	str	r2, [r4, #0]
 8008c46:	f04f 0900 	mov.w	r9, #0
 8008c4a:	9700      	str	r7, [sp, #0]
 8008c4c:	4633      	mov	r3, r6
 8008c4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c50:	4621      	mov	r1, r4
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f9e6 	bl	8009024 <_printf_common>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f040 808d 	bne.w	8008d78 <_printf_float+0x1d4>
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	b00d      	add	sp, #52	; 0x34
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	4642      	mov	r2, r8
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	4649      	mov	r1, r9
 8008c70:	f7f7 ff5c 	bl	8000b2c <__aeabi_dcmpun>
 8008c74:	b110      	cbz	r0, 8008c7c <_printf_float+0xd8>
 8008c76:	4a8c      	ldr	r2, [pc, #560]	; (8008ea8 <_printf_float+0x304>)
 8008c78:	4b8c      	ldr	r3, [pc, #560]	; (8008eac <_printf_float+0x308>)
 8008c7a:	e7da      	b.n	8008c32 <_printf_float+0x8e>
 8008c7c:	6861      	ldr	r1, [r4, #4]
 8008c7e:	1c4b      	adds	r3, r1, #1
 8008c80:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008c84:	a80a      	add	r0, sp, #40	; 0x28
 8008c86:	d13e      	bne.n	8008d06 <_printf_float+0x162>
 8008c88:	2306      	movs	r3, #6
 8008c8a:	6063      	str	r3, [r4, #4]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008c92:	ab09      	add	r3, sp, #36	; 0x24
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	ec49 8b10 	vmov	d0, r8, r9
 8008c9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	f8cd a004 	str.w	sl, [sp, #4]
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7ff fee7 	bl	8008a7a <__cvt>
 8008cac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008cb0:	2b47      	cmp	r3, #71	; 0x47
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	d109      	bne.n	8008cca <_printf_float+0x126>
 8008cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb8:	1cd8      	adds	r0, r3, #3
 8008cba:	db02      	blt.n	8008cc2 <_printf_float+0x11e>
 8008cbc:	6862      	ldr	r2, [r4, #4]
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	dd47      	ble.n	8008d52 <_printf_float+0x1ae>
 8008cc2:	f1aa 0a02 	sub.w	sl, sl, #2
 8008cc6:	fa5f fa8a 	uxtb.w	sl, sl
 8008cca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008cce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cd0:	d824      	bhi.n	8008d1c <_printf_float+0x178>
 8008cd2:	3901      	subs	r1, #1
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cda:	9109      	str	r1, [sp, #36]	; 0x24
 8008cdc:	f7ff ff2e 	bl	8008b3c <__exponent>
 8008ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ce2:	1813      	adds	r3, r2, r0
 8008ce4:	2a01      	cmp	r2, #1
 8008ce6:	4681      	mov	r9, r0
 8008ce8:	6123      	str	r3, [r4, #16]
 8008cea:	dc02      	bgt.n	8008cf2 <_printf_float+0x14e>
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	07d1      	lsls	r1, r2, #31
 8008cf0:	d501      	bpl.n	8008cf6 <_printf_float+0x152>
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0a5      	beq.n	8008c4a <_printf_float+0xa6>
 8008cfe:	232d      	movs	r3, #45	; 0x2d
 8008d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d04:	e7a1      	b.n	8008c4a <_printf_float+0xa6>
 8008d06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008d0a:	f000 8177 	beq.w	8008ffc <_printf_float+0x458>
 8008d0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008d12:	d1bb      	bne.n	8008c8c <_printf_float+0xe8>
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d1b9      	bne.n	8008c8c <_printf_float+0xe8>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e7b6      	b.n	8008c8a <_printf_float+0xe6>
 8008d1c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008d20:	d119      	bne.n	8008d56 <_printf_float+0x1b2>
 8008d22:	2900      	cmp	r1, #0
 8008d24:	6863      	ldr	r3, [r4, #4]
 8008d26:	dd0c      	ble.n	8008d42 <_printf_float+0x19e>
 8008d28:	6121      	str	r1, [r4, #16]
 8008d2a:	b913      	cbnz	r3, 8008d32 <_printf_float+0x18e>
 8008d2c:	6822      	ldr	r2, [r4, #0]
 8008d2e:	07d2      	lsls	r2, r2, #31
 8008d30:	d502      	bpl.n	8008d38 <_printf_float+0x194>
 8008d32:	3301      	adds	r3, #1
 8008d34:	440b      	add	r3, r1
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d3c:	f04f 0900 	mov.w	r9, #0
 8008d40:	e7d9      	b.n	8008cf6 <_printf_float+0x152>
 8008d42:	b913      	cbnz	r3, 8008d4a <_printf_float+0x1a6>
 8008d44:	6822      	ldr	r2, [r4, #0]
 8008d46:	07d0      	lsls	r0, r2, #31
 8008d48:	d501      	bpl.n	8008d4e <_printf_float+0x1aa>
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	e7f3      	b.n	8008d36 <_printf_float+0x192>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e7f1      	b.n	8008d36 <_printf_float+0x192>
 8008d52:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008d56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	db05      	blt.n	8008d6a <_printf_float+0x1c6>
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	07d1      	lsls	r1, r2, #31
 8008d64:	d5e8      	bpl.n	8008d38 <_printf_float+0x194>
 8008d66:	3301      	adds	r3, #1
 8008d68:	e7e5      	b.n	8008d36 <_printf_float+0x192>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bfd4      	ite	le
 8008d6e:	f1c3 0302 	rsble	r3, r3, #2
 8008d72:	2301      	movgt	r3, #1
 8008d74:	4413      	add	r3, r2
 8008d76:	e7de      	b.n	8008d36 <_printf_float+0x192>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	055a      	lsls	r2, r3, #21
 8008d7c:	d407      	bmi.n	8008d8e <_printf_float+0x1ea>
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	4642      	mov	r2, r8
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d12b      	bne.n	8008de4 <_printf_float+0x240>
 8008d8c:	e767      	b.n	8008c5e <_printf_float+0xba>
 8008d8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008d92:	f240 80dc 	bls.w	8008f4e <_printf_float+0x3aa>
 8008d96:	2200      	movs	r2, #0
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d9e:	f7f7 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d033      	beq.n	8008e0e <_printf_float+0x26a>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4a41      	ldr	r2, [pc, #260]	; (8008eb0 <_printf_float+0x30c>)
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f af54 	beq.w	8008c5e <_printf_float+0xba>
 8008db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	db02      	blt.n	8008dc4 <_printf_float+0x220>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	07d8      	lsls	r0, r3, #31
 8008dc2:	d50f      	bpl.n	8008de4 <_printf_float+0x240>
 8008dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dc8:	4631      	mov	r1, r6
 8008dca:	4628      	mov	r0, r5
 8008dcc:	47b8      	blx	r7
 8008dce:	3001      	adds	r0, #1
 8008dd0:	f43f af45 	beq.w	8008c5e <_printf_float+0xba>
 8008dd4:	f04f 0800 	mov.w	r8, #0
 8008dd8:	f104 091a 	add.w	r9, r4, #26
 8008ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dde:	3b01      	subs	r3, #1
 8008de0:	4543      	cmp	r3, r8
 8008de2:	dc09      	bgt.n	8008df8 <_printf_float+0x254>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	079b      	lsls	r3, r3, #30
 8008de8:	f100 8103 	bmi.w	8008ff2 <_printf_float+0x44e>
 8008dec:	68e0      	ldr	r0, [r4, #12]
 8008dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df0:	4298      	cmp	r0, r3
 8008df2:	bfb8      	it	lt
 8008df4:	4618      	movlt	r0, r3
 8008df6:	e734      	b.n	8008c62 <_printf_float+0xbe>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	464a      	mov	r2, r9
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	f43f af2b 	beq.w	8008c5e <_printf_float+0xba>
 8008e08:	f108 0801 	add.w	r8, r8, #1
 8008e0c:	e7e6      	b.n	8008ddc <_printf_float+0x238>
 8008e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dc2b      	bgt.n	8008e6c <_printf_float+0x2c8>
 8008e14:	2301      	movs	r3, #1
 8008e16:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <_printf_float+0x30c>)
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f43f af1d 	beq.w	8008c5e <_printf_float+0xba>
 8008e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e26:	b923      	cbnz	r3, 8008e32 <_printf_float+0x28e>
 8008e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e2a:	b913      	cbnz	r3, 8008e32 <_printf_float+0x28e>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	07d9      	lsls	r1, r3, #31
 8008e30:	d5d8      	bpl.n	8008de4 <_printf_float+0x240>
 8008e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e36:	4631      	mov	r1, r6
 8008e38:	4628      	mov	r0, r5
 8008e3a:	47b8      	blx	r7
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	f43f af0e 	beq.w	8008c5e <_printf_float+0xba>
 8008e42:	f04f 0900 	mov.w	r9, #0
 8008e46:	f104 0a1a 	add.w	sl, r4, #26
 8008e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4c:	425b      	negs	r3, r3
 8008e4e:	454b      	cmp	r3, r9
 8008e50:	dc01      	bgt.n	8008e56 <_printf_float+0x2b2>
 8008e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e54:	e794      	b.n	8008d80 <_printf_float+0x1dc>
 8008e56:	2301      	movs	r3, #1
 8008e58:	4652      	mov	r2, sl
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b8      	blx	r7
 8008e60:	3001      	adds	r0, #1
 8008e62:	f43f aefc 	beq.w	8008c5e <_printf_float+0xba>
 8008e66:	f109 0901 	add.w	r9, r9, #1
 8008e6a:	e7ee      	b.n	8008e4a <_printf_float+0x2a6>
 8008e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bfa8      	it	ge
 8008e74:	461a      	movge	r2, r3
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	4691      	mov	r9, r2
 8008e7a:	dd07      	ble.n	8008e8c <_printf_float+0x2e8>
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	4631      	mov	r1, r6
 8008e80:	4642      	mov	r2, r8
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b8      	blx	r7
 8008e86:	3001      	adds	r0, #1
 8008e88:	f43f aee9 	beq.w	8008c5e <_printf_float+0xba>
 8008e8c:	f104 031a 	add.w	r3, r4, #26
 8008e90:	f04f 0b00 	mov.w	fp, #0
 8008e94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e98:	9306      	str	r3, [sp, #24]
 8008e9a:	e015      	b.n	8008ec8 <_printf_float+0x324>
 8008e9c:	7fefffff 	.word	0x7fefffff
 8008ea0:	0800b150 	.word	0x0800b150
 8008ea4:	0800b14c 	.word	0x0800b14c
 8008ea8:	0800b158 	.word	0x0800b158
 8008eac:	0800b154 	.word	0x0800b154
 8008eb0:	0800b15c 	.word	0x0800b15c
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	9a06      	ldr	r2, [sp, #24]
 8008eb8:	4631      	mov	r1, r6
 8008eba:	4628      	mov	r0, r5
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	f43f aecd 	beq.w	8008c5e <_printf_float+0xba>
 8008ec4:	f10b 0b01 	add.w	fp, fp, #1
 8008ec8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ecc:	ebaa 0309 	sub.w	r3, sl, r9
 8008ed0:	455b      	cmp	r3, fp
 8008ed2:	dcef      	bgt.n	8008eb4 <_printf_float+0x310>
 8008ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	44d0      	add	r8, sl
 8008edc:	db15      	blt.n	8008f0a <_printf_float+0x366>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	07da      	lsls	r2, r3, #31
 8008ee2:	d412      	bmi.n	8008f0a <_printf_float+0x366>
 8008ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee8:	eba3 020a 	sub.w	r2, r3, sl
 8008eec:	eba3 0a01 	sub.w	sl, r3, r1
 8008ef0:	4592      	cmp	sl, r2
 8008ef2:	bfa8      	it	ge
 8008ef4:	4692      	movge	sl, r2
 8008ef6:	f1ba 0f00 	cmp.w	sl, #0
 8008efa:	dc0e      	bgt.n	8008f1a <_printf_float+0x376>
 8008efc:	f04f 0800 	mov.w	r8, #0
 8008f00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f04:	f104 091a 	add.w	r9, r4, #26
 8008f08:	e019      	b.n	8008f3e <_printf_float+0x39a>
 8008f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4628      	mov	r0, r5
 8008f12:	47b8      	blx	r7
 8008f14:	3001      	adds	r0, #1
 8008f16:	d1e5      	bne.n	8008ee4 <_printf_float+0x340>
 8008f18:	e6a1      	b.n	8008c5e <_printf_float+0xba>
 8008f1a:	4653      	mov	r3, sl
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b8      	blx	r7
 8008f24:	3001      	adds	r0, #1
 8008f26:	d1e9      	bne.n	8008efc <_printf_float+0x358>
 8008f28:	e699      	b.n	8008c5e <_printf_float+0xba>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	464a      	mov	r2, r9
 8008f2e:	4631      	mov	r1, r6
 8008f30:	4628      	mov	r0, r5
 8008f32:	47b8      	blx	r7
 8008f34:	3001      	adds	r0, #1
 8008f36:	f43f ae92 	beq.w	8008c5e <_printf_float+0xba>
 8008f3a:	f108 0801 	add.w	r8, r8, #1
 8008f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	eba3 030a 	sub.w	r3, r3, sl
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	dcee      	bgt.n	8008f2a <_printf_float+0x386>
 8008f4c:	e74a      	b.n	8008de4 <_printf_float+0x240>
 8008f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f50:	2a01      	cmp	r2, #1
 8008f52:	dc01      	bgt.n	8008f58 <_printf_float+0x3b4>
 8008f54:	07db      	lsls	r3, r3, #31
 8008f56:	d53a      	bpl.n	8008fce <_printf_float+0x42a>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	4642      	mov	r2, r8
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b8      	blx	r7
 8008f62:	3001      	adds	r0, #1
 8008f64:	f43f ae7b 	beq.w	8008c5e <_printf_float+0xba>
 8008f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	f108 0801 	add.w	r8, r8, #1
 8008f78:	f43f ae71 	beq.w	8008c5e <_printf_float+0xba>
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f103 3aff 	add.w	sl, r3, #4294967295
 8008f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f7f7 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f8e:	b9c8      	cbnz	r0, 8008fc4 <_printf_float+0x420>
 8008f90:	4653      	mov	r3, sl
 8008f92:	4642      	mov	r2, r8
 8008f94:	4631      	mov	r1, r6
 8008f96:	4628      	mov	r0, r5
 8008f98:	47b8      	blx	r7
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	d10e      	bne.n	8008fbc <_printf_float+0x418>
 8008f9e:	e65e      	b.n	8008c5e <_printf_float+0xba>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	4652      	mov	r2, sl
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	f43f ae57 	beq.w	8008c5e <_printf_float+0xba>
 8008fb0:	f108 0801 	add.w	r8, r8, #1
 8008fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	4543      	cmp	r3, r8
 8008fba:	dcf1      	bgt.n	8008fa0 <_printf_float+0x3fc>
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fc2:	e6de      	b.n	8008d82 <_printf_float+0x1de>
 8008fc4:	f04f 0800 	mov.w	r8, #0
 8008fc8:	f104 0a1a 	add.w	sl, r4, #26
 8008fcc:	e7f2      	b.n	8008fb4 <_printf_float+0x410>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e7df      	b.n	8008f92 <_printf_float+0x3ee>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	464a      	mov	r2, r9
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	f43f ae3e 	beq.w	8008c5e <_printf_float+0xba>
 8008fe2:	f108 0801 	add.w	r8, r8, #1
 8008fe6:	68e3      	ldr	r3, [r4, #12]
 8008fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	4543      	cmp	r3, r8
 8008fee:	dcf0      	bgt.n	8008fd2 <_printf_float+0x42e>
 8008ff0:	e6fc      	b.n	8008dec <_printf_float+0x248>
 8008ff2:	f04f 0800 	mov.w	r8, #0
 8008ff6:	f104 0919 	add.w	r9, r4, #25
 8008ffa:	e7f4      	b.n	8008fe6 <_printf_float+0x442>
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	f43f ae8b 	beq.w	8008d18 <_printf_float+0x174>
 8009002:	2300      	movs	r3, #0
 8009004:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009008:	ab09      	add	r3, sp, #36	; 0x24
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	ec49 8b10 	vmov	d0, r8, r9
 8009010:	6022      	str	r2, [r4, #0]
 8009012:	f8cd a004 	str.w	sl, [sp, #4]
 8009016:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800901a:	4628      	mov	r0, r5
 800901c:	f7ff fd2d 	bl	8008a7a <__cvt>
 8009020:	4680      	mov	r8, r0
 8009022:	e648      	b.n	8008cb6 <_printf_float+0x112>

08009024 <_printf_common>:
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	4691      	mov	r9, r2
 800902a:	461f      	mov	r7, r3
 800902c:	688a      	ldr	r2, [r1, #8]
 800902e:	690b      	ldr	r3, [r1, #16]
 8009030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009034:	4293      	cmp	r3, r2
 8009036:	bfb8      	it	lt
 8009038:	4613      	movlt	r3, r2
 800903a:	f8c9 3000 	str.w	r3, [r9]
 800903e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009042:	4606      	mov	r6, r0
 8009044:	460c      	mov	r4, r1
 8009046:	b112      	cbz	r2, 800904e <_printf_common+0x2a>
 8009048:	3301      	adds	r3, #1
 800904a:	f8c9 3000 	str.w	r3, [r9]
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	0699      	lsls	r1, r3, #26
 8009052:	bf42      	ittt	mi
 8009054:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009058:	3302      	addmi	r3, #2
 800905a:	f8c9 3000 	strmi.w	r3, [r9]
 800905e:	6825      	ldr	r5, [r4, #0]
 8009060:	f015 0506 	ands.w	r5, r5, #6
 8009064:	d107      	bne.n	8009076 <_printf_common+0x52>
 8009066:	f104 0a19 	add.w	sl, r4, #25
 800906a:	68e3      	ldr	r3, [r4, #12]
 800906c:	f8d9 2000 	ldr.w	r2, [r9]
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	42ab      	cmp	r3, r5
 8009074:	dc28      	bgt.n	80090c8 <_printf_common+0xa4>
 8009076:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	3300      	adds	r3, #0
 800907e:	bf18      	it	ne
 8009080:	2301      	movne	r3, #1
 8009082:	0692      	lsls	r2, r2, #26
 8009084:	d42d      	bmi.n	80090e2 <_printf_common+0xbe>
 8009086:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800908a:	4639      	mov	r1, r7
 800908c:	4630      	mov	r0, r6
 800908e:	47c0      	blx	r8
 8009090:	3001      	adds	r0, #1
 8009092:	d020      	beq.n	80090d6 <_printf_common+0xb2>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	68e5      	ldr	r5, [r4, #12]
 8009098:	f8d9 2000 	ldr.w	r2, [r9]
 800909c:	f003 0306 	and.w	r3, r3, #6
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	bf08      	it	eq
 80090a4:	1aad      	subeq	r5, r5, r2
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	6922      	ldr	r2, [r4, #16]
 80090aa:	bf0c      	ite	eq
 80090ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090b0:	2500      	movne	r5, #0
 80090b2:	4293      	cmp	r3, r2
 80090b4:	bfc4      	itt	gt
 80090b6:	1a9b      	subgt	r3, r3, r2
 80090b8:	18ed      	addgt	r5, r5, r3
 80090ba:	f04f 0900 	mov.w	r9, #0
 80090be:	341a      	adds	r4, #26
 80090c0:	454d      	cmp	r5, r9
 80090c2:	d11a      	bne.n	80090fa <_printf_common+0xd6>
 80090c4:	2000      	movs	r0, #0
 80090c6:	e008      	b.n	80090da <_printf_common+0xb6>
 80090c8:	2301      	movs	r3, #1
 80090ca:	4652      	mov	r2, sl
 80090cc:	4639      	mov	r1, r7
 80090ce:	4630      	mov	r0, r6
 80090d0:	47c0      	blx	r8
 80090d2:	3001      	adds	r0, #1
 80090d4:	d103      	bne.n	80090de <_printf_common+0xba>
 80090d6:	f04f 30ff 	mov.w	r0, #4294967295
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	3501      	adds	r5, #1
 80090e0:	e7c3      	b.n	800906a <_printf_common+0x46>
 80090e2:	18e1      	adds	r1, r4, r3
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	2030      	movs	r0, #48	; 0x30
 80090e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090ec:	4422      	add	r2, r4
 80090ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090f6:	3302      	adds	r3, #2
 80090f8:	e7c5      	b.n	8009086 <_printf_common+0x62>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4622      	mov	r2, r4
 80090fe:	4639      	mov	r1, r7
 8009100:	4630      	mov	r0, r6
 8009102:	47c0      	blx	r8
 8009104:	3001      	adds	r0, #1
 8009106:	d0e6      	beq.n	80090d6 <_printf_common+0xb2>
 8009108:	f109 0901 	add.w	r9, r9, #1
 800910c:	e7d8      	b.n	80090c0 <_printf_common+0x9c>
	...

08009110 <_printf_i>:
 8009110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009114:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009118:	460c      	mov	r4, r1
 800911a:	7e09      	ldrb	r1, [r1, #24]
 800911c:	b085      	sub	sp, #20
 800911e:	296e      	cmp	r1, #110	; 0x6e
 8009120:	4617      	mov	r7, r2
 8009122:	4606      	mov	r6, r0
 8009124:	4698      	mov	r8, r3
 8009126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009128:	f000 80b3 	beq.w	8009292 <_printf_i+0x182>
 800912c:	d822      	bhi.n	8009174 <_printf_i+0x64>
 800912e:	2963      	cmp	r1, #99	; 0x63
 8009130:	d036      	beq.n	80091a0 <_printf_i+0x90>
 8009132:	d80a      	bhi.n	800914a <_printf_i+0x3a>
 8009134:	2900      	cmp	r1, #0
 8009136:	f000 80b9 	beq.w	80092ac <_printf_i+0x19c>
 800913a:	2958      	cmp	r1, #88	; 0x58
 800913c:	f000 8083 	beq.w	8009246 <_printf_i+0x136>
 8009140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009144:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009148:	e032      	b.n	80091b0 <_printf_i+0xa0>
 800914a:	2964      	cmp	r1, #100	; 0x64
 800914c:	d001      	beq.n	8009152 <_printf_i+0x42>
 800914e:	2969      	cmp	r1, #105	; 0x69
 8009150:	d1f6      	bne.n	8009140 <_printf_i+0x30>
 8009152:	6820      	ldr	r0, [r4, #0]
 8009154:	6813      	ldr	r3, [r2, #0]
 8009156:	0605      	lsls	r5, r0, #24
 8009158:	f103 0104 	add.w	r1, r3, #4
 800915c:	d52a      	bpl.n	80091b4 <_printf_i+0xa4>
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6011      	str	r1, [r2, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	da03      	bge.n	800916e <_printf_i+0x5e>
 8009166:	222d      	movs	r2, #45	; 0x2d
 8009168:	425b      	negs	r3, r3
 800916a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800916e:	486f      	ldr	r0, [pc, #444]	; (800932c <_printf_i+0x21c>)
 8009170:	220a      	movs	r2, #10
 8009172:	e039      	b.n	80091e8 <_printf_i+0xd8>
 8009174:	2973      	cmp	r1, #115	; 0x73
 8009176:	f000 809d 	beq.w	80092b4 <_printf_i+0x1a4>
 800917a:	d808      	bhi.n	800918e <_printf_i+0x7e>
 800917c:	296f      	cmp	r1, #111	; 0x6f
 800917e:	d020      	beq.n	80091c2 <_printf_i+0xb2>
 8009180:	2970      	cmp	r1, #112	; 0x70
 8009182:	d1dd      	bne.n	8009140 <_printf_i+0x30>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	f043 0320 	orr.w	r3, r3, #32
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	e003      	b.n	8009196 <_printf_i+0x86>
 800918e:	2975      	cmp	r1, #117	; 0x75
 8009190:	d017      	beq.n	80091c2 <_printf_i+0xb2>
 8009192:	2978      	cmp	r1, #120	; 0x78
 8009194:	d1d4      	bne.n	8009140 <_printf_i+0x30>
 8009196:	2378      	movs	r3, #120	; 0x78
 8009198:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800919c:	4864      	ldr	r0, [pc, #400]	; (8009330 <_printf_i+0x220>)
 800919e:	e055      	b.n	800924c <_printf_i+0x13c>
 80091a0:	6813      	ldr	r3, [r2, #0]
 80091a2:	1d19      	adds	r1, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6011      	str	r1, [r2, #0]
 80091a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091b0:	2301      	movs	r3, #1
 80091b2:	e08c      	b.n	80092ce <_printf_i+0x1be>
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6011      	str	r1, [r2, #0]
 80091b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091bc:	bf18      	it	ne
 80091be:	b21b      	sxthne	r3, r3
 80091c0:	e7cf      	b.n	8009162 <_printf_i+0x52>
 80091c2:	6813      	ldr	r3, [r2, #0]
 80091c4:	6825      	ldr	r5, [r4, #0]
 80091c6:	1d18      	adds	r0, r3, #4
 80091c8:	6010      	str	r0, [r2, #0]
 80091ca:	0628      	lsls	r0, r5, #24
 80091cc:	d501      	bpl.n	80091d2 <_printf_i+0xc2>
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	e002      	b.n	80091d8 <_printf_i+0xc8>
 80091d2:	0668      	lsls	r0, r5, #25
 80091d4:	d5fb      	bpl.n	80091ce <_printf_i+0xbe>
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	4854      	ldr	r0, [pc, #336]	; (800932c <_printf_i+0x21c>)
 80091da:	296f      	cmp	r1, #111	; 0x6f
 80091dc:	bf14      	ite	ne
 80091de:	220a      	movne	r2, #10
 80091e0:	2208      	moveq	r2, #8
 80091e2:	2100      	movs	r1, #0
 80091e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091e8:	6865      	ldr	r5, [r4, #4]
 80091ea:	60a5      	str	r5, [r4, #8]
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	f2c0 8095 	blt.w	800931c <_printf_i+0x20c>
 80091f2:	6821      	ldr	r1, [r4, #0]
 80091f4:	f021 0104 	bic.w	r1, r1, #4
 80091f8:	6021      	str	r1, [r4, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d13d      	bne.n	800927a <_printf_i+0x16a>
 80091fe:	2d00      	cmp	r5, #0
 8009200:	f040 808e 	bne.w	8009320 <_printf_i+0x210>
 8009204:	4665      	mov	r5, ip
 8009206:	2a08      	cmp	r2, #8
 8009208:	d10b      	bne.n	8009222 <_printf_i+0x112>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	07db      	lsls	r3, r3, #31
 800920e:	d508      	bpl.n	8009222 <_printf_i+0x112>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	6862      	ldr	r2, [r4, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	bfde      	ittt	le
 8009218:	2330      	movle	r3, #48	; 0x30
 800921a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800921e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009222:	ebac 0305 	sub.w	r3, ip, r5
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	f8cd 8000 	str.w	r8, [sp]
 800922c:	463b      	mov	r3, r7
 800922e:	aa03      	add	r2, sp, #12
 8009230:	4621      	mov	r1, r4
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff fef6 	bl	8009024 <_printf_common>
 8009238:	3001      	adds	r0, #1
 800923a:	d14d      	bne.n	80092d8 <_printf_i+0x1c8>
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	b005      	add	sp, #20
 8009242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009246:	4839      	ldr	r0, [pc, #228]	; (800932c <_printf_i+0x21c>)
 8009248:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800924c:	6813      	ldr	r3, [r2, #0]
 800924e:	6821      	ldr	r1, [r4, #0]
 8009250:	1d1d      	adds	r5, r3, #4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6015      	str	r5, [r2, #0]
 8009256:	060a      	lsls	r2, r1, #24
 8009258:	d50b      	bpl.n	8009272 <_printf_i+0x162>
 800925a:	07ca      	lsls	r2, r1, #31
 800925c:	bf44      	itt	mi
 800925e:	f041 0120 	orrmi.w	r1, r1, #32
 8009262:	6021      	strmi	r1, [r4, #0]
 8009264:	b91b      	cbnz	r3, 800926e <_printf_i+0x15e>
 8009266:	6822      	ldr	r2, [r4, #0]
 8009268:	f022 0220 	bic.w	r2, r2, #32
 800926c:	6022      	str	r2, [r4, #0]
 800926e:	2210      	movs	r2, #16
 8009270:	e7b7      	b.n	80091e2 <_printf_i+0xd2>
 8009272:	064d      	lsls	r5, r1, #25
 8009274:	bf48      	it	mi
 8009276:	b29b      	uxthmi	r3, r3
 8009278:	e7ef      	b.n	800925a <_printf_i+0x14a>
 800927a:	4665      	mov	r5, ip
 800927c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009280:	fb02 3311 	mls	r3, r2, r1, r3
 8009284:	5cc3      	ldrb	r3, [r0, r3]
 8009286:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800928a:	460b      	mov	r3, r1
 800928c:	2900      	cmp	r1, #0
 800928e:	d1f5      	bne.n	800927c <_printf_i+0x16c>
 8009290:	e7b9      	b.n	8009206 <_printf_i+0xf6>
 8009292:	6813      	ldr	r3, [r2, #0]
 8009294:	6825      	ldr	r5, [r4, #0]
 8009296:	6961      	ldr	r1, [r4, #20]
 8009298:	1d18      	adds	r0, r3, #4
 800929a:	6010      	str	r0, [r2, #0]
 800929c:	0628      	lsls	r0, r5, #24
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	d501      	bpl.n	80092a6 <_printf_i+0x196>
 80092a2:	6019      	str	r1, [r3, #0]
 80092a4:	e002      	b.n	80092ac <_printf_i+0x19c>
 80092a6:	066a      	lsls	r2, r5, #25
 80092a8:	d5fb      	bpl.n	80092a2 <_printf_i+0x192>
 80092aa:	8019      	strh	r1, [r3, #0]
 80092ac:	2300      	movs	r3, #0
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	4665      	mov	r5, ip
 80092b2:	e7b9      	b.n	8009228 <_printf_i+0x118>
 80092b4:	6813      	ldr	r3, [r2, #0]
 80092b6:	1d19      	adds	r1, r3, #4
 80092b8:	6011      	str	r1, [r2, #0]
 80092ba:	681d      	ldr	r5, [r3, #0]
 80092bc:	6862      	ldr	r2, [r4, #4]
 80092be:	2100      	movs	r1, #0
 80092c0:	4628      	mov	r0, r5
 80092c2:	f7f6 ff8d 	bl	80001e0 <memchr>
 80092c6:	b108      	cbz	r0, 80092cc <_printf_i+0x1bc>
 80092c8:	1b40      	subs	r0, r0, r5
 80092ca:	6060      	str	r0, [r4, #4]
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	2300      	movs	r3, #0
 80092d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d6:	e7a7      	b.n	8009228 <_printf_i+0x118>
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	462a      	mov	r2, r5
 80092dc:	4639      	mov	r1, r7
 80092de:	4630      	mov	r0, r6
 80092e0:	47c0      	blx	r8
 80092e2:	3001      	adds	r0, #1
 80092e4:	d0aa      	beq.n	800923c <_printf_i+0x12c>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	079b      	lsls	r3, r3, #30
 80092ea:	d413      	bmi.n	8009314 <_printf_i+0x204>
 80092ec:	68e0      	ldr	r0, [r4, #12]
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	4298      	cmp	r0, r3
 80092f2:	bfb8      	it	lt
 80092f4:	4618      	movlt	r0, r3
 80092f6:	e7a3      	b.n	8009240 <_printf_i+0x130>
 80092f8:	2301      	movs	r3, #1
 80092fa:	464a      	mov	r2, r9
 80092fc:	4639      	mov	r1, r7
 80092fe:	4630      	mov	r0, r6
 8009300:	47c0      	blx	r8
 8009302:	3001      	adds	r0, #1
 8009304:	d09a      	beq.n	800923c <_printf_i+0x12c>
 8009306:	3501      	adds	r5, #1
 8009308:	68e3      	ldr	r3, [r4, #12]
 800930a:	9a03      	ldr	r2, [sp, #12]
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	42ab      	cmp	r3, r5
 8009310:	dcf2      	bgt.n	80092f8 <_printf_i+0x1e8>
 8009312:	e7eb      	b.n	80092ec <_printf_i+0x1dc>
 8009314:	2500      	movs	r5, #0
 8009316:	f104 0919 	add.w	r9, r4, #25
 800931a:	e7f5      	b.n	8009308 <_printf_i+0x1f8>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1ac      	bne.n	800927a <_printf_i+0x16a>
 8009320:	7803      	ldrb	r3, [r0, #0]
 8009322:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009326:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800932a:	e76c      	b.n	8009206 <_printf_i+0xf6>
 800932c:	0800b15e 	.word	0x0800b15e
 8009330:	0800b16f 	.word	0x0800b16f

08009334 <siprintf>:
 8009334:	b40e      	push	{r1, r2, r3}
 8009336:	b500      	push	{lr}
 8009338:	b09c      	sub	sp, #112	; 0x70
 800933a:	ab1d      	add	r3, sp, #116	; 0x74
 800933c:	9002      	str	r0, [sp, #8]
 800933e:	9006      	str	r0, [sp, #24]
 8009340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009344:	4809      	ldr	r0, [pc, #36]	; (800936c <siprintf+0x38>)
 8009346:	9107      	str	r1, [sp, #28]
 8009348:	9104      	str	r1, [sp, #16]
 800934a:	4909      	ldr	r1, [pc, #36]	; (8009370 <siprintf+0x3c>)
 800934c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009350:	9105      	str	r1, [sp, #20]
 8009352:	6800      	ldr	r0, [r0, #0]
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	a902      	add	r1, sp, #8
 8009358:	f001 fa54 	bl	800a804 <_svfiprintf_r>
 800935c:	9b02      	ldr	r3, [sp, #8]
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]
 8009362:	b01c      	add	sp, #112	; 0x70
 8009364:	f85d eb04 	ldr.w	lr, [sp], #4
 8009368:	b003      	add	sp, #12
 800936a:	4770      	bx	lr
 800936c:	20000010 	.word	0x20000010
 8009370:	ffff0208 	.word	0xffff0208

08009374 <quorem>:
 8009374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	6903      	ldr	r3, [r0, #16]
 800937a:	690c      	ldr	r4, [r1, #16]
 800937c:	42a3      	cmp	r3, r4
 800937e:	4680      	mov	r8, r0
 8009380:	f2c0 8082 	blt.w	8009488 <quorem+0x114>
 8009384:	3c01      	subs	r4, #1
 8009386:	f101 0714 	add.w	r7, r1, #20
 800938a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800938e:	f100 0614 	add.w	r6, r0, #20
 8009392:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009396:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800939a:	eb06 030c 	add.w	r3, r6, ip
 800939e:	3501      	adds	r5, #1
 80093a0:	eb07 090c 	add.w	r9, r7, ip
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80093aa:	b395      	cbz	r5, 8009412 <quorem+0x9e>
 80093ac:	f04f 0a00 	mov.w	sl, #0
 80093b0:	4638      	mov	r0, r7
 80093b2:	46b6      	mov	lr, r6
 80093b4:	46d3      	mov	fp, sl
 80093b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80093ba:	b293      	uxth	r3, r2
 80093bc:	fb05 a303 	mla	r3, r5, r3, sl
 80093c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	ebab 0303 	sub.w	r3, fp, r3
 80093ca:	0c12      	lsrs	r2, r2, #16
 80093cc:	f8de b000 	ldr.w	fp, [lr]
 80093d0:	fb05 a202 	mla	r2, r5, r2, sl
 80093d4:	fa13 f38b 	uxtah	r3, r3, fp
 80093d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80093dc:	fa1f fb82 	uxth.w	fp, r2
 80093e0:	f8de 2000 	ldr.w	r2, [lr]
 80093e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80093e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f2:	4581      	cmp	r9, r0
 80093f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80093f8:	f84e 3b04 	str.w	r3, [lr], #4
 80093fc:	d2db      	bcs.n	80093b6 <quorem+0x42>
 80093fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8009402:	b933      	cbnz	r3, 8009412 <quorem+0x9e>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	3b04      	subs	r3, #4
 8009408:	429e      	cmp	r6, r3
 800940a:	461a      	mov	r2, r3
 800940c:	d330      	bcc.n	8009470 <quorem+0xfc>
 800940e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009412:	4640      	mov	r0, r8
 8009414:	f001 f820 	bl	800a458 <__mcmp>
 8009418:	2800      	cmp	r0, #0
 800941a:	db25      	blt.n	8009468 <quorem+0xf4>
 800941c:	3501      	adds	r5, #1
 800941e:	4630      	mov	r0, r6
 8009420:	f04f 0c00 	mov.w	ip, #0
 8009424:	f857 2b04 	ldr.w	r2, [r7], #4
 8009428:	f8d0 e000 	ldr.w	lr, [r0]
 800942c:	b293      	uxth	r3, r2
 800942e:	ebac 0303 	sub.w	r3, ip, r3
 8009432:	0c12      	lsrs	r2, r2, #16
 8009434:	fa13 f38e 	uxtah	r3, r3, lr
 8009438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800943c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009440:	b29b      	uxth	r3, r3
 8009442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009446:	45b9      	cmp	r9, r7
 8009448:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800944c:	f840 3b04 	str.w	r3, [r0], #4
 8009450:	d2e8      	bcs.n	8009424 <quorem+0xb0>
 8009452:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009456:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800945a:	b92a      	cbnz	r2, 8009468 <quorem+0xf4>
 800945c:	3b04      	subs	r3, #4
 800945e:	429e      	cmp	r6, r3
 8009460:	461a      	mov	r2, r3
 8009462:	d30b      	bcc.n	800947c <quorem+0x108>
 8009464:	f8c8 4010 	str.w	r4, [r8, #16]
 8009468:	4628      	mov	r0, r5
 800946a:	b003      	add	sp, #12
 800946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009470:	6812      	ldr	r2, [r2, #0]
 8009472:	3b04      	subs	r3, #4
 8009474:	2a00      	cmp	r2, #0
 8009476:	d1ca      	bne.n	800940e <quorem+0x9a>
 8009478:	3c01      	subs	r4, #1
 800947a:	e7c5      	b.n	8009408 <quorem+0x94>
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	3b04      	subs	r3, #4
 8009480:	2a00      	cmp	r2, #0
 8009482:	d1ef      	bne.n	8009464 <quorem+0xf0>
 8009484:	3c01      	subs	r4, #1
 8009486:	e7ea      	b.n	800945e <quorem+0xea>
 8009488:	2000      	movs	r0, #0
 800948a:	e7ee      	b.n	800946a <quorem+0xf6>
 800948c:	0000      	movs	r0, r0
	...

08009490 <_dtoa_r>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	ec57 6b10 	vmov	r6, r7, d0
 8009498:	b097      	sub	sp, #92	; 0x5c
 800949a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800949c:	9106      	str	r1, [sp, #24]
 800949e:	4604      	mov	r4, r0
 80094a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80094a2:	9312      	str	r3, [sp, #72]	; 0x48
 80094a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094a8:	e9cd 6700 	strd	r6, r7, [sp]
 80094ac:	b93d      	cbnz	r5, 80094be <_dtoa_r+0x2e>
 80094ae:	2010      	movs	r0, #16
 80094b0:	f000 fdb4 	bl	800a01c <malloc>
 80094b4:	6260      	str	r0, [r4, #36]	; 0x24
 80094b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094ba:	6005      	str	r5, [r0, #0]
 80094bc:	60c5      	str	r5, [r0, #12]
 80094be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c0:	6819      	ldr	r1, [r3, #0]
 80094c2:	b151      	cbz	r1, 80094da <_dtoa_r+0x4a>
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	604a      	str	r2, [r1, #4]
 80094c8:	2301      	movs	r3, #1
 80094ca:	4093      	lsls	r3, r2
 80094cc:	608b      	str	r3, [r1, #8]
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fde0 	bl	800a094 <_Bfree>
 80094d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	1e3b      	subs	r3, r7, #0
 80094dc:	bfbb      	ittet	lt
 80094de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80094e2:	9301      	strlt	r3, [sp, #4]
 80094e4:	2300      	movge	r3, #0
 80094e6:	2201      	movlt	r2, #1
 80094e8:	bfac      	ite	ge
 80094ea:	f8c8 3000 	strge.w	r3, [r8]
 80094ee:	f8c8 2000 	strlt.w	r2, [r8]
 80094f2:	4baf      	ldr	r3, [pc, #700]	; (80097b0 <_dtoa_r+0x320>)
 80094f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094f8:	ea33 0308 	bics.w	r3, r3, r8
 80094fc:	d114      	bne.n	8009528 <_dtoa_r+0x98>
 80094fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009500:	f242 730f 	movw	r3, #9999	; 0x270f
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	9b00      	ldr	r3, [sp, #0]
 8009508:	b923      	cbnz	r3, 8009514 <_dtoa_r+0x84>
 800950a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800950e:	2800      	cmp	r0, #0
 8009510:	f000 8542 	beq.w	8009f98 <_dtoa_r+0xb08>
 8009514:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009516:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80097c4 <_dtoa_r+0x334>
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8544 	beq.w	8009fa8 <_dtoa_r+0xb18>
 8009520:	f10b 0303 	add.w	r3, fp, #3
 8009524:	f000 bd3e 	b.w	8009fa4 <_dtoa_r+0xb14>
 8009528:	e9dd 6700 	ldrd	r6, r7, [sp]
 800952c:	2200      	movs	r2, #0
 800952e:	2300      	movs	r3, #0
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009538:	4681      	mov	r9, r0
 800953a:	b168      	cbz	r0, 8009558 <_dtoa_r+0xc8>
 800953c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800953e:	2301      	movs	r3, #1
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8524 	beq.w	8009f92 <_dtoa_r+0xb02>
 800954a:	4b9a      	ldr	r3, [pc, #616]	; (80097b4 <_dtoa_r+0x324>)
 800954c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800954e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	f000 bd28 	b.w	8009fa8 <_dtoa_r+0xb18>
 8009558:	aa14      	add	r2, sp, #80	; 0x50
 800955a:	a915      	add	r1, sp, #84	; 0x54
 800955c:	ec47 6b10 	vmov	d0, r6, r7
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fff0 	bl	800a546 <__d2b>
 8009566:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800956a:	9004      	str	r0, [sp, #16]
 800956c:	2d00      	cmp	r5, #0
 800956e:	d07c      	beq.n	800966a <_dtoa_r+0x1da>
 8009570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009574:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009578:	46b2      	mov	sl, r6
 800957a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800957e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009582:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009586:	2200      	movs	r2, #0
 8009588:	4b8b      	ldr	r3, [pc, #556]	; (80097b8 <_dtoa_r+0x328>)
 800958a:	4650      	mov	r0, sl
 800958c:	4659      	mov	r1, fp
 800958e:	f7f6 fe7b 	bl	8000288 <__aeabi_dsub>
 8009592:	a381      	add	r3, pc, #516	; (adr r3, 8009798 <_dtoa_r+0x308>)
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	f7f7 f82e 	bl	80005f8 <__aeabi_dmul>
 800959c:	a380      	add	r3, pc, #512	; (adr r3, 80097a0 <_dtoa_r+0x310>)
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	f7f6 fe73 	bl	800028c <__adddf3>
 80095a6:	4606      	mov	r6, r0
 80095a8:	4628      	mov	r0, r5
 80095aa:	460f      	mov	r7, r1
 80095ac:	f7f6 ffba 	bl	8000524 <__aeabi_i2d>
 80095b0:	a37d      	add	r3, pc, #500	; (adr r3, 80097a8 <_dtoa_r+0x318>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f7f7 f81f 	bl	80005f8 <__aeabi_dmul>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4630      	mov	r0, r6
 80095c0:	4639      	mov	r1, r7
 80095c2:	f7f6 fe63 	bl	800028c <__adddf3>
 80095c6:	4606      	mov	r6, r0
 80095c8:	460f      	mov	r7, r1
 80095ca:	f7f7 fac5 	bl	8000b58 <__aeabi_d2iz>
 80095ce:	2200      	movs	r2, #0
 80095d0:	4682      	mov	sl, r0
 80095d2:	2300      	movs	r3, #0
 80095d4:	4630      	mov	r0, r6
 80095d6:	4639      	mov	r1, r7
 80095d8:	f7f7 fa80 	bl	8000adc <__aeabi_dcmplt>
 80095dc:	b148      	cbz	r0, 80095f2 <_dtoa_r+0x162>
 80095de:	4650      	mov	r0, sl
 80095e0:	f7f6 ffa0 	bl	8000524 <__aeabi_i2d>
 80095e4:	4632      	mov	r2, r6
 80095e6:	463b      	mov	r3, r7
 80095e8:	f7f7 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80095ec:	b908      	cbnz	r0, 80095f2 <_dtoa_r+0x162>
 80095ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095f2:	f1ba 0f16 	cmp.w	sl, #22
 80095f6:	d859      	bhi.n	80096ac <_dtoa_r+0x21c>
 80095f8:	4970      	ldr	r1, [pc, #448]	; (80097bc <_dtoa_r+0x32c>)
 80095fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80095fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009606:	f7f7 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800960a:	2800      	cmp	r0, #0
 800960c:	d050      	beq.n	80096b0 <_dtoa_r+0x220>
 800960e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009612:	2300      	movs	r3, #0
 8009614:	930f      	str	r3, [sp, #60]	; 0x3c
 8009616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009618:	1b5d      	subs	r5, r3, r5
 800961a:	f1b5 0801 	subs.w	r8, r5, #1
 800961e:	bf49      	itett	mi
 8009620:	f1c5 0301 	rsbmi	r3, r5, #1
 8009624:	2300      	movpl	r3, #0
 8009626:	9305      	strmi	r3, [sp, #20]
 8009628:	f04f 0800 	movmi.w	r8, #0
 800962c:	bf58      	it	pl
 800962e:	9305      	strpl	r3, [sp, #20]
 8009630:	f1ba 0f00 	cmp.w	sl, #0
 8009634:	db3e      	blt.n	80096b4 <_dtoa_r+0x224>
 8009636:	2300      	movs	r3, #0
 8009638:	44d0      	add	r8, sl
 800963a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	9b06      	ldr	r3, [sp, #24]
 8009642:	2b09      	cmp	r3, #9
 8009644:	f200 8090 	bhi.w	8009768 <_dtoa_r+0x2d8>
 8009648:	2b05      	cmp	r3, #5
 800964a:	bfc4      	itt	gt
 800964c:	3b04      	subgt	r3, #4
 800964e:	9306      	strgt	r3, [sp, #24]
 8009650:	9b06      	ldr	r3, [sp, #24]
 8009652:	f1a3 0302 	sub.w	r3, r3, #2
 8009656:	bfcc      	ite	gt
 8009658:	2500      	movgt	r5, #0
 800965a:	2501      	movle	r5, #1
 800965c:	2b03      	cmp	r3, #3
 800965e:	f200 808f 	bhi.w	8009780 <_dtoa_r+0x2f0>
 8009662:	e8df f003 	tbb	[pc, r3]
 8009666:	7f7d      	.short	0x7f7d
 8009668:	7131      	.short	0x7131
 800966a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800966e:	441d      	add	r5, r3
 8009670:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009674:	2820      	cmp	r0, #32
 8009676:	dd13      	ble.n	80096a0 <_dtoa_r+0x210>
 8009678:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800967c:	9b00      	ldr	r3, [sp, #0]
 800967e:	fa08 f800 	lsl.w	r8, r8, r0
 8009682:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009686:	fa23 f000 	lsr.w	r0, r3, r0
 800968a:	ea48 0000 	orr.w	r0, r8, r0
 800968e:	f7f6 ff39 	bl	8000504 <__aeabi_ui2d>
 8009692:	2301      	movs	r3, #1
 8009694:	4682      	mov	sl, r0
 8009696:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800969a:	3d01      	subs	r5, #1
 800969c:	9313      	str	r3, [sp, #76]	; 0x4c
 800969e:	e772      	b.n	8009586 <_dtoa_r+0xf6>
 80096a0:	9b00      	ldr	r3, [sp, #0]
 80096a2:	f1c0 0020 	rsb	r0, r0, #32
 80096a6:	fa03 f000 	lsl.w	r0, r3, r0
 80096aa:	e7f0      	b.n	800968e <_dtoa_r+0x1fe>
 80096ac:	2301      	movs	r3, #1
 80096ae:	e7b1      	b.n	8009614 <_dtoa_r+0x184>
 80096b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80096b2:	e7b0      	b.n	8009616 <_dtoa_r+0x186>
 80096b4:	9b05      	ldr	r3, [sp, #20]
 80096b6:	eba3 030a 	sub.w	r3, r3, sl
 80096ba:	9305      	str	r3, [sp, #20]
 80096bc:	f1ca 0300 	rsb	r3, sl, #0
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	2300      	movs	r3, #0
 80096c4:	930e      	str	r3, [sp, #56]	; 0x38
 80096c6:	e7bb      	b.n	8009640 <_dtoa_r+0x1b0>
 80096c8:	2301      	movs	r3, #1
 80096ca:	930a      	str	r3, [sp, #40]	; 0x28
 80096cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dd59      	ble.n	8009786 <_dtoa_r+0x2f6>
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	4699      	mov	r9, r3
 80096d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80096d8:	2200      	movs	r2, #0
 80096da:	6072      	str	r2, [r6, #4]
 80096dc:	2204      	movs	r2, #4
 80096de:	f102 0014 	add.w	r0, r2, #20
 80096e2:	4298      	cmp	r0, r3
 80096e4:	6871      	ldr	r1, [r6, #4]
 80096e6:	d953      	bls.n	8009790 <_dtoa_r+0x300>
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fc9f 	bl	800a02c <_Balloc>
 80096ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096f0:	6030      	str	r0, [r6, #0]
 80096f2:	f1b9 0f0e 	cmp.w	r9, #14
 80096f6:	f8d3 b000 	ldr.w	fp, [r3]
 80096fa:	f200 80e6 	bhi.w	80098ca <_dtoa_r+0x43a>
 80096fe:	2d00      	cmp	r5, #0
 8009700:	f000 80e3 	beq.w	80098ca <_dtoa_r+0x43a>
 8009704:	ed9d 7b00 	vldr	d7, [sp]
 8009708:	f1ba 0f00 	cmp.w	sl, #0
 800970c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009710:	dd74      	ble.n	80097fc <_dtoa_r+0x36c>
 8009712:	4a2a      	ldr	r2, [pc, #168]	; (80097bc <_dtoa_r+0x32c>)
 8009714:	f00a 030f 	and.w	r3, sl, #15
 8009718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800971c:	ed93 7b00 	vldr	d7, [r3]
 8009720:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009724:	06f0      	lsls	r0, r6, #27
 8009726:	ed8d 7b08 	vstr	d7, [sp, #32]
 800972a:	d565      	bpl.n	80097f8 <_dtoa_r+0x368>
 800972c:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <_dtoa_r+0x330>)
 800972e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009732:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009736:	f7f7 f889 	bl	800084c <__aeabi_ddiv>
 800973a:	e9cd 0100 	strd	r0, r1, [sp]
 800973e:	f006 060f 	and.w	r6, r6, #15
 8009742:	2503      	movs	r5, #3
 8009744:	4f1e      	ldr	r7, [pc, #120]	; (80097c0 <_dtoa_r+0x330>)
 8009746:	e04c      	b.n	80097e2 <_dtoa_r+0x352>
 8009748:	2301      	movs	r3, #1
 800974a:	930a      	str	r3, [sp, #40]	; 0x28
 800974c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800974e:	4453      	add	r3, sl
 8009750:	f103 0901 	add.w	r9, r3, #1
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	464b      	mov	r3, r9
 8009758:	2b01      	cmp	r3, #1
 800975a:	bfb8      	it	lt
 800975c:	2301      	movlt	r3, #1
 800975e:	e7ba      	b.n	80096d6 <_dtoa_r+0x246>
 8009760:	2300      	movs	r3, #0
 8009762:	e7b2      	b.n	80096ca <_dtoa_r+0x23a>
 8009764:	2300      	movs	r3, #0
 8009766:	e7f0      	b.n	800974a <_dtoa_r+0x2ba>
 8009768:	2501      	movs	r5, #1
 800976a:	2300      	movs	r3, #0
 800976c:	9306      	str	r3, [sp, #24]
 800976e:	950a      	str	r5, [sp, #40]	; 0x28
 8009770:	f04f 33ff 	mov.w	r3, #4294967295
 8009774:	9302      	str	r3, [sp, #8]
 8009776:	4699      	mov	r9, r3
 8009778:	2200      	movs	r2, #0
 800977a:	2312      	movs	r3, #18
 800977c:	920b      	str	r2, [sp, #44]	; 0x2c
 800977e:	e7aa      	b.n	80096d6 <_dtoa_r+0x246>
 8009780:	2301      	movs	r3, #1
 8009782:	930a      	str	r3, [sp, #40]	; 0x28
 8009784:	e7f4      	b.n	8009770 <_dtoa_r+0x2e0>
 8009786:	2301      	movs	r3, #1
 8009788:	9302      	str	r3, [sp, #8]
 800978a:	4699      	mov	r9, r3
 800978c:	461a      	mov	r2, r3
 800978e:	e7f5      	b.n	800977c <_dtoa_r+0x2ec>
 8009790:	3101      	adds	r1, #1
 8009792:	6071      	str	r1, [r6, #4]
 8009794:	0052      	lsls	r2, r2, #1
 8009796:	e7a2      	b.n	80096de <_dtoa_r+0x24e>
 8009798:	636f4361 	.word	0x636f4361
 800979c:	3fd287a7 	.word	0x3fd287a7
 80097a0:	8b60c8b3 	.word	0x8b60c8b3
 80097a4:	3fc68a28 	.word	0x3fc68a28
 80097a8:	509f79fb 	.word	0x509f79fb
 80097ac:	3fd34413 	.word	0x3fd34413
 80097b0:	7ff00000 	.word	0x7ff00000
 80097b4:	0800b15d 	.word	0x0800b15d
 80097b8:	3ff80000 	.word	0x3ff80000
 80097bc:	0800b1b8 	.word	0x0800b1b8
 80097c0:	0800b190 	.word	0x0800b190
 80097c4:	0800b189 	.word	0x0800b189
 80097c8:	07f1      	lsls	r1, r6, #31
 80097ca:	d508      	bpl.n	80097de <_dtoa_r+0x34e>
 80097cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d4:	f7f6 ff10 	bl	80005f8 <__aeabi_dmul>
 80097d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097dc:	3501      	adds	r5, #1
 80097de:	1076      	asrs	r6, r6, #1
 80097e0:	3708      	adds	r7, #8
 80097e2:	2e00      	cmp	r6, #0
 80097e4:	d1f0      	bne.n	80097c8 <_dtoa_r+0x338>
 80097e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80097ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ee:	f7f7 f82d 	bl	800084c <__aeabi_ddiv>
 80097f2:	e9cd 0100 	strd	r0, r1, [sp]
 80097f6:	e01a      	b.n	800982e <_dtoa_r+0x39e>
 80097f8:	2502      	movs	r5, #2
 80097fa:	e7a3      	b.n	8009744 <_dtoa_r+0x2b4>
 80097fc:	f000 80a0 	beq.w	8009940 <_dtoa_r+0x4b0>
 8009800:	f1ca 0600 	rsb	r6, sl, #0
 8009804:	4b9f      	ldr	r3, [pc, #636]	; (8009a84 <_dtoa_r+0x5f4>)
 8009806:	4fa0      	ldr	r7, [pc, #640]	; (8009a88 <_dtoa_r+0x5f8>)
 8009808:	f006 020f 	and.w	r2, r6, #15
 800980c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009818:	f7f6 feee 	bl	80005f8 <__aeabi_dmul>
 800981c:	e9cd 0100 	strd	r0, r1, [sp]
 8009820:	1136      	asrs	r6, r6, #4
 8009822:	2300      	movs	r3, #0
 8009824:	2502      	movs	r5, #2
 8009826:	2e00      	cmp	r6, #0
 8009828:	d17f      	bne.n	800992a <_dtoa_r+0x49a>
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e1      	bne.n	80097f2 <_dtoa_r+0x362>
 800982e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 8087 	beq.w	8009944 <_dtoa_r+0x4b4>
 8009836:	e9dd 6700 	ldrd	r6, r7, [sp]
 800983a:	2200      	movs	r2, #0
 800983c:	4b93      	ldr	r3, [pc, #588]	; (8009a8c <_dtoa_r+0x5fc>)
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7f7 f94b 	bl	8000adc <__aeabi_dcmplt>
 8009846:	2800      	cmp	r0, #0
 8009848:	d07c      	beq.n	8009944 <_dtoa_r+0x4b4>
 800984a:	f1b9 0f00 	cmp.w	r9, #0
 800984e:	d079      	beq.n	8009944 <_dtoa_r+0x4b4>
 8009850:	9b02      	ldr	r3, [sp, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	dd35      	ble.n	80098c2 <_dtoa_r+0x432>
 8009856:	f10a 33ff 	add.w	r3, sl, #4294967295
 800985a:	9308      	str	r3, [sp, #32]
 800985c:	4639      	mov	r1, r7
 800985e:	2200      	movs	r2, #0
 8009860:	4b8b      	ldr	r3, [pc, #556]	; (8009a90 <_dtoa_r+0x600>)
 8009862:	4630      	mov	r0, r6
 8009864:	f7f6 fec8 	bl	80005f8 <__aeabi_dmul>
 8009868:	e9cd 0100 	strd	r0, r1, [sp]
 800986c:	9f02      	ldr	r7, [sp, #8]
 800986e:	3501      	adds	r5, #1
 8009870:	4628      	mov	r0, r5
 8009872:	f7f6 fe57 	bl	8000524 <__aeabi_i2d>
 8009876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800987a:	f7f6 febd 	bl	80005f8 <__aeabi_dmul>
 800987e:	2200      	movs	r2, #0
 8009880:	4b84      	ldr	r3, [pc, #528]	; (8009a94 <_dtoa_r+0x604>)
 8009882:	f7f6 fd03 	bl	800028c <__adddf3>
 8009886:	4605      	mov	r5, r0
 8009888:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800988c:	2f00      	cmp	r7, #0
 800988e:	d15d      	bne.n	800994c <_dtoa_r+0x4bc>
 8009890:	2200      	movs	r2, #0
 8009892:	4b81      	ldr	r3, [pc, #516]	; (8009a98 <_dtoa_r+0x608>)
 8009894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009898:	f7f6 fcf6 	bl	8000288 <__aeabi_dsub>
 800989c:	462a      	mov	r2, r5
 800989e:	4633      	mov	r3, r6
 80098a0:	e9cd 0100 	strd	r0, r1, [sp]
 80098a4:	f7f7 f938 	bl	8000b18 <__aeabi_dcmpgt>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	f040 8288 	bne.w	8009dbe <_dtoa_r+0x92e>
 80098ae:	462a      	mov	r2, r5
 80098b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80098b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098b8:	f7f7 f910 	bl	8000adc <__aeabi_dcmplt>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f040 827c 	bne.w	8009dba <_dtoa_r+0x92a>
 80098c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098c6:	e9cd 2300 	strd	r2, r3, [sp]
 80098ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f2c0 8150 	blt.w	8009b72 <_dtoa_r+0x6e2>
 80098d2:	f1ba 0f0e 	cmp.w	sl, #14
 80098d6:	f300 814c 	bgt.w	8009b72 <_dtoa_r+0x6e2>
 80098da:	4b6a      	ldr	r3, [pc, #424]	; (8009a84 <_dtoa_r+0x5f4>)
 80098dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80098e0:	ed93 7b00 	vldr	d7, [r3]
 80098e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098ec:	f280 80d8 	bge.w	8009aa0 <_dtoa_r+0x610>
 80098f0:	f1b9 0f00 	cmp.w	r9, #0
 80098f4:	f300 80d4 	bgt.w	8009aa0 <_dtoa_r+0x610>
 80098f8:	f040 825e 	bne.w	8009db8 <_dtoa_r+0x928>
 80098fc:	2200      	movs	r2, #0
 80098fe:	4b66      	ldr	r3, [pc, #408]	; (8009a98 <_dtoa_r+0x608>)
 8009900:	ec51 0b17 	vmov	r0, r1, d7
 8009904:	f7f6 fe78 	bl	80005f8 <__aeabi_dmul>
 8009908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990c:	f7f7 f8fa 	bl	8000b04 <__aeabi_dcmpge>
 8009910:	464f      	mov	r7, r9
 8009912:	464e      	mov	r6, r9
 8009914:	2800      	cmp	r0, #0
 8009916:	f040 8234 	bne.w	8009d82 <_dtoa_r+0x8f2>
 800991a:	2331      	movs	r3, #49	; 0x31
 800991c:	f10b 0501 	add.w	r5, fp, #1
 8009920:	f88b 3000 	strb.w	r3, [fp]
 8009924:	f10a 0a01 	add.w	sl, sl, #1
 8009928:	e22f      	b.n	8009d8a <_dtoa_r+0x8fa>
 800992a:	07f2      	lsls	r2, r6, #31
 800992c:	d505      	bpl.n	800993a <_dtoa_r+0x4aa>
 800992e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009932:	f7f6 fe61 	bl	80005f8 <__aeabi_dmul>
 8009936:	3501      	adds	r5, #1
 8009938:	2301      	movs	r3, #1
 800993a:	1076      	asrs	r6, r6, #1
 800993c:	3708      	adds	r7, #8
 800993e:	e772      	b.n	8009826 <_dtoa_r+0x396>
 8009940:	2502      	movs	r5, #2
 8009942:	e774      	b.n	800982e <_dtoa_r+0x39e>
 8009944:	f8cd a020 	str.w	sl, [sp, #32]
 8009948:	464f      	mov	r7, r9
 800994a:	e791      	b.n	8009870 <_dtoa_r+0x3e0>
 800994c:	4b4d      	ldr	r3, [pc, #308]	; (8009a84 <_dtoa_r+0x5f4>)
 800994e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009952:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009958:	2b00      	cmp	r3, #0
 800995a:	d047      	beq.n	80099ec <_dtoa_r+0x55c>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	2000      	movs	r0, #0
 8009962:	494e      	ldr	r1, [pc, #312]	; (8009a9c <_dtoa_r+0x60c>)
 8009964:	f7f6 ff72 	bl	800084c <__aeabi_ddiv>
 8009968:	462a      	mov	r2, r5
 800996a:	4633      	mov	r3, r6
 800996c:	f7f6 fc8c 	bl	8000288 <__aeabi_dsub>
 8009970:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009974:	465d      	mov	r5, fp
 8009976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800997a:	f7f7 f8ed 	bl	8000b58 <__aeabi_d2iz>
 800997e:	4606      	mov	r6, r0
 8009980:	f7f6 fdd0 	bl	8000524 <__aeabi_i2d>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	e9dd 0100 	ldrd	r0, r1, [sp]
 800998c:	f7f6 fc7c 	bl	8000288 <__aeabi_dsub>
 8009990:	3630      	adds	r6, #48	; 0x30
 8009992:	f805 6b01 	strb.w	r6, [r5], #1
 8009996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800999a:	e9cd 0100 	strd	r0, r1, [sp]
 800999e:	f7f7 f89d 	bl	8000adc <__aeabi_dcmplt>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d163      	bne.n	8009a6e <_dtoa_r+0x5de>
 80099a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099aa:	2000      	movs	r0, #0
 80099ac:	4937      	ldr	r1, [pc, #220]	; (8009a8c <_dtoa_r+0x5fc>)
 80099ae:	f7f6 fc6b 	bl	8000288 <__aeabi_dsub>
 80099b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099b6:	f7f7 f891 	bl	8000adc <__aeabi_dcmplt>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f040 80b7 	bne.w	8009b2e <_dtoa_r+0x69e>
 80099c0:	eba5 030b 	sub.w	r3, r5, fp
 80099c4:	429f      	cmp	r7, r3
 80099c6:	f77f af7c 	ble.w	80098c2 <_dtoa_r+0x432>
 80099ca:	2200      	movs	r2, #0
 80099cc:	4b30      	ldr	r3, [pc, #192]	; (8009a90 <_dtoa_r+0x600>)
 80099ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099d2:	f7f6 fe11 	bl	80005f8 <__aeabi_dmul>
 80099d6:	2200      	movs	r2, #0
 80099d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099dc:	4b2c      	ldr	r3, [pc, #176]	; (8009a90 <_dtoa_r+0x600>)
 80099de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e2:	f7f6 fe09 	bl	80005f8 <__aeabi_dmul>
 80099e6:	e9cd 0100 	strd	r0, r1, [sp]
 80099ea:	e7c4      	b.n	8009976 <_dtoa_r+0x4e6>
 80099ec:	462a      	mov	r2, r5
 80099ee:	4633      	mov	r3, r6
 80099f0:	f7f6 fe02 	bl	80005f8 <__aeabi_dmul>
 80099f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099f8:	eb0b 0507 	add.w	r5, fp, r7
 80099fc:	465e      	mov	r6, fp
 80099fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a02:	f7f7 f8a9 	bl	8000b58 <__aeabi_d2iz>
 8009a06:	4607      	mov	r7, r0
 8009a08:	f7f6 fd8c 	bl	8000524 <__aeabi_i2d>
 8009a0c:	3730      	adds	r7, #48	; 0x30
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a16:	f7f6 fc37 	bl	8000288 <__aeabi_dsub>
 8009a1a:	f806 7b01 	strb.w	r7, [r6], #1
 8009a1e:	42ae      	cmp	r6, r5
 8009a20:	e9cd 0100 	strd	r0, r1, [sp]
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	d126      	bne.n	8009a78 <_dtoa_r+0x5e8>
 8009a2a:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <_dtoa_r+0x60c>)
 8009a2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a30:	f7f6 fc2c 	bl	800028c <__adddf3>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a3c:	f7f7 f86c 	bl	8000b18 <__aeabi_dcmpgt>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d174      	bne.n	8009b2e <_dtoa_r+0x69e>
 8009a44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4914      	ldr	r1, [pc, #80]	; (8009a9c <_dtoa_r+0x60c>)
 8009a4c:	f7f6 fc1c 	bl	8000288 <__aeabi_dsub>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a58:	f7f7 f840 	bl	8000adc <__aeabi_dcmplt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f43f af30 	beq.w	80098c2 <_dtoa_r+0x432>
 8009a62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a66:	2b30      	cmp	r3, #48	; 0x30
 8009a68:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a6c:	d002      	beq.n	8009a74 <_dtoa_r+0x5e4>
 8009a6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009a72:	e04a      	b.n	8009b0a <_dtoa_r+0x67a>
 8009a74:	4615      	mov	r5, r2
 8009a76:	e7f4      	b.n	8009a62 <_dtoa_r+0x5d2>
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <_dtoa_r+0x600>)
 8009a7a:	f7f6 fdbd 	bl	80005f8 <__aeabi_dmul>
 8009a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8009a82:	e7bc      	b.n	80099fe <_dtoa_r+0x56e>
 8009a84:	0800b1b8 	.word	0x0800b1b8
 8009a88:	0800b190 	.word	0x0800b190
 8009a8c:	3ff00000 	.word	0x3ff00000
 8009a90:	40240000 	.word	0x40240000
 8009a94:	401c0000 	.word	0x401c0000
 8009a98:	40140000 	.word	0x40140000
 8009a9c:	3fe00000 	.word	0x3fe00000
 8009aa0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009aa4:	465d      	mov	r5, fp
 8009aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4639      	mov	r1, r7
 8009aae:	f7f6 fecd 	bl	800084c <__aeabi_ddiv>
 8009ab2:	f7f7 f851 	bl	8000b58 <__aeabi_d2iz>
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	f7f6 fd34 	bl	8000524 <__aeabi_i2d>
 8009abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ac0:	f7f6 fd9a 	bl	80005f8 <__aeabi_dmul>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009ad0:	f7f6 fbda 	bl	8000288 <__aeabi_dsub>
 8009ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ad8:	eba5 060b 	sub.w	r6, r5, fp
 8009adc:	45b1      	cmp	r9, r6
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	d139      	bne.n	8009b58 <_dtoa_r+0x6c8>
 8009ae4:	f7f6 fbd2 	bl	800028c <__adddf3>
 8009ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aec:	4606      	mov	r6, r0
 8009aee:	460f      	mov	r7, r1
 8009af0:	f7f7 f812 	bl	8000b18 <__aeabi_dcmpgt>
 8009af4:	b9c8      	cbnz	r0, 8009b2a <_dtoa_r+0x69a>
 8009af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	f7f6 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b02:	b110      	cbz	r0, 8009b0a <_dtoa_r+0x67a>
 8009b04:	f018 0f01 	tst.w	r8, #1
 8009b08:	d10f      	bne.n	8009b2a <_dtoa_r+0x69a>
 8009b0a:	9904      	ldr	r1, [sp, #16]
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 fac1 	bl	800a094 <_Bfree>
 8009b12:	2300      	movs	r3, #0
 8009b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b16:	702b      	strb	r3, [r5, #0]
 8009b18:	f10a 0301 	add.w	r3, sl, #1
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 8241 	beq.w	8009fa8 <_dtoa_r+0xb18>
 8009b26:	601d      	str	r5, [r3, #0]
 8009b28:	e23e      	b.n	8009fa8 <_dtoa_r+0xb18>
 8009b2a:	f8cd a020 	str.w	sl, [sp, #32]
 8009b2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b32:	2a39      	cmp	r2, #57	; 0x39
 8009b34:	f105 33ff 	add.w	r3, r5, #4294967295
 8009b38:	d108      	bne.n	8009b4c <_dtoa_r+0x6bc>
 8009b3a:	459b      	cmp	fp, r3
 8009b3c:	d10a      	bne.n	8009b54 <_dtoa_r+0x6c4>
 8009b3e:	9b08      	ldr	r3, [sp, #32]
 8009b40:	3301      	adds	r3, #1
 8009b42:	9308      	str	r3, [sp, #32]
 8009b44:	2330      	movs	r3, #48	; 0x30
 8009b46:	f88b 3000 	strb.w	r3, [fp]
 8009b4a:	465b      	mov	r3, fp
 8009b4c:	781a      	ldrb	r2, [r3, #0]
 8009b4e:	3201      	adds	r2, #1
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	e78c      	b.n	8009a6e <_dtoa_r+0x5de>
 8009b54:	461d      	mov	r5, r3
 8009b56:	e7ea      	b.n	8009b2e <_dtoa_r+0x69e>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4b9b      	ldr	r3, [pc, #620]	; (8009dc8 <_dtoa_r+0x938>)
 8009b5c:	f7f6 fd4c 	bl	80005f8 <__aeabi_dmul>
 8009b60:	2200      	movs	r2, #0
 8009b62:	2300      	movs	r3, #0
 8009b64:	4606      	mov	r6, r0
 8009b66:	460f      	mov	r7, r1
 8009b68:	f7f6 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d09a      	beq.n	8009aa6 <_dtoa_r+0x616>
 8009b70:	e7cb      	b.n	8009b0a <_dtoa_r+0x67a>
 8009b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	f000 808b 	beq.w	8009c90 <_dtoa_r+0x800>
 8009b7a:	9a06      	ldr	r2, [sp, #24]
 8009b7c:	2a01      	cmp	r2, #1
 8009b7e:	dc6e      	bgt.n	8009c5e <_dtoa_r+0x7ce>
 8009b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	d067      	beq.n	8009c56 <_dtoa_r+0x7c6>
 8009b86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b8a:	9f07      	ldr	r7, [sp, #28]
 8009b8c:	9d05      	ldr	r5, [sp, #20]
 8009b8e:	9a05      	ldr	r2, [sp, #20]
 8009b90:	2101      	movs	r1, #1
 8009b92:	441a      	add	r2, r3
 8009b94:	4620      	mov	r0, r4
 8009b96:	9205      	str	r2, [sp, #20]
 8009b98:	4498      	add	r8, r3
 8009b9a:	f000 fb1b 	bl	800a1d4 <__i2b>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	2d00      	cmp	r5, #0
 8009ba2:	dd0c      	ble.n	8009bbe <_dtoa_r+0x72e>
 8009ba4:	f1b8 0f00 	cmp.w	r8, #0
 8009ba8:	dd09      	ble.n	8009bbe <_dtoa_r+0x72e>
 8009baa:	4545      	cmp	r5, r8
 8009bac:	9a05      	ldr	r2, [sp, #20]
 8009bae:	462b      	mov	r3, r5
 8009bb0:	bfa8      	it	ge
 8009bb2:	4643      	movge	r3, r8
 8009bb4:	1ad2      	subs	r2, r2, r3
 8009bb6:	9205      	str	r2, [sp, #20]
 8009bb8:	1aed      	subs	r5, r5, r3
 8009bba:	eba8 0803 	sub.w	r8, r8, r3
 8009bbe:	9b07      	ldr	r3, [sp, #28]
 8009bc0:	b1eb      	cbz	r3, 8009bfe <_dtoa_r+0x76e>
 8009bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d067      	beq.n	8009c98 <_dtoa_r+0x808>
 8009bc8:	b18f      	cbz	r7, 8009bee <_dtoa_r+0x75e>
 8009bca:	4631      	mov	r1, r6
 8009bcc:	463a      	mov	r2, r7
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fba0 	bl	800a314 <__pow5mult>
 8009bd4:	9a04      	ldr	r2, [sp, #16]
 8009bd6:	4601      	mov	r1, r0
 8009bd8:	4606      	mov	r6, r0
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fb03 	bl	800a1e6 <__multiply>
 8009be0:	9904      	ldr	r1, [sp, #16]
 8009be2:	9008      	str	r0, [sp, #32]
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 fa55 	bl	800a094 <_Bfree>
 8009bea:	9b08      	ldr	r3, [sp, #32]
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	9b07      	ldr	r3, [sp, #28]
 8009bf0:	1bda      	subs	r2, r3, r7
 8009bf2:	d004      	beq.n	8009bfe <_dtoa_r+0x76e>
 8009bf4:	9904      	ldr	r1, [sp, #16]
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 fb8c 	bl	800a314 <__pow5mult>
 8009bfc:	9004      	str	r0, [sp, #16]
 8009bfe:	2101      	movs	r1, #1
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fae7 	bl	800a1d4 <__i2b>
 8009c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c08:	4607      	mov	r7, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 81d0 	beq.w	8009fb0 <_dtoa_r+0xb20>
 8009c10:	461a      	mov	r2, r3
 8009c12:	4601      	mov	r1, r0
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 fb7d 	bl	800a314 <__pow5mult>
 8009c1a:	9b06      	ldr	r3, [sp, #24]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	4607      	mov	r7, r0
 8009c20:	dc40      	bgt.n	8009ca4 <_dtoa_r+0x814>
 8009c22:	9b00      	ldr	r3, [sp, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d139      	bne.n	8009c9c <_dtoa_r+0x80c>
 8009c28:	9b01      	ldr	r3, [sp, #4]
 8009c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d136      	bne.n	8009ca0 <_dtoa_r+0x810>
 8009c32:	9b01      	ldr	r3, [sp, #4]
 8009c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c38:	0d1b      	lsrs	r3, r3, #20
 8009c3a:	051b      	lsls	r3, r3, #20
 8009c3c:	b12b      	cbz	r3, 8009c4a <_dtoa_r+0x7ba>
 8009c3e:	9b05      	ldr	r3, [sp, #20]
 8009c40:	3301      	adds	r3, #1
 8009c42:	9305      	str	r3, [sp, #20]
 8009c44:	f108 0801 	add.w	r8, r8, #1
 8009c48:	2301      	movs	r3, #1
 8009c4a:	9307      	str	r3, [sp, #28]
 8009c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d12a      	bne.n	8009ca8 <_dtoa_r+0x818>
 8009c52:	2001      	movs	r0, #1
 8009c54:	e030      	b.n	8009cb8 <_dtoa_r+0x828>
 8009c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c5c:	e795      	b.n	8009b8a <_dtoa_r+0x6fa>
 8009c5e:	9b07      	ldr	r3, [sp, #28]
 8009c60:	f109 37ff 	add.w	r7, r9, #4294967295
 8009c64:	42bb      	cmp	r3, r7
 8009c66:	bfbf      	itttt	lt
 8009c68:	9b07      	ldrlt	r3, [sp, #28]
 8009c6a:	9707      	strlt	r7, [sp, #28]
 8009c6c:	1afa      	sublt	r2, r7, r3
 8009c6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c70:	bfbb      	ittet	lt
 8009c72:	189b      	addlt	r3, r3, r2
 8009c74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c76:	1bdf      	subge	r7, r3, r7
 8009c78:	2700      	movlt	r7, #0
 8009c7a:	f1b9 0f00 	cmp.w	r9, #0
 8009c7e:	bfb5      	itete	lt
 8009c80:	9b05      	ldrlt	r3, [sp, #20]
 8009c82:	9d05      	ldrge	r5, [sp, #20]
 8009c84:	eba3 0509 	sublt.w	r5, r3, r9
 8009c88:	464b      	movge	r3, r9
 8009c8a:	bfb8      	it	lt
 8009c8c:	2300      	movlt	r3, #0
 8009c8e:	e77e      	b.n	8009b8e <_dtoa_r+0x6fe>
 8009c90:	9f07      	ldr	r7, [sp, #28]
 8009c92:	9d05      	ldr	r5, [sp, #20]
 8009c94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c96:	e783      	b.n	8009ba0 <_dtoa_r+0x710>
 8009c98:	9a07      	ldr	r2, [sp, #28]
 8009c9a:	e7ab      	b.n	8009bf4 <_dtoa_r+0x764>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e7d4      	b.n	8009c4a <_dtoa_r+0x7ba>
 8009ca0:	9b00      	ldr	r3, [sp, #0]
 8009ca2:	e7d2      	b.n	8009c4a <_dtoa_r+0x7ba>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009cae:	6918      	ldr	r0, [r3, #16]
 8009cb0:	f000 fa42 	bl	800a138 <__hi0bits>
 8009cb4:	f1c0 0020 	rsb	r0, r0, #32
 8009cb8:	4440      	add	r0, r8
 8009cba:	f010 001f 	ands.w	r0, r0, #31
 8009cbe:	d047      	beq.n	8009d50 <_dtoa_r+0x8c0>
 8009cc0:	f1c0 0320 	rsb	r3, r0, #32
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	dd3b      	ble.n	8009d40 <_dtoa_r+0x8b0>
 8009cc8:	9b05      	ldr	r3, [sp, #20]
 8009cca:	f1c0 001c 	rsb	r0, r0, #28
 8009cce:	4403      	add	r3, r0
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	4405      	add	r5, r0
 8009cd4:	4480      	add	r8, r0
 8009cd6:	9b05      	ldr	r3, [sp, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dd05      	ble.n	8009ce8 <_dtoa_r+0x858>
 8009cdc:	461a      	mov	r2, r3
 8009cde:	9904      	ldr	r1, [sp, #16]
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 fb65 	bl	800a3b0 <__lshift>
 8009ce6:	9004      	str	r0, [sp, #16]
 8009ce8:	f1b8 0f00 	cmp.w	r8, #0
 8009cec:	dd05      	ble.n	8009cfa <_dtoa_r+0x86a>
 8009cee:	4639      	mov	r1, r7
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f000 fb5c 	bl	800a3b0 <__lshift>
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cfc:	b353      	cbz	r3, 8009d54 <_dtoa_r+0x8c4>
 8009cfe:	4639      	mov	r1, r7
 8009d00:	9804      	ldr	r0, [sp, #16]
 8009d02:	f000 fba9 	bl	800a458 <__mcmp>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	da24      	bge.n	8009d54 <_dtoa_r+0x8c4>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	220a      	movs	r2, #10
 8009d0e:	9904      	ldr	r1, [sp, #16]
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 f9d6 	bl	800a0c2 <__multadd>
 8009d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d18:	9004      	str	r0, [sp, #16]
 8009d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 814d 	beq.w	8009fbe <_dtoa_r+0xb2e>
 8009d24:	2300      	movs	r3, #0
 8009d26:	4631      	mov	r1, r6
 8009d28:	220a      	movs	r2, #10
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 f9c9 	bl	800a0c2 <__multadd>
 8009d30:	9b02      	ldr	r3, [sp, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	4606      	mov	r6, r0
 8009d36:	dc4f      	bgt.n	8009dd8 <_dtoa_r+0x948>
 8009d38:	9b06      	ldr	r3, [sp, #24]
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	dd4c      	ble.n	8009dd8 <_dtoa_r+0x948>
 8009d3e:	e011      	b.n	8009d64 <_dtoa_r+0x8d4>
 8009d40:	d0c9      	beq.n	8009cd6 <_dtoa_r+0x846>
 8009d42:	9a05      	ldr	r2, [sp, #20]
 8009d44:	331c      	adds	r3, #28
 8009d46:	441a      	add	r2, r3
 8009d48:	9205      	str	r2, [sp, #20]
 8009d4a:	441d      	add	r5, r3
 8009d4c:	4498      	add	r8, r3
 8009d4e:	e7c2      	b.n	8009cd6 <_dtoa_r+0x846>
 8009d50:	4603      	mov	r3, r0
 8009d52:	e7f6      	b.n	8009d42 <_dtoa_r+0x8b2>
 8009d54:	f1b9 0f00 	cmp.w	r9, #0
 8009d58:	dc38      	bgt.n	8009dcc <_dtoa_r+0x93c>
 8009d5a:	9b06      	ldr	r3, [sp, #24]
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	dd35      	ble.n	8009dcc <_dtoa_r+0x93c>
 8009d60:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	b963      	cbnz	r3, 8009d82 <_dtoa_r+0x8f2>
 8009d68:	4639      	mov	r1, r7
 8009d6a:	2205      	movs	r2, #5
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 f9a8 	bl	800a0c2 <__multadd>
 8009d72:	4601      	mov	r1, r0
 8009d74:	4607      	mov	r7, r0
 8009d76:	9804      	ldr	r0, [sp, #16]
 8009d78:	f000 fb6e 	bl	800a458 <__mcmp>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f73f adcc 	bgt.w	800991a <_dtoa_r+0x48a>
 8009d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d84:	465d      	mov	r5, fp
 8009d86:	ea6f 0a03 	mvn.w	sl, r3
 8009d8a:	f04f 0900 	mov.w	r9, #0
 8009d8e:	4639      	mov	r1, r7
 8009d90:	4620      	mov	r0, r4
 8009d92:	f000 f97f 	bl	800a094 <_Bfree>
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	f43f aeb7 	beq.w	8009b0a <_dtoa_r+0x67a>
 8009d9c:	f1b9 0f00 	cmp.w	r9, #0
 8009da0:	d005      	beq.n	8009dae <_dtoa_r+0x91e>
 8009da2:	45b1      	cmp	r9, r6
 8009da4:	d003      	beq.n	8009dae <_dtoa_r+0x91e>
 8009da6:	4649      	mov	r1, r9
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 f973 	bl	800a094 <_Bfree>
 8009dae:	4631      	mov	r1, r6
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 f96f 	bl	800a094 <_Bfree>
 8009db6:	e6a8      	b.n	8009b0a <_dtoa_r+0x67a>
 8009db8:	2700      	movs	r7, #0
 8009dba:	463e      	mov	r6, r7
 8009dbc:	e7e1      	b.n	8009d82 <_dtoa_r+0x8f2>
 8009dbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009dc2:	463e      	mov	r6, r7
 8009dc4:	e5a9      	b.n	800991a <_dtoa_r+0x48a>
 8009dc6:	bf00      	nop
 8009dc8:	40240000 	.word	0x40240000
 8009dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dce:	f8cd 9008 	str.w	r9, [sp, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 80fa 	beq.w	8009fcc <_dtoa_r+0xb3c>
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	dd05      	ble.n	8009de8 <_dtoa_r+0x958>
 8009ddc:	4631      	mov	r1, r6
 8009dde:	462a      	mov	r2, r5
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 fae5 	bl	800a3b0 <__lshift>
 8009de6:	4606      	mov	r6, r0
 8009de8:	9b07      	ldr	r3, [sp, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d04c      	beq.n	8009e88 <_dtoa_r+0x9f8>
 8009dee:	6871      	ldr	r1, [r6, #4]
 8009df0:	4620      	mov	r0, r4
 8009df2:	f000 f91b 	bl	800a02c <_Balloc>
 8009df6:	6932      	ldr	r2, [r6, #16]
 8009df8:	3202      	adds	r2, #2
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	0092      	lsls	r2, r2, #2
 8009dfe:	f106 010c 	add.w	r1, r6, #12
 8009e02:	300c      	adds	r0, #12
 8009e04:	f7fe fe26 	bl	8008a54 <memcpy>
 8009e08:	2201      	movs	r2, #1
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 facf 	bl	800a3b0 <__lshift>
 8009e12:	9b00      	ldr	r3, [sp, #0]
 8009e14:	f8cd b014 	str.w	fp, [sp, #20]
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	46b1      	mov	r9, r6
 8009e1e:	9307      	str	r3, [sp, #28]
 8009e20:	4606      	mov	r6, r0
 8009e22:	4639      	mov	r1, r7
 8009e24:	9804      	ldr	r0, [sp, #16]
 8009e26:	f7ff faa5 	bl	8009374 <quorem>
 8009e2a:	4649      	mov	r1, r9
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009e32:	9804      	ldr	r0, [sp, #16]
 8009e34:	f000 fb10 	bl	800a458 <__mcmp>
 8009e38:	4632      	mov	r2, r6
 8009e3a:	9000      	str	r0, [sp, #0]
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f000 fb24 	bl	800a48c <__mdiff>
 8009e44:	68c3      	ldr	r3, [r0, #12]
 8009e46:	4602      	mov	r2, r0
 8009e48:	bb03      	cbnz	r3, 8009e8c <_dtoa_r+0x9fc>
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	9008      	str	r0, [sp, #32]
 8009e4e:	9804      	ldr	r0, [sp, #16]
 8009e50:	f000 fb02 	bl	800a458 <__mcmp>
 8009e54:	9a08      	ldr	r2, [sp, #32]
 8009e56:	4603      	mov	r3, r0
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	9308      	str	r3, [sp, #32]
 8009e5e:	f000 f919 	bl	800a094 <_Bfree>
 8009e62:	9b08      	ldr	r3, [sp, #32]
 8009e64:	b9a3      	cbnz	r3, 8009e90 <_dtoa_r+0xa00>
 8009e66:	9a06      	ldr	r2, [sp, #24]
 8009e68:	b992      	cbnz	r2, 8009e90 <_dtoa_r+0xa00>
 8009e6a:	9a07      	ldr	r2, [sp, #28]
 8009e6c:	b982      	cbnz	r2, 8009e90 <_dtoa_r+0xa00>
 8009e6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e72:	d029      	beq.n	8009ec8 <_dtoa_r+0xa38>
 8009e74:	9b00      	ldr	r3, [sp, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dd01      	ble.n	8009e7e <_dtoa_r+0x9ee>
 8009e7a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009e7e:	9b05      	ldr	r3, [sp, #20]
 8009e80:	1c5d      	adds	r5, r3, #1
 8009e82:	f883 8000 	strb.w	r8, [r3]
 8009e86:	e782      	b.n	8009d8e <_dtoa_r+0x8fe>
 8009e88:	4630      	mov	r0, r6
 8009e8a:	e7c2      	b.n	8009e12 <_dtoa_r+0x982>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e7e3      	b.n	8009e58 <_dtoa_r+0x9c8>
 8009e90:	9a00      	ldr	r2, [sp, #0]
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	db04      	blt.n	8009ea0 <_dtoa_r+0xa10>
 8009e96:	d125      	bne.n	8009ee4 <_dtoa_r+0xa54>
 8009e98:	9a06      	ldr	r2, [sp, #24]
 8009e9a:	bb1a      	cbnz	r2, 8009ee4 <_dtoa_r+0xa54>
 8009e9c:	9a07      	ldr	r2, [sp, #28]
 8009e9e:	bb0a      	cbnz	r2, 8009ee4 <_dtoa_r+0xa54>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	ddec      	ble.n	8009e7e <_dtoa_r+0x9ee>
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	9904      	ldr	r1, [sp, #16]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 fa81 	bl	800a3b0 <__lshift>
 8009eae:	4639      	mov	r1, r7
 8009eb0:	9004      	str	r0, [sp, #16]
 8009eb2:	f000 fad1 	bl	800a458 <__mcmp>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	dc03      	bgt.n	8009ec2 <_dtoa_r+0xa32>
 8009eba:	d1e0      	bne.n	8009e7e <_dtoa_r+0x9ee>
 8009ebc:	f018 0f01 	tst.w	r8, #1
 8009ec0:	d0dd      	beq.n	8009e7e <_dtoa_r+0x9ee>
 8009ec2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ec6:	d1d8      	bne.n	8009e7a <_dtoa_r+0x9ea>
 8009ec8:	9b05      	ldr	r3, [sp, #20]
 8009eca:	9a05      	ldr	r2, [sp, #20]
 8009ecc:	1c5d      	adds	r5, r3, #1
 8009ece:	2339      	movs	r3, #57	; 0x39
 8009ed0:	7013      	strb	r3, [r2, #0]
 8009ed2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ed6:	2b39      	cmp	r3, #57	; 0x39
 8009ed8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009edc:	d04f      	beq.n	8009f7e <_dtoa_r+0xaee>
 8009ede:	3301      	adds	r3, #1
 8009ee0:	7013      	strb	r3, [r2, #0]
 8009ee2:	e754      	b.n	8009d8e <_dtoa_r+0x8fe>
 8009ee4:	9a05      	ldr	r2, [sp, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f102 0501 	add.w	r5, r2, #1
 8009eec:	dd06      	ble.n	8009efc <_dtoa_r+0xa6c>
 8009eee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ef2:	d0e9      	beq.n	8009ec8 <_dtoa_r+0xa38>
 8009ef4:	f108 0801 	add.w	r8, r8, #1
 8009ef8:	9b05      	ldr	r3, [sp, #20]
 8009efa:	e7c2      	b.n	8009e82 <_dtoa_r+0x9f2>
 8009efc:	9a02      	ldr	r2, [sp, #8]
 8009efe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009f02:	eba5 030b 	sub.w	r3, r5, fp
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d021      	beq.n	8009f4e <_dtoa_r+0xabe>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	220a      	movs	r2, #10
 8009f0e:	9904      	ldr	r1, [sp, #16]
 8009f10:	4620      	mov	r0, r4
 8009f12:	f000 f8d6 	bl	800a0c2 <__multadd>
 8009f16:	45b1      	cmp	r9, r6
 8009f18:	9004      	str	r0, [sp, #16]
 8009f1a:	f04f 0300 	mov.w	r3, #0
 8009f1e:	f04f 020a 	mov.w	r2, #10
 8009f22:	4649      	mov	r1, r9
 8009f24:	4620      	mov	r0, r4
 8009f26:	d105      	bne.n	8009f34 <_dtoa_r+0xaa4>
 8009f28:	f000 f8cb 	bl	800a0c2 <__multadd>
 8009f2c:	4681      	mov	r9, r0
 8009f2e:	4606      	mov	r6, r0
 8009f30:	9505      	str	r5, [sp, #20]
 8009f32:	e776      	b.n	8009e22 <_dtoa_r+0x992>
 8009f34:	f000 f8c5 	bl	800a0c2 <__multadd>
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4681      	mov	r9, r0
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 f8be 	bl	800a0c2 <__multadd>
 8009f46:	4606      	mov	r6, r0
 8009f48:	e7f2      	b.n	8009f30 <_dtoa_r+0xaa0>
 8009f4a:	f04f 0900 	mov.w	r9, #0
 8009f4e:	2201      	movs	r2, #1
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 fa2c 	bl	800a3b0 <__lshift>
 8009f58:	4639      	mov	r1, r7
 8009f5a:	9004      	str	r0, [sp, #16]
 8009f5c:	f000 fa7c 	bl	800a458 <__mcmp>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	dcb6      	bgt.n	8009ed2 <_dtoa_r+0xa42>
 8009f64:	d102      	bne.n	8009f6c <_dtoa_r+0xadc>
 8009f66:	f018 0f01 	tst.w	r8, #1
 8009f6a:	d1b2      	bne.n	8009ed2 <_dtoa_r+0xa42>
 8009f6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f70:	2b30      	cmp	r3, #48	; 0x30
 8009f72:	f105 32ff 	add.w	r2, r5, #4294967295
 8009f76:	f47f af0a 	bne.w	8009d8e <_dtoa_r+0x8fe>
 8009f7a:	4615      	mov	r5, r2
 8009f7c:	e7f6      	b.n	8009f6c <_dtoa_r+0xadc>
 8009f7e:	4593      	cmp	fp, r2
 8009f80:	d105      	bne.n	8009f8e <_dtoa_r+0xafe>
 8009f82:	2331      	movs	r3, #49	; 0x31
 8009f84:	f10a 0a01 	add.w	sl, sl, #1
 8009f88:	f88b 3000 	strb.w	r3, [fp]
 8009f8c:	e6ff      	b.n	8009d8e <_dtoa_r+0x8fe>
 8009f8e:	4615      	mov	r5, r2
 8009f90:	e79f      	b.n	8009ed2 <_dtoa_r+0xa42>
 8009f92:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009ff8 <_dtoa_r+0xb68>
 8009f96:	e007      	b.n	8009fa8 <_dtoa_r+0xb18>
 8009f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f9a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009ffc <_dtoa_r+0xb6c>
 8009f9e:	b11b      	cbz	r3, 8009fa8 <_dtoa_r+0xb18>
 8009fa0:	f10b 0308 	add.w	r3, fp, #8
 8009fa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	4658      	mov	r0, fp
 8009faa:	b017      	add	sp, #92	; 0x5c
 8009fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	9b06      	ldr	r3, [sp, #24]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	f77f ae35 	ble.w	8009c22 <_dtoa_r+0x792>
 8009fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fba:	9307      	str	r3, [sp, #28]
 8009fbc:	e649      	b.n	8009c52 <_dtoa_r+0x7c2>
 8009fbe:	9b02      	ldr	r3, [sp, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dc03      	bgt.n	8009fcc <_dtoa_r+0xb3c>
 8009fc4:	9b06      	ldr	r3, [sp, #24]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	f73f aecc 	bgt.w	8009d64 <_dtoa_r+0x8d4>
 8009fcc:	465d      	mov	r5, fp
 8009fce:	4639      	mov	r1, r7
 8009fd0:	9804      	ldr	r0, [sp, #16]
 8009fd2:	f7ff f9cf 	bl	8009374 <quorem>
 8009fd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009fda:	f805 8b01 	strb.w	r8, [r5], #1
 8009fde:	9a02      	ldr	r2, [sp, #8]
 8009fe0:	eba5 030b 	sub.w	r3, r5, fp
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	ddb0      	ble.n	8009f4a <_dtoa_r+0xaba>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	220a      	movs	r2, #10
 8009fec:	9904      	ldr	r1, [sp, #16]
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 f867 	bl	800a0c2 <__multadd>
 8009ff4:	9004      	str	r0, [sp, #16]
 8009ff6:	e7ea      	b.n	8009fce <_dtoa_r+0xb3e>
 8009ff8:	0800b15c 	.word	0x0800b15c
 8009ffc:	0800b180 	.word	0x0800b180

0800a000 <_localeconv_r>:
 800a000:	4b04      	ldr	r3, [pc, #16]	; (800a014 <_localeconv_r+0x14>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6a18      	ldr	r0, [r3, #32]
 800a006:	4b04      	ldr	r3, [pc, #16]	; (800a018 <_localeconv_r+0x18>)
 800a008:	2800      	cmp	r0, #0
 800a00a:	bf08      	it	eq
 800a00c:	4618      	moveq	r0, r3
 800a00e:	30f0      	adds	r0, #240	; 0xf0
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	20000010 	.word	0x20000010
 800a018:	20000074 	.word	0x20000074

0800a01c <malloc>:
 800a01c:	4b02      	ldr	r3, [pc, #8]	; (800a028 <malloc+0xc>)
 800a01e:	4601      	mov	r1, r0
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	f000 bb3b 	b.w	800a69c <_malloc_r>
 800a026:	bf00      	nop
 800a028:	20000010 	.word	0x20000010

0800a02c <_Balloc>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a030:	4604      	mov	r4, r0
 800a032:	460e      	mov	r6, r1
 800a034:	b93d      	cbnz	r5, 800a046 <_Balloc+0x1a>
 800a036:	2010      	movs	r0, #16
 800a038:	f7ff fff0 	bl	800a01c <malloc>
 800a03c:	6260      	str	r0, [r4, #36]	; 0x24
 800a03e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a042:	6005      	str	r5, [r0, #0]
 800a044:	60c5      	str	r5, [r0, #12]
 800a046:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a048:	68eb      	ldr	r3, [r5, #12]
 800a04a:	b183      	cbz	r3, 800a06e <_Balloc+0x42>
 800a04c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a054:	b9b8      	cbnz	r0, 800a086 <_Balloc+0x5a>
 800a056:	2101      	movs	r1, #1
 800a058:	fa01 f506 	lsl.w	r5, r1, r6
 800a05c:	1d6a      	adds	r2, r5, #5
 800a05e:	0092      	lsls	r2, r2, #2
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fabf 	bl	800a5e4 <_calloc_r>
 800a066:	b160      	cbz	r0, 800a082 <_Balloc+0x56>
 800a068:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a06c:	e00e      	b.n	800a08c <_Balloc+0x60>
 800a06e:	2221      	movs	r2, #33	; 0x21
 800a070:	2104      	movs	r1, #4
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fab6 	bl	800a5e4 <_calloc_r>
 800a078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a07a:	60e8      	str	r0, [r5, #12]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e4      	bne.n	800a04c <_Balloc+0x20>
 800a082:	2000      	movs	r0, #0
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	6802      	ldr	r2, [r0, #0]
 800a088:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a08c:	2300      	movs	r3, #0
 800a08e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a092:	e7f7      	b.n	800a084 <_Balloc+0x58>

0800a094 <_Bfree>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a098:	4606      	mov	r6, r0
 800a09a:	460d      	mov	r5, r1
 800a09c:	b93c      	cbnz	r4, 800a0ae <_Bfree+0x1a>
 800a09e:	2010      	movs	r0, #16
 800a0a0:	f7ff ffbc 	bl	800a01c <malloc>
 800a0a4:	6270      	str	r0, [r6, #36]	; 0x24
 800a0a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0aa:	6004      	str	r4, [r0, #0]
 800a0ac:	60c4      	str	r4, [r0, #12]
 800a0ae:	b13d      	cbz	r5, 800a0c0 <_Bfree+0x2c>
 800a0b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0b2:	686a      	ldr	r2, [r5, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0ba:	6029      	str	r1, [r5, #0]
 800a0bc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}

0800a0c2 <__multadd>:
 800a0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c6:	690d      	ldr	r5, [r1, #16]
 800a0c8:	461f      	mov	r7, r3
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	f101 0c14 	add.w	ip, r1, #20
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f8dc 0000 	ldr.w	r0, [ip]
 800a0d8:	b281      	uxth	r1, r0
 800a0da:	fb02 7101 	mla	r1, r2, r1, r7
 800a0de:	0c0f      	lsrs	r7, r1, #16
 800a0e0:	0c00      	lsrs	r0, r0, #16
 800a0e2:	fb02 7000 	mla	r0, r2, r0, r7
 800a0e6:	b289      	uxth	r1, r1
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a0ee:	429d      	cmp	r5, r3
 800a0f0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a0f4:	f84c 1b04 	str.w	r1, [ip], #4
 800a0f8:	dcec      	bgt.n	800a0d4 <__multadd+0x12>
 800a0fa:	b1d7      	cbz	r7, 800a132 <__multadd+0x70>
 800a0fc:	68a3      	ldr	r3, [r4, #8]
 800a0fe:	42ab      	cmp	r3, r5
 800a100:	dc12      	bgt.n	800a128 <__multadd+0x66>
 800a102:	6861      	ldr	r1, [r4, #4]
 800a104:	4630      	mov	r0, r6
 800a106:	3101      	adds	r1, #1
 800a108:	f7ff ff90 	bl	800a02c <_Balloc>
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	3202      	adds	r2, #2
 800a110:	f104 010c 	add.w	r1, r4, #12
 800a114:	4680      	mov	r8, r0
 800a116:	0092      	lsls	r2, r2, #2
 800a118:	300c      	adds	r0, #12
 800a11a:	f7fe fc9b 	bl	8008a54 <memcpy>
 800a11e:	4621      	mov	r1, r4
 800a120:	4630      	mov	r0, r6
 800a122:	f7ff ffb7 	bl	800a094 <_Bfree>
 800a126:	4644      	mov	r4, r8
 800a128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a12c:	3501      	adds	r5, #1
 800a12e:	615f      	str	r7, [r3, #20]
 800a130:	6125      	str	r5, [r4, #16]
 800a132:	4620      	mov	r0, r4
 800a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a138 <__hi0bits>:
 800a138:	0c02      	lsrs	r2, r0, #16
 800a13a:	0412      	lsls	r2, r2, #16
 800a13c:	4603      	mov	r3, r0
 800a13e:	b9b2      	cbnz	r2, 800a16e <__hi0bits+0x36>
 800a140:	0403      	lsls	r3, r0, #16
 800a142:	2010      	movs	r0, #16
 800a144:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a148:	bf04      	itt	eq
 800a14a:	021b      	lsleq	r3, r3, #8
 800a14c:	3008      	addeq	r0, #8
 800a14e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a152:	bf04      	itt	eq
 800a154:	011b      	lsleq	r3, r3, #4
 800a156:	3004      	addeq	r0, #4
 800a158:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a15c:	bf04      	itt	eq
 800a15e:	009b      	lsleq	r3, r3, #2
 800a160:	3002      	addeq	r0, #2
 800a162:	2b00      	cmp	r3, #0
 800a164:	db06      	blt.n	800a174 <__hi0bits+0x3c>
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	d503      	bpl.n	800a172 <__hi0bits+0x3a>
 800a16a:	3001      	adds	r0, #1
 800a16c:	4770      	bx	lr
 800a16e:	2000      	movs	r0, #0
 800a170:	e7e8      	b.n	800a144 <__hi0bits+0xc>
 800a172:	2020      	movs	r0, #32
 800a174:	4770      	bx	lr

0800a176 <__lo0bits>:
 800a176:	6803      	ldr	r3, [r0, #0]
 800a178:	f013 0207 	ands.w	r2, r3, #7
 800a17c:	4601      	mov	r1, r0
 800a17e:	d00b      	beq.n	800a198 <__lo0bits+0x22>
 800a180:	07da      	lsls	r2, r3, #31
 800a182:	d423      	bmi.n	800a1cc <__lo0bits+0x56>
 800a184:	0798      	lsls	r0, r3, #30
 800a186:	bf49      	itett	mi
 800a188:	085b      	lsrmi	r3, r3, #1
 800a18a:	089b      	lsrpl	r3, r3, #2
 800a18c:	2001      	movmi	r0, #1
 800a18e:	600b      	strmi	r3, [r1, #0]
 800a190:	bf5c      	itt	pl
 800a192:	600b      	strpl	r3, [r1, #0]
 800a194:	2002      	movpl	r0, #2
 800a196:	4770      	bx	lr
 800a198:	b298      	uxth	r0, r3
 800a19a:	b9a8      	cbnz	r0, 800a1c8 <__lo0bits+0x52>
 800a19c:	0c1b      	lsrs	r3, r3, #16
 800a19e:	2010      	movs	r0, #16
 800a1a0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1a4:	bf04      	itt	eq
 800a1a6:	0a1b      	lsreq	r3, r3, #8
 800a1a8:	3008      	addeq	r0, #8
 800a1aa:	071a      	lsls	r2, r3, #28
 800a1ac:	bf04      	itt	eq
 800a1ae:	091b      	lsreq	r3, r3, #4
 800a1b0:	3004      	addeq	r0, #4
 800a1b2:	079a      	lsls	r2, r3, #30
 800a1b4:	bf04      	itt	eq
 800a1b6:	089b      	lsreq	r3, r3, #2
 800a1b8:	3002      	addeq	r0, #2
 800a1ba:	07da      	lsls	r2, r3, #31
 800a1bc:	d402      	bmi.n	800a1c4 <__lo0bits+0x4e>
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	d006      	beq.n	800a1d0 <__lo0bits+0x5a>
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	600b      	str	r3, [r1, #0]
 800a1c6:	4770      	bx	lr
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	e7e9      	b.n	800a1a0 <__lo0bits+0x2a>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	4770      	bx	lr
 800a1d0:	2020      	movs	r0, #32
 800a1d2:	4770      	bx	lr

0800a1d4 <__i2b>:
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	2101      	movs	r1, #1
 800a1da:	f7ff ff27 	bl	800a02c <_Balloc>
 800a1de:	2201      	movs	r2, #1
 800a1e0:	6144      	str	r4, [r0, #20]
 800a1e2:	6102      	str	r2, [r0, #16]
 800a1e4:	bd10      	pop	{r4, pc}

0800a1e6 <__multiply>:
 800a1e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	4614      	mov	r4, r2
 800a1ec:	690a      	ldr	r2, [r1, #16]
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	bfb8      	it	lt
 800a1f4:	460b      	movlt	r3, r1
 800a1f6:	4688      	mov	r8, r1
 800a1f8:	bfbc      	itt	lt
 800a1fa:	46a0      	movlt	r8, r4
 800a1fc:	461c      	movlt	r4, r3
 800a1fe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a202:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a206:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a20a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a20e:	eb07 0609 	add.w	r6, r7, r9
 800a212:	42b3      	cmp	r3, r6
 800a214:	bfb8      	it	lt
 800a216:	3101      	addlt	r1, #1
 800a218:	f7ff ff08 	bl	800a02c <_Balloc>
 800a21c:	f100 0514 	add.w	r5, r0, #20
 800a220:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a224:	462b      	mov	r3, r5
 800a226:	2200      	movs	r2, #0
 800a228:	4573      	cmp	r3, lr
 800a22a:	d316      	bcc.n	800a25a <__multiply+0x74>
 800a22c:	f104 0214 	add.w	r2, r4, #20
 800a230:	f108 0114 	add.w	r1, r8, #20
 800a234:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a238:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	9b00      	ldr	r3, [sp, #0]
 800a240:	9201      	str	r2, [sp, #4]
 800a242:	4293      	cmp	r3, r2
 800a244:	d80c      	bhi.n	800a260 <__multiply+0x7a>
 800a246:	2e00      	cmp	r6, #0
 800a248:	dd03      	ble.n	800a252 <__multiply+0x6c>
 800a24a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d05d      	beq.n	800a30e <__multiply+0x128>
 800a252:	6106      	str	r6, [r0, #16]
 800a254:	b003      	add	sp, #12
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	f843 2b04 	str.w	r2, [r3], #4
 800a25e:	e7e3      	b.n	800a228 <__multiply+0x42>
 800a260:	f8b2 b000 	ldrh.w	fp, [r2]
 800a264:	f1bb 0f00 	cmp.w	fp, #0
 800a268:	d023      	beq.n	800a2b2 <__multiply+0xcc>
 800a26a:	4689      	mov	r9, r1
 800a26c:	46ac      	mov	ip, r5
 800a26e:	f04f 0800 	mov.w	r8, #0
 800a272:	f859 4b04 	ldr.w	r4, [r9], #4
 800a276:	f8dc a000 	ldr.w	sl, [ip]
 800a27a:	b2a3      	uxth	r3, r4
 800a27c:	fa1f fa8a 	uxth.w	sl, sl
 800a280:	fb0b a303 	mla	r3, fp, r3, sl
 800a284:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a288:	f8dc 4000 	ldr.w	r4, [ip]
 800a28c:	4443      	add	r3, r8
 800a28e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a292:	fb0b 840a 	mla	r4, fp, sl, r8
 800a296:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a29a:	46e2      	mov	sl, ip
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a2a2:	454f      	cmp	r7, r9
 800a2a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a2a8:	f84a 3b04 	str.w	r3, [sl], #4
 800a2ac:	d82b      	bhi.n	800a306 <__multiply+0x120>
 800a2ae:	f8cc 8004 	str.w	r8, [ip, #4]
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a2b8:	3204      	adds	r2, #4
 800a2ba:	f1ba 0f00 	cmp.w	sl, #0
 800a2be:	d020      	beq.n	800a302 <__multiply+0x11c>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	4689      	mov	r9, r1
 800a2c4:	46a8      	mov	r8, r5
 800a2c6:	f04f 0b00 	mov.w	fp, #0
 800a2ca:	f8b9 c000 	ldrh.w	ip, [r9]
 800a2ce:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a2d2:	fb0a 440c 	mla	r4, sl, ip, r4
 800a2d6:	445c      	add	r4, fp
 800a2d8:	46c4      	mov	ip, r8
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a2e0:	f84c 3b04 	str.w	r3, [ip], #4
 800a2e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2e8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	fb0a b303 	mla	r3, sl, r3, fp
 800a2f2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a2f6:	454f      	cmp	r7, r9
 800a2f8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a2fc:	d805      	bhi.n	800a30a <__multiply+0x124>
 800a2fe:	f8c8 3004 	str.w	r3, [r8, #4]
 800a302:	3504      	adds	r5, #4
 800a304:	e79b      	b.n	800a23e <__multiply+0x58>
 800a306:	46d4      	mov	ip, sl
 800a308:	e7b3      	b.n	800a272 <__multiply+0x8c>
 800a30a:	46e0      	mov	r8, ip
 800a30c:	e7dd      	b.n	800a2ca <__multiply+0xe4>
 800a30e:	3e01      	subs	r6, #1
 800a310:	e799      	b.n	800a246 <__multiply+0x60>
	...

0800a314 <__pow5mult>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4615      	mov	r5, r2
 800a31a:	f012 0203 	ands.w	r2, r2, #3
 800a31e:	4606      	mov	r6, r0
 800a320:	460f      	mov	r7, r1
 800a322:	d007      	beq.n	800a334 <__pow5mult+0x20>
 800a324:	3a01      	subs	r2, #1
 800a326:	4c21      	ldr	r4, [pc, #132]	; (800a3ac <__pow5mult+0x98>)
 800a328:	2300      	movs	r3, #0
 800a32a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a32e:	f7ff fec8 	bl	800a0c2 <__multadd>
 800a332:	4607      	mov	r7, r0
 800a334:	10ad      	asrs	r5, r5, #2
 800a336:	d035      	beq.n	800a3a4 <__pow5mult+0x90>
 800a338:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a33a:	b93c      	cbnz	r4, 800a34c <__pow5mult+0x38>
 800a33c:	2010      	movs	r0, #16
 800a33e:	f7ff fe6d 	bl	800a01c <malloc>
 800a342:	6270      	str	r0, [r6, #36]	; 0x24
 800a344:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a348:	6004      	str	r4, [r0, #0]
 800a34a:	60c4      	str	r4, [r0, #12]
 800a34c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a350:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a354:	b94c      	cbnz	r4, 800a36a <__pow5mult+0x56>
 800a356:	f240 2171 	movw	r1, #625	; 0x271
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ff3a 	bl	800a1d4 <__i2b>
 800a360:	2300      	movs	r3, #0
 800a362:	f8c8 0008 	str.w	r0, [r8, #8]
 800a366:	4604      	mov	r4, r0
 800a368:	6003      	str	r3, [r0, #0]
 800a36a:	f04f 0800 	mov.w	r8, #0
 800a36e:	07eb      	lsls	r3, r5, #31
 800a370:	d50a      	bpl.n	800a388 <__pow5mult+0x74>
 800a372:	4639      	mov	r1, r7
 800a374:	4622      	mov	r2, r4
 800a376:	4630      	mov	r0, r6
 800a378:	f7ff ff35 	bl	800a1e6 <__multiply>
 800a37c:	4639      	mov	r1, r7
 800a37e:	4681      	mov	r9, r0
 800a380:	4630      	mov	r0, r6
 800a382:	f7ff fe87 	bl	800a094 <_Bfree>
 800a386:	464f      	mov	r7, r9
 800a388:	106d      	asrs	r5, r5, #1
 800a38a:	d00b      	beq.n	800a3a4 <__pow5mult+0x90>
 800a38c:	6820      	ldr	r0, [r4, #0]
 800a38e:	b938      	cbnz	r0, 800a3a0 <__pow5mult+0x8c>
 800a390:	4622      	mov	r2, r4
 800a392:	4621      	mov	r1, r4
 800a394:	4630      	mov	r0, r6
 800a396:	f7ff ff26 	bl	800a1e6 <__multiply>
 800a39a:	6020      	str	r0, [r4, #0]
 800a39c:	f8c0 8000 	str.w	r8, [r0]
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	e7e4      	b.n	800a36e <__pow5mult+0x5a>
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3aa:	bf00      	nop
 800a3ac:	0800b280 	.word	0x0800b280

0800a3b0 <__lshift>:
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3ba:	6923      	ldr	r3, [r4, #16]
 800a3bc:	6849      	ldr	r1, [r1, #4]
 800a3be:	eb0a 0903 	add.w	r9, sl, r3
 800a3c2:	68a3      	ldr	r3, [r4, #8]
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	4616      	mov	r6, r2
 800a3c8:	f109 0501 	add.w	r5, r9, #1
 800a3cc:	42ab      	cmp	r3, r5
 800a3ce:	db32      	blt.n	800a436 <__lshift+0x86>
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7ff fe2b 	bl	800a02c <_Balloc>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	4680      	mov	r8, r0
 800a3da:	f100 0114 	add.w	r1, r0, #20
 800a3de:	461a      	mov	r2, r3
 800a3e0:	4553      	cmp	r3, sl
 800a3e2:	db2b      	blt.n	800a43c <__lshift+0x8c>
 800a3e4:	6920      	ldr	r0, [r4, #16]
 800a3e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3ea:	f104 0314 	add.w	r3, r4, #20
 800a3ee:	f016 021f 	ands.w	r2, r6, #31
 800a3f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3fa:	d025      	beq.n	800a448 <__lshift+0x98>
 800a3fc:	f1c2 0e20 	rsb	lr, r2, #32
 800a400:	2000      	movs	r0, #0
 800a402:	681e      	ldr	r6, [r3, #0]
 800a404:	468a      	mov	sl, r1
 800a406:	4096      	lsls	r6, r2
 800a408:	4330      	orrs	r0, r6
 800a40a:	f84a 0b04 	str.w	r0, [sl], #4
 800a40e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a412:	459c      	cmp	ip, r3
 800a414:	fa20 f00e 	lsr.w	r0, r0, lr
 800a418:	d814      	bhi.n	800a444 <__lshift+0x94>
 800a41a:	6048      	str	r0, [r1, #4]
 800a41c:	b108      	cbz	r0, 800a422 <__lshift+0x72>
 800a41e:	f109 0502 	add.w	r5, r9, #2
 800a422:	3d01      	subs	r5, #1
 800a424:	4638      	mov	r0, r7
 800a426:	f8c8 5010 	str.w	r5, [r8, #16]
 800a42a:	4621      	mov	r1, r4
 800a42c:	f7ff fe32 	bl	800a094 <_Bfree>
 800a430:	4640      	mov	r0, r8
 800a432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a436:	3101      	adds	r1, #1
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	e7c7      	b.n	800a3cc <__lshift+0x1c>
 800a43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a440:	3301      	adds	r3, #1
 800a442:	e7cd      	b.n	800a3e0 <__lshift+0x30>
 800a444:	4651      	mov	r1, sl
 800a446:	e7dc      	b.n	800a402 <__lshift+0x52>
 800a448:	3904      	subs	r1, #4
 800a44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a452:	459c      	cmp	ip, r3
 800a454:	d8f9      	bhi.n	800a44a <__lshift+0x9a>
 800a456:	e7e4      	b.n	800a422 <__lshift+0x72>

0800a458 <__mcmp>:
 800a458:	6903      	ldr	r3, [r0, #16]
 800a45a:	690a      	ldr	r2, [r1, #16]
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	b530      	push	{r4, r5, lr}
 800a460:	d10c      	bne.n	800a47c <__mcmp+0x24>
 800a462:	0092      	lsls	r2, r2, #2
 800a464:	3014      	adds	r0, #20
 800a466:	3114      	adds	r1, #20
 800a468:	1884      	adds	r4, r0, r2
 800a46a:	4411      	add	r1, r2
 800a46c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a474:	4295      	cmp	r5, r2
 800a476:	d003      	beq.n	800a480 <__mcmp+0x28>
 800a478:	d305      	bcc.n	800a486 <__mcmp+0x2e>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4618      	mov	r0, r3
 800a47e:	bd30      	pop	{r4, r5, pc}
 800a480:	42a0      	cmp	r0, r4
 800a482:	d3f3      	bcc.n	800a46c <__mcmp+0x14>
 800a484:	e7fa      	b.n	800a47c <__mcmp+0x24>
 800a486:	f04f 33ff 	mov.w	r3, #4294967295
 800a48a:	e7f7      	b.n	800a47c <__mcmp+0x24>

0800a48c <__mdiff>:
 800a48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	460d      	mov	r5, r1
 800a492:	4607      	mov	r7, r0
 800a494:	4611      	mov	r1, r2
 800a496:	4628      	mov	r0, r5
 800a498:	4614      	mov	r4, r2
 800a49a:	f7ff ffdd 	bl	800a458 <__mcmp>
 800a49e:	1e06      	subs	r6, r0, #0
 800a4a0:	d108      	bne.n	800a4b4 <__mdiff+0x28>
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	f7ff fdc1 	bl	800a02c <_Balloc>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b4:	bfa4      	itt	ge
 800a4b6:	4623      	movge	r3, r4
 800a4b8:	462c      	movge	r4, r5
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	6861      	ldr	r1, [r4, #4]
 800a4be:	bfa6      	itte	ge
 800a4c0:	461d      	movge	r5, r3
 800a4c2:	2600      	movge	r6, #0
 800a4c4:	2601      	movlt	r6, #1
 800a4c6:	f7ff fdb1 	bl	800a02c <_Balloc>
 800a4ca:	692b      	ldr	r3, [r5, #16]
 800a4cc:	60c6      	str	r6, [r0, #12]
 800a4ce:	6926      	ldr	r6, [r4, #16]
 800a4d0:	f105 0914 	add.w	r9, r5, #20
 800a4d4:	f104 0214 	add.w	r2, r4, #20
 800a4d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a4dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a4e0:	f100 0514 	add.w	r5, r0, #20
 800a4e4:	f04f 0e00 	mov.w	lr, #0
 800a4e8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a4ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800a4f0:	fa1e f18a 	uxtah	r1, lr, sl
 800a4f4:	b2a3      	uxth	r3, r4
 800a4f6:	1ac9      	subs	r1, r1, r3
 800a4f8:	0c23      	lsrs	r3, r4, #16
 800a4fa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a4fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a502:	b289      	uxth	r1, r1
 800a504:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a508:	45c8      	cmp	r8, r9
 800a50a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a50e:	4694      	mov	ip, r2
 800a510:	f845 3b04 	str.w	r3, [r5], #4
 800a514:	d8e8      	bhi.n	800a4e8 <__mdiff+0x5c>
 800a516:	45bc      	cmp	ip, r7
 800a518:	d304      	bcc.n	800a524 <__mdiff+0x98>
 800a51a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a51e:	b183      	cbz	r3, 800a542 <__mdiff+0xb6>
 800a520:	6106      	str	r6, [r0, #16]
 800a522:	e7c5      	b.n	800a4b0 <__mdiff+0x24>
 800a524:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a528:	fa1e f381 	uxtah	r3, lr, r1
 800a52c:	141a      	asrs	r2, r3, #16
 800a52e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a532:	b29b      	uxth	r3, r3
 800a534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a538:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a53c:	f845 3b04 	str.w	r3, [r5], #4
 800a540:	e7e9      	b.n	800a516 <__mdiff+0x8a>
 800a542:	3e01      	subs	r6, #1
 800a544:	e7e9      	b.n	800a51a <__mdiff+0x8e>

0800a546 <__d2b>:
 800a546:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a54a:	460e      	mov	r6, r1
 800a54c:	2101      	movs	r1, #1
 800a54e:	ec59 8b10 	vmov	r8, r9, d0
 800a552:	4615      	mov	r5, r2
 800a554:	f7ff fd6a 	bl	800a02c <_Balloc>
 800a558:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a55c:	4607      	mov	r7, r0
 800a55e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a562:	bb34      	cbnz	r4, 800a5b2 <__d2b+0x6c>
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	f1b8 0300 	subs.w	r3, r8, #0
 800a56a:	d027      	beq.n	800a5bc <__d2b+0x76>
 800a56c:	a802      	add	r0, sp, #8
 800a56e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a572:	f7ff fe00 	bl	800a176 <__lo0bits>
 800a576:	9900      	ldr	r1, [sp, #0]
 800a578:	b1f0      	cbz	r0, 800a5b8 <__d2b+0x72>
 800a57a:	9a01      	ldr	r2, [sp, #4]
 800a57c:	f1c0 0320 	rsb	r3, r0, #32
 800a580:	fa02 f303 	lsl.w	r3, r2, r3
 800a584:	430b      	orrs	r3, r1
 800a586:	40c2      	lsrs	r2, r0
 800a588:	617b      	str	r3, [r7, #20]
 800a58a:	9201      	str	r2, [sp, #4]
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	61bb      	str	r3, [r7, #24]
 800a590:	2b00      	cmp	r3, #0
 800a592:	bf14      	ite	ne
 800a594:	2102      	movne	r1, #2
 800a596:	2101      	moveq	r1, #1
 800a598:	6139      	str	r1, [r7, #16]
 800a59a:	b1c4      	cbz	r4, 800a5ce <__d2b+0x88>
 800a59c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a5a0:	4404      	add	r4, r0
 800a5a2:	6034      	str	r4, [r6, #0]
 800a5a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5a8:	6028      	str	r0, [r5, #0]
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	b003      	add	sp, #12
 800a5ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5b6:	e7d5      	b.n	800a564 <__d2b+0x1e>
 800a5b8:	6179      	str	r1, [r7, #20]
 800a5ba:	e7e7      	b.n	800a58c <__d2b+0x46>
 800a5bc:	a801      	add	r0, sp, #4
 800a5be:	f7ff fdda 	bl	800a176 <__lo0bits>
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	617b      	str	r3, [r7, #20]
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	6139      	str	r1, [r7, #16]
 800a5ca:	3020      	adds	r0, #32
 800a5cc:	e7e5      	b.n	800a59a <__d2b+0x54>
 800a5ce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a5d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5d6:	6030      	str	r0, [r6, #0]
 800a5d8:	6918      	ldr	r0, [r3, #16]
 800a5da:	f7ff fdad 	bl	800a138 <__hi0bits>
 800a5de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a5e2:	e7e1      	b.n	800a5a8 <__d2b+0x62>

0800a5e4 <_calloc_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	fb02 f401 	mul.w	r4, r2, r1
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	f000 f856 	bl	800a69c <_malloc_r>
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	b118      	cbz	r0, 800a5fc <_calloc_r+0x18>
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	f7fe fa37 	bl	8008a6a <memset>
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}

0800a600 <_free_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4605      	mov	r5, r0
 800a604:	2900      	cmp	r1, #0
 800a606:	d045      	beq.n	800a694 <_free_r+0x94>
 800a608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60c:	1f0c      	subs	r4, r1, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bfb8      	it	lt
 800a612:	18e4      	addlt	r4, r4, r3
 800a614:	f000 fa29 	bl	800aa6a <__malloc_lock>
 800a618:	4a1f      	ldr	r2, [pc, #124]	; (800a698 <_free_r+0x98>)
 800a61a:	6813      	ldr	r3, [r2, #0]
 800a61c:	4610      	mov	r0, r2
 800a61e:	b933      	cbnz	r3, 800a62e <_free_r+0x2e>
 800a620:	6063      	str	r3, [r4, #4]
 800a622:	6014      	str	r4, [r2, #0]
 800a624:	4628      	mov	r0, r5
 800a626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a62a:	f000 ba1f 	b.w	800aa6c <__malloc_unlock>
 800a62e:	42a3      	cmp	r3, r4
 800a630:	d90c      	bls.n	800a64c <_free_r+0x4c>
 800a632:	6821      	ldr	r1, [r4, #0]
 800a634:	1862      	adds	r2, r4, r1
 800a636:	4293      	cmp	r3, r2
 800a638:	bf04      	itt	eq
 800a63a:	681a      	ldreq	r2, [r3, #0]
 800a63c:	685b      	ldreq	r3, [r3, #4]
 800a63e:	6063      	str	r3, [r4, #4]
 800a640:	bf04      	itt	eq
 800a642:	1852      	addeq	r2, r2, r1
 800a644:	6022      	streq	r2, [r4, #0]
 800a646:	6004      	str	r4, [r0, #0]
 800a648:	e7ec      	b.n	800a624 <_free_r+0x24>
 800a64a:	4613      	mov	r3, r2
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	b10a      	cbz	r2, 800a654 <_free_r+0x54>
 800a650:	42a2      	cmp	r2, r4
 800a652:	d9fa      	bls.n	800a64a <_free_r+0x4a>
 800a654:	6819      	ldr	r1, [r3, #0]
 800a656:	1858      	adds	r0, r3, r1
 800a658:	42a0      	cmp	r0, r4
 800a65a:	d10b      	bne.n	800a674 <_free_r+0x74>
 800a65c:	6820      	ldr	r0, [r4, #0]
 800a65e:	4401      	add	r1, r0
 800a660:	1858      	adds	r0, r3, r1
 800a662:	4282      	cmp	r2, r0
 800a664:	6019      	str	r1, [r3, #0]
 800a666:	d1dd      	bne.n	800a624 <_free_r+0x24>
 800a668:	6810      	ldr	r0, [r2, #0]
 800a66a:	6852      	ldr	r2, [r2, #4]
 800a66c:	605a      	str	r2, [r3, #4]
 800a66e:	4401      	add	r1, r0
 800a670:	6019      	str	r1, [r3, #0]
 800a672:	e7d7      	b.n	800a624 <_free_r+0x24>
 800a674:	d902      	bls.n	800a67c <_free_r+0x7c>
 800a676:	230c      	movs	r3, #12
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	e7d3      	b.n	800a624 <_free_r+0x24>
 800a67c:	6820      	ldr	r0, [r4, #0]
 800a67e:	1821      	adds	r1, r4, r0
 800a680:	428a      	cmp	r2, r1
 800a682:	bf04      	itt	eq
 800a684:	6811      	ldreq	r1, [r2, #0]
 800a686:	6852      	ldreq	r2, [r2, #4]
 800a688:	6062      	str	r2, [r4, #4]
 800a68a:	bf04      	itt	eq
 800a68c:	1809      	addeq	r1, r1, r0
 800a68e:	6021      	streq	r1, [r4, #0]
 800a690:	605c      	str	r4, [r3, #4]
 800a692:	e7c7      	b.n	800a624 <_free_r+0x24>
 800a694:	bd38      	pop	{r3, r4, r5, pc}
 800a696:	bf00      	nop
 800a698:	20002cb4 	.word	0x20002cb4

0800a69c <_malloc_r>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	1ccd      	adds	r5, r1, #3
 800a6a0:	f025 0503 	bic.w	r5, r5, #3
 800a6a4:	3508      	adds	r5, #8
 800a6a6:	2d0c      	cmp	r5, #12
 800a6a8:	bf38      	it	cc
 800a6aa:	250c      	movcc	r5, #12
 800a6ac:	2d00      	cmp	r5, #0
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	db01      	blt.n	800a6b6 <_malloc_r+0x1a>
 800a6b2:	42a9      	cmp	r1, r5
 800a6b4:	d903      	bls.n	800a6be <_malloc_r+0x22>
 800a6b6:	230c      	movs	r3, #12
 800a6b8:	6033      	str	r3, [r6, #0]
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	bd70      	pop	{r4, r5, r6, pc}
 800a6be:	f000 f9d4 	bl	800aa6a <__malloc_lock>
 800a6c2:	4a21      	ldr	r2, [pc, #132]	; (800a748 <_malloc_r+0xac>)
 800a6c4:	6814      	ldr	r4, [r2, #0]
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	b991      	cbnz	r1, 800a6f0 <_malloc_r+0x54>
 800a6ca:	4c20      	ldr	r4, [pc, #128]	; (800a74c <_malloc_r+0xb0>)
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	b91b      	cbnz	r3, 800a6d8 <_malloc_r+0x3c>
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 f98f 	bl	800a9f4 <_sbrk_r>
 800a6d6:	6020      	str	r0, [r4, #0]
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f000 f98a 	bl	800a9f4 <_sbrk_r>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d124      	bne.n	800a72e <_malloc_r+0x92>
 800a6e4:	230c      	movs	r3, #12
 800a6e6:	6033      	str	r3, [r6, #0]
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f000 f9bf 	bl	800aa6c <__malloc_unlock>
 800a6ee:	e7e4      	b.n	800a6ba <_malloc_r+0x1e>
 800a6f0:	680b      	ldr	r3, [r1, #0]
 800a6f2:	1b5b      	subs	r3, r3, r5
 800a6f4:	d418      	bmi.n	800a728 <_malloc_r+0x8c>
 800a6f6:	2b0b      	cmp	r3, #11
 800a6f8:	d90f      	bls.n	800a71a <_malloc_r+0x7e>
 800a6fa:	600b      	str	r3, [r1, #0]
 800a6fc:	50cd      	str	r5, [r1, r3]
 800a6fe:	18cc      	adds	r4, r1, r3
 800a700:	4630      	mov	r0, r6
 800a702:	f000 f9b3 	bl	800aa6c <__malloc_unlock>
 800a706:	f104 000b 	add.w	r0, r4, #11
 800a70a:	1d23      	adds	r3, r4, #4
 800a70c:	f020 0007 	bic.w	r0, r0, #7
 800a710:	1ac3      	subs	r3, r0, r3
 800a712:	d0d3      	beq.n	800a6bc <_malloc_r+0x20>
 800a714:	425a      	negs	r2, r3
 800a716:	50e2      	str	r2, [r4, r3]
 800a718:	e7d0      	b.n	800a6bc <_malloc_r+0x20>
 800a71a:	428c      	cmp	r4, r1
 800a71c:	684b      	ldr	r3, [r1, #4]
 800a71e:	bf16      	itet	ne
 800a720:	6063      	strne	r3, [r4, #4]
 800a722:	6013      	streq	r3, [r2, #0]
 800a724:	460c      	movne	r4, r1
 800a726:	e7eb      	b.n	800a700 <_malloc_r+0x64>
 800a728:	460c      	mov	r4, r1
 800a72a:	6849      	ldr	r1, [r1, #4]
 800a72c:	e7cc      	b.n	800a6c8 <_malloc_r+0x2c>
 800a72e:	1cc4      	adds	r4, r0, #3
 800a730:	f024 0403 	bic.w	r4, r4, #3
 800a734:	42a0      	cmp	r0, r4
 800a736:	d005      	beq.n	800a744 <_malloc_r+0xa8>
 800a738:	1a21      	subs	r1, r4, r0
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 f95a 	bl	800a9f4 <_sbrk_r>
 800a740:	3001      	adds	r0, #1
 800a742:	d0cf      	beq.n	800a6e4 <_malloc_r+0x48>
 800a744:	6025      	str	r5, [r4, #0]
 800a746:	e7db      	b.n	800a700 <_malloc_r+0x64>
 800a748:	20002cb4 	.word	0x20002cb4
 800a74c:	20002cb8 	.word	0x20002cb8

0800a750 <__ssputs_r>:
 800a750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a754:	688e      	ldr	r6, [r1, #8]
 800a756:	429e      	cmp	r6, r3
 800a758:	4682      	mov	sl, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	4690      	mov	r8, r2
 800a75e:	4699      	mov	r9, r3
 800a760:	d837      	bhi.n	800a7d2 <__ssputs_r+0x82>
 800a762:	898a      	ldrh	r2, [r1, #12]
 800a764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a768:	d031      	beq.n	800a7ce <__ssputs_r+0x7e>
 800a76a:	6825      	ldr	r5, [r4, #0]
 800a76c:	6909      	ldr	r1, [r1, #16]
 800a76e:	1a6f      	subs	r7, r5, r1
 800a770:	6965      	ldr	r5, [r4, #20]
 800a772:	2302      	movs	r3, #2
 800a774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a778:	fb95 f5f3 	sdiv	r5, r5, r3
 800a77c:	f109 0301 	add.w	r3, r9, #1
 800a780:	443b      	add	r3, r7
 800a782:	429d      	cmp	r5, r3
 800a784:	bf38      	it	cc
 800a786:	461d      	movcc	r5, r3
 800a788:	0553      	lsls	r3, r2, #21
 800a78a:	d530      	bpl.n	800a7ee <__ssputs_r+0x9e>
 800a78c:	4629      	mov	r1, r5
 800a78e:	f7ff ff85 	bl	800a69c <_malloc_r>
 800a792:	4606      	mov	r6, r0
 800a794:	b950      	cbnz	r0, 800a7ac <__ssputs_r+0x5c>
 800a796:	230c      	movs	r3, #12
 800a798:	f8ca 3000 	str.w	r3, [sl]
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ac:	463a      	mov	r2, r7
 800a7ae:	6921      	ldr	r1, [r4, #16]
 800a7b0:	f7fe f950 	bl	8008a54 <memcpy>
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7be:	81a3      	strh	r3, [r4, #12]
 800a7c0:	6126      	str	r6, [r4, #16]
 800a7c2:	6165      	str	r5, [r4, #20]
 800a7c4:	443e      	add	r6, r7
 800a7c6:	1bed      	subs	r5, r5, r7
 800a7c8:	6026      	str	r6, [r4, #0]
 800a7ca:	60a5      	str	r5, [r4, #8]
 800a7cc:	464e      	mov	r6, r9
 800a7ce:	454e      	cmp	r6, r9
 800a7d0:	d900      	bls.n	800a7d4 <__ssputs_r+0x84>
 800a7d2:	464e      	mov	r6, r9
 800a7d4:	4632      	mov	r2, r6
 800a7d6:	4641      	mov	r1, r8
 800a7d8:	6820      	ldr	r0, [r4, #0]
 800a7da:	f000 f92d 	bl	800aa38 <memmove>
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	1b9b      	subs	r3, r3, r6
 800a7e2:	60a3      	str	r3, [r4, #8]
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	441e      	add	r6, r3
 800a7e8:	6026      	str	r6, [r4, #0]
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	e7dc      	b.n	800a7a8 <__ssputs_r+0x58>
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	f000 f93d 	bl	800aa6e <_realloc_r>
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d1e2      	bne.n	800a7c0 <__ssputs_r+0x70>
 800a7fa:	6921      	ldr	r1, [r4, #16]
 800a7fc:	4650      	mov	r0, sl
 800a7fe:	f7ff feff 	bl	800a600 <_free_r>
 800a802:	e7c8      	b.n	800a796 <__ssputs_r+0x46>

0800a804 <_svfiprintf_r>:
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	461d      	mov	r5, r3
 800a80a:	898b      	ldrh	r3, [r1, #12]
 800a80c:	061f      	lsls	r7, r3, #24
 800a80e:	b09d      	sub	sp, #116	; 0x74
 800a810:	4680      	mov	r8, r0
 800a812:	460c      	mov	r4, r1
 800a814:	4616      	mov	r6, r2
 800a816:	d50f      	bpl.n	800a838 <_svfiprintf_r+0x34>
 800a818:	690b      	ldr	r3, [r1, #16]
 800a81a:	b96b      	cbnz	r3, 800a838 <_svfiprintf_r+0x34>
 800a81c:	2140      	movs	r1, #64	; 0x40
 800a81e:	f7ff ff3d 	bl	800a69c <_malloc_r>
 800a822:	6020      	str	r0, [r4, #0]
 800a824:	6120      	str	r0, [r4, #16]
 800a826:	b928      	cbnz	r0, 800a834 <_svfiprintf_r+0x30>
 800a828:	230c      	movs	r3, #12
 800a82a:	f8c8 3000 	str.w	r3, [r8]
 800a82e:	f04f 30ff 	mov.w	r0, #4294967295
 800a832:	e0c8      	b.n	800a9c6 <_svfiprintf_r+0x1c2>
 800a834:	2340      	movs	r3, #64	; 0x40
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	2300      	movs	r3, #0
 800a83a:	9309      	str	r3, [sp, #36]	; 0x24
 800a83c:	2320      	movs	r3, #32
 800a83e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a842:	2330      	movs	r3, #48	; 0x30
 800a844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a848:	9503      	str	r5, [sp, #12]
 800a84a:	f04f 0b01 	mov.w	fp, #1
 800a84e:	4637      	mov	r7, r6
 800a850:	463d      	mov	r5, r7
 800a852:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a856:	b10b      	cbz	r3, 800a85c <_svfiprintf_r+0x58>
 800a858:	2b25      	cmp	r3, #37	; 0x25
 800a85a:	d13e      	bne.n	800a8da <_svfiprintf_r+0xd6>
 800a85c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a860:	d00b      	beq.n	800a87a <_svfiprintf_r+0x76>
 800a862:	4653      	mov	r3, sl
 800a864:	4632      	mov	r2, r6
 800a866:	4621      	mov	r1, r4
 800a868:	4640      	mov	r0, r8
 800a86a:	f7ff ff71 	bl	800a750 <__ssputs_r>
 800a86e:	3001      	adds	r0, #1
 800a870:	f000 80a4 	beq.w	800a9bc <_svfiprintf_r+0x1b8>
 800a874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a876:	4453      	add	r3, sl
 800a878:	9309      	str	r3, [sp, #36]	; 0x24
 800a87a:	783b      	ldrb	r3, [r7, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 809d 	beq.w	800a9bc <_svfiprintf_r+0x1b8>
 800a882:	2300      	movs	r3, #0
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a88c:	9304      	str	r3, [sp, #16]
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a894:	931a      	str	r3, [sp, #104]	; 0x68
 800a896:	462f      	mov	r7, r5
 800a898:	2205      	movs	r2, #5
 800a89a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a89e:	4850      	ldr	r0, [pc, #320]	; (800a9e0 <_svfiprintf_r+0x1dc>)
 800a8a0:	f7f5 fc9e 	bl	80001e0 <memchr>
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	b9d0      	cbnz	r0, 800a8de <_svfiprintf_r+0xda>
 800a8a8:	06d9      	lsls	r1, r3, #27
 800a8aa:	bf44      	itt	mi
 800a8ac:	2220      	movmi	r2, #32
 800a8ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8b2:	071a      	lsls	r2, r3, #28
 800a8b4:	bf44      	itt	mi
 800a8b6:	222b      	movmi	r2, #43	; 0x2b
 800a8b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8bc:	782a      	ldrb	r2, [r5, #0]
 800a8be:	2a2a      	cmp	r2, #42	; 0x2a
 800a8c0:	d015      	beq.n	800a8ee <_svfiprintf_r+0xea>
 800a8c2:	9a07      	ldr	r2, [sp, #28]
 800a8c4:	462f      	mov	r7, r5
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	250a      	movs	r5, #10
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d0:	3b30      	subs	r3, #48	; 0x30
 800a8d2:	2b09      	cmp	r3, #9
 800a8d4:	d94d      	bls.n	800a972 <_svfiprintf_r+0x16e>
 800a8d6:	b1b8      	cbz	r0, 800a908 <_svfiprintf_r+0x104>
 800a8d8:	e00f      	b.n	800a8fa <_svfiprintf_r+0xf6>
 800a8da:	462f      	mov	r7, r5
 800a8dc:	e7b8      	b.n	800a850 <_svfiprintf_r+0x4c>
 800a8de:	4a40      	ldr	r2, [pc, #256]	; (800a9e0 <_svfiprintf_r+0x1dc>)
 800a8e0:	1a80      	subs	r0, r0, r2
 800a8e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a8e6:	4318      	orrs	r0, r3
 800a8e8:	9004      	str	r0, [sp, #16]
 800a8ea:	463d      	mov	r5, r7
 800a8ec:	e7d3      	b.n	800a896 <_svfiprintf_r+0x92>
 800a8ee:	9a03      	ldr	r2, [sp, #12]
 800a8f0:	1d11      	adds	r1, r2, #4
 800a8f2:	6812      	ldr	r2, [r2, #0]
 800a8f4:	9103      	str	r1, [sp, #12]
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	db01      	blt.n	800a8fe <_svfiprintf_r+0xfa>
 800a8fa:	9207      	str	r2, [sp, #28]
 800a8fc:	e004      	b.n	800a908 <_svfiprintf_r+0x104>
 800a8fe:	4252      	negs	r2, r2
 800a900:	f043 0302 	orr.w	r3, r3, #2
 800a904:	9207      	str	r2, [sp, #28]
 800a906:	9304      	str	r3, [sp, #16]
 800a908:	783b      	ldrb	r3, [r7, #0]
 800a90a:	2b2e      	cmp	r3, #46	; 0x2e
 800a90c:	d10c      	bne.n	800a928 <_svfiprintf_r+0x124>
 800a90e:	787b      	ldrb	r3, [r7, #1]
 800a910:	2b2a      	cmp	r3, #42	; 0x2a
 800a912:	d133      	bne.n	800a97c <_svfiprintf_r+0x178>
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	1d1a      	adds	r2, r3, #4
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	9203      	str	r2, [sp, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	bfb8      	it	lt
 800a920:	f04f 33ff 	movlt.w	r3, #4294967295
 800a924:	3702      	adds	r7, #2
 800a926:	9305      	str	r3, [sp, #20]
 800a928:	4d2e      	ldr	r5, [pc, #184]	; (800a9e4 <_svfiprintf_r+0x1e0>)
 800a92a:	7839      	ldrb	r1, [r7, #0]
 800a92c:	2203      	movs	r2, #3
 800a92e:	4628      	mov	r0, r5
 800a930:	f7f5 fc56 	bl	80001e0 <memchr>
 800a934:	b138      	cbz	r0, 800a946 <_svfiprintf_r+0x142>
 800a936:	2340      	movs	r3, #64	; 0x40
 800a938:	1b40      	subs	r0, r0, r5
 800a93a:	fa03 f000 	lsl.w	r0, r3, r0
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	4303      	orrs	r3, r0
 800a942:	3701      	adds	r7, #1
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	7839      	ldrb	r1, [r7, #0]
 800a948:	4827      	ldr	r0, [pc, #156]	; (800a9e8 <_svfiprintf_r+0x1e4>)
 800a94a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a94e:	2206      	movs	r2, #6
 800a950:	1c7e      	adds	r6, r7, #1
 800a952:	f7f5 fc45 	bl	80001e0 <memchr>
 800a956:	2800      	cmp	r0, #0
 800a958:	d038      	beq.n	800a9cc <_svfiprintf_r+0x1c8>
 800a95a:	4b24      	ldr	r3, [pc, #144]	; (800a9ec <_svfiprintf_r+0x1e8>)
 800a95c:	bb13      	cbnz	r3, 800a9a4 <_svfiprintf_r+0x1a0>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	3307      	adds	r3, #7
 800a962:	f023 0307 	bic.w	r3, r3, #7
 800a966:	3308      	adds	r3, #8
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96c:	444b      	add	r3, r9
 800a96e:	9309      	str	r3, [sp, #36]	; 0x24
 800a970:	e76d      	b.n	800a84e <_svfiprintf_r+0x4a>
 800a972:	fb05 3202 	mla	r2, r5, r2, r3
 800a976:	2001      	movs	r0, #1
 800a978:	460f      	mov	r7, r1
 800a97a:	e7a6      	b.n	800a8ca <_svfiprintf_r+0xc6>
 800a97c:	2300      	movs	r3, #0
 800a97e:	3701      	adds	r7, #1
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	4619      	mov	r1, r3
 800a984:	250a      	movs	r5, #10
 800a986:	4638      	mov	r0, r7
 800a988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98c:	3a30      	subs	r2, #48	; 0x30
 800a98e:	2a09      	cmp	r2, #9
 800a990:	d903      	bls.n	800a99a <_svfiprintf_r+0x196>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0c8      	beq.n	800a928 <_svfiprintf_r+0x124>
 800a996:	9105      	str	r1, [sp, #20]
 800a998:	e7c6      	b.n	800a928 <_svfiprintf_r+0x124>
 800a99a:	fb05 2101 	mla	r1, r5, r1, r2
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	e7f0      	b.n	800a986 <_svfiprintf_r+0x182>
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	4b11      	ldr	r3, [pc, #68]	; (800a9f0 <_svfiprintf_r+0x1ec>)
 800a9ac:	a904      	add	r1, sp, #16
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	f7fe f8f8 	bl	8008ba4 <_printf_float>
 800a9b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a9b8:	4681      	mov	r9, r0
 800a9ba:	d1d6      	bne.n	800a96a <_svfiprintf_r+0x166>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	065b      	lsls	r3, r3, #25
 800a9c0:	f53f af35 	bmi.w	800a82e <_svfiprintf_r+0x2a>
 800a9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9c6:	b01d      	add	sp, #116	; 0x74
 800a9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9cc:	ab03      	add	r3, sp, #12
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <_svfiprintf_r+0x1ec>)
 800a9d4:	a904      	add	r1, sp, #16
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	f7fe fb9a 	bl	8009110 <_printf_i>
 800a9dc:	e7ea      	b.n	800a9b4 <_svfiprintf_r+0x1b0>
 800a9de:	bf00      	nop
 800a9e0:	0800b28c 	.word	0x0800b28c
 800a9e4:	0800b292 	.word	0x0800b292
 800a9e8:	0800b296 	.word	0x0800b296
 800a9ec:	08008ba5 	.word	0x08008ba5
 800a9f0:	0800a751 	.word	0x0800a751

0800a9f4 <_sbrk_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4c06      	ldr	r4, [pc, #24]	; (800aa10 <_sbrk_r+0x1c>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	6023      	str	r3, [r4, #0]
 800aa00:	f7f7 fbae 	bl	8002160 <_sbrk>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_sbrk_r+0x1a>
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_sbrk_r+0x1a>
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	20002f08 	.word	0x20002f08

0800aa14 <__ascii_mbtowc>:
 800aa14:	b082      	sub	sp, #8
 800aa16:	b901      	cbnz	r1, 800aa1a <__ascii_mbtowc+0x6>
 800aa18:	a901      	add	r1, sp, #4
 800aa1a:	b142      	cbz	r2, 800aa2e <__ascii_mbtowc+0x1a>
 800aa1c:	b14b      	cbz	r3, 800aa32 <__ascii_mbtowc+0x1e>
 800aa1e:	7813      	ldrb	r3, [r2, #0]
 800aa20:	600b      	str	r3, [r1, #0]
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	1c10      	adds	r0, r2, #0
 800aa26:	bf18      	it	ne
 800aa28:	2001      	movne	r0, #1
 800aa2a:	b002      	add	sp, #8
 800aa2c:	4770      	bx	lr
 800aa2e:	4610      	mov	r0, r2
 800aa30:	e7fb      	b.n	800aa2a <__ascii_mbtowc+0x16>
 800aa32:	f06f 0001 	mvn.w	r0, #1
 800aa36:	e7f8      	b.n	800aa2a <__ascii_mbtowc+0x16>

0800aa38 <memmove>:
 800aa38:	4288      	cmp	r0, r1
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	eb01 0302 	add.w	r3, r1, r2
 800aa40:	d807      	bhi.n	800aa52 <memmove+0x1a>
 800aa42:	1e42      	subs	r2, r0, #1
 800aa44:	4299      	cmp	r1, r3
 800aa46:	d00a      	beq.n	800aa5e <memmove+0x26>
 800aa48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa50:	e7f8      	b.n	800aa44 <memmove+0xc>
 800aa52:	4283      	cmp	r3, r0
 800aa54:	d9f5      	bls.n	800aa42 <memmove+0xa>
 800aa56:	1881      	adds	r1, r0, r2
 800aa58:	1ad2      	subs	r2, r2, r3
 800aa5a:	42d3      	cmn	r3, r2
 800aa5c:	d100      	bne.n	800aa60 <memmove+0x28>
 800aa5e:	bd10      	pop	{r4, pc}
 800aa60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa68:	e7f7      	b.n	800aa5a <memmove+0x22>

0800aa6a <__malloc_lock>:
 800aa6a:	4770      	bx	lr

0800aa6c <__malloc_unlock>:
 800aa6c:	4770      	bx	lr

0800aa6e <_realloc_r>:
 800aa6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa70:	4607      	mov	r7, r0
 800aa72:	4614      	mov	r4, r2
 800aa74:	460e      	mov	r6, r1
 800aa76:	b921      	cbnz	r1, 800aa82 <_realloc_r+0x14>
 800aa78:	4611      	mov	r1, r2
 800aa7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa7e:	f7ff be0d 	b.w	800a69c <_malloc_r>
 800aa82:	b922      	cbnz	r2, 800aa8e <_realloc_r+0x20>
 800aa84:	f7ff fdbc 	bl	800a600 <_free_r>
 800aa88:	4625      	mov	r5, r4
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8e:	f000 f821 	bl	800aad4 <_malloc_usable_size_r>
 800aa92:	42a0      	cmp	r0, r4
 800aa94:	d20f      	bcs.n	800aab6 <_realloc_r+0x48>
 800aa96:	4621      	mov	r1, r4
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7ff fdff 	bl	800a69c <_malloc_r>
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d0f2      	beq.n	800aa8a <_realloc_r+0x1c>
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	f7fd ffd4 	bl	8008a54 <memcpy>
 800aaac:	4631      	mov	r1, r6
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7ff fda6 	bl	800a600 <_free_r>
 800aab4:	e7e9      	b.n	800aa8a <_realloc_r+0x1c>
 800aab6:	4635      	mov	r5, r6
 800aab8:	e7e7      	b.n	800aa8a <_realloc_r+0x1c>

0800aaba <__ascii_wctomb>:
 800aaba:	b149      	cbz	r1, 800aad0 <__ascii_wctomb+0x16>
 800aabc:	2aff      	cmp	r2, #255	; 0xff
 800aabe:	bf85      	ittet	hi
 800aac0:	238a      	movhi	r3, #138	; 0x8a
 800aac2:	6003      	strhi	r3, [r0, #0]
 800aac4:	700a      	strbls	r2, [r1, #0]
 800aac6:	f04f 30ff 	movhi.w	r0, #4294967295
 800aaca:	bf98      	it	ls
 800aacc:	2001      	movls	r0, #1
 800aace:	4770      	bx	lr
 800aad0:	4608      	mov	r0, r1
 800aad2:	4770      	bx	lr

0800aad4 <_malloc_usable_size_r>:
 800aad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad8:	1f18      	subs	r0, r3, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bfbc      	itt	lt
 800aade:	580b      	ldrlt	r3, [r1, r0]
 800aae0:	18c0      	addlt	r0, r0, r3
 800aae2:	4770      	bx	lr

0800aae4 <log>:
 800aae4:	b570      	push	{r4, r5, r6, lr}
 800aae6:	ed2d 8b02 	vpush	{d8}
 800aaea:	b08a      	sub	sp, #40	; 0x28
 800aaec:	ec55 4b10 	vmov	r4, r5, d0
 800aaf0:	f000 f8ca 	bl	800ac88 <__ieee754_log>
 800aaf4:	4b36      	ldr	r3, [pc, #216]	; (800abd0 <log+0xec>)
 800aaf6:	eeb0 8a40 	vmov.f32	s16, s0
 800aafa:	eef0 8a60 	vmov.f32	s17, s1
 800aafe:	f993 6000 	ldrsb.w	r6, [r3]
 800ab02:	1c73      	adds	r3, r6, #1
 800ab04:	d05b      	beq.n	800abbe <log+0xda>
 800ab06:	4622      	mov	r2, r4
 800ab08:	462b      	mov	r3, r5
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	f7f6 f80d 	bl	8000b2c <__aeabi_dcmpun>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d153      	bne.n	800abbe <log+0xda>
 800ab16:	2200      	movs	r2, #0
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	f7f5 fffb 	bl	8000b18 <__aeabi_dcmpgt>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d14b      	bne.n	800abbe <log+0xda>
 800ab26:	4b2b      	ldr	r3, [pc, #172]	; (800abd4 <log+0xf0>)
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	9008      	str	r0, [sp, #32]
 800ab2c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ab30:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ab34:	b9a6      	cbnz	r6, 800ab60 <log+0x7c>
 800ab36:	4b28      	ldr	r3, [pc, #160]	; (800abd8 <log+0xf4>)
 800ab38:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ab3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab40:	4620      	mov	r0, r4
 800ab42:	2200      	movs	r2, #0
 800ab44:	2300      	movs	r3, #0
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab4c:	bb40      	cbnz	r0, 800aba0 <log+0xbc>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	2e02      	cmp	r6, #2
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	d119      	bne.n	800ab8a <log+0xa6>
 800ab56:	f7fd ff53 	bl	8008a00 <__errno>
 800ab5a:	2321      	movs	r3, #33	; 0x21
 800ab5c:	6003      	str	r3, [r0, #0]
 800ab5e:	e019      	b.n	800ab94 <log+0xb0>
 800ab60:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <log+0xf8>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab68:	4620      	mov	r0, r4
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d0ea      	beq.n	800ab4e <log+0x6a>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	429e      	cmp	r6, r3
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	d111      	bne.n	800aba4 <log+0xc0>
 800ab80:	f7fd ff3e 	bl	8008a00 <__errno>
 800ab84:	2322      	movs	r3, #34	; 0x22
 800ab86:	6003      	str	r3, [r0, #0]
 800ab88:	e011      	b.n	800abae <log+0xca>
 800ab8a:	4668      	mov	r0, sp
 800ab8c:	f000 fa31 	bl	800aff2 <matherr>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0e0      	beq.n	800ab56 <log+0x72>
 800ab94:	4812      	ldr	r0, [pc, #72]	; (800abe0 <log+0xfc>)
 800ab96:	f000 fa2f 	bl	800aff8 <nan>
 800ab9a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ab9e:	e006      	b.n	800abae <log+0xca>
 800aba0:	2302      	movs	r3, #2
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	4668      	mov	r0, sp
 800aba6:	f000 fa24 	bl	800aff2 <matherr>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d0e8      	beq.n	800ab80 <log+0x9c>
 800abae:	9b08      	ldr	r3, [sp, #32]
 800abb0:	b11b      	cbz	r3, 800abba <log+0xd6>
 800abb2:	f7fd ff25 	bl	8008a00 <__errno>
 800abb6:	9b08      	ldr	r3, [sp, #32]
 800abb8:	6003      	str	r3, [r0, #0]
 800abba:	ed9d 8b06 	vldr	d8, [sp, #24]
 800abbe:	eeb0 0a48 	vmov.f32	s0, s16
 800abc2:	eef0 0a68 	vmov.f32	s1, s17
 800abc6:	b00a      	add	sp, #40	; 0x28
 800abc8:	ecbd 8b02 	vpop	{d8}
 800abcc:	bd70      	pop	{r4, r5, r6, pc}
 800abce:	bf00      	nop
 800abd0:	200001e0 	.word	0x200001e0
 800abd4:	0800b3a8 	.word	0x0800b3a8
 800abd8:	c7efffff 	.word	0xc7efffff
 800abdc:	fff00000 	.word	0xfff00000
 800abe0:	0800b291 	.word	0x0800b291

0800abe4 <sqrtf>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	ed2d 8b02 	vpush	{d8}
 800abea:	b08a      	sub	sp, #40	; 0x28
 800abec:	eeb0 8a40 	vmov.f32	s16, s0
 800abf0:	f000 f9fc 	bl	800afec <__ieee754_sqrtf>
 800abf4:	4b21      	ldr	r3, [pc, #132]	; (800ac7c <sqrtf+0x98>)
 800abf6:	f993 4000 	ldrsb.w	r4, [r3]
 800abfa:	1c63      	adds	r3, r4, #1
 800abfc:	d02c      	beq.n	800ac58 <sqrtf+0x74>
 800abfe:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac06:	d627      	bvs.n	800ac58 <sqrtf+0x74>
 800ac08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac10:	d522      	bpl.n	800ac58 <sqrtf+0x74>
 800ac12:	2301      	movs	r3, #1
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	4b1a      	ldr	r3, [pc, #104]	; (800ac80 <sqrtf+0x9c>)
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	ee18 0a10 	vmov	r0, s16
 800ac1e:	2300      	movs	r3, #0
 800ac20:	9308      	str	r3, [sp, #32]
 800ac22:	f7f5 fc91 	bl	8000548 <__aeabi_f2d>
 800ac26:	2200      	movs	r2, #0
 800ac28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac30:	2300      	movs	r3, #0
 800ac32:	b9ac      	cbnz	r4, 800ac60 <sqrtf+0x7c>
 800ac34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac38:	4668      	mov	r0, sp
 800ac3a:	f000 f9da 	bl	800aff2 <matherr>
 800ac3e:	b1b8      	cbz	r0, 800ac70 <sqrtf+0x8c>
 800ac40:	9b08      	ldr	r3, [sp, #32]
 800ac42:	b11b      	cbz	r3, 800ac4c <sqrtf+0x68>
 800ac44:	f7fd fedc 	bl	8008a00 <__errno>
 800ac48:	9b08      	ldr	r3, [sp, #32]
 800ac4a:	6003      	str	r3, [r0, #0]
 800ac4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac50:	f7f5 ffca 	bl	8000be8 <__aeabi_d2f>
 800ac54:	ee00 0a10 	vmov	s0, r0
 800ac58:	b00a      	add	sp, #40	; 0x28
 800ac5a:	ecbd 8b02 	vpop	{d8}
 800ac5e:	bd10      	pop	{r4, pc}
 800ac60:	4610      	mov	r0, r2
 800ac62:	4619      	mov	r1, r3
 800ac64:	f7f5 fdf2 	bl	800084c <__aeabi_ddiv>
 800ac68:	2c02      	cmp	r4, #2
 800ac6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac6e:	d1e3      	bne.n	800ac38 <sqrtf+0x54>
 800ac70:	f7fd fec6 	bl	8008a00 <__errno>
 800ac74:	2321      	movs	r3, #33	; 0x21
 800ac76:	6003      	str	r3, [r0, #0]
 800ac78:	e7e2      	b.n	800ac40 <sqrtf+0x5c>
 800ac7a:	bf00      	nop
 800ac7c:	200001e0 	.word	0x200001e0
 800ac80:	0800b3ac 	.word	0x0800b3ac
 800ac84:	00000000 	.word	0x00000000

0800ac88 <__ieee754_log>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	ec51 0b10 	vmov	r0, r1, d0
 800ac90:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ac94:	b087      	sub	sp, #28
 800ac96:	460d      	mov	r5, r1
 800ac98:	da27      	bge.n	800acea <__ieee754_log+0x62>
 800ac9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac9e:	4303      	orrs	r3, r0
 800aca0:	ee10 2a10 	vmov	r2, s0
 800aca4:	d10a      	bne.n	800acbc <__ieee754_log+0x34>
 800aca6:	49cc      	ldr	r1, [pc, #816]	; (800afd8 <__ieee754_log+0x350>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	2000      	movs	r0, #0
 800acae:	f7f5 fdcd 	bl	800084c <__aeabi_ddiv>
 800acb2:	ec41 0b10 	vmov	d0, r0, r1
 800acb6:	b007      	add	sp, #28
 800acb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbc:	2900      	cmp	r1, #0
 800acbe:	da05      	bge.n	800accc <__ieee754_log+0x44>
 800acc0:	460b      	mov	r3, r1
 800acc2:	f7f5 fae1 	bl	8000288 <__aeabi_dsub>
 800acc6:	2200      	movs	r2, #0
 800acc8:	2300      	movs	r3, #0
 800acca:	e7f0      	b.n	800acae <__ieee754_log+0x26>
 800accc:	4bc3      	ldr	r3, [pc, #780]	; (800afdc <__ieee754_log+0x354>)
 800acce:	2200      	movs	r2, #0
 800acd0:	f7f5 fc92 	bl	80005f8 <__aeabi_dmul>
 800acd4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800acd8:	460d      	mov	r5, r1
 800acda:	4ac1      	ldr	r2, [pc, #772]	; (800afe0 <__ieee754_log+0x358>)
 800acdc:	4295      	cmp	r5, r2
 800acde:	dd06      	ble.n	800acee <__ieee754_log+0x66>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	f7f5 fad2 	bl	800028c <__adddf3>
 800ace8:	e7e3      	b.n	800acb2 <__ieee754_log+0x2a>
 800acea:	2300      	movs	r3, #0
 800acec:	e7f5      	b.n	800acda <__ieee754_log+0x52>
 800acee:	152c      	asrs	r4, r5, #20
 800acf0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800acf4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800acf8:	441c      	add	r4, r3
 800acfa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800acfe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ad02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad06:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ad0a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ad0e:	ea42 0105 	orr.w	r1, r2, r5
 800ad12:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ad16:	2200      	movs	r2, #0
 800ad18:	4bb2      	ldr	r3, [pc, #712]	; (800afe4 <__ieee754_log+0x35c>)
 800ad1a:	f7f5 fab5 	bl	8000288 <__aeabi_dsub>
 800ad1e:	1cab      	adds	r3, r5, #2
 800ad20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	4682      	mov	sl, r0
 800ad28:	468b      	mov	fp, r1
 800ad2a:	f04f 0200 	mov.w	r2, #0
 800ad2e:	dc53      	bgt.n	800add8 <__ieee754_log+0x150>
 800ad30:	2300      	movs	r3, #0
 800ad32:	f7f5 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad36:	b1d0      	cbz	r0, 800ad6e <__ieee754_log+0xe6>
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	f000 8120 	beq.w	800af7e <__ieee754_log+0x2f6>
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f7f5 fbf0 	bl	8000524 <__aeabi_i2d>
 800ad44:	a390      	add	r3, pc, #576	; (adr r3, 800af88 <__ieee754_log+0x300>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	f7f5 fc53 	bl	80005f8 <__aeabi_dmul>
 800ad52:	a38f      	add	r3, pc, #572	; (adr r3, 800af90 <__ieee754_log+0x308>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	4604      	mov	r4, r0
 800ad5a:	460d      	mov	r5, r1
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4620      	mov	r0, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	e7ba      	b.n	800ace4 <__ieee754_log+0x5c>
 800ad6e:	a38a      	add	r3, pc, #552	; (adr r3, 800af98 <__ieee754_log+0x310>)
 800ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad74:	4650      	mov	r0, sl
 800ad76:	4659      	mov	r1, fp
 800ad78:	f7f5 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	2000      	movs	r0, #0
 800ad82:	4999      	ldr	r1, [pc, #612]	; (800afe8 <__ieee754_log+0x360>)
 800ad84:	f7f5 fa80 	bl	8000288 <__aeabi_dsub>
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	465b      	mov	r3, fp
 800ad90:	4650      	mov	r0, sl
 800ad92:	4659      	mov	r1, fp
 800ad94:	f7f5 fc30 	bl	80005f8 <__aeabi_dmul>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	4639      	mov	r1, r7
 800ada0:	f7f5 fc2a 	bl	80005f8 <__aeabi_dmul>
 800ada4:	4606      	mov	r6, r0
 800ada6:	460f      	mov	r7, r1
 800ada8:	b914      	cbnz	r4, 800adb0 <__ieee754_log+0x128>
 800adaa:	4632      	mov	r2, r6
 800adac:	463b      	mov	r3, r7
 800adae:	e0a0      	b.n	800aef2 <__ieee754_log+0x26a>
 800adb0:	4620      	mov	r0, r4
 800adb2:	f7f5 fbb7 	bl	8000524 <__aeabi_i2d>
 800adb6:	a374      	add	r3, pc, #464	; (adr r3, 800af88 <__ieee754_log+0x300>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	4680      	mov	r8, r0
 800adbe:	4689      	mov	r9, r1
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	a372      	add	r3, pc, #456	; (adr r3, 800af90 <__ieee754_log+0x308>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	4604      	mov	r4, r0
 800adcc:	460d      	mov	r5, r1
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fc11 	bl	80005f8 <__aeabi_dmul>
 800add6:	e0a5      	b.n	800af24 <__ieee754_log+0x29c>
 800add8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800addc:	f7f5 fa56 	bl	800028c <__adddf3>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4650      	mov	r0, sl
 800ade6:	4659      	mov	r1, fp
 800ade8:	f7f5 fd30 	bl	800084c <__aeabi_ddiv>
 800adec:	e9cd 0100 	strd	r0, r1, [sp]
 800adf0:	4620      	mov	r0, r4
 800adf2:	f7f5 fb97 	bl	8000524 <__aeabi_i2d>
 800adf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adfe:	4610      	mov	r0, r2
 800ae00:	4619      	mov	r1, r3
 800ae02:	f7f5 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae0e:	f7f5 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ae12:	a363      	add	r3, pc, #396	; (adr r3, 800afa0 <__ieee754_log+0x318>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	f7f5 fbec 	bl	80005f8 <__aeabi_dmul>
 800ae20:	a361      	add	r3, pc, #388	; (adr r3, 800afa8 <__ieee754_log+0x320>)
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	f7f5 fa31 	bl	800028c <__adddf3>
 800ae2a:	4642      	mov	r2, r8
 800ae2c:	464b      	mov	r3, r9
 800ae2e:	f7f5 fbe3 	bl	80005f8 <__aeabi_dmul>
 800ae32:	a35f      	add	r3, pc, #380	; (adr r3, 800afb0 <__ieee754_log+0x328>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fa28 	bl	800028c <__adddf3>
 800ae3c:	4642      	mov	r2, r8
 800ae3e:	464b      	mov	r3, r9
 800ae40:	f7f5 fbda 	bl	80005f8 <__aeabi_dmul>
 800ae44:	a35c      	add	r3, pc, #368	; (adr r3, 800afb8 <__ieee754_log+0x330>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	f7f5 fa1f 	bl	800028c <__adddf3>
 800ae4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	a35a      	add	r3, pc, #360	; (adr r3, 800afc0 <__ieee754_log+0x338>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae60:	4640      	mov	r0, r8
 800ae62:	4649      	mov	r1, r9
 800ae64:	f7f5 fbc8 	bl	80005f8 <__aeabi_dmul>
 800ae68:	a357      	add	r3, pc, #348	; (adr r3, 800afc8 <__ieee754_log+0x340>)
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	f7f5 fa0d 	bl	800028c <__adddf3>
 800ae72:	4642      	mov	r2, r8
 800ae74:	464b      	mov	r3, r9
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	a355      	add	r3, pc, #340	; (adr r3, 800afd0 <__ieee754_log+0x348>)
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f7f5 fa04 	bl	800028c <__adddf3>
 800ae84:	4642      	mov	r2, r8
 800ae86:	464b      	mov	r3, r9
 800ae88:	f7f5 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ae8c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ae98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae9c:	f7f5 f9f6 	bl	800028c <__adddf3>
 800aea0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800aea4:	3551      	adds	r5, #81	; 0x51
 800aea6:	4335      	orrs	r5, r6
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	4680      	mov	r8, r0
 800aeac:	4689      	mov	r9, r1
 800aeae:	dd48      	ble.n	800af42 <__ieee754_log+0x2ba>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	4b4d      	ldr	r3, [pc, #308]	; (800afe8 <__ieee754_log+0x360>)
 800aeb4:	4650      	mov	r0, sl
 800aeb6:	4659      	mov	r1, fp
 800aeb8:	f7f5 fb9e 	bl	80005f8 <__aeabi_dmul>
 800aebc:	4652      	mov	r2, sl
 800aebe:	465b      	mov	r3, fp
 800aec0:	f7f5 fb9a 	bl	80005f8 <__aeabi_dmul>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	4640      	mov	r0, r8
 800aece:	4649      	mov	r1, r9
 800aed0:	f7f5 f9dc 	bl	800028c <__adddf3>
 800aed4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aed8:	f7f5 fb8e 	bl	80005f8 <__aeabi_dmul>
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	b964      	cbnz	r4, 800aefc <__ieee754_log+0x274>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4630      	mov	r0, r6
 800aee8:	4639      	mov	r1, r7
 800aeea:	f7f5 f9cd 	bl	8000288 <__aeabi_dsub>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4650      	mov	r0, sl
 800aef4:	4659      	mov	r1, fp
 800aef6:	f7f5 f9c7 	bl	8000288 <__aeabi_dsub>
 800aefa:	e6da      	b.n	800acb2 <__ieee754_log+0x2a>
 800aefc:	a322      	add	r3, pc, #136	; (adr r3, 800af88 <__ieee754_log+0x300>)
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af06:	f7f5 fb77 	bl	80005f8 <__aeabi_dmul>
 800af0a:	a321      	add	r3, pc, #132	; (adr r3, 800af90 <__ieee754_log+0x308>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	4604      	mov	r4, r0
 800af12:	460d      	mov	r5, r1
 800af14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af18:	f7f5 fb6e 	bl	80005f8 <__aeabi_dmul>
 800af1c:	4642      	mov	r2, r8
 800af1e:	464b      	mov	r3, r9
 800af20:	f7f5 f9b4 	bl	800028c <__adddf3>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4630      	mov	r0, r6
 800af2a:	4639      	mov	r1, r7
 800af2c:	f7f5 f9ac 	bl	8000288 <__aeabi_dsub>
 800af30:	4652      	mov	r2, sl
 800af32:	465b      	mov	r3, fp
 800af34:	f7f5 f9a8 	bl	8000288 <__aeabi_dsub>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	e7d9      	b.n	800aef6 <__ieee754_log+0x26e>
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
 800af46:	4650      	mov	r0, sl
 800af48:	4659      	mov	r1, fp
 800af4a:	f7f5 f99d 	bl	8000288 <__aeabi_dsub>
 800af4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af52:	f7f5 fb51 	bl	80005f8 <__aeabi_dmul>
 800af56:	4606      	mov	r6, r0
 800af58:	460f      	mov	r7, r1
 800af5a:	2c00      	cmp	r4, #0
 800af5c:	f43f af25 	beq.w	800adaa <__ieee754_log+0x122>
 800af60:	a309      	add	r3, pc, #36	; (adr r3, 800af88 <__ieee754_log+0x300>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af6a:	f7f5 fb45 	bl	80005f8 <__aeabi_dmul>
 800af6e:	a308      	add	r3, pc, #32	; (adr r3, 800af90 <__ieee754_log+0x308>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	4604      	mov	r4, r0
 800af76:	460d      	mov	r5, r1
 800af78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af7c:	e729      	b.n	800add2 <__ieee754_log+0x14a>
 800af7e:	2000      	movs	r0, #0
 800af80:	2100      	movs	r1, #0
 800af82:	e696      	b.n	800acb2 <__ieee754_log+0x2a>
 800af84:	f3af 8000 	nop.w
 800af88:	fee00000 	.word	0xfee00000
 800af8c:	3fe62e42 	.word	0x3fe62e42
 800af90:	35793c76 	.word	0x35793c76
 800af94:	3dea39ef 	.word	0x3dea39ef
 800af98:	55555555 	.word	0x55555555
 800af9c:	3fd55555 	.word	0x3fd55555
 800afa0:	df3e5244 	.word	0xdf3e5244
 800afa4:	3fc2f112 	.word	0x3fc2f112
 800afa8:	96cb03de 	.word	0x96cb03de
 800afac:	3fc74664 	.word	0x3fc74664
 800afb0:	94229359 	.word	0x94229359
 800afb4:	3fd24924 	.word	0x3fd24924
 800afb8:	55555593 	.word	0x55555593
 800afbc:	3fe55555 	.word	0x3fe55555
 800afc0:	d078c69f 	.word	0xd078c69f
 800afc4:	3fc39a09 	.word	0x3fc39a09
 800afc8:	1d8e78af 	.word	0x1d8e78af
 800afcc:	3fcc71c5 	.word	0x3fcc71c5
 800afd0:	9997fa04 	.word	0x9997fa04
 800afd4:	3fd99999 	.word	0x3fd99999
 800afd8:	c3500000 	.word	0xc3500000
 800afdc:	43500000 	.word	0x43500000
 800afe0:	7fefffff 	.word	0x7fefffff
 800afe4:	3ff00000 	.word	0x3ff00000
 800afe8:	3fe00000 	.word	0x3fe00000

0800afec <__ieee754_sqrtf>:
 800afec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aff0:	4770      	bx	lr

0800aff2 <matherr>:
 800aff2:	2000      	movs	r0, #0
 800aff4:	4770      	bx	lr
	...

0800aff8 <nan>:
 800aff8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b000 <nan+0x8>
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	00000000 	.word	0x00000000
 800b004:	7ff80000 	.word	0x7ff80000

0800b008 <_init>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	bf00      	nop
 800b00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00e:	bc08      	pop	{r3}
 800b010:	469e      	mov	lr, r3
 800b012:	4770      	bx	lr

0800b014 <_fini>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	bf00      	nop
 800b018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01a:	bc08      	pop	{r3}
 800b01c:	469e      	mov	lr, r3
 800b01e:	4770      	bx	lr
