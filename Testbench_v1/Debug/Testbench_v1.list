
Testbench_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c28  08004c28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  08004ca0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004ca0  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7a4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000207c  00000000  00000000  0002f844  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  00032608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026b53  00000000  00000000  00033248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad3b  00000000  00000000  00059d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eca0a  00000000  00000000  00064ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001514e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a04  00000000  00000000  0015155c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b4c 	.word	0x08004b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b4c 	.word	0x08004b4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2304      	movs	r3, #4
 80005ba:	214e      	movs	r1, #78	; 0x4e
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <lcd_send_cmd+0x5c>)
 80005be:	f001 fb6d 	bl	8001c9c <HAL_I2C_Master_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000098 	.word	0x20000098

080005d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f043 030d 	orr.w	r3, r3, #13
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f043 0309 	orr.w	r3, r3, #9
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2304      	movs	r3, #4
 800061a:	214e      	movs	r1, #78	; 0x4e
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <lcd_send_data+0x5c>)
 800061e:	f001 fb3d 	bl	8001c9c <HAL_I2C_Master_Transmit>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000098 	.word	0x20000098

08000630 <lcd_clear>:

void lcd_clear (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000636:	2080      	movs	r0, #128	; 0x80
 8000638:	f7ff ff9a 	bl	8000570 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	e005      	b.n	800064e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000642:	2020      	movs	r0, #32
 8000644:	f7ff ffc4 	bl	80005d0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3301      	adds	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b45      	cmp	r3, #69	; 0x45
 8000652:	ddf6      	ble.n	8000642 <lcd_clear+0x12>
	}
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    switch (row)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <lcd_put_cur+0x16>
 800066c:	2b01      	cmp	r3, #1
 800066e:	d005      	beq.n	800067c <lcd_put_cur+0x20>
 8000670:	e009      	b.n	8000686 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	603b      	str	r3, [r7, #0]
            break;
 800067a:	e004      	b.n	8000686 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000682:	603b      	str	r3, [r7, #0]
            break;
 8000684:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff70 	bl	8000570 <lcd_send_cmd>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <lcd_init>:


void lcd_init (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800069c:	2032      	movs	r0, #50	; 0x32
 800069e:	f000 fc55 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006a2:	2030      	movs	r0, #48	; 0x30
 80006a4:	f7ff ff64 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006a8:	2005      	movs	r0, #5
 80006aa:	f000 fc4f 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ae:	2030      	movs	r0, #48	; 0x30
 80006b0:	f7ff ff5e 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fc49 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ba:	2030      	movs	r0, #48	; 0x30
 80006bc:	f7ff ff58 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f000 fc43 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006c6:	2020      	movs	r0, #32
 80006c8:	f7ff ff52 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 80006cc:	200a      	movs	r0, #10
 80006ce:	f000 fc3d 	bl	8000f4c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006d2:	2028      	movs	r0, #40	; 0x28
 80006d4:	f7ff ff4c 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 fc37 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006de:	2008      	movs	r0, #8
 80006e0:	f7ff ff46 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fc31 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff40 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 fc2b 	bl	8000f4c <HAL_Delay>
	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fc28 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006fc:	2006      	movs	r0, #6
 80006fe:	f7ff ff37 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fc22 	bl	8000f4c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff31 	bl	8000570 <lcd_send_cmd>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}

08000712 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800071a:	e006      	b.n	800072a <lcd_send_string+0x18>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff53 	bl	80005d0 <lcd_send_data>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f4      	bne.n	800071c <lcd_send_string+0xa>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fb8b 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f837 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f953 	bl	80009f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800074e:	f000 f921 	bl	8000994 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000752:	f000 f8df 	bl	8000914 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000756:	f000 f8a7 	bl	80008a8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800075a:	f7ff ff9d 	bl	8000698 <lcd_init>
  lcd_put_cur(0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff7b 	bl	800065c <lcd_put_cur>
  lcd_send_string("***Init!***");
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <main+0x70>)
 8000768:	f7ff ffd3 	bl	8000712 <lcd_send_string>
  HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f000 fbec 	bl	8000f4c <HAL_Delay>
  for(int i=3;i<=0;i--){
 8000774:	2303      	movs	r3, #3
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	e012      	b.n	80007a0 <main+0x64>
	  lcd_put_cur(1,0);
 800077a:	2100      	movs	r1, #0
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff ff6d 	bl	800065c <lcd_put_cur>
	  sprintf(lcdMsg,"%d",i);
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	490a      	ldr	r1, [pc, #40]	; (80007b0 <main+0x74>)
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <main+0x78>)
 8000788:	f003 fdda 	bl	8004340 <siprintf>
	  lcd_send_string(lcdMsg);
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <main+0x78>)
 800078e:	f7ff ffc0 	bl	8000712 <lcd_send_string>
	  HAL_Delay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000796:	f000 fbd9 	bl	8000f4c <HAL_Delay>
  for(int i=3;i<=0;i--){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3b01      	subs	r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dde9      	ble.n	800077a <main+0x3e>
  }
  lcd_clear();
 80007a6:	f7ff ff43 	bl	8000630 <lcd_clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x6e>
 80007ac:	08004b64 	.word	0x08004b64
 80007b0:	08004b70 	.word	0x08004b70
 80007b4:	200000ec 	.word	0x200000ec

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0b8      	sub	sp, #224	; 0xe0
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c2:	2244      	movs	r2, #68	; 0x44
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fdb2 	bl	8004330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2288      	movs	r2, #136	; 0x88
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 fda4 	bl	8004330 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800080e:	230a      	movs	r3, #10
 8000810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000814:	2307      	movs	r3, #7
 8000816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800082a:	4618      	mov	r0, r3
 800082c:	f001 fd9a 	bl	8002364 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000836:	f000 f950 	bl	8000ada <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2303      	movs	r3, #3
 8000842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000858:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800085c:	2104      	movs	r1, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f002 f966 	bl	8002b30 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800086a:	f000 f936 	bl	8000ada <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800086e:	2342      	movs	r3, #66	; 0x42
 8000870:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000872:	2300      	movs	r3, #0
 8000874:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000876:	2300      	movs	r3, #0
 8000878:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fb5b 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000888:	f000 f927 	bl	8000ada <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000890:	f001 fd12 	bl	80022b8 <HAL_PWREx_ControlVoltageScaling>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800089a:	f000 f91e 	bl	8000ada <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	37e0      	adds	r7, #224	; 0xe0
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_CAN1_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_CAN1_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_CAN1_Init+0x64>)
 80008b4:	2215      	movs	r2, #21
 80008b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_CAN1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_CAN1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_CAN1_Init+0x64>)
 80008c6:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80008ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_CAN1_Init+0x64>)
 80008ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_CAN1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_CAN1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_CAN1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_CAN1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_CAN1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_CAN1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_CAN1_Init+0x64>)
 80008fa:	f000 fb49 	bl	8000f90 <HAL_CAN_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 f8e9 	bl	8000ada <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000017c 	.word	0x2000017c
 8000910:	40006400 	.word	0x40006400

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_I2C1_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_I2C1_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_I2C1_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <MX_I2C1_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_I2C1_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_I2C1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_I2C1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_I2C1_Init+0x74>)
 8000950:	f001 f914 	bl	8001b7c <HAL_I2C_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095a:	f000 f8be 	bl	8000ada <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_I2C1_Init+0x74>)
 8000962:	f001 fc03 	bl	800216c <HAL_I2CEx_ConfigAnalogFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800096c:	f000 f8b5 	bl	8000ada <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_I2C1_Init+0x74>)
 8000974:	f001 fc45 	bl	8002202 <HAL_I2CEx_ConfigDigitalFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 f8ac 	bl	8000ada <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000098 	.word	0x20000098
 800098c:	40005400 	.word	0x40005400
 8000990:	10909cec 	.word	0x10909cec

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART2_UART_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_USART2_UART_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x58>)
 80009d8:	f002 ff5e 	bl	8003898 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f87a 	bl	8000ada <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200000fc 	.word	0x200000fc
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a2a      	ldr	r2, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_GPIO_Init+0xc4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f001 f86b 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_GPIO_Init+0xc8>)
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_GPIO_Init+0xcc>)
 8000a8c:	f000 feb6 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fea7 	bl	80017fc <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	10210000 	.word	0x10210000
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <HAL_CAN_RxFifo0FullCallback>:

void serialClear(void){
	serialMsg("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
}

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

	if(hcan) return;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
}
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x44>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_MspInit+0x44>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6593      	str	r3, [r2, #88]	; 0x58
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <HAL_CAN_MspInit+0x90>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d131      	bne.n	8000bb6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_CAN_MspInit+0x94>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <HAL_CAN_MspInit+0x94>)
 8000b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_CAN_MspInit+0x94>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_CAN_MspInit+0x94>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <HAL_CAN_MspInit+0x94>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_CAN_MspInit+0x94>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b94:	2309      	movs	r3, #9
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fe2b 	bl	80017fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2014      	movs	r0, #20
 8000bac:	f000 fdef 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f000 fe08 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40006400 	.word	0x40006400
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_I2C_MspInit+0x7c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d128      	bne.n	8000c3c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_I2C_MspInit+0x80>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <HAL_I2C_MspInit+0x80>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_I2C_MspInit+0x80>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c08:	2312      	movs	r3, #18
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_I2C_MspInit+0x84>)
 8000c20:	f000 fdec 	bl	80017fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_I2C_MspInit+0x80>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_I2C_MspInit+0x80>)
 8000c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_I2C_MspInit+0x80>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40005400 	.word	0x40005400
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000400 	.word	0x48000400

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0x7c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d128      	bne.n	8000cc4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x80>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_UART_MspInit+0x80>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_UART_MspInit+0x80>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0x80>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0x80>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_UART_MspInit+0x80>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 fd9c 	bl	80017fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8f2 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <CAN1_RX0_IRQHandler+0x10>)
 8000d36:	f000 fa26 	bl	8001186 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000017c 	.word	0x2000017c

08000d44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x50>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x16>
		heap_end = &end;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <_sbrk+0x50>)
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <_sbrk+0x54>)
 8000d58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <_sbrk+0x50>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <_sbrk+0x50>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	466a      	mov	r2, sp
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d907      	bls.n	8000d7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d6e:	f003 fab5 	bl	80042dc <__errno>
 8000d72:	4602      	mov	r2, r0
 8000d74:	230c      	movs	r3, #12
 8000d76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	e006      	b.n	8000d8c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <_sbrk+0x50>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <_sbrk+0x50>)
 8000d88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000008c 	.word	0x2000008c
 8000d98:	200001e8 	.word	0x200001e8

08000d9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <SystemInit+0x64>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <SystemInit+0x64>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <SystemInit+0x68>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <SystemInit+0x68>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <SystemInit+0x68>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <SystemInit+0x68>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <SystemInit+0x68>)
 8000dc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dcc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <SystemInit+0x68>)
 8000dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <SystemInit+0x68>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <SystemInit+0x68>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <SystemInit+0x68>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SystemInit+0x64>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	609a      	str	r2, [r3, #8]
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	40021000 	.word	0x40021000

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e0e:	e003      	b.n	8000e18 <LoopCopyDataInit>

08000e10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e16:	3104      	adds	r1, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e20:	d3f6      	bcc.n	8000e10 <CopyDataInit>
	ldr	r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e24:	e002      	b.n	8000e2c <LoopFillZerobss>

08000e26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e28:	f842 3b04 	str.w	r3, [r2], #4

08000e2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <LoopForever+0x16>)
	cmp	r2, r3
 8000e2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e30:	d3f9      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e32:	f7ff ffb3 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f003 fa57 	bl	80042e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fc7f 	bl	800073c <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e44:	08004c30 	.word	0x08004c30
	ldr	r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e4c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e50:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e54:	200001e4 	.word	0x200001e4

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_Init+0x3c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_Init+0x3c>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 fc80 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 f80f 	bl	8000e9c <HAL_InitTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	e001      	b.n	8000e8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e8a:	f7ff fe2d 	bl	8000ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_InitTick+0x68>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d022      	beq.n	8000ef6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_InitTick+0x6c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_InitTick+0x68>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fc8c 	bl	80017e2 <HAL_SYSTICK_Config>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10f      	bne.n	8000ef0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	d809      	bhi.n	8000eea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	f04f 30ff 	mov.w	r0, #4294967295
 8000ede:	f000 fc56 	bl	800178e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0x70>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e007      	b.n	8000efa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e004      	b.n	8000efa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e001      	b.n	8000efa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x20>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	200001dc 	.word	0x200001dc
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200001dc 	.word	0x200001dc

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d004      	beq.n	8000f70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_Delay+0x40>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f70:	bf00      	nop
 8000f72:	f7ff ffdf 	bl	8000f34 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d8f7      	bhi.n	8000f72 <HAL_Delay+0x26>
  {
  }
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0ed      	b.n	800117e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fdbe 	bl	8000b30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0202 	bic.w	r2, r2, #2
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff ffb6 	bl	8000f34 <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fca:	e012      	b.n	8000ff2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fcc:	f7ff ffb2 	bl	8000f34 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d90b      	bls.n	8000ff2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2205      	movs	r2, #5
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e0c5      	b.n	800117e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1e5      	bne.n	8000fcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001010:	f7ff ff90 	bl	8000f34 <HAL_GetTick>
 8001014:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001016:	e012      	b.n	800103e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001018:	f7ff ff8c 	bl	8000f34 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d90b      	bls.n	800103e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2205      	movs	r2, #5
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e09f      	b.n	800117e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0e5      	beq.n	8001018 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e1b      	ldrb	r3, [r3, #24]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7e5b      	ldrb	r3, [r3, #25]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e9b      	ldrb	r3, [r3, #26]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0220 	bic.w	r2, r2, #32
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7edb      	ldrb	r3, [r3, #27]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d108      	bne.n	80010e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0210 	bic.w	r2, r2, #16
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0210 	orr.w	r2, r2, #16
 80010f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7f1b      	ldrb	r3, [r3, #28]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d108      	bne.n	800110e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0208 	orr.w	r2, r2, #8
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e007      	b.n	800111e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0208 	bic.w	r2, r2, #8
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7f5b      	ldrb	r3, [r3, #29]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d108      	bne.n	8001138 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0204 	orr.w	r2, r2, #4
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e007      	b.n	8001148 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	ea42 0103 	orr.w	r1, r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b08a      	sub	sp, #40	; 0x28
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d07c      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d023      	beq.n	800121e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f97d 	bl	80014e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80011ee:	e016      	b.n	800121e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	e00c      	b.n	800121e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
 8001216:	e002      	b.n	800121e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f983 	bl	8001524 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001224:	2b00      	cmp	r3, #0
 8001226:	d024      	beq.n	8001272 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001230:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f95d 	bl	80014fc <HAL_CAN_TxMailbox1CompleteCallback>
 8001242:	e016      	b.n	8001272 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	e00c      	b.n	8001272 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
 800126a:	e002      	b.n	8001272 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f963 	bl	8001538 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d024      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001284:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f93d 	bl	8001510 <HAL_CAN_TxMailbox2CompleteCallback>
 8001296:	e016      	b.n	80012c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
 80012aa:	e00c      	b.n	80012c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	e002      	b.n	80012c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f943 	bl	800154c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00c      	beq.n	80012ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2210      	movs	r2, #16
 80012e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2208      	movs	r2, #8
 8001304:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fbdc 	bl	8000ac4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f91b 	bl	8001560 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00c      	beq.n	800134e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001344:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2210      	movs	r2, #16
 800134c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2208      	movs	r2, #8
 8001368:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f90c 	bl	8001588 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f8f3 	bl	8001574 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2210      	movs	r2, #16
 80013a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f8f6 	bl	800159c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2208      	movs	r2, #8
 80013ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f8ef 	bl	80015b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d075      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d06c      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001440:	2b00      	cmp	r3, #0
 8001442:	d03d      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	d038      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001454:	2b30      	cmp	r3, #48	; 0x30
 8001456:	d017      	beq.n	8001488 <HAL_CAN_IRQHandler+0x302>
 8001458:	2b30      	cmp	r3, #48	; 0x30
 800145a:	d804      	bhi.n	8001466 <HAL_CAN_IRQHandler+0x2e0>
 800145c:	2b10      	cmp	r3, #16
 800145e:	d009      	beq.n	8001474 <HAL_CAN_IRQHandler+0x2ee>
 8001460:	2b20      	cmp	r3, #32
 8001462:	d00c      	beq.n	800147e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001464:	e024      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001466:	2b50      	cmp	r3, #80	; 0x50
 8001468:	d018      	beq.n	800149c <HAL_CAN_IRQHandler+0x316>
 800146a:	2b60      	cmp	r3, #96	; 0x60
 800146c:	d01b      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x320>
 800146e:	2b40      	cmp	r3, #64	; 0x40
 8001470:	d00f      	beq.n	8001492 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001472:	e01d      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147c:	e018      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001486:	e013      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001490:	e00e      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800149a:	e009      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014a4:	e004      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2204      	movs	r2, #4
 80014c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f872 	bl	80015c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	; (800161c <__NVIC_SetPriorityGrouping+0x44>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <__NVIC_GetPriorityGrouping+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	f003 0307 	and.w	r3, r3, #7
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4907      	ldr	r1, [pc, #28]	; (8001674 <__NVIC_EnableIRQ+0x38>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2001      	movs	r0, #1
 800165e:	fa00 f202 	lsl.w	r2, r0, r2
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff8e 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff29 	bl	80015d8 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff3e 	bl	8001620 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff8e 	bl	80016cc <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff31 	bl	800163c <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e17f      	b.n	8001b0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8171 	beq.w	8001b06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d00b      	beq.n	8001844 <HAL_GPIO_Init+0x48>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001838:	2b11      	cmp	r3, #17
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b12      	cmp	r3, #18
 8001842:	d130      	bne.n	80018a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187a:	2201      	movs	r2, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f003 0201 	and.w	r2, r3, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d118      	bne.n	80018e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x128>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b12      	cmp	r3, #18
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	6939      	ldr	r1, [r7, #16]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80ac 	beq.w	8001b06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_GPIO_Init+0x32c>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	4a5d      	ldr	r2, [pc, #372]	; (8001b28 <HAL_GPIO_Init+0x32c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ba:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <HAL_GPIO_Init+0x32c>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c6:	4a59      	ldr	r2, [pc, #356]	; (8001b2c <HAL_GPIO_Init+0x330>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f0:	d025      	beq.n	8001a3e <HAL_GPIO_Init+0x242>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <HAL_GPIO_Init+0x334>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d01f      	beq.n	8001a3a <HAL_GPIO_Init+0x23e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_GPIO_Init+0x338>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x23a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x33c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x236>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <HAL_GPIO_Init+0x340>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x232>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <HAL_GPIO_Init+0x344>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x22e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a49      	ldr	r2, [pc, #292]	; (8001b44 <HAL_GPIO_Init+0x348>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x22a>
 8001a22:	2306      	movs	r3, #6
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x244>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a50:	4936      	ldr	r1, [pc, #216]	; (8001b2c <HAL_GPIO_Init+0x330>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a82:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_GPIO_Init+0x34c>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa22 f303 	lsr.w	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f ae78 	bne.w	800180c <HAL_GPIO_Init+0x10>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	48001800 	.word	0x48001800
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e081      	b.n	8001c92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff f810 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2224      	movs	r2, #36	; 0x24
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e006      	b.n	8001c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d104      	bne.n	8001c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	021a      	lsls	r2, r3, #8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69d9      	ldr	r1, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1a      	ldr	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	817b      	strh	r3, [r7, #10]
 8001cac:	4613      	mov	r3, r2
 8001cae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	f040 80da 	bne.w	8001e72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2C_Master_Transmit+0x30>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0d3      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f92e 	bl	8000f34 <HAL_GetTick>
 8001cd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2319      	movs	r3, #25
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f8f0 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0be      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2221      	movs	r2, #33	; 0x21
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2210      	movs	r2, #16
 8001d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2bff      	cmp	r3, #255	; 0xff
 8001d26:	d90e      	bls.n	8001d46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	8979      	ldrh	r1, [r7, #10]
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f9e6 	bl	8002110 <I2C_TransferConfig>
 8001d44:	e06c      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	8979      	ldrh	r1, [r7, #10]
 8001d58:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f9d5 	bl	8002110 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d66:	e05b      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	6a39      	ldr	r1, [r7, #32]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f8ed 	bl	8001f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e07b      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d034      	beq.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d130      	bne.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f87f 	bl	8001ecc <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e04d      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d90e      	bls.n	8001e00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	22ff      	movs	r2, #255	; 0xff
 8001de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	8979      	ldrh	r1, [r7, #10]
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f989 	bl	8002110 <I2C_TransferConfig>
 8001dfe:	e00f      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f978 	bl	8002110 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d19e      	bne.n	8001d68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	6a39      	ldr	r1, [r7, #32]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f8cc 	bl	8001fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e01a      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_I2C_Master_Transmit+0x1e4>)
 8001e52:	400b      	ands	r3, r1
 8001e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	80002000 	.word	0x80002000
 8001e80:	fe00e800 	.word	0xfe00e800

08001e84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d103      	bne.n	8001ea2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d007      	beq.n	8001ec0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	619a      	str	r2, [r3, #24]
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001edc:	e022      	b.n	8001f24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d01e      	beq.n	8001f24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7ff f825 	bl	8000f34 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d113      	bne.n	8001f24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e00f      	b.n	8001f44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d0cd      	beq.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f58:	e02c      	b.n	8001fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f870 	bl	8002044 <I2C_IsAcknowledgeFailed>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e02a      	b.n	8001fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d01e      	beq.n	8001fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f76:	f7fe ffdd 	bl	8000f34 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d302      	bcc.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d113      	bne.n	8001fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e007      	b.n	8001fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d1cb      	bne.n	8001f5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd8:	e028      	b.n	800202c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f830 	bl	8002044 <I2C_IsAcknowledgeFailed>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e026      	b.n	800203c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7fe ffa1 	bl	8000f34 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d302      	bcc.n	8002004 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d113      	bne.n	800202c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e007      	b.n	800203c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b20      	cmp	r3, #32
 8002038:	d1cf      	bne.n	8001fda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b10      	cmp	r3, #16
 800205c:	d151      	bne.n	8002102 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800205e:	e022      	b.n	80020a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d01e      	beq.n	80020a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002068:	f7fe ff64 	bl	8000f34 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	429a      	cmp	r2, r3
 8002076:	d302      	bcc.n	800207e <I2C_IsAcknowledgeFailed+0x3a>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e02e      	b.n	8002104 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d1d5      	bne.n	8002060 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2210      	movs	r2, #16
 80020ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2220      	movs	r2, #32
 80020c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fedd 	bl	8001e84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <I2C_IsAcknowledgeFailed+0xc8>)
 80020d6:	400b      	ands	r3, r1
 80020d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f043 0204 	orr.w	r2, r3, #4
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	fe00e800 	.word	0xfe00e800

08002110 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	817b      	strh	r3, [r7, #10]
 800211e:	4613      	mov	r3, r2
 8002120:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	0d5b      	lsrs	r3, r3, #21
 800212c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <I2C_TransferConfig+0x58>)
 8002132:	430b      	orrs	r3, r1
 8002134:	43db      	mvns	r3, r3
 8002136:	ea02 0103 	and.w	r1, r2, r3
 800213a:	897b      	ldrh	r3, [r7, #10]
 800213c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002140:	7a7b      	ldrb	r3, [r7, #9]
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	431a      	orrs	r2, r3
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	03ff63ff 	.word	0x03ff63ff

0800216c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b20      	cmp	r3, #32
 8002180:	d138      	bne.n	80021f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800218c:	2302      	movs	r3, #2
 800218e:	e032      	b.n	80021f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b20      	cmp	r3, #32
 8002216:	d139      	bne.n	800228c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002222:	2302      	movs	r3, #2
 8002224:	e033      	b.n	800228e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2224      	movs	r2, #36	; 0x24
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002254:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40007000 	.word	0x40007000

080022b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c6:	d130      	bne.n	800232a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d4:	d038      	beq.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2232      	movs	r2, #50	; 0x32
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0c9b      	lsrs	r3, r3, #18
 80022f8:	3301      	adds	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fc:	e002      	b.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3b01      	subs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002310:	d102      	bne.n	8002318 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f2      	bne.n	80022fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002324:	d110      	bne.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e00f      	b.n	800234a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d007      	beq.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002340:	4a05      	ldr	r2, [pc, #20]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002346:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40007000 	.word	0x40007000
 800235c:	20000000 	.word	0x20000000
 8002360:	431bde83 	.word	0x431bde83

08002364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e3d4      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002376:	4ba1      	ldr	r3, [pc, #644]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002380:	4b9e      	ldr	r3, [pc, #632]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80e4 	beq.w	8002560 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_RCC_OscConfig+0x4a>
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b0c      	cmp	r3, #12
 80023a2:	f040 808b 	bne.w	80024bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	f040 8087 	bne.w	80024bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ae:	4b93      	ldr	r3, [pc, #588]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x62>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e3ac      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	4b8c      	ldr	r3, [pc, #560]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_RCC_OscConfig+0x7c>
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023de:	e005      	b.n	80023ec <HAL_RCC_OscConfig+0x88>
 80023e0:	4b86      	ldr	r3, [pc, #536]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80023e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d223      	bcs.n	8002438 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fd3f 	bl	8002e78 <RCC_SetFlashLatencyFromMSIRange>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e38d      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002404:	4b7d      	ldr	r3, [pc, #500]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7c      	ldr	r2, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4977      	ldr	r1, [pc, #476]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	4972      	ldr	r1, [pc, #456]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 8002436:	e025      	b.n	8002484 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002438:	4b70      	ldr	r3, [pc, #448]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a6f      	ldr	r2, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	496a      	ldr	r1, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002456:	4b69      	ldr	r3, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	4965      	ldr	r1, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fcff 	bl	8002e78 <RCC_SetFlashLatencyFromMSIRange>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e34d      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002484:	f000 fc36 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8002488:	4601      	mov	r1, r0
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	4a5a      	ldr	r2, [pc, #360]	; (8002600 <HAL_RCC_OscConfig+0x29c>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa21 f303 	lsr.w	r3, r1, r3
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_OscConfig+0x2a0>)
 80024a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024a4:	4b58      	ldr	r3, [pc, #352]	; (8002608 <HAL_RCC_OscConfig+0x2a4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fcf7 	bl	8000e9c <HAL_InitTick>
 80024ae:	4603      	mov	r3, r0
 80024b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d052      	beq.n	800255e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	e331      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d032      	beq.n	800252a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024c4:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fd30 	bl	8000f34 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d8:	f7fe fd2c 	bl	8000f34 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e31a      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a40      	ldr	r2, [pc, #256]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	493b      	ldr	r1, [pc, #236]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002514:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	4936      	ldr	r1, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
 8002528:	e01a      	b.n	8002560 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002536:	f7fe fcfd 	bl	8000f34 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800253e:	f7fe fcf9 	bl	8000f34 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e2e7      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x1da>
 800255c:	e000      	b.n	8002560 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800255e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d074      	beq.n	8002656 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b08      	cmp	r3, #8
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x21a>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d10e      	bne.n	8002596 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d10b      	bne.n	8002596 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d064      	beq.n	8002654 <HAL_RCC_OscConfig+0x2f0>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d160      	bne.n	8002654 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e2c4      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x24a>
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e01d      	b.n	80025ea <HAL_RCC_OscConfig+0x286>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x26e>
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x286>
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <HAL_RCC_OscConfig+0x298>)
 80025e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01c      	beq.n	800262c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fc9f 	bl	8000f34 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f8:	e011      	b.n	800261e <HAL_RCC_OscConfig+0x2ba>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	08004ba4 	.word	0x08004ba4
 8002604:	20000000 	.word	0x20000000
 8002608:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fc92 	bl	8000f34 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e280      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261e:	4baf      	ldr	r3, [pc, #700]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x2a8>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fc82 	bl	8000f34 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe fc7e 	bl	8000f34 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e26c      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002646:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x2d0>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d060      	beq.n	8002724 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d005      	beq.n	8002674 <HAL_RCC_OscConfig+0x310>
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d119      	bne.n	80026a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d116      	bne.n	80026a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002674:	4b99      	ldr	r3, [pc, #612]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x328>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e249      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268c:	4b93      	ldr	r3, [pc, #588]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	4990      	ldr	r1, [pc, #576]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a0:	e040      	b.n	8002724 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d023      	beq.n	80026f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026aa:	4b8c      	ldr	r3, [pc, #560]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a8b      	ldr	r2, [pc, #556]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fc3d 	bl	8000f34 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026be:	f7fe fc39 	bl	8000f34 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e227      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	4b82      	ldr	r3, [pc, #520]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026dc:	4b7f      	ldr	r3, [pc, #508]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	497c      	ldr	r1, [pc, #496]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	e018      	b.n	8002724 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f2:	4b7a      	ldr	r3, [pc, #488]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a79      	ldr	r2, [pc, #484]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80026f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe fc19 	bl	8000f34 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002706:	f7fe fc15 	bl	8000f34 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e203      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002718:	4b70      	ldr	r3, [pc, #448]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03c      	beq.n	80027aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01c      	beq.n	8002772 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002738:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800273a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273e:	4a67      	ldr	r2, [pc, #412]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fbf4 	bl	8000f34 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002750:	f7fe fbf0 	bl	8000f34 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1de      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002762:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ef      	beq.n	8002750 <HAL_RCC_OscConfig+0x3ec>
 8002770:	e01b      	b.n	80027aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002772:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fbd7 	bl	8000f34 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278a:	f7fe fbd3 	bl	8000f34 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1c1      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ef      	bne.n	800278a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80a6 	beq.w	8002904 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b8:	2300      	movs	r3, #0
 80027ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027bc:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b44      	ldr	r3, [pc, #272]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	4a43      	ldr	r2, [pc, #268]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6593      	str	r3, [r2, #88]	; 0x58
 80027d4:	4b41      	ldr	r3, [pc, #260]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e4:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_RCC_OscConfig+0x57c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d118      	bne.n	8002822 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f0:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x57c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3a      	ldr	r2, [pc, #232]	; (80028e0 <HAL_RCC_OscConfig+0x57c>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fb9a 	bl	8000f34 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe fb96 	bl	8000f34 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e184      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002816:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_RCC_OscConfig+0x57c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x4d8>
 800282a:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800283a:	e024      	b.n	8002886 <HAL_RCC_OscConfig+0x522>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d110      	bne.n	8002866 <HAL_RCC_OscConfig+0x502>
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a24      	ldr	r2, [pc, #144]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	4a20      	ldr	r2, [pc, #128]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002864:	e00f      	b.n	8002886 <HAL_RCC_OscConfig+0x522>
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7fe fb51 	bl	8000f34 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fb4d 	bl	8000f34 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e139      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_OscConfig+0x578>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ed      	beq.n	8002896 <HAL_RCC_OscConfig+0x532>
 80028ba:	e01a      	b.n	80028f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fb3a 	bl	8000f34 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c2:	e00f      	b.n	80028e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fb36 	bl	8000f34 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d906      	bls.n	80028e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e122      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e4:	4b90      	ldr	r3, [pc, #576]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e8      	bne.n	80028c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b8b      	ldr	r3, [pc, #556]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	4a8a      	ldr	r2, [pc, #552]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002902:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 8108 	beq.w	8002b1e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	2b02      	cmp	r3, #2
 8002914:	f040 80d0 	bne.w	8002ab8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002918:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	429a      	cmp	r2, r3
 800292a:	d130      	bne.n	800298e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	3b01      	subs	r3, #1
 8002938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d127      	bne.n	800298e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11f      	bne.n	800298e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002958:	2a07      	cmp	r2, #7
 800295a:	bf14      	ite	ne
 800295c:	2201      	movne	r2, #1
 800295e:	2200      	moveq	r2, #0
 8002960:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002962:	4293      	cmp	r3, r2
 8002964:	d113      	bne.n	800298e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	3b01      	subs	r3, #1
 8002974:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d109      	bne.n	800298e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d06e      	beq.n	8002a6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d069      	beq.n	8002a68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002994:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029a0:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b7      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029b0:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5c      	ldr	r2, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029bc:	f7fe faba 	bl	8000f34 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fab6 	bl	8000f34 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0a4      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e2:	4b51      	ldr	r3, [pc, #324]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_RCC_OscConfig+0x7c8>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029f2:	3a01      	subs	r2, #1
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029fc:	0212      	lsls	r2, r2, #8
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a04:	0852      	lsrs	r2, r2, #1
 8002a06:	3a01      	subs	r2, #1
 8002a08:	0552      	lsls	r2, r2, #21
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a10:	0852      	lsrs	r2, r2, #1
 8002a12:	3a01      	subs	r2, #1
 8002a14:	0652      	lsls	r2, r2, #25
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a1c:	0912      	lsrs	r2, r2, #4
 8002a1e:	0452      	lsls	r2, r2, #17
 8002a20:	430a      	orrs	r2, r1
 8002a22:	4941      	ldr	r1, [pc, #260]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a28:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a3e      	ldr	r2, [pc, #248]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a34:	4b3c      	ldr	r3, [pc, #240]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a3b      	ldr	r2, [pc, #236]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a40:	f7fe fa78 	bl	8000f34 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fa74 	bl	8000f34 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e062      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5a:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a66:	e05a      	b.n	8002b1e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e059      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d152      	bne.n	8002b1e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a90:	f7fe fa50 	bl	8000f34 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fa4c 	bl	8000f34 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e03a      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x734>
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d02d      	beq.n	8002b1a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002adc:	f023 0303 	bic.w	r3, r3, #3
 8002ae0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002ae8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fa1f 	bl	8000f34 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe fa1b 	bl	8000f34 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e009      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x7c4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x796>
 8002b18:	e001      	b.n	8002b1e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	f99d808c 	.word	0xf99d808c

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0c8      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d910      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b63      	ldr	r3, [pc, #396]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 0207 	bic.w	r2, r3, #7
 8002b5a:	4961      	ldr	r1, [pc, #388]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b0      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d04c      	beq.n	8002c1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b88:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d121      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e09e      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba0:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d115      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e092      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e086      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc8:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e07e      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bd8:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 0203 	bic.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	493f      	ldr	r1, [pc, #252]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bea:	f7fe f9a3 	bl	8000f34 <HAL_GetTick>
 8002bee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf2:	f7fe f99f 	bl	8000f34 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e066      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 020c 	and.w	r2, r3, #12
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d1eb      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	492c      	ldr	r1, [pc, #176]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d210      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 0207 	bic.w	r2, r3, #7
 8002c4e:	4924      	ldr	r1, [pc, #144]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e036      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4918      	ldr	r1, [pc, #96]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4910      	ldr	r1, [pc, #64]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ca6:	f000 f825 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8002caa:	4601      	mov	r1, r0
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	fa21 f303 	lsr.w	r3, r1, r3
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f8e6 	bl	8000e9c <HAL_InitTick>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40022000 	.word	0x40022000
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08004ba4 	.word	0x08004ba4
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	20000004 	.word	0x20000004

08002cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d121      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d11e      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d28:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d34:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	e005      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d44:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10d      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d102      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	e004      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d133      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0xaa>
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d9a:	617b      	str	r3, [r7, #20]
      break;
 8002d9c:	e005      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002da0:	617b      	str	r3, [r7, #20]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	617b      	str	r3, [r7, #20]
      break;
 8002da8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	3301      	adds	r3, #1
 8002db6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	fb02 f203 	mul.w	r2, r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0e5b      	lsrs	r3, r3, #25
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dea:	69bb      	ldr	r3, [r7, #24]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3724      	adds	r7, #36	; 0x24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08004bbc 	.word	0x08004bbc
 8002e00:	00f42400 	.word	0x00f42400
 8002e04:	007a1200 	.word	0x007a1200

08002e08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000

08002e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e24:	f7ff fff0 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e28:	4601      	mov	r1, r0
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08004bb4 	.word	0x08004bb4

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e50:	f7ff ffda 	bl	8002e08 <HAL_RCC_GetHCLKFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0adb      	lsrs	r3, r3, #11
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	08004bb4 	.word	0x08004bb4

08002e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e84:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e90:	f7ff fa04 	bl	800229c <HAL_PWREx_GetVoltageRange>
 8002e94:	6178      	str	r0, [r7, #20]
 8002e96:	e014      	b.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002eb0:	f7ff f9f4 	bl	800229c <HAL_PWREx_GetVoltageRange>
 8002eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec8:	d10b      	bne.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d919      	bls.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ed4:	d902      	bls.n	8002edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	e013      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002edc:	2301      	movs	r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e010      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d902      	bls.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee8:	2303      	movs	r3, #3
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	e00a      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b80      	cmp	r3, #128	; 0x80
 8002ef2:	d102      	bne.n	8002efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	e004      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b70      	cmp	r3, #112	; 0x70
 8002efe:	d101      	bne.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f00:	2301      	movs	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 0207 	bic.w	r2, r3, #7
 8002f0c:	4909      	ldr	r1, [pc, #36]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f44:	2300      	movs	r3, #0
 8002f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d03f      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5c:	d01c      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f62:	d802      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002f68:	e01f      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f6e:	d003      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f74:	d01c      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f76:	e018      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f78:	4b85      	ldr	r3, [pc, #532]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a84      	ldr	r2, [pc, #528]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f84:	e015      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fab9 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f96:	e00c      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3320      	adds	r3, #32
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fba0 	bl	80036e4 <RCCEx_PLLSAI2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa8:	e003      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	74fb      	strb	r3, [r7, #19]
      break;
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc6:	4972      	ldr	r1, [pc, #456]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fce:	e001      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d03f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe8:	d01c      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002fea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fee:	d802      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ff4:	e01f      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ffa:	d003      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003000:	d01c      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003002:	e018      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003004:	4b62      	ldr	r3, [pc, #392]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a61      	ldr	r2, [pc, #388]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fa73 	bl	8003504 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb5a 	bl	80036e4 <RCCEx_PLLSAI2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003044:	4b52      	ldr	r3, [pc, #328]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003052:	494f      	ldr	r1, [pc, #316]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a0 	beq.w	80031ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a40      	ldr	r2, [pc, #256]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3a      	ldr	r2, [pc, #232]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b0:	f7fd ff40 	bl	8000f34 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fd ff3c 	bl	8000f34 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d15c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01f      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d019      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a20      	ldr	r2, [pc, #128]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fd fefb 	bl	8000f34 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	e00b      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fd fef7 	bl	8000f34 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
            break;
 8003158:	e006      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ec      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	4904      	ldr	r1, [pc, #16]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319c:	7c7b      	ldrb	r3, [r7, #17]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b9e      	ldr	r3, [pc, #632]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	4a9d      	ldr	r2, [pc, #628]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ba:	4b98      	ldr	r3, [pc, #608]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f023 0203 	bic.w	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	4994      	ldr	r1, [pc, #592]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031dc:	4b8f      	ldr	r3, [pc, #572]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f023 020c 	bic.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	498c      	ldr	r1, [pc, #560]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fe:	4b87      	ldr	r3, [pc, #540]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4983      	ldr	r1, [pc, #524]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	497b      	ldr	r1, [pc, #492]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	4972      	ldr	r1, [pc, #456]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003264:	4b6d      	ldr	r3, [pc, #436]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	496a      	ldr	r1, [pc, #424]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	4961      	ldr	r1, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a8:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	4959      	ldr	r1, [pc, #356]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	4950      	ldr	r1, [pc, #320]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	4948      	ldr	r1, [pc, #288]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	493f      	ldr	r1, [pc, #252]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d028      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003330:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333e:	4937      	ldr	r1, [pc, #220]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334e:	d106      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335a:	60d3      	str	r3, [r2, #12]
 800335c:	e011      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003366:	d10c      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f8c8 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d028      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800338e:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d106      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b8:	60d3      	str	r3, [r2, #12]
 80033ba:	e011      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f899 	bl	8003504 <RCCEx_PLLSAI1_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340a:	d109      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a02      	ldr	r2, [pc, #8]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	e014      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f867 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	4928      	ldr	r1, [pc, #160]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346e:	d10d      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f844 	bl	8003504 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d014      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	74bb      	strb	r3, [r7, #18]
 800348a:	e011      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3320      	adds	r3, #32
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f921 	bl	80036e4 <RCCEx_PLLSAI2_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ca:	490d      	ldr	r1, [pc, #52]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ee:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003512:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800351e:	4b70      	ldr	r3, [pc, #448]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d10d      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
       ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
       ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d044      	beq.n	80035d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	e041      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d00c      	beq.n	8003572 <RCCEx_PLLSAI1_Config+0x6e>
 8003558:	2b03      	cmp	r3, #3
 800355a:	d013      	beq.n	8003584 <RCCEx_PLLSAI1_Config+0x80>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d120      	bne.n	80035a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003560:	4b5f      	ldr	r3, [pc, #380]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11d      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003570:	e01a      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	2b00      	cmp	r3, #0
 800357c:	d116      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003582:	e013      	b.n	80035ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003584:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10f      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003590:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035a0:	e006      	b.n	80035b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      break;
 80035a6:	e004      	b.n	80035b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035a8:	bf00      	nop
 80035aa:	e002      	b.n	80035b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035b8:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	430b      	orrs	r3, r1
 80035ce:	4944      	ldr	r1, [pc, #272]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d17d      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035da:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a40      	ldr	r2, [pc, #256]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e6:	f7fd fca5 	bl	8000f34 <HAL_GetTick>
 80035ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ec:	e009      	b.n	8003602 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ee:	f7fd fca1 	bl	8000f34 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d902      	bls.n	8003602 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003600:	e005      	b.n	800360e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d160      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d111      	bne.n	800363e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	0211      	lsls	r1, r2, #8
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68d2      	ldr	r2, [r2, #12]
 8003630:	0912      	lsrs	r2, r2, #4
 8003632:	0452      	lsls	r2, r2, #17
 8003634:	430a      	orrs	r2, r1
 8003636:	492a      	ldr	r1, [pc, #168]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	610b      	str	r3, [r1, #16]
 800363c:	e027      	b.n	800368e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d112      	bne.n	800366a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003644:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800364c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	0211      	lsls	r1, r2, #8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6912      	ldr	r2, [r2, #16]
 800365a:	0852      	lsrs	r2, r2, #1
 800365c:	3a01      	subs	r2, #1
 800365e:	0552      	lsls	r2, r2, #21
 8003660:	430a      	orrs	r2, r1
 8003662:	491f      	ldr	r1, [pc, #124]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	610b      	str	r3, [r1, #16]
 8003668:	e011      	b.n	800368e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003672:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	0211      	lsls	r1, r2, #8
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6952      	ldr	r2, [r2, #20]
 8003680:	0852      	lsrs	r2, r2, #1
 8003682:	3a01      	subs	r2, #1
 8003684:	0652      	lsls	r2, r2, #25
 8003686:	430a      	orrs	r2, r1
 8003688:	4915      	ldr	r1, [pc, #84]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003698:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fd fc4b 	bl	8000f34 <HAL_GetTick>
 800369e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036a0:	e009      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a2:	f7fd fc47 	bl	8000f34 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d902      	bls.n	80036b6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	73fb      	strb	r3, [r7, #15]
          break;
 80036b4:	e005      	b.n	80036c2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ef      	beq.n	80036a2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000

080036e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036f2:	4b68      	ldr	r3, [pc, #416]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0203 	and.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d10d      	bne.n	800372a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
       ||
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003716:	4b5f      	ldr	r3, [pc, #380]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
       ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d044      	beq.n	80037b4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	e041      	b.n	80037b4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d00c      	beq.n	8003752 <RCCEx_PLLSAI2_Config+0x6e>
 8003738:	2b03      	cmp	r3, #3
 800373a:	d013      	beq.n	8003764 <RCCEx_PLLSAI2_Config+0x80>
 800373c:	2b01      	cmp	r3, #1
 800373e:	d120      	bne.n	8003782 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003740:	4b54      	ldr	r3, [pc, #336]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11d      	bne.n	8003788 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e01a      	b.n	8003788 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003752:	4b50      	ldr	r3, [pc, #320]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003762:	e013      	b.n	800378c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10f      	bne.n	8003790 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003770:	4b48      	ldr	r3, [pc, #288]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003780:	e006      	b.n	8003790 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      break;
 8003786:	e004      	b.n	8003792 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003788:	bf00      	nop
 800378a:	e002      	b.n	8003792 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003790:	bf00      	nop
    }

    if(status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	430b      	orrs	r3, r1
 80037ae:	4939      	ldr	r1, [pc, #228]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d167      	bne.n	800388a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a35      	ldr	r2, [pc, #212]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c6:	f7fd fbb5 	bl	8000f34 <HAL_GetTick>
 80037ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037cc:	e009      	b.n	80037e2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ce:	f7fd fbb1 	bl	8000f34 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d902      	bls.n	80037e2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	73fb      	strb	r3, [r7, #15]
        break;
 80037e0:	e005      	b.n	80037ee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ef      	bne.n	80037ce <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d14a      	bne.n	800388a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d111      	bne.n	800381e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	0211      	lsls	r1, r2, #8
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	68d2      	ldr	r2, [r2, #12]
 8003810:	0912      	lsrs	r2, r2, #4
 8003812:	0452      	lsls	r2, r2, #17
 8003814:	430a      	orrs	r2, r1
 8003816:	491f      	ldr	r1, [pc, #124]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003818:	4313      	orrs	r3, r2
 800381a:	614b      	str	r3, [r1, #20]
 800381c:	e011      	b.n	8003842 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003826:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6892      	ldr	r2, [r2, #8]
 800382e:	0211      	lsls	r1, r2, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6912      	ldr	r2, [r2, #16]
 8003834:	0852      	lsrs	r2, r2, #1
 8003836:	3a01      	subs	r2, #1
 8003838:	0652      	lsls	r2, r2, #25
 800383a:	430a      	orrs	r2, r1
 800383c:	4915      	ldr	r1, [pc, #84]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 800383e:	4313      	orrs	r3, r2
 8003840:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fd fb71 	bl	8000f34 <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003854:	e009      	b.n	800386a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003856:	f7fd fb6d 	bl	8000f34 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d902      	bls.n	800386a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	73fb      	strb	r3, [r7, #15]
          break;
 8003868:	e005      	b.n	8003876 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0ef      	beq.n	8003856 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000

08003898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e040      	b.n	800392c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd f9c8 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f82c 	bl	8003934 <UART_SetConfig>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e022      	b.n	800392c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fb92 	bl	8004018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fc19 	bl	800415c <UART_CheckIdleState>
 800392a:	4603      	mov	r3, r0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003938:	b08a      	sub	sp, #40	; 0x28
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4bb8      	ldr	r3, [pc, #736]	; (8003c4c <UART_SetConfig+0x318>)
 800396a:	4013      	ands	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003972:	430b      	orrs	r3, r1
 8003974:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4aae      	ldr	r2, [pc, #696]	; (8003c50 <UART_SetConfig+0x31c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	4313      	orrs	r3, r2
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4aa5      	ldr	r2, [pc, #660]	; (8003c54 <UART_SetConfig+0x320>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d126      	bne.n	8003a12 <UART_SetConfig+0xde>
 80039c4:	4ba4      	ldr	r3, [pc, #656]	; (8003c58 <UART_SetConfig+0x324>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d81a      	bhi.n	8003a08 <UART_SetConfig+0xd4>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0xa4>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	080039f9 	.word	0x080039f9
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e105      	b.n	8003bfc <UART_SetConfig+0x2c8>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e101      	b.n	8003bfc <UART_SetConfig+0x2c8>
 80039f8:	2304      	movs	r3, #4
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e0fd      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a00:	2308      	movs	r3, #8
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e0f9      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	bf00      	nop
 8003a10:	e0f4      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a91      	ldr	r2, [pc, #580]	; (8003c5c <UART_SetConfig+0x328>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d138      	bne.n	8003a8e <UART_SetConfig+0x15a>
 8003a1c:	4b8e      	ldr	r3, [pc, #568]	; (8003c58 <UART_SetConfig+0x324>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d82c      	bhi.n	8003a84 <UART_SetConfig+0x150>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_SetConfig+0xfc>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003a85 	.word	0x08003a85
 8003a38:	08003a85 	.word	0x08003a85
 8003a3c:	08003a85 	.word	0x08003a85
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003a85 	.word	0x08003a85
 8003a48:	08003a85 	.word	0x08003a85
 8003a4c:	08003a85 	.word	0x08003a85
 8003a50:	08003a6d 	.word	0x08003a6d
 8003a54:	08003a85 	.word	0x08003a85
 8003a58:	08003a85 	.word	0x08003a85
 8003a5c:	08003a85 	.word	0x08003a85
 8003a60:	08003a7d 	.word	0x08003a7d
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e0c7      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e0c3      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a74:	2304      	movs	r3, #4
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e0bf      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e0bb      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a84:	2310      	movs	r3, #16
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	bf00      	nop
 8003a8c:	e0b6      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a73      	ldr	r2, [pc, #460]	; (8003c60 <UART_SetConfig+0x32c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d125      	bne.n	8003ae4 <UART_SetConfig+0x1b0>
 8003a98:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <UART_SetConfig+0x324>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d011      	beq.n	8003aca <UART_SetConfig+0x196>
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d802      	bhi.n	8003ab0 <UART_SetConfig+0x17c>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <UART_SetConfig+0x186>
 8003aae:	e014      	b.n	8003ada <UART_SetConfig+0x1a6>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d006      	beq.n	8003ac2 <UART_SetConfig+0x18e>
 8003ab4:	2b30      	cmp	r3, #48	; 0x30
 8003ab6:	d00c      	beq.n	8003ad2 <UART_SetConfig+0x19e>
 8003ab8:	e00f      	b.n	8003ada <UART_SetConfig+0x1a6>
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac0:	e09c      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac8:	e098      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003aca:	2304      	movs	r3, #4
 8003acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad0:	e094      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad8:	e090      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003ada:	2310      	movs	r3, #16
 8003adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae0:	bf00      	nop
 8003ae2:	e08b      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a5e      	ldr	r2, [pc, #376]	; (8003c64 <UART_SetConfig+0x330>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d125      	bne.n	8003b3a <UART_SetConfig+0x206>
 8003aee:	4b5a      	ldr	r3, [pc, #360]	; (8003c58 <UART_SetConfig+0x324>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d011      	beq.n	8003b20 <UART_SetConfig+0x1ec>
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d802      	bhi.n	8003b06 <UART_SetConfig+0x1d2>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <UART_SetConfig+0x1dc>
 8003b04:	e014      	b.n	8003b30 <UART_SetConfig+0x1fc>
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d006      	beq.n	8003b18 <UART_SetConfig+0x1e4>
 8003b0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b0c:	d00c      	beq.n	8003b28 <UART_SetConfig+0x1f4>
 8003b0e:	e00f      	b.n	8003b30 <UART_SetConfig+0x1fc>
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b16:	e071      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1e:	e06d      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b20:	2304      	movs	r3, #4
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b26:	e069      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b28:	2308      	movs	r3, #8
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2e:	e065      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	bf00      	nop
 8003b38:	e060      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a4a      	ldr	r2, [pc, #296]	; (8003c68 <UART_SetConfig+0x334>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d129      	bne.n	8003b98 <UART_SetConfig+0x264>
 8003b44:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <UART_SetConfig+0x324>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b52:	d014      	beq.n	8003b7e <UART_SetConfig+0x24a>
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	d802      	bhi.n	8003b60 <UART_SetConfig+0x22c>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <UART_SetConfig+0x23a>
 8003b5e:	e016      	b.n	8003b8e <UART_SetConfig+0x25a>
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b64:	d007      	beq.n	8003b76 <UART_SetConfig+0x242>
 8003b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6a:	d00c      	beq.n	8003b86 <UART_SetConfig+0x252>
 8003b6c:	e00f      	b.n	8003b8e <UART_SetConfig+0x25a>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b74:	e042      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b76:	2302      	movs	r3, #2
 8003b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7c:	e03e      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b84:	e03a      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b86:	2308      	movs	r3, #8
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8c:	e036      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b8e:	2310      	movs	r3, #16
 8003b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b94:	bf00      	nop
 8003b96:	e031      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <UART_SetConfig+0x31c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d129      	bne.n	8003bf6 <UART_SetConfig+0x2c2>
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <UART_SetConfig+0x324>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d014      	beq.n	8003bdc <UART_SetConfig+0x2a8>
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d802      	bhi.n	8003bbe <UART_SetConfig+0x28a>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <UART_SetConfig+0x298>
 8003bbc:	e016      	b.n	8003bec <UART_SetConfig+0x2b8>
 8003bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc2:	d007      	beq.n	8003bd4 <UART_SetConfig+0x2a0>
 8003bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc8:	d00c      	beq.n	8003be4 <UART_SetConfig+0x2b0>
 8003bca:	e00f      	b.n	8003bec <UART_SetConfig+0x2b8>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd2:	e013      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e00f      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e00b      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003be4:	2308      	movs	r3, #8
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e007      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003bec:	2310      	movs	r3, #16
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <UART_SetConfig+0x2c8>
 8003bf6:	2310      	movs	r3, #16
 8003bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <UART_SetConfig+0x31c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f040 80fe 	bne.w	8003e04 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d837      	bhi.n	8003c80 <UART_SetConfig+0x34c>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0x2e4>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c81 	.word	0x08003c81
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c81 	.word	0x08003c81
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003c81 	.word	0x08003c81
 8003c34:	08003c81 	.word	0x08003c81
 8003c38:	08003c79 	.word	0x08003c79
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7ff f8f0 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8003c40:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c42:	e020      	b.n	8003c86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <UART_SetConfig+0x338>)
 8003c46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c48:	e01d      	b.n	8003c86 <UART_SetConfig+0x352>
 8003c4a:	bf00      	nop
 8003c4c:	efff69f3 	.word	0xefff69f3
 8003c50:	40008000 	.word	0x40008000
 8003c54:	40013800 	.word	0x40013800
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40004400 	.word	0x40004400
 8003c60:	40004800 	.word	0x40004800
 8003c64:	40004c00 	.word	0x40004c00
 8003c68:	40005000 	.word	0x40005000
 8003c6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003c70:	f7ff f840 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8003c74:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c76:	e006      	b.n	8003c86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c7e:	e002      	b.n	8003c86 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	76fb      	strb	r3, [r7, #27]
        break;
 8003c84:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 81b9 	beq.w	8004000 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d305      	bcc.n	8003caa <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d902      	bls.n	8003cb0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	76fb      	strb	r3, [r7, #27]
 8003cae:	e1a7      	b.n	8004000 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8003cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	f200 8092 	bhi.w	8003dde <UART_SetConfig+0x4aa>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x38c>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ddf 	.word	0x08003ddf
 8003cc8:	08003d33 	.word	0x08003d33
 8003ccc:	08003ddf 	.word	0x08003ddf
 8003cd0:	08003d67 	.word	0x08003d67
 8003cd4:	08003ddf 	.word	0x08003ddf
 8003cd8:	08003ddf 	.word	0x08003ddf
 8003cdc:	08003ddf 	.word	0x08003ddf
 8003ce0:	08003db5 	.word	0x08003db5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7ff f89c 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8003ce8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	f04f 0400 	mov.w	r4, #0
 8003cfa:	0214      	lsls	r4, r2, #8
 8003cfc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d00:	020b      	lsls	r3, r1, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6852      	ldr	r2, [r2, #4]
 8003d06:	0852      	lsrs	r2, r2, #1
 8003d08:	4611      	mov	r1, r2
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	eb13 0b01 	adds.w	fp, r3, r1
 8003d12:	eb44 0c02 	adc.w	ip, r4, r2
 8003d16:	4658      	mov	r0, fp
 8003d18:	4661      	mov	r1, ip
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f04f 0400 	mov.w	r4, #0
 8003d22:	461a      	mov	r2, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	f7fc faa3 	bl	8000270 <__aeabi_uldivmod>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d30:	e058      	b.n	8003de4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	f04f 0400 	mov.w	r4, #0
 8003d3c:	49ae      	ldr	r1, [pc, #696]	; (8003ff8 <UART_SetConfig+0x6c4>)
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	eb13 0b01 	adds.w	fp, r3, r1
 8003d46:	eb44 0c02 	adc.w	ip, r4, r2
 8003d4a:	4658      	mov	r0, fp
 8003d4c:	4661      	mov	r1, ip
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f04f 0400 	mov.w	r4, #0
 8003d56:	461a      	mov	r2, r3
 8003d58:	4623      	mov	r3, r4
 8003d5a:	f7fc fa89 	bl	8000270 <__aeabi_uldivmod>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	460c      	mov	r4, r1
 8003d62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003d64:	e03e      	b.n	8003de4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003d66:	f7fe ffc5 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8003d6a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	f04f 0400 	mov.w	r4, #0
 8003d7c:	0214      	lsls	r4, r2, #8
 8003d7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d82:	020b      	lsls	r3, r1, #8
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6852      	ldr	r2, [r2, #4]
 8003d88:	0852      	lsrs	r2, r2, #1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	eb13 0b01 	adds.w	fp, r3, r1
 8003d94:	eb44 0c02 	adc.w	ip, r4, r2
 8003d98:	4658      	mov	r0, fp
 8003d9a:	4661      	mov	r1, ip
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f04f 0400 	mov.w	r4, #0
 8003da4:	461a      	mov	r2, r3
 8003da6:	4623      	mov	r3, r4
 8003da8:	f7fc fa62 	bl	8000270 <__aeabi_uldivmod>
 8003dac:	4603      	mov	r3, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003db2:	e017      	b.n	8003de4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	f04f 0400 	mov.w	r4, #0
 8003dbe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003dc2:	f144 0100 	adc.w	r1, r4, #0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f04f 0400 	mov.w	r4, #0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	f7fc fa4d 	bl	8000270 <__aeabi_uldivmod>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ddc:	e002      	b.n	8003de4 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	76fb      	strb	r3, [r7, #27]
            break;
 8003de2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dea:	d308      	bcc.n	8003dfe <UART_SetConfig+0x4ca>
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df2:	d204      	bcs.n	8003dfe <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	60da      	str	r2, [r3, #12]
 8003dfc:	e100      	b.n	8004000 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	76fb      	strb	r3, [r7, #27]
 8003e02:	e0fd      	b.n	8004000 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	f040 8084 	bne.w	8003f18 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d85f      	bhi.n	8003ed8 <UART_SetConfig+0x5a4>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x4ec>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e65 	.word	0x08003e65
 8003e28:	08003e85 	.word	0x08003e85
 8003e2c:	08003ed9 	.word	0x08003ed9
 8003e30:	08003ea1 	.word	0x08003ea1
 8003e34:	08003ed9 	.word	0x08003ed9
 8003e38:	08003ed9 	.word	0x08003ed9
 8003e3c:	08003ed9 	.word	0x08003ed9
 8003e40:	08003ec1 	.word	0x08003ec1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe ffec 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8003e48:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e62:	e03c      	b.n	8003ede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fe fff2 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003e68:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	005a      	lsls	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e82:	e02c      	b.n	8003ede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003e8e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6852      	ldr	r2, [r2, #4]
 8003e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e9e:	e01e      	b.n	8003ede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea0:	f7fe ff28 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8003ea4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	005a      	lsls	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ebe:	e00e      	b.n	8003ede <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ed6:	e002      	b.n	8003ede <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	76fb      	strb	r3, [r7, #27]
        break;
 8003edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d916      	bls.n	8003f12 <UART_SetConfig+0x5de>
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eea:	d212      	bcs.n	8003f12 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f023 030f 	bic.w	r3, r3, #15
 8003ef4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	89fa      	ldrh	r2, [r7, #14]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e076      	b.n	8004000 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	76fb      	strb	r3, [r7, #27]
 8003f16:	e073      	b.n	8004000 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d85c      	bhi.n	8003fda <UART_SetConfig+0x6a6>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0x5f4>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f6b 	.word	0x08003f6b
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003fdb 	.word	0x08003fdb
 8003f38:	08003fa5 	.word	0x08003fa5
 8003f3c:	08003fdb 	.word	0x08003fdb
 8003f40:	08003fdb 	.word	0x08003fdb
 8003f44:	08003fdb 	.word	0x08003fdb
 8003f48:	08003fc3 	.word	0x08003fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f7fe ff68 	bl	8002e20 <HAL_RCC_GetPCLK1Freq>
 8003f50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	085a      	lsrs	r2, r3, #1
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f68:	e03a      	b.n	8003fe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f6a:	f7fe ff6f 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003f6e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	085a      	lsrs	r2, r3, #1
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	441a      	add	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f86:	e02b      	b.n	8003fe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003f92:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6852      	ldr	r2, [r2, #4]
 8003f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa2:	e01d      	b.n	8003fe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa4:	f7fe fea6 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8003fa8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	085a      	lsrs	r2, r3, #1
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	441a      	add	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fc0:	e00e      	b.n	8003fe0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fd8:	e002      	b.n	8003fe0 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	76fb      	strb	r3, [r7, #27]
        break;
 8003fde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	d90a      	bls.n	8003ffc <UART_SetConfig+0x6c8>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d206      	bcs.n	8003ffc <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	e003      	b.n	8004000 <UART_SetConfig+0x6cc>
 8003ff8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800400c:	7efb      	ldrb	r3, [r7, #27]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3728      	adds	r7, #40	; 0x28
 8004012:	46bd      	mov	sp, r7
 8004014:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01a      	beq.n	800412e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004116:	d10a      	bne.n	800412e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800416a:	f7fc fee3 	bl	8000f34 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b08      	cmp	r3, #8
 800417c:	d10e      	bne.n	800419c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f82a 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e020      	b.n	80041de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d10e      	bne.n	80041c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f814 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e00a      	b.n	80041de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4613      	mov	r3, r2
 80041f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	e05d      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d059      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004200:	f7fc fe98 	bl	8000f34 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <UART_WaitOnFlagUntilTimeout+0x30>
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d11b      	bne.n	800424e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004224:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e042      	b.n	80042d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02b      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426a:	d123      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004274:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004284:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e00f      	b.n	80042d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d092      	beq.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <__errno>:
 80042dc:	4b01      	ldr	r3, [pc, #4]	; (80042e4 <__errno+0x8>)
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c

080042e8 <__libc_init_array>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	4e0d      	ldr	r6, [pc, #52]	; (8004320 <__libc_init_array+0x38>)
 80042ec:	4c0d      	ldr	r4, [pc, #52]	; (8004324 <__libc_init_array+0x3c>)
 80042ee:	1ba4      	subs	r4, r4, r6
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	2500      	movs	r5, #0
 80042f4:	42a5      	cmp	r5, r4
 80042f6:	d109      	bne.n	800430c <__libc_init_array+0x24>
 80042f8:	4e0b      	ldr	r6, [pc, #44]	; (8004328 <__libc_init_array+0x40>)
 80042fa:	4c0c      	ldr	r4, [pc, #48]	; (800432c <__libc_init_array+0x44>)
 80042fc:	f000 fc26 	bl	8004b4c <_init>
 8004300:	1ba4      	subs	r4, r4, r6
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	2500      	movs	r5, #0
 8004306:	42a5      	cmp	r5, r4
 8004308:	d105      	bne.n	8004316 <__libc_init_array+0x2e>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004310:	4798      	blx	r3
 8004312:	3501      	adds	r5, #1
 8004314:	e7ee      	b.n	80042f4 <__libc_init_array+0xc>
 8004316:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800431a:	4798      	blx	r3
 800431c:	3501      	adds	r5, #1
 800431e:	e7f2      	b.n	8004306 <__libc_init_array+0x1e>
 8004320:	08004c28 	.word	0x08004c28
 8004324:	08004c28 	.word	0x08004c28
 8004328:	08004c28 	.word	0x08004c28
 800432c:	08004c2c 	.word	0x08004c2c

08004330 <memset>:
 8004330:	4402      	add	r2, r0
 8004332:	4603      	mov	r3, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	d100      	bne.n	800433a <memset+0xa>
 8004338:	4770      	bx	lr
 800433a:	f803 1b01 	strb.w	r1, [r3], #1
 800433e:	e7f9      	b.n	8004334 <memset+0x4>

08004340 <siprintf>:
 8004340:	b40e      	push	{r1, r2, r3}
 8004342:	b500      	push	{lr}
 8004344:	b09c      	sub	sp, #112	; 0x70
 8004346:	ab1d      	add	r3, sp, #116	; 0x74
 8004348:	9002      	str	r0, [sp, #8]
 800434a:	9006      	str	r0, [sp, #24]
 800434c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004350:	4809      	ldr	r0, [pc, #36]	; (8004378 <siprintf+0x38>)
 8004352:	9107      	str	r1, [sp, #28]
 8004354:	9104      	str	r1, [sp, #16]
 8004356:	4909      	ldr	r1, [pc, #36]	; (800437c <siprintf+0x3c>)
 8004358:	f853 2b04 	ldr.w	r2, [r3], #4
 800435c:	9105      	str	r1, [sp, #20]
 800435e:	6800      	ldr	r0, [r0, #0]
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	a902      	add	r1, sp, #8
 8004364:	f000 f866 	bl	8004434 <_svfiprintf_r>
 8004368:	9b02      	ldr	r3, [sp, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	b01c      	add	sp, #112	; 0x70
 8004370:	f85d eb04 	ldr.w	lr, [sp], #4
 8004374:	b003      	add	sp, #12
 8004376:	4770      	bx	lr
 8004378:	2000000c 	.word	0x2000000c
 800437c:	ffff0208 	.word	0xffff0208

08004380 <__ssputs_r>:
 8004380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	688e      	ldr	r6, [r1, #8]
 8004386:	429e      	cmp	r6, r3
 8004388:	4682      	mov	sl, r0
 800438a:	460c      	mov	r4, r1
 800438c:	4690      	mov	r8, r2
 800438e:	4699      	mov	r9, r3
 8004390:	d837      	bhi.n	8004402 <__ssputs_r+0x82>
 8004392:	898a      	ldrh	r2, [r1, #12]
 8004394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004398:	d031      	beq.n	80043fe <__ssputs_r+0x7e>
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	6909      	ldr	r1, [r1, #16]
 800439e:	1a6f      	subs	r7, r5, r1
 80043a0:	6965      	ldr	r5, [r4, #20]
 80043a2:	2302      	movs	r3, #2
 80043a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80043ac:	f109 0301 	add.w	r3, r9, #1
 80043b0:	443b      	add	r3, r7
 80043b2:	429d      	cmp	r5, r3
 80043b4:	bf38      	it	cc
 80043b6:	461d      	movcc	r5, r3
 80043b8:	0553      	lsls	r3, r2, #21
 80043ba:	d530      	bpl.n	800441e <__ssputs_r+0x9e>
 80043bc:	4629      	mov	r1, r5
 80043be:	f000 fb2b 	bl	8004a18 <_malloc_r>
 80043c2:	4606      	mov	r6, r0
 80043c4:	b950      	cbnz	r0, 80043dc <__ssputs_r+0x5c>
 80043c6:	230c      	movs	r3, #12
 80043c8:	f8ca 3000 	str.w	r3, [sl]
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043dc:	463a      	mov	r2, r7
 80043de:	6921      	ldr	r1, [r4, #16]
 80043e0:	f000 faa8 	bl	8004934 <memcpy>
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	81a3      	strh	r3, [r4, #12]
 80043f0:	6126      	str	r6, [r4, #16]
 80043f2:	6165      	str	r5, [r4, #20]
 80043f4:	443e      	add	r6, r7
 80043f6:	1bed      	subs	r5, r5, r7
 80043f8:	6026      	str	r6, [r4, #0]
 80043fa:	60a5      	str	r5, [r4, #8]
 80043fc:	464e      	mov	r6, r9
 80043fe:	454e      	cmp	r6, r9
 8004400:	d900      	bls.n	8004404 <__ssputs_r+0x84>
 8004402:	464e      	mov	r6, r9
 8004404:	4632      	mov	r2, r6
 8004406:	4641      	mov	r1, r8
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	f000 fa9e 	bl	800494a <memmove>
 800440e:	68a3      	ldr	r3, [r4, #8]
 8004410:	1b9b      	subs	r3, r3, r6
 8004412:	60a3      	str	r3, [r4, #8]
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	441e      	add	r6, r3
 8004418:	6026      	str	r6, [r4, #0]
 800441a:	2000      	movs	r0, #0
 800441c:	e7dc      	b.n	80043d8 <__ssputs_r+0x58>
 800441e:	462a      	mov	r2, r5
 8004420:	f000 fb54 	bl	8004acc <_realloc_r>
 8004424:	4606      	mov	r6, r0
 8004426:	2800      	cmp	r0, #0
 8004428:	d1e2      	bne.n	80043f0 <__ssputs_r+0x70>
 800442a:	6921      	ldr	r1, [r4, #16]
 800442c:	4650      	mov	r0, sl
 800442e:	f000 faa5 	bl	800497c <_free_r>
 8004432:	e7c8      	b.n	80043c6 <__ssputs_r+0x46>

08004434 <_svfiprintf_r>:
 8004434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004438:	461d      	mov	r5, r3
 800443a:	898b      	ldrh	r3, [r1, #12]
 800443c:	061f      	lsls	r7, r3, #24
 800443e:	b09d      	sub	sp, #116	; 0x74
 8004440:	4680      	mov	r8, r0
 8004442:	460c      	mov	r4, r1
 8004444:	4616      	mov	r6, r2
 8004446:	d50f      	bpl.n	8004468 <_svfiprintf_r+0x34>
 8004448:	690b      	ldr	r3, [r1, #16]
 800444a:	b96b      	cbnz	r3, 8004468 <_svfiprintf_r+0x34>
 800444c:	2140      	movs	r1, #64	; 0x40
 800444e:	f000 fae3 	bl	8004a18 <_malloc_r>
 8004452:	6020      	str	r0, [r4, #0]
 8004454:	6120      	str	r0, [r4, #16]
 8004456:	b928      	cbnz	r0, 8004464 <_svfiprintf_r+0x30>
 8004458:	230c      	movs	r3, #12
 800445a:	f8c8 3000 	str.w	r3, [r8]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	e0c8      	b.n	80045f6 <_svfiprintf_r+0x1c2>
 8004464:	2340      	movs	r3, #64	; 0x40
 8004466:	6163      	str	r3, [r4, #20]
 8004468:	2300      	movs	r3, #0
 800446a:	9309      	str	r3, [sp, #36]	; 0x24
 800446c:	2320      	movs	r3, #32
 800446e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004472:	2330      	movs	r3, #48	; 0x30
 8004474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004478:	9503      	str	r5, [sp, #12]
 800447a:	f04f 0b01 	mov.w	fp, #1
 800447e:	4637      	mov	r7, r6
 8004480:	463d      	mov	r5, r7
 8004482:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004486:	b10b      	cbz	r3, 800448c <_svfiprintf_r+0x58>
 8004488:	2b25      	cmp	r3, #37	; 0x25
 800448a:	d13e      	bne.n	800450a <_svfiprintf_r+0xd6>
 800448c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004490:	d00b      	beq.n	80044aa <_svfiprintf_r+0x76>
 8004492:	4653      	mov	r3, sl
 8004494:	4632      	mov	r2, r6
 8004496:	4621      	mov	r1, r4
 8004498:	4640      	mov	r0, r8
 800449a:	f7ff ff71 	bl	8004380 <__ssputs_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	f000 80a4 	beq.w	80045ec <_svfiprintf_r+0x1b8>
 80044a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a6:	4453      	add	r3, sl
 80044a8:	9309      	str	r3, [sp, #36]	; 0x24
 80044aa:	783b      	ldrb	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 809d 	beq.w	80045ec <_svfiprintf_r+0x1b8>
 80044b2:	2300      	movs	r3, #0
 80044b4:	f04f 32ff 	mov.w	r2, #4294967295
 80044b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	9307      	str	r3, [sp, #28]
 80044c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044c4:	931a      	str	r3, [sp, #104]	; 0x68
 80044c6:	462f      	mov	r7, r5
 80044c8:	2205      	movs	r2, #5
 80044ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80044ce:	4850      	ldr	r0, [pc, #320]	; (8004610 <_svfiprintf_r+0x1dc>)
 80044d0:	f7fb fe7e 	bl	80001d0 <memchr>
 80044d4:	9b04      	ldr	r3, [sp, #16]
 80044d6:	b9d0      	cbnz	r0, 800450e <_svfiprintf_r+0xda>
 80044d8:	06d9      	lsls	r1, r3, #27
 80044da:	bf44      	itt	mi
 80044dc:	2220      	movmi	r2, #32
 80044de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044e2:	071a      	lsls	r2, r3, #28
 80044e4:	bf44      	itt	mi
 80044e6:	222b      	movmi	r2, #43	; 0x2b
 80044e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044ec:	782a      	ldrb	r2, [r5, #0]
 80044ee:	2a2a      	cmp	r2, #42	; 0x2a
 80044f0:	d015      	beq.n	800451e <_svfiprintf_r+0xea>
 80044f2:	9a07      	ldr	r2, [sp, #28]
 80044f4:	462f      	mov	r7, r5
 80044f6:	2000      	movs	r0, #0
 80044f8:	250a      	movs	r5, #10
 80044fa:	4639      	mov	r1, r7
 80044fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004500:	3b30      	subs	r3, #48	; 0x30
 8004502:	2b09      	cmp	r3, #9
 8004504:	d94d      	bls.n	80045a2 <_svfiprintf_r+0x16e>
 8004506:	b1b8      	cbz	r0, 8004538 <_svfiprintf_r+0x104>
 8004508:	e00f      	b.n	800452a <_svfiprintf_r+0xf6>
 800450a:	462f      	mov	r7, r5
 800450c:	e7b8      	b.n	8004480 <_svfiprintf_r+0x4c>
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <_svfiprintf_r+0x1dc>)
 8004510:	1a80      	subs	r0, r0, r2
 8004512:	fa0b f000 	lsl.w	r0, fp, r0
 8004516:	4318      	orrs	r0, r3
 8004518:	9004      	str	r0, [sp, #16]
 800451a:	463d      	mov	r5, r7
 800451c:	e7d3      	b.n	80044c6 <_svfiprintf_r+0x92>
 800451e:	9a03      	ldr	r2, [sp, #12]
 8004520:	1d11      	adds	r1, r2, #4
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	9103      	str	r1, [sp, #12]
 8004526:	2a00      	cmp	r2, #0
 8004528:	db01      	blt.n	800452e <_svfiprintf_r+0xfa>
 800452a:	9207      	str	r2, [sp, #28]
 800452c:	e004      	b.n	8004538 <_svfiprintf_r+0x104>
 800452e:	4252      	negs	r2, r2
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	9207      	str	r2, [sp, #28]
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	783b      	ldrb	r3, [r7, #0]
 800453a:	2b2e      	cmp	r3, #46	; 0x2e
 800453c:	d10c      	bne.n	8004558 <_svfiprintf_r+0x124>
 800453e:	787b      	ldrb	r3, [r7, #1]
 8004540:	2b2a      	cmp	r3, #42	; 0x2a
 8004542:	d133      	bne.n	80045ac <_svfiprintf_r+0x178>
 8004544:	9b03      	ldr	r3, [sp, #12]
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	9203      	str	r2, [sp, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	bfb8      	it	lt
 8004550:	f04f 33ff 	movlt.w	r3, #4294967295
 8004554:	3702      	adds	r7, #2
 8004556:	9305      	str	r3, [sp, #20]
 8004558:	4d2e      	ldr	r5, [pc, #184]	; (8004614 <_svfiprintf_r+0x1e0>)
 800455a:	7839      	ldrb	r1, [r7, #0]
 800455c:	2203      	movs	r2, #3
 800455e:	4628      	mov	r0, r5
 8004560:	f7fb fe36 	bl	80001d0 <memchr>
 8004564:	b138      	cbz	r0, 8004576 <_svfiprintf_r+0x142>
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	1b40      	subs	r0, r0, r5
 800456a:	fa03 f000 	lsl.w	r0, r3, r0
 800456e:	9b04      	ldr	r3, [sp, #16]
 8004570:	4303      	orrs	r3, r0
 8004572:	3701      	adds	r7, #1
 8004574:	9304      	str	r3, [sp, #16]
 8004576:	7839      	ldrb	r1, [r7, #0]
 8004578:	4827      	ldr	r0, [pc, #156]	; (8004618 <_svfiprintf_r+0x1e4>)
 800457a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800457e:	2206      	movs	r2, #6
 8004580:	1c7e      	adds	r6, r7, #1
 8004582:	f7fb fe25 	bl	80001d0 <memchr>
 8004586:	2800      	cmp	r0, #0
 8004588:	d038      	beq.n	80045fc <_svfiprintf_r+0x1c8>
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <_svfiprintf_r+0x1e8>)
 800458c:	bb13      	cbnz	r3, 80045d4 <_svfiprintf_r+0x1a0>
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	3307      	adds	r3, #7
 8004592:	f023 0307 	bic.w	r3, r3, #7
 8004596:	3308      	adds	r3, #8
 8004598:	9303      	str	r3, [sp, #12]
 800459a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459c:	444b      	add	r3, r9
 800459e:	9309      	str	r3, [sp, #36]	; 0x24
 80045a0:	e76d      	b.n	800447e <_svfiprintf_r+0x4a>
 80045a2:	fb05 3202 	mla	r2, r5, r2, r3
 80045a6:	2001      	movs	r0, #1
 80045a8:	460f      	mov	r7, r1
 80045aa:	e7a6      	b.n	80044fa <_svfiprintf_r+0xc6>
 80045ac:	2300      	movs	r3, #0
 80045ae:	3701      	adds	r7, #1
 80045b0:	9305      	str	r3, [sp, #20]
 80045b2:	4619      	mov	r1, r3
 80045b4:	250a      	movs	r5, #10
 80045b6:	4638      	mov	r0, r7
 80045b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045bc:	3a30      	subs	r2, #48	; 0x30
 80045be:	2a09      	cmp	r2, #9
 80045c0:	d903      	bls.n	80045ca <_svfiprintf_r+0x196>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0c8      	beq.n	8004558 <_svfiprintf_r+0x124>
 80045c6:	9105      	str	r1, [sp, #20]
 80045c8:	e7c6      	b.n	8004558 <_svfiprintf_r+0x124>
 80045ca:	fb05 2101 	mla	r1, r5, r1, r2
 80045ce:	2301      	movs	r3, #1
 80045d0:	4607      	mov	r7, r0
 80045d2:	e7f0      	b.n	80045b6 <_svfiprintf_r+0x182>
 80045d4:	ab03      	add	r3, sp, #12
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	4622      	mov	r2, r4
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <_svfiprintf_r+0x1ec>)
 80045dc:	a904      	add	r1, sp, #16
 80045de:	4640      	mov	r0, r8
 80045e0:	f3af 8000 	nop.w
 80045e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045e8:	4681      	mov	r9, r0
 80045ea:	d1d6      	bne.n	800459a <_svfiprintf_r+0x166>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	065b      	lsls	r3, r3, #25
 80045f0:	f53f af35 	bmi.w	800445e <_svfiprintf_r+0x2a>
 80045f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045f6:	b01d      	add	sp, #116	; 0x74
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	ab03      	add	r3, sp, #12
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	4622      	mov	r2, r4
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <_svfiprintf_r+0x1ec>)
 8004604:	a904      	add	r1, sp, #16
 8004606:	4640      	mov	r0, r8
 8004608:	f000 f882 	bl	8004710 <_printf_i>
 800460c:	e7ea      	b.n	80045e4 <_svfiprintf_r+0x1b0>
 800460e:	bf00      	nop
 8004610:	08004bec 	.word	0x08004bec
 8004614:	08004bf2 	.word	0x08004bf2
 8004618:	08004bf6 	.word	0x08004bf6
 800461c:	00000000 	.word	0x00000000
 8004620:	08004381 	.word	0x08004381

08004624 <_printf_common>:
 8004624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004628:	4691      	mov	r9, r2
 800462a:	461f      	mov	r7, r3
 800462c:	688a      	ldr	r2, [r1, #8]
 800462e:	690b      	ldr	r3, [r1, #16]
 8004630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004634:	4293      	cmp	r3, r2
 8004636:	bfb8      	it	lt
 8004638:	4613      	movlt	r3, r2
 800463a:	f8c9 3000 	str.w	r3, [r9]
 800463e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004642:	4606      	mov	r6, r0
 8004644:	460c      	mov	r4, r1
 8004646:	b112      	cbz	r2, 800464e <_printf_common+0x2a>
 8004648:	3301      	adds	r3, #1
 800464a:	f8c9 3000 	str.w	r3, [r9]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004658:	3302      	addmi	r3, #2
 800465a:	f8c9 3000 	strmi.w	r3, [r9]
 800465e:	6825      	ldr	r5, [r4, #0]
 8004660:	f015 0506 	ands.w	r5, r5, #6
 8004664:	d107      	bne.n	8004676 <_printf_common+0x52>
 8004666:	f104 0a19 	add.w	sl, r4, #25
 800466a:	68e3      	ldr	r3, [r4, #12]
 800466c:	f8d9 2000 	ldr.w	r2, [r9]
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	42ab      	cmp	r3, r5
 8004674:	dc28      	bgt.n	80046c8 <_printf_common+0xa4>
 8004676:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	3300      	adds	r3, #0
 800467e:	bf18      	it	ne
 8004680:	2301      	movne	r3, #1
 8004682:	0692      	lsls	r2, r2, #26
 8004684:	d42d      	bmi.n	80046e2 <_printf_common+0xbe>
 8004686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800468a:	4639      	mov	r1, r7
 800468c:	4630      	mov	r0, r6
 800468e:	47c0      	blx	r8
 8004690:	3001      	adds	r0, #1
 8004692:	d020      	beq.n	80046d6 <_printf_common+0xb2>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	68e5      	ldr	r5, [r4, #12]
 8004698:	f8d9 2000 	ldr.w	r2, [r9]
 800469c:	f003 0306 	and.w	r3, r3, #6
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	bf08      	it	eq
 80046a4:	1aad      	subeq	r5, r5, r2
 80046a6:	68a3      	ldr	r3, [r4, #8]
 80046a8:	6922      	ldr	r2, [r4, #16]
 80046aa:	bf0c      	ite	eq
 80046ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b0:	2500      	movne	r5, #0
 80046b2:	4293      	cmp	r3, r2
 80046b4:	bfc4      	itt	gt
 80046b6:	1a9b      	subgt	r3, r3, r2
 80046b8:	18ed      	addgt	r5, r5, r3
 80046ba:	f04f 0900 	mov.w	r9, #0
 80046be:	341a      	adds	r4, #26
 80046c0:	454d      	cmp	r5, r9
 80046c2:	d11a      	bne.n	80046fa <_printf_common+0xd6>
 80046c4:	2000      	movs	r0, #0
 80046c6:	e008      	b.n	80046da <_printf_common+0xb6>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4652      	mov	r2, sl
 80046cc:	4639      	mov	r1, r7
 80046ce:	4630      	mov	r0, r6
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d103      	bne.n	80046de <_printf_common+0xba>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046de:	3501      	adds	r5, #1
 80046e0:	e7c3      	b.n	800466a <_printf_common+0x46>
 80046e2:	18e1      	adds	r1, r4, r3
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	2030      	movs	r0, #48	; 0x30
 80046e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ec:	4422      	add	r2, r4
 80046ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046f6:	3302      	adds	r3, #2
 80046f8:	e7c5      	b.n	8004686 <_printf_common+0x62>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4622      	mov	r2, r4
 80046fe:	4639      	mov	r1, r7
 8004700:	4630      	mov	r0, r6
 8004702:	47c0      	blx	r8
 8004704:	3001      	adds	r0, #1
 8004706:	d0e6      	beq.n	80046d6 <_printf_common+0xb2>
 8004708:	f109 0901 	add.w	r9, r9, #1
 800470c:	e7d8      	b.n	80046c0 <_printf_common+0x9c>
	...

08004710 <_printf_i>:
 8004710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004714:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004718:	460c      	mov	r4, r1
 800471a:	7e09      	ldrb	r1, [r1, #24]
 800471c:	b085      	sub	sp, #20
 800471e:	296e      	cmp	r1, #110	; 0x6e
 8004720:	4617      	mov	r7, r2
 8004722:	4606      	mov	r6, r0
 8004724:	4698      	mov	r8, r3
 8004726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004728:	f000 80b3 	beq.w	8004892 <_printf_i+0x182>
 800472c:	d822      	bhi.n	8004774 <_printf_i+0x64>
 800472e:	2963      	cmp	r1, #99	; 0x63
 8004730:	d036      	beq.n	80047a0 <_printf_i+0x90>
 8004732:	d80a      	bhi.n	800474a <_printf_i+0x3a>
 8004734:	2900      	cmp	r1, #0
 8004736:	f000 80b9 	beq.w	80048ac <_printf_i+0x19c>
 800473a:	2958      	cmp	r1, #88	; 0x58
 800473c:	f000 8083 	beq.w	8004846 <_printf_i+0x136>
 8004740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004744:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004748:	e032      	b.n	80047b0 <_printf_i+0xa0>
 800474a:	2964      	cmp	r1, #100	; 0x64
 800474c:	d001      	beq.n	8004752 <_printf_i+0x42>
 800474e:	2969      	cmp	r1, #105	; 0x69
 8004750:	d1f6      	bne.n	8004740 <_printf_i+0x30>
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	0605      	lsls	r5, r0, #24
 8004758:	f103 0104 	add.w	r1, r3, #4
 800475c:	d52a      	bpl.n	80047b4 <_printf_i+0xa4>
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	da03      	bge.n	800476e <_printf_i+0x5e>
 8004766:	222d      	movs	r2, #45	; 0x2d
 8004768:	425b      	negs	r3, r3
 800476a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800476e:	486f      	ldr	r0, [pc, #444]	; (800492c <_printf_i+0x21c>)
 8004770:	220a      	movs	r2, #10
 8004772:	e039      	b.n	80047e8 <_printf_i+0xd8>
 8004774:	2973      	cmp	r1, #115	; 0x73
 8004776:	f000 809d 	beq.w	80048b4 <_printf_i+0x1a4>
 800477a:	d808      	bhi.n	800478e <_printf_i+0x7e>
 800477c:	296f      	cmp	r1, #111	; 0x6f
 800477e:	d020      	beq.n	80047c2 <_printf_i+0xb2>
 8004780:	2970      	cmp	r1, #112	; 0x70
 8004782:	d1dd      	bne.n	8004740 <_printf_i+0x30>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	f043 0320 	orr.w	r3, r3, #32
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	e003      	b.n	8004796 <_printf_i+0x86>
 800478e:	2975      	cmp	r1, #117	; 0x75
 8004790:	d017      	beq.n	80047c2 <_printf_i+0xb2>
 8004792:	2978      	cmp	r1, #120	; 0x78
 8004794:	d1d4      	bne.n	8004740 <_printf_i+0x30>
 8004796:	2378      	movs	r3, #120	; 0x78
 8004798:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800479c:	4864      	ldr	r0, [pc, #400]	; (8004930 <_printf_i+0x220>)
 800479e:	e055      	b.n	800484c <_printf_i+0x13c>
 80047a0:	6813      	ldr	r3, [r2, #0]
 80047a2:	1d19      	adds	r1, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6011      	str	r1, [r2, #0]
 80047a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b0:	2301      	movs	r3, #1
 80047b2:	e08c      	b.n	80048ce <_printf_i+0x1be>
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6011      	str	r1, [r2, #0]
 80047b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047bc:	bf18      	it	ne
 80047be:	b21b      	sxthne	r3, r3
 80047c0:	e7cf      	b.n	8004762 <_printf_i+0x52>
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	6825      	ldr	r5, [r4, #0]
 80047c6:	1d18      	adds	r0, r3, #4
 80047c8:	6010      	str	r0, [r2, #0]
 80047ca:	0628      	lsls	r0, r5, #24
 80047cc:	d501      	bpl.n	80047d2 <_printf_i+0xc2>
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	e002      	b.n	80047d8 <_printf_i+0xc8>
 80047d2:	0668      	lsls	r0, r5, #25
 80047d4:	d5fb      	bpl.n	80047ce <_printf_i+0xbe>
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	4854      	ldr	r0, [pc, #336]	; (800492c <_printf_i+0x21c>)
 80047da:	296f      	cmp	r1, #111	; 0x6f
 80047dc:	bf14      	ite	ne
 80047de:	220a      	movne	r2, #10
 80047e0:	2208      	moveq	r2, #8
 80047e2:	2100      	movs	r1, #0
 80047e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047e8:	6865      	ldr	r5, [r4, #4]
 80047ea:	60a5      	str	r5, [r4, #8]
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	f2c0 8095 	blt.w	800491c <_printf_i+0x20c>
 80047f2:	6821      	ldr	r1, [r4, #0]
 80047f4:	f021 0104 	bic.w	r1, r1, #4
 80047f8:	6021      	str	r1, [r4, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d13d      	bne.n	800487a <_printf_i+0x16a>
 80047fe:	2d00      	cmp	r5, #0
 8004800:	f040 808e 	bne.w	8004920 <_printf_i+0x210>
 8004804:	4665      	mov	r5, ip
 8004806:	2a08      	cmp	r2, #8
 8004808:	d10b      	bne.n	8004822 <_printf_i+0x112>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	07db      	lsls	r3, r3, #31
 800480e:	d508      	bpl.n	8004822 <_printf_i+0x112>
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	6862      	ldr	r2, [r4, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	bfde      	ittt	le
 8004818:	2330      	movle	r3, #48	; 0x30
 800481a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800481e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004822:	ebac 0305 	sub.w	r3, ip, r5
 8004826:	6123      	str	r3, [r4, #16]
 8004828:	f8cd 8000 	str.w	r8, [sp]
 800482c:	463b      	mov	r3, r7
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4630      	mov	r0, r6
 8004834:	f7ff fef6 	bl	8004624 <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14d      	bne.n	80048d8 <_printf_i+0x1c8>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b005      	add	sp, #20
 8004842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004846:	4839      	ldr	r0, [pc, #228]	; (800492c <_printf_i+0x21c>)
 8004848:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800484c:	6813      	ldr	r3, [r2, #0]
 800484e:	6821      	ldr	r1, [r4, #0]
 8004850:	1d1d      	adds	r5, r3, #4
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6015      	str	r5, [r2, #0]
 8004856:	060a      	lsls	r2, r1, #24
 8004858:	d50b      	bpl.n	8004872 <_printf_i+0x162>
 800485a:	07ca      	lsls	r2, r1, #31
 800485c:	bf44      	itt	mi
 800485e:	f041 0120 	orrmi.w	r1, r1, #32
 8004862:	6021      	strmi	r1, [r4, #0]
 8004864:	b91b      	cbnz	r3, 800486e <_printf_i+0x15e>
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	f022 0220 	bic.w	r2, r2, #32
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	2210      	movs	r2, #16
 8004870:	e7b7      	b.n	80047e2 <_printf_i+0xd2>
 8004872:	064d      	lsls	r5, r1, #25
 8004874:	bf48      	it	mi
 8004876:	b29b      	uxthmi	r3, r3
 8004878:	e7ef      	b.n	800485a <_printf_i+0x14a>
 800487a:	4665      	mov	r5, ip
 800487c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004880:	fb02 3311 	mls	r3, r2, r1, r3
 8004884:	5cc3      	ldrb	r3, [r0, r3]
 8004886:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800488a:	460b      	mov	r3, r1
 800488c:	2900      	cmp	r1, #0
 800488e:	d1f5      	bne.n	800487c <_printf_i+0x16c>
 8004890:	e7b9      	b.n	8004806 <_printf_i+0xf6>
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	6825      	ldr	r5, [r4, #0]
 8004896:	6961      	ldr	r1, [r4, #20]
 8004898:	1d18      	adds	r0, r3, #4
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	0628      	lsls	r0, r5, #24
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	d501      	bpl.n	80048a6 <_printf_i+0x196>
 80048a2:	6019      	str	r1, [r3, #0]
 80048a4:	e002      	b.n	80048ac <_printf_i+0x19c>
 80048a6:	066a      	lsls	r2, r5, #25
 80048a8:	d5fb      	bpl.n	80048a2 <_printf_i+0x192>
 80048aa:	8019      	strh	r1, [r3, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	4665      	mov	r5, ip
 80048b2:	e7b9      	b.n	8004828 <_printf_i+0x118>
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	1d19      	adds	r1, r3, #4
 80048b8:	6011      	str	r1, [r2, #0]
 80048ba:	681d      	ldr	r5, [r3, #0]
 80048bc:	6862      	ldr	r2, [r4, #4]
 80048be:	2100      	movs	r1, #0
 80048c0:	4628      	mov	r0, r5
 80048c2:	f7fb fc85 	bl	80001d0 <memchr>
 80048c6:	b108      	cbz	r0, 80048cc <_printf_i+0x1bc>
 80048c8:	1b40      	subs	r0, r0, r5
 80048ca:	6060      	str	r0, [r4, #4]
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	6123      	str	r3, [r4, #16]
 80048d0:	2300      	movs	r3, #0
 80048d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d6:	e7a7      	b.n	8004828 <_printf_i+0x118>
 80048d8:	6923      	ldr	r3, [r4, #16]
 80048da:	462a      	mov	r2, r5
 80048dc:	4639      	mov	r1, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	47c0      	blx	r8
 80048e2:	3001      	adds	r0, #1
 80048e4:	d0aa      	beq.n	800483c <_printf_i+0x12c>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	079b      	lsls	r3, r3, #30
 80048ea:	d413      	bmi.n	8004914 <_printf_i+0x204>
 80048ec:	68e0      	ldr	r0, [r4, #12]
 80048ee:	9b03      	ldr	r3, [sp, #12]
 80048f0:	4298      	cmp	r0, r3
 80048f2:	bfb8      	it	lt
 80048f4:	4618      	movlt	r0, r3
 80048f6:	e7a3      	b.n	8004840 <_printf_i+0x130>
 80048f8:	2301      	movs	r3, #1
 80048fa:	464a      	mov	r2, r9
 80048fc:	4639      	mov	r1, r7
 80048fe:	4630      	mov	r0, r6
 8004900:	47c0      	blx	r8
 8004902:	3001      	adds	r0, #1
 8004904:	d09a      	beq.n	800483c <_printf_i+0x12c>
 8004906:	3501      	adds	r5, #1
 8004908:	68e3      	ldr	r3, [r4, #12]
 800490a:	9a03      	ldr	r2, [sp, #12]
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	42ab      	cmp	r3, r5
 8004910:	dcf2      	bgt.n	80048f8 <_printf_i+0x1e8>
 8004912:	e7eb      	b.n	80048ec <_printf_i+0x1dc>
 8004914:	2500      	movs	r5, #0
 8004916:	f104 0919 	add.w	r9, r4, #25
 800491a:	e7f5      	b.n	8004908 <_printf_i+0x1f8>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ac      	bne.n	800487a <_printf_i+0x16a>
 8004920:	7803      	ldrb	r3, [r0, #0]
 8004922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004926:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800492a:	e76c      	b.n	8004806 <_printf_i+0xf6>
 800492c:	08004bfd 	.word	0x08004bfd
 8004930:	08004c0e 	.word	0x08004c0e

08004934 <memcpy>:
 8004934:	b510      	push	{r4, lr}
 8004936:	1e43      	subs	r3, r0, #1
 8004938:	440a      	add	r2, r1
 800493a:	4291      	cmp	r1, r2
 800493c:	d100      	bne.n	8004940 <memcpy+0xc>
 800493e:	bd10      	pop	{r4, pc}
 8004940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004948:	e7f7      	b.n	800493a <memcpy+0x6>

0800494a <memmove>:
 800494a:	4288      	cmp	r0, r1
 800494c:	b510      	push	{r4, lr}
 800494e:	eb01 0302 	add.w	r3, r1, r2
 8004952:	d807      	bhi.n	8004964 <memmove+0x1a>
 8004954:	1e42      	subs	r2, r0, #1
 8004956:	4299      	cmp	r1, r3
 8004958:	d00a      	beq.n	8004970 <memmove+0x26>
 800495a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800495e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004962:	e7f8      	b.n	8004956 <memmove+0xc>
 8004964:	4283      	cmp	r3, r0
 8004966:	d9f5      	bls.n	8004954 <memmove+0xa>
 8004968:	1881      	adds	r1, r0, r2
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	42d3      	cmn	r3, r2
 800496e:	d100      	bne.n	8004972 <memmove+0x28>
 8004970:	bd10      	pop	{r4, pc}
 8004972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004976:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800497a:	e7f7      	b.n	800496c <memmove+0x22>

0800497c <_free_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4605      	mov	r5, r0
 8004980:	2900      	cmp	r1, #0
 8004982:	d045      	beq.n	8004a10 <_free_r+0x94>
 8004984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004988:	1f0c      	subs	r4, r1, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	bfb8      	it	lt
 800498e:	18e4      	addlt	r4, r4, r3
 8004990:	f000 f8d2 	bl	8004b38 <__malloc_lock>
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <_free_r+0x98>)
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	4610      	mov	r0, r2
 800499a:	b933      	cbnz	r3, 80049aa <_free_r+0x2e>
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	6014      	str	r4, [r2, #0]
 80049a0:	4628      	mov	r0, r5
 80049a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049a6:	f000 b8c8 	b.w	8004b3a <__malloc_unlock>
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	d90c      	bls.n	80049c8 <_free_r+0x4c>
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	1862      	adds	r2, r4, r1
 80049b2:	4293      	cmp	r3, r2
 80049b4:	bf04      	itt	eq
 80049b6:	681a      	ldreq	r2, [r3, #0]
 80049b8:	685b      	ldreq	r3, [r3, #4]
 80049ba:	6063      	str	r3, [r4, #4]
 80049bc:	bf04      	itt	eq
 80049be:	1852      	addeq	r2, r2, r1
 80049c0:	6022      	streq	r2, [r4, #0]
 80049c2:	6004      	str	r4, [r0, #0]
 80049c4:	e7ec      	b.n	80049a0 <_free_r+0x24>
 80049c6:	4613      	mov	r3, r2
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	b10a      	cbz	r2, 80049d0 <_free_r+0x54>
 80049cc:	42a2      	cmp	r2, r4
 80049ce:	d9fa      	bls.n	80049c6 <_free_r+0x4a>
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	1858      	adds	r0, r3, r1
 80049d4:	42a0      	cmp	r0, r4
 80049d6:	d10b      	bne.n	80049f0 <_free_r+0x74>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	4401      	add	r1, r0
 80049dc:	1858      	adds	r0, r3, r1
 80049de:	4282      	cmp	r2, r0
 80049e0:	6019      	str	r1, [r3, #0]
 80049e2:	d1dd      	bne.n	80049a0 <_free_r+0x24>
 80049e4:	6810      	ldr	r0, [r2, #0]
 80049e6:	6852      	ldr	r2, [r2, #4]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	4401      	add	r1, r0
 80049ec:	6019      	str	r1, [r3, #0]
 80049ee:	e7d7      	b.n	80049a0 <_free_r+0x24>
 80049f0:	d902      	bls.n	80049f8 <_free_r+0x7c>
 80049f2:	230c      	movs	r3, #12
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	e7d3      	b.n	80049a0 <_free_r+0x24>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	1821      	adds	r1, r4, r0
 80049fc:	428a      	cmp	r2, r1
 80049fe:	bf04      	itt	eq
 8004a00:	6811      	ldreq	r1, [r2, #0]
 8004a02:	6852      	ldreq	r2, [r2, #4]
 8004a04:	6062      	str	r2, [r4, #4]
 8004a06:	bf04      	itt	eq
 8004a08:	1809      	addeq	r1, r1, r0
 8004a0a:	6021      	streq	r1, [r4, #0]
 8004a0c:	605c      	str	r4, [r3, #4]
 8004a0e:	e7c7      	b.n	80049a0 <_free_r+0x24>
 8004a10:	bd38      	pop	{r3, r4, r5, pc}
 8004a12:	bf00      	nop
 8004a14:	20000090 	.word	0x20000090

08004a18 <_malloc_r>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	1ccd      	adds	r5, r1, #3
 8004a1c:	f025 0503 	bic.w	r5, r5, #3
 8004a20:	3508      	adds	r5, #8
 8004a22:	2d0c      	cmp	r5, #12
 8004a24:	bf38      	it	cc
 8004a26:	250c      	movcc	r5, #12
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	db01      	blt.n	8004a32 <_malloc_r+0x1a>
 8004a2e:	42a9      	cmp	r1, r5
 8004a30:	d903      	bls.n	8004a3a <_malloc_r+0x22>
 8004a32:	230c      	movs	r3, #12
 8004a34:	6033      	str	r3, [r6, #0]
 8004a36:	2000      	movs	r0, #0
 8004a38:	bd70      	pop	{r4, r5, r6, pc}
 8004a3a:	f000 f87d 	bl	8004b38 <__malloc_lock>
 8004a3e:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <_malloc_r+0xac>)
 8004a40:	6814      	ldr	r4, [r2, #0]
 8004a42:	4621      	mov	r1, r4
 8004a44:	b991      	cbnz	r1, 8004a6c <_malloc_r+0x54>
 8004a46:	4c20      	ldr	r4, [pc, #128]	; (8004ac8 <_malloc_r+0xb0>)
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	b91b      	cbnz	r3, 8004a54 <_malloc_r+0x3c>
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f000 f863 	bl	8004b18 <_sbrk_r>
 8004a52:	6020      	str	r0, [r4, #0]
 8004a54:	4629      	mov	r1, r5
 8004a56:	4630      	mov	r0, r6
 8004a58:	f000 f85e 	bl	8004b18 <_sbrk_r>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d124      	bne.n	8004aaa <_malloc_r+0x92>
 8004a60:	230c      	movs	r3, #12
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	4630      	mov	r0, r6
 8004a66:	f000 f868 	bl	8004b3a <__malloc_unlock>
 8004a6a:	e7e4      	b.n	8004a36 <_malloc_r+0x1e>
 8004a6c:	680b      	ldr	r3, [r1, #0]
 8004a6e:	1b5b      	subs	r3, r3, r5
 8004a70:	d418      	bmi.n	8004aa4 <_malloc_r+0x8c>
 8004a72:	2b0b      	cmp	r3, #11
 8004a74:	d90f      	bls.n	8004a96 <_malloc_r+0x7e>
 8004a76:	600b      	str	r3, [r1, #0]
 8004a78:	50cd      	str	r5, [r1, r3]
 8004a7a:	18cc      	adds	r4, r1, r3
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f000 f85c 	bl	8004b3a <__malloc_unlock>
 8004a82:	f104 000b 	add.w	r0, r4, #11
 8004a86:	1d23      	adds	r3, r4, #4
 8004a88:	f020 0007 	bic.w	r0, r0, #7
 8004a8c:	1ac3      	subs	r3, r0, r3
 8004a8e:	d0d3      	beq.n	8004a38 <_malloc_r+0x20>
 8004a90:	425a      	negs	r2, r3
 8004a92:	50e2      	str	r2, [r4, r3]
 8004a94:	e7d0      	b.n	8004a38 <_malloc_r+0x20>
 8004a96:	428c      	cmp	r4, r1
 8004a98:	684b      	ldr	r3, [r1, #4]
 8004a9a:	bf16      	itet	ne
 8004a9c:	6063      	strne	r3, [r4, #4]
 8004a9e:	6013      	streq	r3, [r2, #0]
 8004aa0:	460c      	movne	r4, r1
 8004aa2:	e7eb      	b.n	8004a7c <_malloc_r+0x64>
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	6849      	ldr	r1, [r1, #4]
 8004aa8:	e7cc      	b.n	8004a44 <_malloc_r+0x2c>
 8004aaa:	1cc4      	adds	r4, r0, #3
 8004aac:	f024 0403 	bic.w	r4, r4, #3
 8004ab0:	42a0      	cmp	r0, r4
 8004ab2:	d005      	beq.n	8004ac0 <_malloc_r+0xa8>
 8004ab4:	1a21      	subs	r1, r4, r0
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 f82e 	bl	8004b18 <_sbrk_r>
 8004abc:	3001      	adds	r0, #1
 8004abe:	d0cf      	beq.n	8004a60 <_malloc_r+0x48>
 8004ac0:	6025      	str	r5, [r4, #0]
 8004ac2:	e7db      	b.n	8004a7c <_malloc_r+0x64>
 8004ac4:	20000090 	.word	0x20000090
 8004ac8:	20000094 	.word	0x20000094

08004acc <_realloc_r>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	4607      	mov	r7, r0
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	460e      	mov	r6, r1
 8004ad4:	b921      	cbnz	r1, 8004ae0 <_realloc_r+0x14>
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004adc:	f7ff bf9c 	b.w	8004a18 <_malloc_r>
 8004ae0:	b922      	cbnz	r2, 8004aec <_realloc_r+0x20>
 8004ae2:	f7ff ff4b 	bl	800497c <_free_r>
 8004ae6:	4625      	mov	r5, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aec:	f000 f826 	bl	8004b3c <_malloc_usable_size_r>
 8004af0:	42a0      	cmp	r0, r4
 8004af2:	d20f      	bcs.n	8004b14 <_realloc_r+0x48>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4638      	mov	r0, r7
 8004af8:	f7ff ff8e 	bl	8004a18 <_malloc_r>
 8004afc:	4605      	mov	r5, r0
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d0f2      	beq.n	8004ae8 <_realloc_r+0x1c>
 8004b02:	4631      	mov	r1, r6
 8004b04:	4622      	mov	r2, r4
 8004b06:	f7ff ff15 	bl	8004934 <memcpy>
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	f7ff ff35 	bl	800497c <_free_r>
 8004b12:	e7e9      	b.n	8004ae8 <_realloc_r+0x1c>
 8004b14:	4635      	mov	r5, r6
 8004b16:	e7e7      	b.n	8004ae8 <_realloc_r+0x1c>

08004b18 <_sbrk_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4c06      	ldr	r4, [pc, #24]	; (8004b34 <_sbrk_r+0x1c>)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4605      	mov	r5, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	f7fc f90e 	bl	8000d44 <_sbrk>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_sbrk_r+0x1a>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_sbrk_r+0x1a>
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	200001e0 	.word	0x200001e0

08004b38 <__malloc_lock>:
 8004b38:	4770      	bx	lr

08004b3a <__malloc_unlock>:
 8004b3a:	4770      	bx	lr

08004b3c <_malloc_usable_size_r>:
 8004b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b40:	1f18      	subs	r0, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bfbc      	itt	lt
 8004b46:	580b      	ldrlt	r3, [r1, r0]
 8004b48:	18c0      	addlt	r0, r0, r3
 8004b4a:	4770      	bx	lr

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
