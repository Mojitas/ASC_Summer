
board_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba4  08004ba4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bac  08004bac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000010  08004bc4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004bc4  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160ce  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b3b  00000000  00000000  0003610e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  00038c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000290de  00000000  00000000  0003b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010769  00000000  00000000  000642d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc329  00000000  00000000  00074a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d0  00000000  00000000  00170de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b18 	.word	0x08004b18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004b18 	.word	0x08004b18

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_CAN1_Init+0x64>)
 80004de:	4a18      	ldr	r2, [pc, #96]	; (8000540 <MX_CAN1_Init+0x68>)
 80004e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <MX_CAN1_Init+0x64>)
 80004e4:	2205      	movs	r2, #5
 80004e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_CAN1_Init+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_CAN1_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_CAN1_Init+0x64>)
 80004f6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80004fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_CAN1_Init+0x64>)
 80004fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000502:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_CAN1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_CAN1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_CAN1_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_CAN1_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <MX_CAN1_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_CAN1_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_CAN1_Init+0x64>)
 800052a:	f000 fcd1 	bl	8000ed0 <HAL_CAN_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000534:	f000 fa5a 	bl	80009ec <Error_Handler>
  }

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000002c 	.word	0x2000002c
 8000540:	40006400 	.word	0x40006400

08000544 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <HAL_CAN_MspInit+0x90>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d131      	bne.n	80005ca <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <HAL_CAN_MspInit+0x94>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <HAL_CAN_MspInit+0x94>)
 800056c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000570:	6593      	str	r3, [r2, #88]	; 0x58
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <HAL_CAN_MspInit+0x94>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <HAL_CAN_MspInit+0x94>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <HAL_CAN_MspInit+0x94>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <HAL_CAN_MspInit+0x94>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000596:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a8:	2309      	movs	r3, #9
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f001 fb13 	bl	8001be0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 80005ba:	2202      	movs	r2, #2
 80005bc:	2100      	movs	r1, #0
 80005be:	2014      	movs	r0, #20
 80005c0:	f001 fad7 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005c4:	2014      	movs	r0, #20
 80005c6:	f001 faf0 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40006400 	.word	0x40006400
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b35      	ldr	r3, [pc, #212]	; (80006c8 <MX_GPIO_Init+0xec>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <MX_GPIO_Init+0xec>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <MX_GPIO_Init+0xec>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a2e      	ldr	r2, [pc, #184]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f001 fc69 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_GPIO_Init+0xf0>)
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4817      	ldr	r0, [pc, #92]	; (80006d0 <MX_GPIO_Init+0xf4>)
 8000674:	f001 fab4 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_GPIO_Init+0xf8>)
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068e:	f001 faa7 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000692:	2320      	movs	r3, #32
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f001 fa98 	bl	8001be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2100      	movs	r1, #0
 80006b4:	2006      	movs	r0, #6
 80006b6:	f001 fa5c 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ba:	2006      	movs	r0, #6
 80006bc:	f001 fa75 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	10210000 	.word	0x10210000
 80006d0:	48000800 	.word	0x48000800
 80006d4:	10110000 	.word	0x10110000

080006d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C1_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C1_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C1_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <MX_I2C1_Init+0x74>)
 8000714:	f001 fc47 	bl	8001fa6 <HAL_I2C_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 f965 	bl	80009ec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <MX_I2C1_Init+0x74>)
 8000726:	f001 fccd 	bl	80020c4 <HAL_I2CEx_ConfigAnalogFilter>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 f95c 	bl	80009ec <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2C1_Init+0x74>)
 8000738:	f001 fd0f 	bl	800215a <HAL_I2CEx_ConfigDigitalFilter>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 f953 	bl	80009ec <Error_Handler>
  }

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000054 	.word	0x20000054
 8000750:	40005400 	.word	0x40005400
 8000754:	10909cec 	.word	0x10909cec

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_I2C_MspInit+0x7c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d128      	bne.n	80007cc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000792:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000798:	2312      	movs	r3, #18
 800079a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	2301      	movs	r3, #1
 800079e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a4:	2304      	movs	r3, #4
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <HAL_I2C_MspInit+0x84>)
 80007b0:	f001 fa16 	bl	8001be0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007be:	6593      	str	r3, [r2, #88]	; 0x58
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_I2C_MspInit+0x80>)
 80007c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000400 	.word	0x48000400

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fafc 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f81a 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f7ff fef6 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f0:	f000 fa5a 	bl	8000ca8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80007f4:	f7ff fe70 	bl	80004d8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80007f8:	f7ff ff6e 	bl	80006d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007fc:	f000 f9e0 	bl	8000bc0 <MX_TIM1_Init>
  MX_RTC_Init();
 8000800:	f000 f8fe 	bl	8000a00 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  serialClear();/*
 8000804:	f000 f8a2 	bl	800094c <serialClear>
  lcd_send_string("***Init!***");
  serialMsg("***Init!***\n\r");
  HAL_Delay(1000);
  lcd_clear();
*/
  CAN_filterConfig();
 8000808:	f000 f8d0 	bl	80009ac <CAN_filterConfig>
  HAL_CAN_Start(&hcan1);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <main+0x3c>)
 800080e:	f000 fd24 	bl	800125a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000812:	2102      	movs	r1, #2
 8000814:	4801      	ldr	r0, [pc, #4]	; (800081c <main+0x3c>)
 8000816:	f000 fe77 	bl	8001508 <HAL_CAN_ActivateNotification>
  //CAN_Tx(CanMsg);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081a:	e7fe      	b.n	800081a <main+0x3a>
 800081c:	2000002c 	.word	0x2000002c

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0b8      	sub	sp, #224	; 0xe0
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800082a:	2244      	movs	r2, #68	; 0x44
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f96a 	bl	8004b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2288      	movs	r2, #136	; 0x88
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 f95c 	bl	8004b08 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000850:	230a      	movs	r3, #10
 8000852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085e:	2310      	movs	r3, #16
 8000860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800087c:	230a      	movs	r3, #10
 800087e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000882:	2307      	movs	r3, #7
 8000884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088e:	2302      	movs	r3, #2
 8000890:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fd0f 	bl	80022bc <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008a4:	f000 f8a2 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008ca:	2104      	movs	r1, #4
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 f8db 	bl	8002a88 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008d8:	f000 f888 	bl	80009ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <SystemClock_Config+0xfc>)
 80008de:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 facc 	bl	8002e90 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008fe:	f000 f875 	bl	80009ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000902:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000906:	f001 fc83 	bl	8002210 <HAL_PWREx_ControlVoltageScaling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000910:	f000 f86c 	bl	80009ec <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	37e0      	adds	r7, #224	; 0xe0
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	00020042 	.word	0x00020042

08000920 <serialMsg>:

/* USER CODE BEGIN 4 */
void serialMsg(char msg[]){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fc4d 	bl	80001c8 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <serialMsg+0x28>)
 800093a:	f003 fb59 	bl	8003ff0 <HAL_UART_Transmit>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000170 	.word	0x20000170

0800094c <serialClear>:

void serialClear(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	serialMsg("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <serialClear+0x10>)
 8000952:	f7ff ffe5 	bl	8000920 <serialMsg>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	08004b30 	.word	0x08004b30

08000960 <CAN_Rx>:
		//serialMsg("Message transmitted!\n\r");
	}
	else return;
}

void CAN_Rx(void){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <CAN_Rx+0x40>)
 8000968:	2208      	movs	r2, #8
 800096a:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <CAN_Rx+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <CAN_Rx+0x40>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <CAN_Rx+0x44>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <CAN_Rx+0x40>)
 8000980:	601a      	str	r2, [r3, #0]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8000982:	463b      	mov	r3, r7
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <CAN_Rx+0x40>)
 8000986:	2100      	movs	r1, #0
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <CAN_Rx+0x48>)
 800098a:	f000 fcaa 	bl	80012e2 <HAL_CAN_GetRxMessage>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <CAN_Rx+0x38>
		Error_Handler();
 8000994:	f000 f82a 	bl	80009ec <Error_Handler>
	//delay(1);
	//serialMsg("Received message: ");
	//serialMsg((char*)crx);
	//serialMsg("\n\r");

}
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000bc 	.word	0x200000bc
 80009a4:	20000000 	.word	0x20000000
 80009a8:	2000002c 	.word	0x2000002c

080009ac <CAN_filterConfig>:


void CAN_filterConfig(void){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
	filterConfig.FilterActivation = ENABLE;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0x0000;
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <CAN_filterConfig+0x3c>)
 80009dc:	f000 fb73 	bl	80010c6 <HAL_CAN_ConfigFilter>
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000002c 	.word	0x2000002c

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	serialMsg("Error happened!");
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <Error_Handler+0x10>)
 80009f2:	f7ff ff95 	bl	8000920 <serialMsg>
  /* USER CODE END Error_Handler_Debug */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08004b4c 	.word	0x08004b4c

08000a00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <MX_RTC_Init+0x4c>)
 8000a08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a12:	227f      	movs	r2, #127	; 0x7f
 8000a14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a18:	22ff      	movs	r2, #255	; 0xff
 8000a1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_RTC_Init+0x48>)
 8000a36:	f002 fedb 	bl	80037f0 <HAL_RTC_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a40:	f7ff ffd4 	bl	80009ec <Error_Handler>
  }

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000010c 	.word	0x2000010c
 8000a4c:	40002800 	.word	0x40002800

08000a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_RTC_MspInit+0x30>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d107      	bne.n	8000a72 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_RTC_MspInit+0x34>)
 8000a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_RTC_MspInit+0x34>)
 8000a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40002800 	.word	0x40002800
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f001 f84c 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f9b6 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f001 fa15 	bl	8001f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <CAN1_RX0_IRQHandler+0x14>)
 8000b42:	f000 fd07 	bl	8001554 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 8000b46:	f7ff ff0b 	bl	8000960 <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000002c 	.word	0x2000002c

08000b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <SystemInit+0x64>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <SystemInit+0x64>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <SystemInit+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <SystemInit+0x68>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SystemInit+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SystemInit+0x68>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <SystemInit+0x68>)
 8000b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SystemInit+0x68>)
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SystemInit+0x68>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <SystemInit+0x68>)
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <SystemInit+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SystemInit+0x64>)
 8000ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000baa:	609a      	str	r2, [r3, #8]
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000be0:	4a20      	ldr	r2, [pc, #128]	; (8000c64 <MX_TIM1_Init+0xa4>)
 8000be2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000be6:	224f      	movs	r2, #79	; 0x4f
 8000be8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000bf2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bf6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000c0c:	f002 ff02 	bl	8003a14 <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c16:	f7ff fee9 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000c28:	f002 ff1f 	bl	8003a6a <HAL_TIM_ConfigClockSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c32:	f7ff fedb 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_TIM1_Init+0xa0>)
 8000c48:	f003 f8fc 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c52:	f7ff fecb 	bl	80009ec <Error_Handler>
  }

}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000130 	.word	0x20000130
 8000c64:	40012c00 	.word	0x40012c00

08000c68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <HAL_TIM_Base_MspInit+0x38>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10b      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c84:	6613      	str	r3, [r2, #96]	; 0x60
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <MX_USART2_UART_Init+0x5c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART2_UART_Init+0x58>)
 8000cec:	f003 f932 	bl	8003f54 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f7ff fe79 	bl	80009ec <Error_Handler>
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000170 	.word	0x20000170
 8000d04:	40004400 	.word	0x40004400

08000d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x7c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d128      	bne.n	8000d7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f000 ff32 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40021000 	.word	0x40021000

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000da0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000da2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
	ldr	r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000daa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <LoopForever+0x16>)
	cmp	r2, r3
 8000db2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db6:	f7ff fecd 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f003 fe81 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fd0f 	bl	80007e0 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000dc8:	08004bb4 	.word	0x08004bb4
	ldr	r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dd0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000dd4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000dd8:	200001f4 	.word	0x200001f4

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_Init+0x3c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_Init+0x3c>)
 8000df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f000 feb0 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f80f 	bl	8000e20 <HAL_InitTick>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	e001      	b.n	8000e12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0e:	f7ff fe3b 	bl	8000a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e12:	79fb      	ldrb	r3, [r7, #7]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_InitTick+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d022      	beq.n	8000e7a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_InitTick+0x6c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_InitTick+0x68>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 febc 	bl	8001bc6 <HAL_SYSTICK_Config>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10f      	bne.n	8000e74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b0f      	cmp	r3, #15
 8000e58:	d809      	bhi.n	8000e6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e62:	f000 fe86 	bl	8001b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_InitTick+0x70>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e007      	b.n	8000e7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	e004      	b.n	8000e7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e001      	b.n	8000e7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000004 	.word	0x20000004
 8000e90:	20000008 	.word	0x20000008

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x1c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_IncTick+0x1c>)
 8000ea4:	6013      	str	r3, [r2, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200001f0 	.word	0x200001f0
 8000eb4:	2000000c 	.word	0x2000000c

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001f0 	.word	0x200001f0

08000ed0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0ed      	b.n	80010be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fb28 	bl	8000544 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0202 	bic.w	r2, r2, #2
 8000f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f04:	f7ff ffd8 	bl	8000eb8 <HAL_GetTick>
 8000f08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f0a:	e012      	b.n	8000f32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f0c:	f7ff ffd4 	bl	8000eb8 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b0a      	cmp	r3, #10
 8000f18:	d90b      	bls.n	8000f32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2205      	movs	r2, #5
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e0c5      	b.n	80010be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e5      	bne.n	8000f0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f50:	f7ff ffb2 	bl	8000eb8 <HAL_GetTick>
 8000f54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f56:	e012      	b.n	8000f7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f58:	f7ff ffae 	bl	8000eb8 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d90b      	bls.n	8000f7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2205      	movs	r2, #5
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e09f      	b.n	80010be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0e5      	beq.n	8000f58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e1b      	ldrb	r3, [r3, #24]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d108      	bne.n	8000fa6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e007      	b.n	8000fb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e5b      	ldrb	r3, [r3, #25]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d108      	bne.n	8000fd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e9b      	ldrb	r3, [r3, #26]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d108      	bne.n	8000ffa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0220 	orr.w	r2, r2, #32
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e007      	b.n	800100a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0220 	bic.w	r2, r2, #32
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7edb      	ldrb	r3, [r3, #27]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0210 	bic.w	r2, r2, #16
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e007      	b.n	8001034 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0210 	orr.w	r2, r2, #16
 8001032:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7f1b      	ldrb	r3, [r3, #28]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d108      	bne.n	800104e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0208 	orr.w	r2, r2, #8
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e007      	b.n	800105e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0208 	bic.w	r2, r2, #8
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7f5b      	ldrb	r3, [r3, #29]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0204 	orr.w	r2, r2, #4
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e007      	b.n	8001088 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	ea42 0103 	orr.w	r1, r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b087      	sub	sp, #28
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010dc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010de:	7cfb      	ldrb	r3, [r7, #19]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d003      	beq.n	80010ec <HAL_CAN_ConfigFilter+0x26>
 80010e4:	7cfb      	ldrb	r3, [r7, #19]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	f040 80aa 	bne.w	8001240 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010f2:	f043 0201 	orr.w	r2, r3, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	2201      	movs	r2, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43db      	mvns	r3, r3
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d123      	bne.n	800116e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001148:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3248      	adds	r2, #72	; 0x48
 800114e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001162:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001164:	6979      	ldr	r1, [r7, #20]
 8001166:	3348      	adds	r3, #72	; 0x48
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d122      	bne.n	80011bc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	431a      	orrs	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001196:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3248      	adds	r2, #72	; 0x48
 800119c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b2:	6979      	ldr	r1, [r7, #20]
 80011b4:	3348      	adds	r3, #72	; 0x48
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d109      	bne.n	80011d8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d109      	bne.n	8001204 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001202:	e007      	b.n	8001214 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	431a      	orrs	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001232:	f023 0201 	bic.w	r2, r3, #1
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e006      	b.n	800124e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d12e      	bne.n	80012cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2202      	movs	r2, #2
 8001272:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0201 	bic.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001286:	f7ff fe17 	bl	8000eb8 <HAL_GetTick>
 800128a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800128c:	e012      	b.n	80012b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128e:	f7ff fe13 	bl	8000eb8 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b0a      	cmp	r3, #10
 800129a:	d90b      	bls.n	80012b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2205      	movs	r2, #5
 80012ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e012      	b.n	80012da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e5      	bne.n	800128e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e006      	b.n	80012da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
  }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012e2:	b480      	push	{r7}
 80012e4:	b087      	sub	sp, #28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d003      	beq.n	8001306 <HAL_CAN_GetRxMessage+0x24>
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b02      	cmp	r3, #2
 8001302:	f040 80f4 	bne.w	80014ee <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10e      	bne.n	800132a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0e8      	b.n	80014fc <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d107      	bne.n	8001348 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0d9      	b.n	80014fc <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	331b      	adds	r3, #27
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0204 	and.w	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	331b      	adds	r3, #27
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0d5b      	lsrs	r3, r3, #21
 8001376:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00b      	b.n	8001398 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	331b      	adds	r3, #27
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	331b      	adds	r3, #27
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	f003 0201 	and.w	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	331b      	adds	r3, #27
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 020f 	and.w	r2, r3, #15
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	331b      	adds	r3, #27
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	3304      	adds	r3, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	331b      	adds	r3, #27
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	3304      	adds	r3, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	0a1a      	lsrs	r2, r3, #8
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0c1a      	lsrs	r2, r3, #16
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3302      	adds	r3, #2
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0e1a      	lsrs	r2, r3, #24
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3303      	adds	r3, #3
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	3304      	adds	r3, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0a1a      	lsrs	r2, r3, #8
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3305      	adds	r3, #5
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0c1a      	lsrs	r2, r3, #16
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	3306      	adds	r3, #6
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0e1a      	lsrs	r2, r3, #24
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	3307      	adds	r3, #7
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d108      	bne.n	80014da <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0220 	orr.w	r2, r2, #32
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	e007      	b.n	80014ea <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0220 	orr.w	r2, r2, #32
 80014e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e006      	b.n	80014fc <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
  }
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001518:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d002      	beq.n	8001526 <HAL_CAN_ActivateNotification+0x1e>
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d109      	bne.n	800153a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6959      	ldr	r1, [r3, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e006      	b.n	8001548 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
  }
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d07c      	beq.n	8001694 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d023      	beq.n	80015ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f97d 	bl	80018b6 <HAL_CAN_TxMailbox0CompleteCallback>
 80015bc:	e016      	b.n	80015ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
 80015d0:	e00c      	b.n	80015ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	e002      	b.n	80015ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f983 	bl	80018f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d024      	beq.n	8001640 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f95d 	bl	80018ca <HAL_CAN_TxMailbox1CompleteCallback>
 8001610:	e016      	b.n	8001640 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
 8001624:	e00c      	b.n	8001640 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	e002      	b.n	8001640 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f963 	bl	8001906 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d024      	beq.n	8001694 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001652:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f93d 	bl	80018de <HAL_CAN_TxMailbox2CompleteCallback>
 8001664:	e016      	b.n	8001694 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	e00c      	b.n	8001694 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
 800168c:	e002      	b.n	8001694 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f943 	bl	800191a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00c      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2208      	movs	r2, #8
 80016d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f934 	bl	8001942 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f91b 	bl	800192e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2210      	movs	r2, #16
 800171a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2208      	movs	r2, #8
 8001736:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f916 	bl	800196a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8fd 	bl	8001956 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f900 	bl	800197e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2208      	movs	r2, #8
 8001798:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f8f9 	bl	8001992 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d075      	beq.n	8001896 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d06c      	beq.n	800188e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03d      	beq.n	800188e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001818:	2b00      	cmp	r3, #0
 800181a:	d038      	beq.n	800188e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001822:	2b30      	cmp	r3, #48	; 0x30
 8001824:	d017      	beq.n	8001856 <HAL_CAN_IRQHandler+0x302>
 8001826:	2b30      	cmp	r3, #48	; 0x30
 8001828:	d804      	bhi.n	8001834 <HAL_CAN_IRQHandler+0x2e0>
 800182a:	2b10      	cmp	r3, #16
 800182c:	d009      	beq.n	8001842 <HAL_CAN_IRQHandler+0x2ee>
 800182e:	2b20      	cmp	r3, #32
 8001830:	d00c      	beq.n	800184c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001832:	e024      	b.n	800187e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001834:	2b50      	cmp	r3, #80	; 0x50
 8001836:	d018      	beq.n	800186a <HAL_CAN_IRQHandler+0x316>
 8001838:	2b60      	cmp	r3, #96	; 0x60
 800183a:	d01b      	beq.n	8001874 <HAL_CAN_IRQHandler+0x320>
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d00f      	beq.n	8001860 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001840:	e01d      	b.n	800187e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800184a:	e018      	b.n	800187e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001854:	e013      	b.n	800187e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	f043 0320 	orr.w	r3, r3, #32
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800185e:	e00e      	b.n	800187e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001868:	e009      	b.n	800187e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001872:	e004      	b.n	800187e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800187c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800188c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2204      	movs	r2, #4
 8001894:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f87c 	bl	80019a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff29 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff3e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff31 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	e17f      	b.n	8001ef0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8171 	beq.w	8001eea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d00b      	beq.n	8001c28 <HAL_GPIO_Init+0x48>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d007      	beq.n	8001c28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c1c:	2b11      	cmp	r3, #17
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b12      	cmp	r3, #18
 8001c26:	d130      	bne.n	8001c8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 0201 	and.w	r2, r3, #1
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d118      	bne.n	8001cc8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x128>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	6939      	ldr	r1, [r7, #16]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80ac 	beq.w	8001eea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b5e      	ldr	r3, [pc, #376]	; (8001f0c <HAL_GPIO_Init+0x32c>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	4a5d      	ldr	r2, [pc, #372]	; (8001f0c <HAL_GPIO_Init+0x32c>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <HAL_GPIO_Init+0x32c>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001daa:	4a59      	ldr	r2, [pc, #356]	; (8001f10 <HAL_GPIO_Init+0x330>)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dd4:	d025      	beq.n	8001e22 <HAL_GPIO_Init+0x242>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4e      	ldr	r2, [pc, #312]	; (8001f14 <HAL_GPIO_Init+0x334>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01f      	beq.n	8001e1e <HAL_GPIO_Init+0x23e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4d      	ldr	r2, [pc, #308]	; (8001f18 <HAL_GPIO_Init+0x338>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x23a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <HAL_GPIO_Init+0x33c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x236>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4b      	ldr	r2, [pc, #300]	; (8001f20 <HAL_GPIO_Init+0x340>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x232>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_GPIO_Init+0x344>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x22e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a49      	ldr	r2, [pc, #292]	; (8001f28 <HAL_GPIO_Init+0x348>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x22a>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00c      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00a      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e0e:	2305      	movs	r3, #5
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x244>
 8001e22:	2300      	movs	r3, #0
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e34:	4936      	ldr	r1, [pc, #216]	; (8001f10 <HAL_GPIO_Init+0x330>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_GPIO_Init+0x34c>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f47f ae78 	bne.w	8001bf0 <HAL_GPIO_Init+0x10>
  }
}
 8001f00:	bf00      	nop
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	48000400 	.word	0x48000400
 8001f18:	48000800 	.word	0x48000800
 8001f1c:	48000c00 	.word	0x48000c00
 8001f20:	48001000 	.word	0x48001000
 8001f24:	48001400 	.word	0x48001400
 8001f28:	48001800 	.word	0x48001800
 8001f2c:	40010400 	.word	0x40010400

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f806 	bl	8001f90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e081      	b.n	80020bc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7fe fbc3 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2224      	movs	r2, #36	; 0x24
 8001fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002006:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	e006      	b.n	800202e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800202c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d104      	bne.n	8002040 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800203e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800204e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002052:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002062:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	ea42 0103 	orr.w	r1, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69d9      	ldr	r1, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d138      	bne.n	800214c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e032      	b.n	800214e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002116:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	d139      	bne.n	80021e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800217a:	2302      	movs	r3, #2
 800217c:	e033      	b.n	80021e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2224      	movs	r2, #36	; 0x24
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_PWREx_GetVoltageRange+0x18>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40007000 	.word	0x40007000

08002210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800221e:	d130      	bne.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222c:	d038      	beq.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2232      	movs	r2, #50	; 0x32
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	3301      	adds	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002254:	e002      	b.n	800225c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3b01      	subs	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002268:	d102      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x60>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f2      	bne.n	8002256 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227c:	d110      	bne.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e00f      	b.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d007      	beq.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40007000 	.word	0x40007000
 80022b4:	20000004 	.word	0x20000004
 80022b8:	431bde83 	.word	0x431bde83

080022bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e3d4      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ce:	4ba1      	ldr	r3, [pc, #644]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d8:	4b9e      	ldr	r3, [pc, #632]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80e4 	beq.w	80024b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_RCC_OscConfig+0x4a>
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	f040 808b 	bne.w	8002414 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b01      	cmp	r3, #1
 8002302:	f040 8087 	bne.w	8002414 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002306:	4b93      	ldr	r3, [pc, #588]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_RCC_OscConfig+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e3ac      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1a      	ldr	r2, [r3, #32]
 8002322:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_RCC_OscConfig+0x7c>
 800232e:	4b89      	ldr	r3, [pc, #548]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002336:	e005      	b.n	8002344 <HAL_RCC_OscConfig+0x88>
 8002338:	4b86      	ldr	r3, [pc, #536]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002344:	4293      	cmp	r3, r2
 8002346:	d223      	bcs.n	8002390 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd3f 	bl	8002dd0 <RCC_SetFlashLatencyFromMSIRange>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e38d      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235c:	4b7d      	ldr	r3, [pc, #500]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7c      	ldr	r2, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b7a      	ldr	r3, [pc, #488]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4977      	ldr	r1, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	4972      	ldr	r1, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
 800238e:	e025      	b.n	80023dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002390:	4b70      	ldr	r3, [pc, #448]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6f      	ldr	r2, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	496a      	ldr	r1, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ae:	4b69      	ldr	r3, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	4965      	ldr	r1, [pc, #404]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fcff 	bl	8002dd0 <RCC_SetFlashLatencyFromMSIRange>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e34d      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023dc:	f000 fc36 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 80023e0:	4601      	mov	r1, r0
 80023e2:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	4a5a      	ldr	r2, [pc, #360]	; (8002558 <HAL_RCC_OscConfig+0x29c>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_RCC_OscConfig+0x2a0>)
 80023fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023fc:	4b58      	ldr	r3, [pc, #352]	; (8002560 <HAL_RCC_OscConfig+0x2a4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fd0d 	bl	8000e20 <HAL_InitTick>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d052      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	e331      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d032      	beq.n	8002482 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4c      	ldr	r2, [pc, #304]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002428:	f7fe fd46 	bl	8000eb8 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002430:	f7fe fd42 	bl	8000eb8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e31a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a40      	ldr	r2, [pc, #256]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	493b      	ldr	r1, [pc, #236]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	4936      	ldr	r1, [pc, #216]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
 8002480:	e01a      	b.n	80024b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002482:	4b34      	ldr	r3, [pc, #208]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a33      	ldr	r2, [pc, #204]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800248e:	f7fe fd13 	bl	8000eb8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002496:	f7fe fd0f 	bl	8000eb8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e2e7      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x1da>
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d074      	beq.n	80025ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d005      	beq.n	80024d6 <HAL_RCC_OscConfig+0x21a>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d10e      	bne.n	80024ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d10b      	bne.n	80024ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d064      	beq.n	80025ac <HAL_RCC_OscConfig+0x2f0>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d160      	bne.n	80025ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e2c4      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x24a>
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e01d      	b.n	8002542 <HAL_RCC_OscConfig+0x286>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x26e>
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x286>
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a06      	ldr	r2, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x298>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01c      	beq.n	8002584 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fcb5 	bl	8000eb8 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002550:	e011      	b.n	8002576 <HAL_RCC_OscConfig+0x2ba>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	08004b5c 	.word	0x08004b5c
 800255c:	20000004 	.word	0x20000004
 8002560:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fca8 	bl	8000eb8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e280      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002576:	4baf      	ldr	r3, [pc, #700]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x2a8>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fc98 	bl	8000eb8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fc94 	bl	8000eb8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e26c      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259e:	4ba5      	ldr	r3, [pc, #660]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x2d0>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d060      	beq.n	800267c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x310>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d119      	bne.n	80025fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d116      	bne.n	80025fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025cc:	4b99      	ldr	r3, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_OscConfig+0x328>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e249      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b93      	ldr	r3, [pc, #588]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	4990      	ldr	r1, [pc, #576]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f8:	e040      	b.n	800267c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d023      	beq.n	800264a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002602:	4b8c      	ldr	r3, [pc, #560]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a8b      	ldr	r2, [pc, #556]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fc53 	bl	8000eb8 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fc4f 	bl	8000eb8 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e227      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002628:	4b82      	ldr	r3, [pc, #520]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	497c      	ldr	r1, [pc, #496]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
 8002648:	e018      	b.n	800267c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a79      	ldr	r2, [pc, #484]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fc2f 	bl	8000eb8 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe fc2b 	bl	8000eb8 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e203      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002670:	4b70      	ldr	r3, [pc, #448]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d03c      	beq.n	8002702 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01c      	beq.n	80026ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002690:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002696:	4a67      	ldr	r2, [pc, #412]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe fc0a 	bl	8000eb8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe fc06 	bl	8000eb8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1de      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ba:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80026bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ef      	beq.n	80026a8 <HAL_RCC_OscConfig+0x3ec>
 80026c8:	e01b      	b.n	8002702 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ca:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fe fbed 	bl	8000eb8 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe fbe9 	bl	8000eb8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1c1      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f4:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80026f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ef      	bne.n	80026e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80a6 	beq.w	800285c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002710:	2300      	movs	r3, #0
 8002712:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002714:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	4b44      	ldr	r3, [pc, #272]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	4a43      	ldr	r2, [pc, #268]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272a:	6593      	str	r3, [r2, #88]	; 0x58
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002738:	2301      	movs	r3, #1
 800273a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273c:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <HAL_RCC_OscConfig+0x57c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d118      	bne.n	800277a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x57c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_RCC_OscConfig+0x57c>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002754:	f7fe fbb0 	bl	8000eb8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe fbac 	bl	8000eb8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e184      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276e:	4b32      	ldr	r3, [pc, #200]	; (8002838 <HAL_RCC_OscConfig+0x57c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d108      	bne.n	8002794 <HAL_RCC_OscConfig+0x4d8>
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	4a2a      	ldr	r2, [pc, #168]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002792:	e024      	b.n	80027de <HAL_RCC_OscConfig+0x522>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d110      	bne.n	80027be <HAL_RCC_OscConfig+0x502>
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	4a24      	ldr	r2, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027bc:	e00f      	b.n	80027de <HAL_RCC_OscConfig+0x522>
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f023 0304 	bic.w	r3, r3, #4
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe fb67 	bl	8000eb8 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fb63 	bl	8000eb8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e139      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_OscConfig+0x578>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ed      	beq.n	80027ee <HAL_RCC_OscConfig+0x532>
 8002812:	e01a      	b.n	800284a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe fb50 	bl	8000eb8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281a:	e00f      	b.n	800283c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fb4c 	bl	8000eb8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d906      	bls.n	800283c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e122      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800283c:	4b90      	ldr	r3, [pc, #576]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e8      	bne.n	800281c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284a:	7ffb      	ldrb	r3, [r7, #31]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b8b      	ldr	r3, [pc, #556]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	4a8a      	ldr	r2, [pc, #552]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8108 	beq.w	8002a76 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	2b02      	cmp	r3, #2
 800286c:	f040 80d0 	bne.w	8002a10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002870:	4b83      	ldr	r3, [pc, #524]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	429a      	cmp	r2, r3
 8002882:	d130      	bne.n	80028e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	3b01      	subs	r3, #1
 8002890:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d127      	bne.n	80028e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d11f      	bne.n	80028e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b0:	2a07      	cmp	r2, #7
 80028b2:	bf14      	ite	ne
 80028b4:	2201      	movne	r2, #1
 80028b6:	2200      	moveq	r2, #0
 80028b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d113      	bne.n	80028e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d06e      	beq.n	80029c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	d069      	beq.n	80029c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028f8:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b7      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002908:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5c      	ldr	r2, [pc, #368]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 800290e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002914:	f7fe fad0 	bl	8000eb8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe facc 	bl	8000eb8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e0a4      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292e:	4b54      	ldr	r3, [pc, #336]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293a:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCC_OscConfig+0x7c8>)
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800294a:	3a01      	subs	r2, #1
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	4311      	orrs	r1, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002954:	0212      	lsls	r2, r2, #8
 8002956:	4311      	orrs	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800295c:	0852      	lsrs	r2, r2, #1
 800295e:	3a01      	subs	r2, #1
 8002960:	0552      	lsls	r2, r2, #21
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002968:	0852      	lsrs	r2, r2, #1
 800296a:	3a01      	subs	r2, #1
 800296c:	0652      	lsls	r2, r2, #25
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002974:	0912      	lsrs	r2, r2, #4
 8002976:	0452      	lsls	r2, r2, #17
 8002978:	430a      	orrs	r2, r1
 800297a:	4941      	ldr	r1, [pc, #260]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3e      	ldr	r2, [pc, #248]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800298c:	4b3c      	ldr	r3, [pc, #240]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002996:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002998:	f7fe fa8e 	bl	8000eb8 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fa8a 	bl	8000eb8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e062      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029be:	e05a      	b.n	8002a76 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e059      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c4:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d152      	bne.n	8002a76 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029dc:	4b28      	ldr	r3, [pc, #160]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029e8:	f7fe fa66 	bl	8000eb8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fa62 	bl	8000eb8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e03a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x734>
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d02d      	beq.n	8002a72 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a34:	f023 0303 	bic.w	r3, r3, #3
 8002a38:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fa35 	bl	8000eb8 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fa31 	bl	8000eb8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e009      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_OscConfig+0x7c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x796>
 8002a70:	e001      	b.n	8002a76 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	f99d808c 	.word	0xf99d808c

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0c8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b66      	ldr	r3, [pc, #408]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d910      	bls.n	8002acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4961      	ldr	r1, [pc, #388]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b0      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d04c      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae0:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d121      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e09e      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d115      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e092      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b10:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e086      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b20:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e07e      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b30:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 0203 	bic.w	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	493f      	ldr	r1, [pc, #252]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b42:	f7fe f9b9 	bl	8000eb8 <HAL_GetTick>
 8002b46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4a:	f7fe f9b5 	bl	8000eb8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e066      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b60:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 020c 	and.w	r2, r3, #12
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d1eb      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	492c      	ldr	r1, [pc, #176]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d210      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 0207 	bic.w	r2, r3, #7
 8002ba6:	4924      	ldr	r1, [pc, #144]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e036      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4918      	ldr	r1, [pc, #96]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4910      	ldr	r1, [pc, #64]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bfe:	f000 f825 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c02:	4601      	mov	r1, r0
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_ClockConfig+0x1b4>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f8fc 	bl	8000e20 <HAL_InitTick>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c2c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08004b5c 	.word	0x08004b5c
 8002c44:	20000004 	.word	0x20000004
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d121      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d11e      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c80:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c8c:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c9c:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca8:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	e004      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d133      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d002      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xa4>
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xaa>
 8002cee:	e005      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cf2:	617b      	str	r3, [r7, #20]
      break;
 8002cf4:	e005      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	617b      	str	r3, [r7, #20]
      break;
 8002d00:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	fb02 f203 	mul.w	r2, r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0e5b      	lsrs	r3, r3, #25
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d42:	69bb      	ldr	r3, [r7, #24]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3724      	adds	r7, #36	; 0x24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08004b74 	.word	0x08004b74
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000004 	.word	0x20000004

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d7c:	f7ff fff0 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d80:	4601      	mov	r1, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08004b6c 	.word	0x08004b6c

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002da8:	f7ff ffda 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002dac:	4601      	mov	r1, r0
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0adb      	lsrs	r3, r3, #11
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dba:	5cd3      	ldrb	r3, [r2, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	08004b6c 	.word	0x08004b6c

08002dd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002de8:	f7ff fa04 	bl	80021f4 <HAL_PWREx_GetVoltageRange>
 8002dec:	6178      	str	r0, [r7, #20]
 8002dee:	e014      	b.n	8002e1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e08:	f7ff f9f4 	bl	80021f4 <HAL_PWREx_GetVoltageRange>
 8002e0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e20:	d10b      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d919      	bls.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e2c:	d902      	bls.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2e:	2302      	movs	r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e013      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e34:	2301      	movs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e010      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d902      	bls.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e40:	2303      	movs	r3, #3
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e00a      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d102      	bne.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e004      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b70      	cmp	r3, #112	; 0x70
 8002e56:	d101      	bne.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e58:	2301      	movs	r3, #1
 8002e5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 0207 	bic.w	r2, r3, #7
 8002e64:	4909      	ldr	r1, [pc, #36]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d001      	beq.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40022000 	.word	0x40022000

08002e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d03f      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb4:	d01c      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eba:	d802      	bhi.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ec0:	e01f      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec6:	d003      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ec8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ecc:	d01c      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ece:	e018      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ed0:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a84      	ldr	r2, [pc, #528]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002edc:	e015      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fab9 	bl	800345c <RCCEx_PLLSAI1_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eee:	e00c      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3320      	adds	r3, #32
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fba0 	bl	800363c <RCCEx_PLLSAI2_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f00:	e003      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	74fb      	strb	r3, [r7, #19]
      break;
 8002f06:	e000      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f10:	4b75      	ldr	r3, [pc, #468]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f1e:	4972      	ldr	r1, [pc, #456]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f26:	e001      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03f      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f40:	d01c      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f46:	d802      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f4c:	e01f      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f52:	d003      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f58:	d01c      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f5a:	e018      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f5c:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a61      	ldr	r2, [pc, #388]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f68:	e015      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fa73 	bl	800345c <RCCEx_PLLSAI1_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f7a:	e00c      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3320      	adds	r3, #32
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fb5a 	bl	800363c <RCCEx_PLLSAI2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8c:	e003      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	74fb      	strb	r3, [r7, #19]
      break;
 8002f92:	e000      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f9c:	4b52      	ldr	r3, [pc, #328]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002faa:	494f      	ldr	r1, [pc, #316]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a0 	beq.w	8003106 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	4a40      	ldr	r2, [pc, #256]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6593      	str	r3, [r2, #88]	; 0x58
 8002fec:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003008:	f7fd ff56 	bl	8000eb8 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800300e:	e009      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fd ff52 	bl	8000eb8 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d902      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	74fb      	strb	r3, [r7, #19]
        break;
 8003022:	e005      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ef      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d15c      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003040:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01f      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	429a      	cmp	r2, r3
 8003052:	d019      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fd ff11 	bl	8000eb8 <HAL_GetTick>
 8003096:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003098:	e00b      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fd ff0d 	bl	8000eb8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d902      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	74fb      	strb	r3, [r7, #19]
            break;
 80030b0:	e006      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ec      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030de:	e009      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f4:	7c7b      	ldrb	r3, [r7, #17]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b9e      	ldr	r3, [pc, #632]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	4a9d      	ldr	r2, [pc, #628]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003112:	4b98      	ldr	r3, [pc, #608]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f023 0203 	bic.w	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	4994      	ldr	r1, [pc, #592]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003134:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	f023 020c 	bic.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	498c      	ldr	r1, [pc, #560]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003156:	4b87      	ldr	r3, [pc, #540]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	4983      	ldr	r1, [pc, #524]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003178:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	497b      	ldr	r1, [pc, #492]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	4972      	ldr	r1, [pc, #456]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031bc:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	496a      	ldr	r1, [pc, #424]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	4961      	ldr	r1, [pc, #388]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003200:	4b5c      	ldr	r3, [pc, #368]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320e:	4959      	ldr	r1, [pc, #356]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	4950      	ldr	r1, [pc, #320]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	4948      	ldr	r1, [pc, #288]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	493f      	ldr	r1, [pc, #252]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d028      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003296:	4937      	ldr	r1, [pc, #220]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a31      	ldr	r2, [pc, #196]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b2:	60d3      	str	r3, [r2, #12]
 80032b4:	e011      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032be:	d10c      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f8c8 	bl	800345c <RCCEx_PLLSAI1_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d028      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	491f      	ldr	r1, [pc, #124]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003304:	d106      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800330c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003310:	60d3      	str	r3, [r2, #12]
 8003312:	e011      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800331c:	d10c      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	2101      	movs	r1, #1
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f899 	bl	800345c <RCCEx_PLLSAI1_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02b      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	4908      	ldr	r1, [pc, #32]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003362:	d109      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a02      	ldr	r2, [pc, #8]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336e:	60d3      	str	r3, [r2, #12]
 8003370:	e014      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f867 	bl	800345c <RCCEx_PLLSAI1_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d02f      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b6:	4928      	ldr	r1, [pc, #160]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f844 	bl	800345c <RCCEx_PLLSAI1_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d014      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	74bb      	strb	r3, [r7, #18]
 80033e2:	e011      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3320      	adds	r3, #32
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f921 	bl	800363c <RCCEx_PLLSAI2_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003422:	490d      	ldr	r1, [pc, #52]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003446:	4904      	ldr	r1, [pc, #16]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800344e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000

0800345c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800346a:	4b73      	ldr	r3, [pc, #460]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003476:	4b70      	ldr	r3, [pc, #448]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0203 	and.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d10d      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
       ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800348e:	4b6a      	ldr	r3, [pc, #424]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
       ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d044      	beq.n	800352c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e041      	b.n	800352c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d00c      	beq.n	80034ca <RCCEx_PLLSAI1_Config+0x6e>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d013      	beq.n	80034dc <RCCEx_PLLSAI1_Config+0x80>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d120      	bne.n	80034fa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034b8:	4b5f      	ldr	r3, [pc, #380]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11d      	bne.n	8003500 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c8:	e01a      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034ca:	4b5b      	ldr	r3, [pc, #364]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034da:	e013      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034dc:	4b56      	ldr	r3, [pc, #344]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10f      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034f8:	e006      	b.n	8003508 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      break;
 80034fe:	e004      	b.n	800350a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003500:	bf00      	nop
 8003502:	e002      	b.n	800350a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003504:	bf00      	nop
 8003506:	e000      	b.n	800350a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003508:	bf00      	nop
    }

    if(status == HAL_OK)
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003510:	4b49      	ldr	r3, [pc, #292]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	3b01      	subs	r3, #1
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	430b      	orrs	r3, r1
 8003526:	4944      	ldr	r1, [pc, #272]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d17d      	bne.n	800362e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a40      	ldr	r2, [pc, #256]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003538:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800353c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353e:	f7fd fcbb 	bl	8000eb8 <HAL_GetTick>
 8003542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003544:	e009      	b.n	800355a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003546:	f7fd fcb7 	bl	8000eb8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d902      	bls.n	800355a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	73fb      	strb	r3, [r7, #15]
        break;
 8003558:	e005      	b.n	8003566 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1ef      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d160      	bne.n	800362e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d111      	bne.n	8003596 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6892      	ldr	r2, [r2, #8]
 8003582:	0211      	lsls	r1, r2, #8
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68d2      	ldr	r2, [r2, #12]
 8003588:	0912      	lsrs	r2, r2, #4
 800358a:	0452      	lsls	r2, r2, #17
 800358c:	430a      	orrs	r2, r1
 800358e:	492a      	ldr	r1, [pc, #168]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003590:	4313      	orrs	r3, r2
 8003592:	610b      	str	r3, [r1, #16]
 8003594:	e027      	b.n	80035e6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d112      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6892      	ldr	r2, [r2, #8]
 80035ac:	0211      	lsls	r1, r2, #8
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6912      	ldr	r2, [r2, #16]
 80035b2:	0852      	lsrs	r2, r2, #1
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0552      	lsls	r2, r2, #21
 80035b8:	430a      	orrs	r2, r1
 80035ba:	491f      	ldr	r1, [pc, #124]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	610b      	str	r3, [r1, #16]
 80035c0:	e011      	b.n	80035e6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c2:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6892      	ldr	r2, [r2, #8]
 80035d2:	0211      	lsls	r1, r2, #8
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6952      	ldr	r2, [r2, #20]
 80035d8:	0852      	lsrs	r2, r2, #1
 80035da:	3a01      	subs	r2, #1
 80035dc:	0652      	lsls	r2, r2, #25
 80035de:	430a      	orrs	r2, r1
 80035e0:	4915      	ldr	r1, [pc, #84]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fd fc61 	bl	8000eb8 <HAL_GetTick>
 80035f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f8:	e009      	b.n	800360e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035fa:	f7fd fc5d 	bl	8000eb8 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d902      	bls.n	800360e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	73fb      	strb	r3, [r7, #15]
          break;
 800360c:	e005      	b.n	800361a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ef      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	4903      	ldr	r1, [pc, #12]	; (8003638 <RCCEx_PLLSAI1_Config+0x1dc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000

0800363c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800364a:	4b68      	ldr	r3, [pc, #416]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d018      	beq.n	8003688 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0203 	and.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d10d      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
       ||
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800366e:	4b5f      	ldr	r3, [pc, #380]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
       ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d044      	beq.n	800370c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	e041      	b.n	800370c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d00c      	beq.n	80036aa <RCCEx_PLLSAI2_Config+0x6e>
 8003690:	2b03      	cmp	r3, #3
 8003692:	d013      	beq.n	80036bc <RCCEx_PLLSAI2_Config+0x80>
 8003694:	2b01      	cmp	r3, #1
 8003696:	d120      	bne.n	80036da <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003698:	4b54      	ldr	r3, [pc, #336]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11d      	bne.n	80036e0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e01a      	b.n	80036e0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036aa:	4b50      	ldr	r3, [pc, #320]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e013      	b.n	80036e4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036bc:	4b4b      	ldr	r3, [pc, #300]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10f      	bne.n	80036e8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d8:	e006      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      break;
 80036de:	e004      	b.n	80036ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036e0:	bf00      	nop
 80036e2:	e002      	b.n	80036ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036f0:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	3b01      	subs	r3, #1
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	430b      	orrs	r3, r1
 8003706:	4939      	ldr	r1, [pc, #228]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d167      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a35      	ldr	r2, [pc, #212]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371e:	f7fd fbcb 	bl	8000eb8 <HAL_GetTick>
 8003722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003724:	e009      	b.n	800373a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003726:	f7fd fbc7 	bl	8000eb8 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d902      	bls.n	800373a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	73fb      	strb	r3, [r7, #15]
        break;
 8003738:	e005      	b.n	8003746 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ef      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d14a      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d111      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800375a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6892      	ldr	r2, [r2, #8]
 8003762:	0211      	lsls	r1, r2, #8
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68d2      	ldr	r2, [r2, #12]
 8003768:	0912      	lsrs	r2, r2, #4
 800376a:	0452      	lsls	r2, r2, #17
 800376c:	430a      	orrs	r2, r1
 800376e:	491f      	ldr	r1, [pc, #124]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	614b      	str	r3, [r1, #20]
 8003774:	e011      	b.n	800379a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800377e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	0211      	lsls	r1, r2, #8
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6912      	ldr	r2, [r2, #16]
 800378c:	0852      	lsrs	r2, r2, #1
 800378e:	3a01      	subs	r2, #1
 8003790:	0652      	lsls	r2, r2, #25
 8003792:	430a      	orrs	r2, r1
 8003794:	4915      	ldr	r1, [pc, #84]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd fb87 	bl	8000eb8 <HAL_GetTick>
 80037aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ac:	e009      	b.n	80037c2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ae:	f7fd fb83 	bl	8000eb8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	73fb      	strb	r3, [r7, #15]
          break;
 80037c0:	e005      	b.n	80037ce <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ef      	beq.n	80037ae <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4903      	ldr	r1, [pc, #12]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d06c      	beq.n	80038dc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd f91a 	bl	8000a50 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	22ca      	movs	r2, #202	; 0xca
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2253      	movs	r2, #83	; 0x53
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f87c 	bl	8003932 <RTC_EnterInitMode>
 800383a:	4603      	mov	r3, r0
 800383c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d14b      	bne.n	80038dc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003856:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6899      	ldr	r1, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68d2      	ldr	r2, [r2, #12]
 800387e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6919      	ldr	r1, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	041a      	lsls	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f87f 	bl	8003998 <RTC_ExitInitMode>
 800389a:	4603      	mov	r3, r0
 800389c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11b      	bne.n	80038dc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0203 	bic.w	r2, r2, #3
 80038b2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	22ff      	movs	r2, #255	; 0xff
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038fc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80038fe:	f7fd fadb 	bl	8000eb8 <HAL_GetTick>
 8003902:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003904:	e009      	b.n	800391a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003906:	f7fd fad7 	bl	8000eb8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003914:	d901      	bls.n	800391a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e007      	b.n	800392a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ee      	beq.n	8003906 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d120      	bne.n	800398e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003956:	f7fd faaf 	bl	8000eb8 <HAL_GetTick>
 800395a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800395c:	e00d      	b.n	800397a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800395e:	f7fd faab 	bl	8000eb8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800396c:	d905      	bls.n	800397a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <RTC_EnterInitMode+0x5c>
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d1e7      	bne.n	800395e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80039a4:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <RTC_ExitInitMode+0x78>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <RTC_ExitInitMode+0x78>)
 80039aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80039b0:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <RTC_ExitInitMode+0x78>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10c      	bne.n	80039d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff92 	bl	80038e6 <HAL_RTC_WaitForSynchro>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01e      	beq.n	8003a06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	e017      	b.n	8003a06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <RTC_ExitInitMode+0x78>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <RTC_ExitInitMode+0x78>)
 80039dc:	f023 0320 	bic.w	r3, r3, #32
 80039e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ff7f 	bl	80038e6 <HAL_RTC_WaitForSynchro>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <RTC_ExitInitMode+0x78>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <RTC_ExitInitMode+0x78>)
 8003a00:	f043 0320 	orr.w	r3, r3, #32
 8003a04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40002800 	.word	0x40002800

08003a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01d      	b.n	8003a62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd f914 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f000 f8c2 	bl	8003bdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_ConfigClockSource+0x18>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0a8      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x16a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aa4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	d067      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x124>
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d80b      	bhi.n	8003ada <HAL_TIM_ConfigClockSource+0x70>
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d073      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x144>
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d802      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x66>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d06f      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ace:	e078      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d06c      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x144>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d06a      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003ad8:	e073      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003ada:	2b70      	cmp	r3, #112	; 0x70
 8003adc:	d00d      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x90>
 8003ade:	2b70      	cmp	r3, #112	; 0x70
 8003ae0:	d804      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x82>
 8003ae2:	2b50      	cmp	r3, #80	; 0x50
 8003ae4:	d033      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xe4>
 8003ae6:	2b60      	cmp	r3, #96	; 0x60
 8003ae8:	d041      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003aea:	e06a      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d066      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x156>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	d017      	beq.n	8003b28 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003af8:	e063      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f000 f97b 	bl	8003e04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	609a      	str	r2, [r3, #8]
      break;
 8003b26:	e04c      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6899      	ldr	r1, [r3, #8]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f000 f964 	bl	8003e04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4a:	609a      	str	r2, [r3, #8]
      break;
 8003b4c:	e039      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 f8d8 	bl	8003d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2150      	movs	r1, #80	; 0x50
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f931 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e029      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 f8f7 	bl	8003d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2160      	movs	r1, #96	; 0x60
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f921 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e019      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 f8b8 	bl	8003d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2140      	movs	r1, #64	; 0x40
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f911 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003bac:	e009      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f000 f908 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003bc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a40      	ldr	r2, [pc, #256]	; (8003cf0 <TIM_Base_SetConfig+0x114>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfa:	d00f      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a3d      	ldr	r2, [pc, #244]	; (8003cf4 <TIM_Base_SetConfig+0x118>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3c      	ldr	r2, [pc, #240]	; (8003cf8 <TIM_Base_SetConfig+0x11c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <TIM_Base_SetConfig+0x120>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3a      	ldr	r2, [pc, #232]	; (8003d00 <TIM_Base_SetConfig+0x124>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <TIM_Base_SetConfig+0x114>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01f      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d01b      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2c      	ldr	r2, [pc, #176]	; (8003cf4 <TIM_Base_SetConfig+0x118>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d017      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <TIM_Base_SetConfig+0x11c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <TIM_Base_SetConfig+0x120>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a29      	ldr	r2, [pc, #164]	; (8003d00 <TIM_Base_SetConfig+0x124>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a28      	ldr	r2, [pc, #160]	; (8003d04 <TIM_Base_SetConfig+0x128>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <TIM_Base_SetConfig+0x12c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a26      	ldr	r2, [pc, #152]	; (8003d0c <TIM_Base_SetConfig+0x130>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <TIM_Base_SetConfig+0x114>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00f      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <TIM_Base_SetConfig+0x124>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a11      	ldr	r2, [pc, #68]	; (8003d04 <TIM_Base_SetConfig+0x128>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <TIM_Base_SetConfig+0x12c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <TIM_Base_SetConfig+0x130>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 030a 	bic.w	r3, r3, #10
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 0307 	orr.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e068      	b.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2e      	ldr	r2, [pc, #184]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01d      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ece:	d018      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10c      	bne.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000

08003f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e040      	b.n	8003fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fec6 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	; 0x24
 8003f80:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8c0 	bl	8004118 <UART_SetConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e022      	b.n	8003fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fc26 	bl	80047fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fcad 	bl	8004940 <UART_CheckIdleState>
 8003fe6:	4603      	mov	r3, r0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	2b20      	cmp	r3, #32
 8004006:	f040 8081 	bne.w	800410c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_UART_Transmit+0x26>
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e079      	b.n	800410e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_UART_Transmit+0x38>
 8004024:	2302      	movs	r3, #2
 8004026:	e072      	b.n	800410e <HAL_UART_Transmit+0x11e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2221      	movs	r2, #33	; 0x21
 800403a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800403c:	f7fc ff3c 	bl	8000eb8 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	88fa      	ldrh	r2, [r7, #6]
 800404e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d108      	bne.n	800406e <HAL_UART_Transmit+0x7e>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e003      	b.n	8004076 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800407e:	e02d      	b.n	80040dc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2200      	movs	r2, #0
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fc9d 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e039      	b.n	800410e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ac:	b292      	uxth	r2, r2
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	3302      	adds	r3, #2
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e008      	b.n	80040ca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	b292      	uxth	r2, r2
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3301      	adds	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1cb      	bne.n	8004080 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fc69 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e005      	b.n	800410e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004118:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800411c:	b08a      	sub	sp, #40	; 0x28
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4313      	orrs	r3, r2
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4bb8      	ldr	r3, [pc, #736]	; (8004430 <UART_SetConfig+0x318>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004156:	430b      	orrs	r3, r1
 8004158:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4aae      	ldr	r2, [pc, #696]	; (8004434 <UART_SetConfig+0x31c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	4313      	orrs	r3, r2
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	430a      	orrs	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4aa5      	ldr	r2, [pc, #660]	; (8004438 <UART_SetConfig+0x320>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d126      	bne.n	80041f6 <UART_SetConfig+0xde>
 80041a8:	4ba4      	ldr	r3, [pc, #656]	; (800443c <UART_SetConfig+0x324>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d81a      	bhi.n	80041ec <UART_SetConfig+0xd4>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0xa4>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	080041e5 	.word	0x080041e5
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e105      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80041d4:	2302      	movs	r3, #2
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e101      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80041dc:	2304      	movs	r3, #4
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e0fd      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80041e4:	2308      	movs	r3, #8
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e0f9      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80041ec:	2310      	movs	r3, #16
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	bf00      	nop
 80041f4:	e0f4      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a91      	ldr	r2, [pc, #580]	; (8004440 <UART_SetConfig+0x328>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d138      	bne.n	8004272 <UART_SetConfig+0x15a>
 8004200:	4b8e      	ldr	r3, [pc, #568]	; (800443c <UART_SetConfig+0x324>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d82c      	bhi.n	8004268 <UART_SetConfig+0x150>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0xfc>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004249 	.word	0x08004249
 8004218:	08004269 	.word	0x08004269
 800421c:	08004269 	.word	0x08004269
 8004220:	08004269 	.word	0x08004269
 8004224:	08004259 	.word	0x08004259
 8004228:	08004269 	.word	0x08004269
 800422c:	08004269 	.word	0x08004269
 8004230:	08004269 	.word	0x08004269
 8004234:	08004251 	.word	0x08004251
 8004238:	08004269 	.word	0x08004269
 800423c:	08004269 	.word	0x08004269
 8004240:	08004269 	.word	0x08004269
 8004244:	08004261 	.word	0x08004261
 8004248:	2300      	movs	r3, #0
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e0c7      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004250:	2302      	movs	r3, #2
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e0c3      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004258:	2304      	movs	r3, #4
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e0bf      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004260:	2308      	movs	r3, #8
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e0bb      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004268:	2310      	movs	r3, #16
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	bf00      	nop
 8004270:	e0b6      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a73      	ldr	r2, [pc, #460]	; (8004444 <UART_SetConfig+0x32c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d125      	bne.n	80042c8 <UART_SetConfig+0x1b0>
 800427c:	4b6f      	ldr	r3, [pc, #444]	; (800443c <UART_SetConfig+0x324>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004286:	2b10      	cmp	r3, #16
 8004288:	d011      	beq.n	80042ae <UART_SetConfig+0x196>
 800428a:	2b10      	cmp	r3, #16
 800428c:	d802      	bhi.n	8004294 <UART_SetConfig+0x17c>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <UART_SetConfig+0x186>
 8004292:	e014      	b.n	80042be <UART_SetConfig+0x1a6>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d006      	beq.n	80042a6 <UART_SetConfig+0x18e>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d00c      	beq.n	80042b6 <UART_SetConfig+0x19e>
 800429c:	e00f      	b.n	80042be <UART_SetConfig+0x1a6>
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a4:	e09c      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80042a6:	2302      	movs	r3, #2
 80042a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ac:	e098      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80042ae:	2304      	movs	r3, #4
 80042b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b4:	e094      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80042b6:	2308      	movs	r3, #8
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042bc:	e090      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80042be:	2310      	movs	r3, #16
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c4:	bf00      	nop
 80042c6:	e08b      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5e      	ldr	r2, [pc, #376]	; (8004448 <UART_SetConfig+0x330>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d125      	bne.n	800431e <UART_SetConfig+0x206>
 80042d2:	4b5a      	ldr	r3, [pc, #360]	; (800443c <UART_SetConfig+0x324>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d011      	beq.n	8004304 <UART_SetConfig+0x1ec>
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d802      	bhi.n	80042ea <UART_SetConfig+0x1d2>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <UART_SetConfig+0x1dc>
 80042e8:	e014      	b.n	8004314 <UART_SetConfig+0x1fc>
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d006      	beq.n	80042fc <UART_SetConfig+0x1e4>
 80042ee:	2bc0      	cmp	r3, #192	; 0xc0
 80042f0:	d00c      	beq.n	800430c <UART_SetConfig+0x1f4>
 80042f2:	e00f      	b.n	8004314 <UART_SetConfig+0x1fc>
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e071      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80042fc:	2302      	movs	r3, #2
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e06d      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004304:	2304      	movs	r3, #4
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e069      	b.n	80043e0 <UART_SetConfig+0x2c8>
 800430c:	2308      	movs	r3, #8
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e065      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004314:	2310      	movs	r3, #16
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	bf00      	nop
 800431c:	e060      	b.n	80043e0 <UART_SetConfig+0x2c8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a4a      	ldr	r2, [pc, #296]	; (800444c <UART_SetConfig+0x334>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d129      	bne.n	800437c <UART_SetConfig+0x264>
 8004328:	4b44      	ldr	r3, [pc, #272]	; (800443c <UART_SetConfig+0x324>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004336:	d014      	beq.n	8004362 <UART_SetConfig+0x24a>
 8004338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433c:	d802      	bhi.n	8004344 <UART_SetConfig+0x22c>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <UART_SetConfig+0x23a>
 8004342:	e016      	b.n	8004372 <UART_SetConfig+0x25a>
 8004344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004348:	d007      	beq.n	800435a <UART_SetConfig+0x242>
 800434a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434e:	d00c      	beq.n	800436a <UART_SetConfig+0x252>
 8004350:	e00f      	b.n	8004372 <UART_SetConfig+0x25a>
 8004352:	2300      	movs	r3, #0
 8004354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004358:	e042      	b.n	80043e0 <UART_SetConfig+0x2c8>
 800435a:	2302      	movs	r3, #2
 800435c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004360:	e03e      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004362:	2304      	movs	r3, #4
 8004364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004368:	e03a      	b.n	80043e0 <UART_SetConfig+0x2c8>
 800436a:	2308      	movs	r3, #8
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004370:	e036      	b.n	80043e0 <UART_SetConfig+0x2c8>
 8004372:	2310      	movs	r3, #16
 8004374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004378:	bf00      	nop
 800437a:	e031      	b.n	80043e0 <UART_SetConfig+0x2c8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <UART_SetConfig+0x31c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d129      	bne.n	80043da <UART_SetConfig+0x2c2>
 8004386:	4b2d      	ldr	r3, [pc, #180]	; (800443c <UART_SetConfig+0x324>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d014      	beq.n	80043c0 <UART_SetConfig+0x2a8>
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d802      	bhi.n	80043a2 <UART_SetConfig+0x28a>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <UART_SetConfig+0x298>
 80043a0:	e016      	b.n	80043d0 <UART_SetConfig+0x2b8>
 80043a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a6:	d007      	beq.n	80043b8 <UART_SetConfig+0x2a0>
 80043a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ac:	d00c      	beq.n	80043c8 <UART_SetConfig+0x2b0>
 80043ae:	e00f      	b.n	80043d0 <UART_SetConfig+0x2b8>
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80043b8:	2302      	movs	r3, #2
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80043c0:	2304      	movs	r3, #4
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c6:	e00b      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80043c8:	2308      	movs	r3, #8
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ce:	e007      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <UART_SetConfig+0x2c8>
 80043da:	2310      	movs	r3, #16
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a13      	ldr	r2, [pc, #76]	; (8004434 <UART_SetConfig+0x31c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f040 80fe 	bne.w	80045e8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d837      	bhi.n	8004464 <UART_SetConfig+0x34c>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x2e4>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004421 	.word	0x08004421
 8004400:	08004465 	.word	0x08004465
 8004404:	08004429 	.word	0x08004429
 8004408:	08004465 	.word	0x08004465
 800440c:	08004455 	.word	0x08004455
 8004410:	08004465 	.word	0x08004465
 8004414:	08004465 	.word	0x08004465
 8004418:	08004465 	.word	0x08004465
 800441c:	0800445d 	.word	0x0800445d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004420:	f7fe fcaa 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004424:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004426:	e020      	b.n	800446a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <UART_SetConfig+0x338>)
 800442a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800442c:	e01d      	b.n	800446a <UART_SetConfig+0x352>
 800442e:	bf00      	nop
 8004430:	efff69f3 	.word	0xefff69f3
 8004434:	40008000 	.word	0x40008000
 8004438:	40013800 	.word	0x40013800
 800443c:	40021000 	.word	0x40021000
 8004440:	40004400 	.word	0x40004400
 8004444:	40004800 	.word	0x40004800
 8004448:	40004c00 	.word	0x40004c00
 800444c:	40005000 	.word	0x40005000
 8004450:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004454:	f7fe fbfa 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8004458:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800445a:	e006      	b.n	800446a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800445c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004460:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004462:	e002      	b.n	800446a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	76fb      	strb	r3, [r7, #27]
        break;
 8004468:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 81b9 	beq.w	80047e4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	429a      	cmp	r2, r3
 8004480:	d305      	bcc.n	800448e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	429a      	cmp	r2, r3
 800448c:	d902      	bls.n	8004494 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	76fb      	strb	r3, [r7, #27]
 8004492:	e1a7      	b.n	80047e4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004498:	2b08      	cmp	r3, #8
 800449a:	f200 8092 	bhi.w	80045c2 <UART_SetConfig+0x4aa>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0x38c>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080045c3 	.word	0x080045c3
 80044ac:	08004517 	.word	0x08004517
 80044b0:	080045c3 	.word	0x080045c3
 80044b4:	0800454b 	.word	0x0800454b
 80044b8:	080045c3 	.word	0x080045c3
 80044bc:	080045c3 	.word	0x080045c3
 80044c0:	080045c3 	.word	0x080045c3
 80044c4:	08004599 	.word	0x08004599
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7fe fc56 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 80044cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4619      	mov	r1, r3
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	0214      	lsls	r4, r2, #8
 80044e0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044e4:	020b      	lsls	r3, r1, #8
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6852      	ldr	r2, [r2, #4]
 80044ea:	0852      	lsrs	r2, r2, #1
 80044ec:	4611      	mov	r1, r2
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	eb13 0b01 	adds.w	fp, r3, r1
 80044f6:	eb44 0c02 	adc.w	ip, r4, r2
 80044fa:	4658      	mov	r0, fp
 80044fc:	4661      	mov	r1, ip
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	461a      	mov	r2, r3
 8004508:	4623      	mov	r3, r4
 800450a:	f7fb fe65 	bl	80001d8 <__aeabi_uldivmod>
 800450e:	4603      	mov	r3, r0
 8004510:	460c      	mov	r4, r1
 8004512:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004514:	e058      	b.n	80045c8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	f04f 0400 	mov.w	r4, #0
 8004520:	49ae      	ldr	r1, [pc, #696]	; (80047dc <UART_SetConfig+0x6c4>)
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	eb13 0b01 	adds.w	fp, r3, r1
 800452a:	eb44 0c02 	adc.w	ip, r4, r2
 800452e:	4658      	mov	r0, fp
 8004530:	4661      	mov	r1, ip
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f04f 0400 	mov.w	r4, #0
 800453a:	461a      	mov	r2, r3
 800453c:	4623      	mov	r3, r4
 800453e:	f7fb fe4b 	bl	80001d8 <__aeabi_uldivmod>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004548:	e03e      	b.n	80045c8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe fb7f 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 800454e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4619      	mov	r1, r3
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	0214      	lsls	r4, r2, #8
 8004562:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004566:	020b      	lsls	r3, r1, #8
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6852      	ldr	r2, [r2, #4]
 800456c:	0852      	lsrs	r2, r2, #1
 800456e:	4611      	mov	r1, r2
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	eb13 0b01 	adds.w	fp, r3, r1
 8004578:	eb44 0c02 	adc.w	ip, r4, r2
 800457c:	4658      	mov	r0, fp
 800457e:	4661      	mov	r1, ip
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	461a      	mov	r2, r3
 800458a:	4623      	mov	r3, r4
 800458c:	f7fb fe24 	bl	80001d8 <__aeabi_uldivmod>
 8004590:	4603      	mov	r3, r0
 8004592:	460c      	mov	r4, r1
 8004594:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004596:	e017      	b.n	80045c8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80045a6:	f144 0100 	adc.w	r1, r4, #0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f04f 0400 	mov.w	r4, #0
 80045b2:	461a      	mov	r2, r3
 80045b4:	4623      	mov	r3, r4
 80045b6:	f7fb fe0f 	bl	80001d8 <__aeabi_uldivmod>
 80045ba:	4603      	mov	r3, r0
 80045bc:	460c      	mov	r4, r1
 80045be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045c0:	e002      	b.n	80045c8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	76fb      	strb	r3, [r7, #27]
            break;
 80045c6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ce:	d308      	bcc.n	80045e2 <UART_SetConfig+0x4ca>
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d204      	bcs.n	80045e2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e100      	b.n	80047e4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	76fb      	strb	r3, [r7, #27]
 80045e6:	e0fd      	b.n	80047e4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	f040 8084 	bne.w	80046fc <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80045f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d85f      	bhi.n	80046bc <UART_SetConfig+0x5a4>
 80045fc:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x4ec>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004629 	.word	0x08004629
 8004608:	08004649 	.word	0x08004649
 800460c:	08004669 	.word	0x08004669
 8004610:	080046bd 	.word	0x080046bd
 8004614:	08004685 	.word	0x08004685
 8004618:	080046bd 	.word	0x080046bd
 800461c:	080046bd 	.word	0x080046bd
 8004620:	080046bd 	.word	0x080046bd
 8004624:	080046a5 	.word	0x080046a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe fba6 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 800462c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	005a      	lsls	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	b29b      	uxth	r3, r3
 8004644:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004646:	e03c      	b.n	80046c2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe fbac 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 800464c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	005a      	lsls	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	b29b      	uxth	r3, r3
 8004664:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004666:	e02c      	b.n	80046c2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004672:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6852      	ldr	r2, [r2, #4]
 800467a:	fbb3 f3f2 	udiv	r3, r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004682:	e01e      	b.n	80046c2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004684:	f7fe fae2 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8004688:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046a2:	e00e      	b.n	80046c2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046ba:	e002      	b.n	80046c2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	76fb      	strb	r3, [r7, #27]
        break;
 80046c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b0f      	cmp	r3, #15
 80046c6:	d916      	bls.n	80046f6 <UART_SetConfig+0x5de>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ce:	d212      	bcs.n	80046f6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f023 030f 	bic.w	r3, r3, #15
 80046d8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	89fb      	ldrh	r3, [r7, #14]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	89fa      	ldrh	r2, [r7, #14]
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e076      	b.n	80047e4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	76fb      	strb	r3, [r7, #27]
 80046fa:	e073      	b.n	80047e4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80046fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004700:	2b08      	cmp	r3, #8
 8004702:	d85c      	bhi.n	80047be <UART_SetConfig+0x6a6>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x5f4>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004731 	.word	0x08004731
 8004710:	0800474f 	.word	0x0800474f
 8004714:	0800476d 	.word	0x0800476d
 8004718:	080047bf 	.word	0x080047bf
 800471c:	08004789 	.word	0x08004789
 8004720:	080047bf 	.word	0x080047bf
 8004724:	080047bf 	.word	0x080047bf
 8004728:	080047bf 	.word	0x080047bf
 800472c:	080047a7 	.word	0x080047a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fb22 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8004734:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	085a      	lsrs	r2, r3, #1
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	441a      	add	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	b29b      	uxth	r3, r3
 800474a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800474c:	e03a      	b.n	80047c4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800474e:	f7fe fb29 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8004752:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	085a      	lsrs	r2, r3, #1
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800476a:	e02b      	b.n	80047c4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004776:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6852      	ldr	r2, [r2, #4]
 800477e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004782:	b29b      	uxth	r3, r3
 8004784:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004786:	e01d      	b.n	80047c4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004788:	f7fe fa60 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 800478c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	085a      	lsrs	r2, r3, #1
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	441a      	add	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047a4:	e00e      	b.n	80047c4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047bc:	e002      	b.n	80047c4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	76fb      	strb	r3, [r7, #27]
        break;
 80047c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d90a      	bls.n	80047e0 <UART_SetConfig+0x6c8>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d0:	d206      	bcs.n	80047e0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	e003      	b.n	80047e4 <UART_SetConfig+0x6cc>
 80047dc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80047f0:	7efb      	ldrb	r3, [r7, #27]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3728      	adds	r7, #40	; 0x28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080047fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01a      	beq.n	8004912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fa:	d10a      	bne.n	8004912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af02      	add	r7, sp, #8
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800494e:	f7fc fab3 	bl	8000eb8 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d10e      	bne.n	8004980 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004962:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f82a 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e020      	b.n	80049c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d10e      	bne.n	80049ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800498e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f814 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e00a      	b.n	80049c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	e05d      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d059      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e4:	f7fc fa68 	bl	8000eb8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <UART_WaitOnFlagUntilTimeout+0x30>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11b      	bne.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e042      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02b      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4e:	d123      	bne.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a58:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e00f      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d092      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4e0d      	ldr	r6, [pc, #52]	; (8004af8 <__libc_init_array+0x38>)
 8004ac4:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac6:	1ba4      	subs	r4, r4, r6
 8004ac8:	10a4      	asrs	r4, r4, #2
 8004aca:	2500      	movs	r5, #0
 8004acc:	42a5      	cmp	r5, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	4e0b      	ldr	r6, [pc, #44]	; (8004b00 <__libc_init_array+0x40>)
 8004ad2:	4c0c      	ldr	r4, [pc, #48]	; (8004b04 <__libc_init_array+0x44>)
 8004ad4:	f000 f820 	bl	8004b18 <_init>
 8004ad8:	1ba4      	subs	r4, r4, r6
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	2500      	movs	r5, #0
 8004ade:	42a5      	cmp	r5, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ae8:	4798      	blx	r3
 8004aea:	3501      	adds	r5, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004af2:	4798      	blx	r3
 8004af4:	3501      	adds	r5, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08004bac 	.word	0x08004bac
 8004afc:	08004bac 	.word	0x08004bac
 8004b00:	08004bac 	.word	0x08004bac
 8004b04:	08004bb0 	.word	0x08004bb0

08004b08 <memset>:
 8004b08:	4402      	add	r2, r0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d100      	bne.n	8004b12 <memset+0xa>
 8004b10:	4770      	bx	lr
 8004b12:	f803 1b01 	strb.w	r1, [r3], #1
 8004b16:	e7f9      	b.n	8004b0c <memset+0x4>

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
