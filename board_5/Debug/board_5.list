
board_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f8c  08005f8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f94  08005f94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000074  08006010  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006010  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017396  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb2  00000000  00000000  0003743a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  0003a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001260  00000000  00000000  0003b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000296dd  00000000  00000000  0003c948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011333  00000000  00000000  00066025  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc8aa  00000000  00000000  00077358  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173c02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  00173c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e64 	.word	0x08005e64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005e64 	.word	0x08005e64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_CAN1_Init+0x64>)
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <MX_CAN1_Init+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_CAN1_Init+0x64>)
 800058c:	2205      	movs	r2, #5
 800058e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_CAN1_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_CAN1_Init+0x64>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_CAN1_Init+0x64>)
 800059e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80005a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_CAN1_Init+0x64>)
 80005d2:	f000 fe99 	bl	8001308 <HAL_CAN_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005dc:	f000 fbd4 	bl	8000d88 <Error_Handler>
  }

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000a4 	.word	0x200000a4
 80005e8:	40006400 	.word	0x40006400

080005ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1c      	ldr	r2, [pc, #112]	; (800067c <HAL_CAN_MspInit+0x90>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d131      	bne.n	8000672 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <HAL_CAN_MspInit+0x94>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <HAL_CAN_MspInit+0x94>)
 8000614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000618:	6593      	str	r3, [r2, #88]	; 0x58
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <HAL_CAN_MspInit+0x94>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <HAL_CAN_MspInit+0x94>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <HAL_CAN_MspInit+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <HAL_CAN_MspInit+0x94>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800063e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000650:	2309      	movs	r3, #9
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 fdd9 	bl	8002214 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8000662:	2202      	movs	r2, #2
 8000664:	2100      	movs	r1, #0
 8000666:	2014      	movs	r0, #20
 8000668:	f001 fd9d 	bl	80021a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800066c:	2014      	movs	r0, #20
 800066e:	f001 fdb6 	bl	80021de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	; 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40006400 	.word	0x40006400
 8000680:	40021000 	.word	0x40021000

08000684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <MX_GPIO_Init+0xec>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a34      	ldr	r2, [pc, #208]	; (8000770 <MX_GPIO_Init+0xec>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <MX_GPIO_Init+0xec>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <MX_GPIO_Init+0xec>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <MX_GPIO_Init+0xec>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <MX_GPIO_Init+0xec>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_GPIO_Init+0xec>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a28      	ldr	r2, [pc, #160]	; (8000770 <MX_GPIO_Init+0xec>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_GPIO_Init+0xec>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_GPIO_Init+0xec>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a22      	ldr	r2, [pc, #136]	; (8000770 <MX_GPIO_Init+0xec>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_GPIO_Init+0xec>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000702:	f001 ff47 	bl	8002594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_GPIO_Init+0xf0>)
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4817      	ldr	r0, [pc, #92]	; (8000778 <MX_GPIO_Init+0xf4>)
 800071c:	f001 fd7a 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000720:	2301      	movs	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_GPIO_Init+0xf8>)
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f001 fd6d 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800073a:	2320      	movs	r3, #32
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f001 fd5e 	bl	8002214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	2100      	movs	r1, #0
 800075c:	2006      	movs	r0, #6
 800075e:	f001 fd22 	bl	80021a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000762:	2006      	movs	r0, #6
 8000764:	f001 fd3b 	bl	80021de <HAL_NVIC_EnableIRQ>

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	10210000 	.word	0x10210000
 8000778:	48000800 	.word	0x48000800
 800077c:	10110000 	.word	0x10110000

08000780 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f023 030f 	bic.w	r3, r3, #15
 8000790:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f043 030c 	orr.w	r3, r3, #12
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	f043 030c 	orr.w	r3, r3, #12
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007c0:	f107 0208 	add.w	r2, r7, #8
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2304      	movs	r3, #4
 80007ca:	214e      	movs	r1, #78	; 0x4e
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <lcd_send_cmd+0x5c>)
 80007ce:	f001 ffab 	bl	8002728 <HAL_I2C_Master_Transmit>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000cc 	.word	0x200000cc

080007e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f023 030f 	bic.w	r3, r3, #15
 80007f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f043 030d 	orr.w	r3, r3, #13
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f043 0309 	orr.w	r3, r3, #9
 8000808:	b2db      	uxtb	r3, r3
 800080a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	f043 030d 	orr.w	r3, r3, #13
 8000812:	b2db      	uxtb	r3, r3
 8000814:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	f043 0309 	orr.w	r3, r3, #9
 800081c:	b2db      	uxtb	r3, r3
 800081e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000820:	f107 0208 	add.w	r2, r7, #8
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2304      	movs	r3, #4
 800082a:	214e      	movs	r1, #78	; 0x4e
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <lcd_send_data+0x5c>)
 800082e:	f001 ff7b 	bl	8002728 <HAL_I2C_Master_Transmit>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000cc 	.word	0x200000cc

08000840 <lcd_clear>:

void lcd_clear (void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	f7ff ff9a 	bl	8000780 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	e005      	b.n	800085e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000852:	2020      	movs	r0, #32
 8000854:	f7ff ffc4 	bl	80007e0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3301      	adds	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b45      	cmp	r3, #69	; 0x45
 8000862:	ddf6      	ble.n	8000852 <lcd_clear+0x12>
	}
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
    switch (row)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <lcd_put_cur+0x16>
 800087c:	2b01      	cmp	r3, #1
 800087e:	d005      	beq.n	800088c <lcd_put_cur+0x20>
 8000880:	e009      	b.n	8000896 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	603b      	str	r3, [r7, #0]
            break;
 800088a:	e004      	b.n	8000896 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000892:	603b      	str	r3, [r7, #0]
            break;
 8000894:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff70 	bl	8000780 <lcd_send_cmd>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <lcd_init>:


void lcd_init (void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80008ac:	2032      	movs	r0, #50	; 0x32
 80008ae:	f000 fd09 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008b2:	2030      	movs	r0, #48	; 0x30
 80008b4:	f7ff ff64 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008b8:	2005      	movs	r0, #5
 80008ba:	f000 fd03 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008be:	2030      	movs	r0, #48	; 0x30
 80008c0:	f7ff ff5e 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 fcfd 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008ca:	2030      	movs	r0, #48	; 0x30
 80008cc:	f7ff ff58 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f000 fcf7 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008d6:	2020      	movs	r0, #32
 80008d8:	f7ff ff52 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(10);
 80008dc:	200a      	movs	r0, #10
 80008de:	f000 fcf1 	bl	80012c4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f7ff ff4c 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 fceb 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008ee:	2008      	movs	r0, #8
 80008f0:	f7ff ff46 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fce5 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff40 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f000 fcdf 	bl	80012c4 <HAL_Delay>
	HAL_Delay(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 fcdc 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff ff37 	bl	8000780 <lcd_send_cmd>
	HAL_Delay(1);
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fcd6 	bl	80012c4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000918:	200c      	movs	r0, #12
 800091a:	f7ff ff31 	bl	8000780 <lcd_send_cmd>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}

08000922 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800092a:	e006      	b.n	800093a <lcd_send_string+0x18>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff53 	bl	80007e0 <lcd_send_data>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f4      	bne.n	800092c <lcd_send_string+0xa>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_I2C1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_I2C1_Init+0x7c>)
 800095a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000964:	2201      	movs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000988:	f001 fe3f 	bl	800260a <HAL_I2C_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000992:	f000 f9f9 	bl	8000d88 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_I2C1_Init+0x74>)
 800099a:	f002 f92d 	bl	8002bf8 <HAL_I2CEx_ConfigAnalogFilter>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a4:	f000 f9f0 	bl	8000d88 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_I2C1_Init+0x74>)
 80009ac:	f002 f96f 	bl	8002c8e <HAL_I2CEx_ConfigDigitalFilter>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f9e7 	bl	8000d88 <Error_Handler>
  }

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000cc 	.word	0x200000cc
 80009c4:	40005400 	.word	0x40005400
 80009c8:	10909cec 	.word	0x10909cec

080009cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_I2C_MspInit+0x7c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d128      	bne.n	8000a40 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0c:	2312      	movs	r3, #18
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <HAL_I2C_MspInit+0x84>)
 8000a24:	f001 fbf6 	bl	8002214 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a32:	6593      	str	r3, [r2, #88]	; 0x58
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_I2C_MspInit+0x80>)
 8000a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000400 	.word	0x48000400

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5a:	f000 fbbb 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5e:	f000 f86d 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a62:	f7ff fe0f 	bl	8000684 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a66:	f000 fb19 	bl	800109c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000a6a:	f7ff fd89 	bl	8000580 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000a6e:	f7ff ff6d 	bl	800094c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a72:	f000 fa9f 	bl	8000fb4 <MX_TIM1_Init>
  MX_RTC_Init();
 8000a76:	f000 f991 	bl	8000d9c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  serialClear();
 8000a7a:	f000 f8f5 	bl	8000c68 <serialClear>
  lcd_init();
 8000a7e:	f7ff ff13 	bl	80008a8 <lcd_init>
  lcd_put_cur(0,0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fef1 	bl	800086c <lcd_put_cur>
  lcd_send_string("***Init!***");
 8000a8a:	4821      	ldr	r0, [pc, #132]	; (8000b10 <main+0xbc>)
 8000a8c:	f7ff ff49 	bl	8000922 <lcd_send_string>
  serialMsg("***Init!***\n\r");
 8000a90:	4820      	ldr	r0, [pc, #128]	; (8000b14 <main+0xc0>)
 8000a92:	f000 f8d3 	bl	8000c3c <serialMsg>
  HAL_Delay(1000);
 8000a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9a:	f000 fc13 	bl	80012c4 <HAL_Delay>
  lcd_clear();
 8000a9e:	f7ff fecf 	bl	8000840 <lcd_clear>

  CAN_filterConfig();
 8000aa2:	f000 f951 	bl	8000d48 <CAN_filterConfig>
  HAL_CAN_Start(&hcan1);
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <main+0xc4>)
 8000aa8:	f000 fdf3 	bl	8001692 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000aac:	2102      	movs	r1, #2
 8000aae:	481a      	ldr	r0, [pc, #104]	; (8000b18 <main+0xc4>)
 8000ab0:	f001 f845 	bl	8001b3e <HAL_CAN_ActivateNotification>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab8:	4818      	ldr	r0, [pc, #96]	; (8000b1c <main+0xc8>)
 8000aba:	f001 fd53 	bl	8002564 <HAL_GPIO_ReadPin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f7      	bne.n	8000ab4 <main+0x60>
		  serialMsg("Starting transmission!\r\n");
 8000ac4:	4816      	ldr	r0, [pc, #88]	; (8000b20 <main+0xcc>)
 8000ac6:	f000 f8b9 	bl	8000c3c <serialMsg>
		  startTime = uwTick;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <main+0xd0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <main+0xd4>)
 8000ad0:	6013      	str	r3, [r2, #0]

		  for(int i=0;i<1000;i++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	e005      	b.n	8000ae4 <main+0x90>
		  {
		  //sprintf(CanMsg,"%d",i);
		  CAN_Tx(CanMsg);
 8000ad8:	4814      	ldr	r0, [pc, #80]	; (8000b2c <main+0xd8>)
 8000ada:	f000 f8cf 	bl	8000c7c <CAN_Tx>
		  for(int i=0;i<1000;i++)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000aea:	dbf5      	blt.n	8000ad8 <main+0x84>
		  }
		  stopTime = uwTick;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <main+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <main+0xdc>)
 8000af2:	6013      	str	r3, [r2, #0]
		  sprintf(comMsg,"execute time: %lu ms\r\n",(stopTime-startTime));
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <main+0xdc>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <main+0xd4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <main+0xe0>)
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <main+0xe4>)
 8000b04:	f004 fda8 	bl	8005658 <siprintf>
		  serialMsg(comMsg);
 8000b08:	480b      	ldr	r0, [pc, #44]	; (8000b38 <main+0xe4>)
 8000b0a:	f000 f897 	bl	8000c3c <serialMsg>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8000b0e:	e7d1      	b.n	8000ab4 <main+0x60>
 8000b10:	08005e7c 	.word	0x08005e7c
 8000b14:	08005e88 	.word	0x08005e88
 8000b18:	200000a4 	.word	0x200000a4
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	08005e98 	.word	0x08005e98
 8000b24:	20000270 	.word	0x20000270
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	20000118 	.word	0x20000118
 8000b30:	20000094 	.word	0x20000094
 8000b34:	08005eb4 	.word	0x08005eb4
 8000b38:	20000158 	.word	0x20000158

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0b8      	sub	sp, #224	; 0xe0
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b46:	2244      	movs	r2, #68	; 0x44
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 fd7c 	bl	8005648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	463b      	mov	r3, r7
 8000b62:	2288      	movs	r2, #136	; 0x88
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fd6e 	bl	8005648 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b98:	230a      	movs	r3, #10
 8000b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 f91b 	bl	8002df0 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000bc0:	f000 f8e2 	bl	8000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000be6:	2104      	movs	r1, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fce7 	bl	80035bc <HAL_RCC_ClockConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000bf4:	f000 f8c8 	bl	8000d88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <SystemClock_Config+0xfc>)
 8000bfa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fed8 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000c1a:	f000 f8b5 	bl	8000d88 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c22:	f002 f88f 	bl	8002d44 <HAL_PWREx_ControlVoltageScaling>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000c2c:	f000 f8ac 	bl	8000d88 <Error_Handler>
  }
}
 8000c30:	bf00      	nop
 8000c32:	37e0      	adds	r7, #224	; 0xe0
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	00020042 	.word	0x00020042

08000c3c <serialMsg>:

/* USER CODE BEGIN 4 */
void serialMsg(char msg[]){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fac3 	bl	80001d0 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <serialMsg+0x28>)
 8000c56:	f003 ff65 	bl	8004b24 <HAL_UART_Transmit>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200001f0 	.word	0x200001f0

08000c68 <serialClear>:

void serialClear(void){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	serialMsg("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <serialClear+0x10>)
 8000c6e:	f7ff ffe5 	bl	8000c3c <serialMsg>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	08005ecc 	.word	0x08005ecc

08000c7c <CAN_Tx>:

void HAL_CAN_RxFifo0FullCallBack(CAN_HandleTypeDef *hcan){
	if(hcan) return;
}

void CAN_Tx(char msg[]){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

	if(sizeof(*msg)<=8){
		TxHeader.DLC = 8;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <CAN_Tx+0x54>)
 8000c86:	2208      	movs	r2, #8
 8000c88:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <CAN_Tx+0x54>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <CAN_Tx+0x54>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = OwnID;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <CAN_Tx+0x58>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <CAN_Tx+0x54>)
 8000c9e:	601a      	str	r2, [r3, #0]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)msg, &TxMailBox) != HAL_OK) Error_Handler();
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <CAN_Tx+0x5c>)
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	490a      	ldr	r1, [pc, #40]	; (8000cd0 <CAN_Tx+0x54>)
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <CAN_Tx+0x60>)
 8000ca8:	f000 fd37 	bl	800171a <HAL_CAN_AddTxMessage>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <CAN_Tx+0x3a>
 8000cb2:	f000 f869 	bl	8000d88 <Error_Handler>

		while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));
 8000cb6:	bf00      	nop
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <CAN_Tx+0x5c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <CAN_Tx+0x60>)
 8000cc0:	f000 fe06 	bl	80018d0 <HAL_CAN_IsTxMessagePending>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f6      	bne.n	8000cb8 <CAN_Tx+0x3c>
		//serialMsg("Message transmitted!\n\r");
	}
	else return;
}
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000124 	.word	0x20000124
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000120 	.word	0x20000120
 8000cdc:	200000a4 	.word	0x200000a4

08000ce0 <CAN_Rx>:

void CAN_Rx(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <CAN_Rx+0x54>)
 8000ce8:	2208      	movs	r2, #8
 8000cea:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <CAN_Rx+0x54>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <CAN_Rx+0x54>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <CAN_Rx+0x58>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <CAN_Rx+0x54>)
 8000d00:	601a      	str	r2, [r3, #0]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8000d02:	463b      	mov	r3, r7
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <CAN_Rx+0x54>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <CAN_Rx+0x5c>)
 8000d0a:	f000 fe05 	bl	8001918 <HAL_CAN_GetRxMessage>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <CAN_Rx+0x3a>
		Error_Handler();
 8000d14:	f000 f838 	bl	8000d88 <Error_Handler>
 8000d18:	e009      	b.n	8000d2e <CAN_Rx+0x4e>
		return;
	}
	//delay(1);
	serialMsg("Received message: ");
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <CAN_Rx+0x60>)
 8000d1c:	f7ff ff8e 	bl	8000c3c <serialMsg>
	serialMsg((char*)crx);
 8000d20:	463b      	mov	r3, r7
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff8a 	bl	8000c3c <serialMsg>
	serialMsg("\n\r");
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <CAN_Rx+0x64>)
 8000d2a:	f7ff ff87 	bl	8000c3c <serialMsg>

}
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000013c 	.word	0x2000013c
 8000d38:	20000002 	.word	0x20000002
 8000d3c:	200000a4 	.word	0x200000a4
 8000d40:	08005ee8 	.word	0x08005ee8
 8000d44:	08005efc 	.word	0x08005efc

08000d48 <CAN_filterConfig>:


void CAN_filterConfig(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
	filterConfig.FilterActivation = ENABLE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0x0000;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <CAN_filterConfig+0x3c>)
 8000d78:	f000 fbc1 	bl	80014fe <HAL_CAN_ConfigFilter>
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000a4 	.word	0x200000a4

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	serialMsg("Error happened!");
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <Error_Handler+0x10>)
 8000d8e:	f7ff ff55 	bl	8000c3c <serialMsg>
  /* USER CODE END Error_Handler_Debug */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08005f00 	.word	0x08005f00

08000d9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_RTC_Init+0x48>)
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <MX_RTC_Init+0x4c>)
 8000da4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_RTC_Init+0x48>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_RTC_Init+0x48>)
 8000dae:	227f      	movs	r2, #127	; 0x7f
 8000db0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_RTC_Init+0x48>)
 8000db4:	22ff      	movs	r2, #255	; 0xff
 8000db6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_RTC_Init+0x48>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_RTC_Init+0x48>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_RTC_Init+0x48>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_RTC_Init+0x48>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_RTC_Init+0x48>)
 8000dd2:	f003 faa7 	bl	8004324 <HAL_RTC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000ddc:	f7ff ffd4 	bl	8000d88 <Error_Handler>
  }

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000018c 	.word	0x2000018c
 8000de8:	40002800 	.word	0x40002800

08000dec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_RTC_MspInit+0x30>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d107      	bne.n	8000e0e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_RTC_MspInit+0x34>)
 8000e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_RTC_MspInit+0x34>)
 8000e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40002800 	.word	0x40002800
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_MspInit+0x44>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6613      	str	r3, [r2, #96]	; 0x60
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x44>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f001 f998 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f9e2 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f001 fb79 	bl	80025c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <CAN1_RX0_IRQHandler+0x14>)
 8000ede:	f000 fe54 	bl	8001b8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 8000ee2:	f7ff fefd 	bl	8000ce0 <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000a4 	.word	0x200000a4

08000ef0 <_sbrk>:
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x50>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x16>
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <_sbrk+0x50>)
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <_sbrk+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <_sbrk+0x50>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <_sbrk+0x50>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	466a      	mov	r2, sp
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d907      	bls.n	8000f2a <_sbrk+0x3a>
 8000f1a:	f004 fb6b 	bl	80055f4 <__errno>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	230c      	movs	r3, #12
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f28:	e006      	b.n	8000f38 <_sbrk+0x48>
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <_sbrk+0x50>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <_sbrk+0x50>)
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000098 	.word	0x20000098
 8000f44:	20000278 	.word	0x20000278

08000f48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <SystemInit+0x64>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <SystemInit+0x64>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <SystemInit+0x68>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <SystemInit+0x68>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <SystemInit+0x68>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <SystemInit+0x68>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <SystemInit+0x68>)
 8000f74:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f78:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <SystemInit+0x68>)
 8000f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f84:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <SystemInit+0x68>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <SystemInit+0x68>)
 8000f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <SystemInit+0x68>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SystemInit+0x64>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <MX_TIM1_Init+0xa0>)
 8000fd4:	4a20      	ldr	r2, [pc, #128]	; (8001058 <MX_TIM1_Init+0xa4>)
 8000fd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_TIM1_Init+0xa0>)
 8000fda:	224f      	movs	r2, #79	; 0x4f
 8000fdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_TIM1_Init+0xa0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_TIM1_Init+0xa0>)
 8000fe6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_TIM1_Init+0xa0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_TIM1_Init+0xa0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_TIM1_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ffe:	4815      	ldr	r0, [pc, #84]	; (8001054 <MX_TIM1_Init+0xa0>)
 8001000:	f003 faa2 	bl	8004548 <HAL_TIM_Base_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800100a:	f7ff febd 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_TIM1_Init+0xa0>)
 800101c:	f003 fabf 	bl	800459e <HAL_TIM_ConfigClockSource>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001026:	f7ff feaf 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_TIM1_Init+0xa0>)
 800103c:	f003 fc9c 	bl	8004978 <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001046:	f7ff fe9f 	bl	8000d88 <Error_Handler>
  }

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001b0 	.word	0x200001b0
 8001058:	40012c00 	.word	0x40012c00

0800105c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x38>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10b      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_TIM_Base_MspInit+0x3c>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_TIM_Base_MspInit+0x3c>)
 8001074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_TIM_Base_MspInit+0x3c>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40012c00 	.word	0x40012c00
 8001098:	40021000 	.word	0x40021000

0800109c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <MX_USART2_UART_Init+0x5c>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_USART2_UART_Init+0x58>)
 80010e0:	f003 fcd2 	bl	8004a88 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ea:	f7ff fe4d 	bl	8000d88 <Error_Handler>
  }

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001f0 	.word	0x200001f0
 80010f8:	40004400 	.word	0x40004400

080010fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x7c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d128      	bne.n	8001170 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_UART_MspInit+0x80>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_UART_MspInit+0x80>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x80>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0x80>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_UART_MspInit+0x80>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_MspInit+0x80>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800114e:	230c      	movs	r3, #12
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 f852 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000

08001180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001184:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001186:	e003      	b.n	8001190 <LoopCopyDataInit>

08001188 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800118a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800118c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800118e:	3104      	adds	r1, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001194:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001196:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001198:	d3f6      	bcc.n	8001188 <CopyDataInit>
	ldr	r2, =_sbss
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800119c:	e002      	b.n	80011a4 <LoopFillZerobss>

0800119e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800119e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011a0:	f842 3b04 	str.w	r3, [r2], #4

080011a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <LoopForever+0x16>)
	cmp	r2, r3
 80011a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011a8:	d3f9      	bcc.n	800119e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011aa:	f7ff fecd 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f004 fa27 	bl	8005600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b2:	f7ff fc4f 	bl	8000a54 <main>

080011b6 <LoopForever>:

LoopForever:
    b LoopForever
 80011b6:	e7fe      	b.n	80011b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011bc:	08005f9c 	.word	0x08005f9c
	ldr	r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011c4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80011c8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80011cc:	20000278 	.word	0x20000278

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_Init+0x3c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_Init+0x3c>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ea:	2003      	movs	r0, #3
 80011ec:	f000 ffd0 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f80f 	bl	8001214 <HAL_InitTick>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	e001      	b.n	8001206 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001202:	f7ff fe0f 	bl	8000e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001206:	79fb      	ldrb	r3, [r7, #7]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_InitTick+0x68>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d022      	beq.n	800126e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_InitTick+0x6c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_InitTick+0x68>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001234:	fbb1 f3f3 	udiv	r3, r1, r3
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 ffdc 	bl	80021fa <HAL_SYSTICK_Config>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10f      	bne.n	8001268 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d809      	bhi.n	8001262 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124e:	2200      	movs	r2, #0
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001256:	f000 ffa6 	bl	80021a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_InitTick+0x70>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e007      	b.n	8001272 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e004      	b.n	8001272 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000000c 	.word	0x2000000c
 8001280:	20000004 	.word	0x20000004
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x1c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x20>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4413      	add	r3, r2
 8001296:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_IncTick+0x1c>)
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000270 	.word	0x20000270
 80012a8:	2000000c 	.word	0x2000000c

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000270 	.word	0x20000270

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012dc:	d004      	beq.n	80012e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_Delay+0x40>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e8:	bf00      	nop
 80012ea:	f7ff ffdf 	bl	80012ac <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d8f7      	bhi.n	80012ea <HAL_Delay+0x26>
  {
  }
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000000c 	.word	0x2000000c

08001308 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0ed      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff f960 	bl	80005ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0202 	bic.w	r2, r2, #2
 800133a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800133c:	f7ff ffb6 	bl	80012ac <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001342:	e012      	b.n	800136a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001344:	f7ff ffb2 	bl	80012ac <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d90b      	bls.n	800136a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0c5      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e5      	bne.n	8001344 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0201 	orr.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff ff90 	bl	80012ac <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800138e:	e012      	b.n	80013b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001390:	f7ff ff8c 	bl	80012ac <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d90b      	bls.n	80013b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2205      	movs	r2, #5
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e09f      	b.n	80014f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0e5      	beq.n	8001390 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e1b      	ldrb	r3, [r3, #24]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e007      	b.n	80013ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7e5b      	ldrb	r3, [r3, #25]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e007      	b.n	8001418 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001416:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e9b      	ldrb	r3, [r3, #26]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0220 	orr.w	r2, r2, #32
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0220 	bic.w	r2, r2, #32
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7edb      	ldrb	r3, [r3, #27]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0210 	bic.w	r2, r2, #16
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e007      	b.n	800146c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0210 	orr.w	r2, r2, #16
 800146a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7f1b      	ldrb	r3, [r3, #28]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e007      	b.n	8001496 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0208 	bic.w	r2, r2, #8
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7f5b      	ldrb	r3, [r3, #29]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0204 	orr.w	r2, r2, #4
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e007      	b.n	80014c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0204 	bic.w	r2, r2, #4
 80014be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	ea42 0103 	orr.w	r1, r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014fe:	b480      	push	{r7}
 8001500:	b087      	sub	sp, #28
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001516:	7cfb      	ldrb	r3, [r7, #19]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d003      	beq.n	8001524 <HAL_CAN_ConfigFilter+0x26>
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b02      	cmp	r3, #2
 8001520:	f040 80aa 	bne.w	8001678 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2201      	movs	r2, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d123      	bne.n	80015a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001580:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3248      	adds	r2, #72	; 0x48
 8001586:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800159a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159c:	6979      	ldr	r1, [r7, #20]
 800159e:	3348      	adds	r3, #72	; 0x48
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d122      	bne.n	80015f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3248      	adds	r2, #72	; 0x48
 80015d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ea:	6979      	ldr	r1, [r7, #20]
 80015ec:	3348      	adds	r3, #72	; 0x48
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800160e:	e007      	b.n	8001620 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800163a:	e007      	b.n	800164c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	431a      	orrs	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800166a:	f023 0201 	bic.w	r2, r3, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e006      	b.n	8001686 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
  }
}
 8001686:	4618      	mov	r0, r3
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d12e      	bne.n	8001704 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016be:	f7ff fdf5 	bl	80012ac <HAL_GetTick>
 80016c2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c4:	e012      	b.n	80016ec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c6:	f7ff fdf1 	bl	80012ac <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b0a      	cmp	r3, #10
 80016d2:	d90b      	bls.n	80016ec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2205      	movs	r2, #5
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e012      	b.n	8001712 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e5      	bne.n	80016c6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	e006      	b.n	8001712 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800171a:	b480      	push	{r7}
 800171c:	b089      	sub	sp, #36	; 0x24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d003      	beq.n	8001746 <HAL_CAN_AddTxMessage+0x2c>
 800173e:	7ffb      	ldrb	r3, [r7, #31]
 8001740:	2b02      	cmp	r3, #2
 8001742:	f040 80b8 	bne.w	80018b6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a0 	beq.w	80018a6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	0e1b      	lsrs	r3, r3, #24
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d907      	bls.n	8001786 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e09e      	b.n	80018c4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001786:	2201      	movs	r2, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10d      	bne.n	80017b4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	6809      	ldr	r1, [r1, #0]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3318      	adds	r3, #24
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	440b      	add	r3, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e00f      	b.n	80017d4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017be:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017c8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3318      	adds	r3, #24
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	440b      	add	r3, r1
 80017d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3318      	adds	r3, #24
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	440b      	add	r3, r1
 80017e4:	3304      	adds	r3, #4
 80017e6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	7d1b      	ldrb	r3, [r3, #20]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d111      	bne.n	8001814 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3318      	adds	r3, #24
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	3304      	adds	r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	6811      	ldr	r1, [r2, #0]
 8001804:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3318      	adds	r3, #24
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	440b      	add	r3, r1
 8001810:	3304      	adds	r3, #4
 8001812:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3307      	adds	r3, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	061a      	lsls	r2, r3, #24
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3306      	adds	r3, #6
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3305      	adds	r3, #5
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	4313      	orrs	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	3204      	adds	r2, #4
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	4610      	mov	r0, r2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	6811      	ldr	r1, [r2, #0]
 800183c:	ea43 0200 	orr.w	r2, r3, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	440b      	add	r3, r1
 8001846:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800184a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3303      	adds	r3, #3
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	061a      	lsls	r2, r3, #24
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3302      	adds	r3, #2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3301      	adds	r3, #1
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	4313      	orrs	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	4610      	mov	r0, r2
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	6811      	ldr	r1, [r2, #0]
 8001872:	ea43 0200 	orr.w	r2, r3, r0
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	440b      	add	r3, r1
 800187c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001880:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3318      	adds	r3, #24
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	6811      	ldr	r1, [r2, #0]
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3318      	adds	r3, #24
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	440b      	add	r3, r1
 80018a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e00e      	b.n	80018c4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e006      	b.n	80018c4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
  }
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3724      	adds	r7, #36	; 0x24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e6:	7afb      	ldrb	r3, [r7, #11]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <HAL_CAN_IsTxMessagePending+0x22>
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d10b      	bne.n	800190a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	069b      	lsls	r3, r3, #26
 80018fc:	401a      	ands	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	069b      	lsls	r3, r3, #26
 8001902:	429a      	cmp	r2, r3
 8001904:	d001      	beq.n	800190a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d003      	beq.n	800193c <HAL_CAN_GetRxMessage+0x24>
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b02      	cmp	r3, #2
 8001938:	f040 80f4 	bne.w	8001b24 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10e      	bne.n	8001960 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d116      	bne.n	800197e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0e8      	b.n	8001b32 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0d9      	b.n	8001b32 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	331b      	adds	r3, #27
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	4413      	add	r3, r2
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0204 	and.w	r2, r3, #4
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10c      	bne.n	80019b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	331b      	adds	r3, #27
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e00b      	b.n	80019ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	331b      	adds	r3, #27
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	331b      	adds	r3, #27
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	085b      	lsrs	r3, r3, #1
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	331b      	adds	r3, #27
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	3304      	adds	r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 020f 	and.w	r2, r3, #15
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	331b      	adds	r3, #27
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	331b      	adds	r3, #27
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0c1b      	lsrs	r3, r3, #16
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0a1a      	lsrs	r2, r3, #8
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0c1a      	lsrs	r2, r3, #16
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3302      	adds	r3, #2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e1a      	lsrs	r2, r3, #24
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0a1a      	lsrs	r2, r3, #8
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3305      	adds	r3, #5
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0c1a      	lsrs	r2, r3, #16
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3306      	adds	r3, #6
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0e1a      	lsrs	r2, r3, #24
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3307      	adds	r3, #7
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0220 	orr.w	r2, r2, #32
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	e007      	b.n	8001b20 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e006      	b.n	8001b32 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d002      	beq.n	8001b5c <HAL_CAN_ActivateNotification+0x1e>
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d109      	bne.n	8001b70 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6959      	ldr	r1, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e006      	b.n	8001b7e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b08a      	sub	sp, #40	; 0x28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d07c      	beq.n	8001cca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d023      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f97d 	bl	8001eec <HAL_CAN_TxMailbox0CompleteCallback>
 8001bf2:	e016      	b.n	8001c22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
 8001c06:	e00c      	b.n	8001c22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	e002      	b.n	8001c22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f983 	bl	8001f28 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d024      	beq.n	8001c76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f95d 	bl	8001f00 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c46:	e016      	b.n	8001c76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	e00c      	b.n	8001c76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	e002      	b.n	8001c76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f963 	bl	8001f3c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d024      	beq.n	8001cca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f93d 	bl	8001f14 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c9a:	e016      	b.n	8001cca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e00c      	b.n	8001cca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	e002      	b.n	8001cca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f943 	bl	8001f50 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2210      	movs	r2, #16
 8001cec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2208      	movs	r2, #8
 8001d08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f934 	bl	8001f78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f91b 	bl	8001f64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00c      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2210      	movs	r2, #16
 8001d50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f916 	bl	8001fa0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8fd 	bl	8001f8c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2210      	movs	r2, #16
 8001dac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f900 	bl	8001fb4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8f9 	bl	8001fc8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d075      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d06c      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d03d      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d038      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e58:	2b30      	cmp	r3, #48	; 0x30
 8001e5a:	d017      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x302>
 8001e5c:	2b30      	cmp	r3, #48	; 0x30
 8001e5e:	d804      	bhi.n	8001e6a <HAL_CAN_IRQHandler+0x2e0>
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d009      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x2ee>
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d00c      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e68:	e024      	b.n	8001eb4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001e6a:	2b50      	cmp	r3, #80	; 0x50
 8001e6c:	d018      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x316>
 8001e6e:	2b60      	cmp	r3, #96	; 0x60
 8001e70:	d01b      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x320>
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d00f      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001e76:	e01d      	b.n	8001eb4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e80:	e018      	b.n	8001eb4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e8a:	e013      	b.n	8001eb4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e94:	e00e      	b.n	8001eb4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e9e:	e009      	b.n	8001eb4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ea8:	e004      	b.n	8001eb4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ec2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f87c 	bl	8001fdc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002222:	e17f      	b.n	8002524 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8171 	beq.w	800251e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d00b      	beq.n	800225c <HAL_GPIO_Init+0x48>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d007      	beq.n	800225c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002250:	2b11      	cmp	r3, #17
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b12      	cmp	r3, #18
 800225a:	d130      	bne.n	80022be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002292:	2201      	movs	r2, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 0201 	and.w	r2, r3, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d118      	bne.n	80022fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x128>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	6939      	ldr	r1, [r7, #16]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80ac 	beq.w	800251e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_GPIO_Init+0x32c>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	4a5d      	ldr	r2, [pc, #372]	; (8002540 <HAL_GPIO_Init+0x32c>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6613      	str	r3, [r2, #96]	; 0x60
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <HAL_GPIO_Init+0x32c>)
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023de:	4a59      	ldr	r2, [pc, #356]	; (8002544 <HAL_GPIO_Init+0x330>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002408:	d025      	beq.n	8002456 <HAL_GPIO_Init+0x242>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_GPIO_Init+0x334>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01f      	beq.n	8002452 <HAL_GPIO_Init+0x23e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_GPIO_Init+0x338>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0x23a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4c      	ldr	r2, [pc, #304]	; (8002550 <HAL_GPIO_Init+0x33c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0x236>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <HAL_GPIO_Init+0x340>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00d      	beq.n	8002446 <HAL_GPIO_Init+0x232>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <HAL_GPIO_Init+0x344>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x22e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a49      	ldr	r2, [pc, #292]	; (800255c <HAL_GPIO_Init+0x348>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_Init+0x22a>
 800243a:	2306      	movs	r3, #6
 800243c:	e00c      	b.n	8002458 <HAL_GPIO_Init+0x244>
 800243e:	2307      	movs	r3, #7
 8002440:	e00a      	b.n	8002458 <HAL_GPIO_Init+0x244>
 8002442:	2305      	movs	r3, #5
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x244>
 8002446:	2304      	movs	r3, #4
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x244>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x244>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x244>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x244>
 8002456:	2300      	movs	r3, #0
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002468:	4936      	ldr	r1, [pc, #216]	; (8002544 <HAL_GPIO_Init+0x330>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002476:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <HAL_GPIO_Init+0x34c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800249a:	4a31      	ldr	r2, [pc, #196]	; (8002560 <HAL_GPIO_Init+0x34c>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_GPIO_Init+0x34c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <HAL_GPIO_Init+0x34c>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_GPIO_Init+0x34c>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_GPIO_Init+0x34c>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_GPIO_Init+0x34c>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002518:	4a11      	ldr	r2, [pc, #68]	; (8002560 <HAL_GPIO_Init+0x34c>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	f47f ae78 	bne.w	8002224 <HAL_GPIO_Init+0x10>
  }
}
 8002534:	bf00      	nop
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40021000 	.word	0x40021000
 8002544:	40010000 	.word	0x40010000
 8002548:	48000400 	.word	0x48000400
 800254c:	48000800 	.word	0x48000800
 8002550:	48000c00 	.word	0x48000c00
 8002554:	48001000 	.word	0x48001000
 8002558:	48001400 	.word	0x48001400
 800255c:	48001800 	.word	0x48001800
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e001      	b.n	8002586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
 80025a0:	4613      	mov	r3, r2
 80025a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f806 	bl	80025f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e081      	b.n	8002720 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe f9cb 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2224      	movs	r2, #36	; 0x24
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800265a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	e006      	b.n	8002692 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002690:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d104      	bne.n	80026a4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	ea42 0103 	orr.w	r1, r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69d9      	ldr	r1, [r3, #28]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1a      	ldr	r2, [r3, #32]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	460b      	mov	r3, r1
 8002736:	817b      	strh	r3, [r7, #10]
 8002738:	4613      	mov	r3, r2
 800273a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b20      	cmp	r3, #32
 8002746:	f040 80da 	bne.w	80028fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_I2C_Master_Transmit+0x30>
 8002754:	2302      	movs	r3, #2
 8002756:	e0d3      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1d8>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fda4 	bl	80012ac <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2319      	movs	r3, #25
 800276c:	2201      	movs	r2, #1
 800276e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f8f0 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0be      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2221      	movs	r2, #33	; 0x21
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	893a      	ldrh	r2, [r7, #8]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2bff      	cmp	r3, #255	; 0xff
 80027b2:	d90e      	bls.n	80027d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	22ff      	movs	r2, #255	; 0xff
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	8979      	ldrh	r1, [r7, #10]
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_I2C_Master_Transmit+0x1e0>)
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f9e6 	bl	8002b9c <I2C_TransferConfig>
 80027d0:	e06c      	b.n	80028ac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	4b48      	ldr	r3, [pc, #288]	; (8002908 <HAL_I2C_Master_Transmit+0x1e0>)
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f9d5 	bl	8002b9c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80027f2:	e05b      	b.n	80028ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f8ed 	bl	80029d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e07b      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d034      	beq.n	80028ac <HAL_I2C_Master_Transmit+0x184>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	d130      	bne.n	80028ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	2200      	movs	r2, #0
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f87f 	bl	8002958 <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e04d      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2bff      	cmp	r3, #255	; 0xff
 800286c:	d90e      	bls.n	800288c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	b2da      	uxtb	r2, r3
 800287a:	8979      	ldrh	r1, [r7, #10]
 800287c:	2300      	movs	r3, #0
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f989 	bl	8002b9c <I2C_TransferConfig>
 800288a:	e00f      	b.n	80028ac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	b2da      	uxtb	r2, r3
 800289c:	8979      	ldrh	r1, [r7, #10]
 800289e:	2300      	movs	r3, #0
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f978 	bl	8002b9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d19e      	bne.n	80027f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f8cc 	bl	8002a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01a      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2220      	movs	r2, #32
 80028d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_I2C_Master_Transmit+0x1e4>)
 80028de:	400b      	ands	r3, r1
 80028e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
  }
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	80002000 	.word	0x80002000
 800290c:	fe00e800 	.word	0xfe00e800

08002910 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d103      	bne.n	800292e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d007      	beq.n	800294c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	619a      	str	r2, [r3, #24]
  }
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002968:	e022      	b.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002970:	d01e      	beq.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe fc9b 	bl	80012ac <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d113      	bne.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e00f      	b.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	429a      	cmp	r2, r3
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d0cd      	beq.n	800296a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e4:	e02c      	b.n	8002a40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f870 	bl	8002ad0 <I2C_IsAcknowledgeFailed>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e02a      	b.n	8002a50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a00:	d01e      	beq.n	8002a40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fc53 	bl	80012ac <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d113      	bne.n	8002a40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d1cb      	bne.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a64:	e028      	b.n	8002ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f830 	bl	8002ad0 <I2C_IsAcknowledgeFailed>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e026      	b.n	8002ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7fe fc17 	bl	80012ac <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d113      	bne.n	8002ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f043 0220 	orr.w	r2, r3, #32
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d1cf      	bne.n	8002a66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d151      	bne.n	8002b8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aea:	e022      	b.n	8002b32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af2:	d01e      	beq.n	8002b32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7fe fbda 	bl	80012ac <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <I2C_IsAcknowledgeFailed+0x3a>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e02e      	b.n	8002b90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d1d5      	bne.n	8002aec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2210      	movs	r2, #16
 8002b46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff fedd 	bl	8002910 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <I2C_IsAcknowledgeFailed+0xc8>)
 8002b62:	400b      	ands	r3, r1
 8002b64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	fe00e800 	.word	0xfe00e800

08002b9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	817b      	strh	r3, [r7, #10]
 8002baa:	4613      	mov	r3, r2
 8002bac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	0d5b      	lsrs	r3, r3, #21
 8002bb8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <I2C_TransferConfig+0x58>)
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	ea02 0103 	and.w	r1, r2, r3
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bcc:	7a7b      	ldrb	r3, [r7, #9]
 8002bce:	041b      	lsls	r3, r3, #16
 8002bd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	03ff63ff 	.word	0x03ff63ff

08002bf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d138      	bne.n	8002c80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e032      	b.n	8002c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d139      	bne.n	8002d18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e033      	b.n	8002d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2224      	movs	r2, #36	; 0x24
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ce0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40007000 	.word	0x40007000

08002d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d52:	d130      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d60:	d038      	beq.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d6a:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2232      	movs	r2, #50	; 0x32
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d88:	e002      	b.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d102      	bne.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f2      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d110      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e00f      	b.n	8002dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc2:	d007      	beq.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dcc:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40007000 	.word	0x40007000
 8002de8:	20000004 	.word	0x20000004
 8002dec:	431bde83 	.word	0x431bde83

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e3d4      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4ba1      	ldr	r3, [pc, #644]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0c:	4b9e      	ldr	r3, [pc, #632]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80e4 	beq.w	8002fec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_RCC_OscConfig+0x4a>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	f040 808b 	bne.w	8002f48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	f040 8087 	bne.w	8002f48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e3a:	4b93      	ldr	r3, [pc, #588]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x62>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e3ac      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1a      	ldr	r2, [r3, #32]
 8002e56:	4b8c      	ldr	r3, [pc, #560]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_RCC_OscConfig+0x7c>
 8002e62:	4b89      	ldr	r3, [pc, #548]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6a:	e005      	b.n	8002e78 <HAL_RCC_OscConfig+0x88>
 8002e6c:	4b86      	ldr	r3, [pc, #536]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d223      	bcs.n	8002ec4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fd3f 	bl	8003904 <RCC_SetFlashLatencyFromMSIRange>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e38d      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e90:	4b7d      	ldr	r3, [pc, #500]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e96:	f043 0308 	orr.w	r3, r3, #8
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b7a      	ldr	r3, [pc, #488]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4977      	ldr	r1, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eae:	4b76      	ldr	r3, [pc, #472]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	4972      	ldr	r1, [pc, #456]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
 8002ec2:	e025      	b.n	8002f10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec4:	4b70      	ldr	r3, [pc, #448]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6f      	ldr	r2, [pc, #444]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002eca:	f043 0308 	orr.w	r3, r3, #8
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	496a      	ldr	r1, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee2:	4b69      	ldr	r3, [pc, #420]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	4965      	ldr	r1, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fcff 	bl	8003904 <RCC_SetFlashLatencyFromMSIRange>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e34d      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f10:	f000 fc36 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8002f14:	4601      	mov	r1, r0
 8002f16:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	4a5a      	ldr	r2, [pc, #360]	; (800308c <HAL_RCC_OscConfig+0x29c>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa21 f303 	lsr.w	r3, r1, r3
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_OscConfig+0x2a0>)
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f30:	4b58      	ldr	r3, [pc, #352]	; (8003094 <HAL_RCC_OscConfig+0x2a4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f96d 	bl	8001214 <HAL_InitTick>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d052      	beq.n	8002fea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	e331      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d032      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f50:	4b4d      	ldr	r3, [pc, #308]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a4c      	ldr	r2, [pc, #304]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f9a6 	bl	80012ac <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f64:	f7fe f9a2 	bl	80012ac <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e31a      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f76:	4b44      	ldr	r3, [pc, #272]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a40      	ldr	r2, [pc, #256]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	493b      	ldr	r1, [pc, #236]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa0:	4b39      	ldr	r3, [pc, #228]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	4936      	ldr	r1, [pc, #216]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	e01a      	b.n	8002fec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a33      	ldr	r2, [pc, #204]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe f973 	bl	80012ac <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fca:	f7fe f96f 	bl	80012ac <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e2e7      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x1da>
 8002fe8:	e000      	b.n	8002fec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d074      	beq.n	80030e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x21a>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d10e      	bne.n	8003022 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d10b      	bne.n	8003022 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d064      	beq.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d160      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e2c4      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x24a>
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a15      	ldr	r2, [pc, #84]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e01d      	b.n	8003076 <HAL_RCC_OscConfig+0x286>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003042:	d10c      	bne.n	800305e <HAL_RCC_OscConfig+0x26e>
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 800304a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e00b      	b.n	8003076 <HAL_RCC_OscConfig+0x286>
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8003064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a06      	ldr	r2, [pc, #24]	; (8003088 <HAL_RCC_OscConfig+0x298>)
 8003070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003074:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01c      	beq.n	80030b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe f915 	bl	80012ac <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003084:	e011      	b.n	80030aa <HAL_RCC_OscConfig+0x2ba>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	08005f10 	.word	0x08005f10
 8003090:	20000004 	.word	0x20000004
 8003094:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe f908 	bl	80012ac <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e280      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	4baf      	ldr	r3, [pc, #700]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x2a8>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe f8f8 	bl	80012ac <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe f8f4 	bl	80012ac <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e26c      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	4ba5      	ldr	r3, [pc, #660]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2d0>
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d060      	beq.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_OscConfig+0x310>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d119      	bne.n	800312e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d116      	bne.n	800312e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003100:	4b99      	ldr	r3, [pc, #612]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_OscConfig+0x328>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e249      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b93      	ldr	r3, [pc, #588]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	4990      	ldr	r1, [pc, #576]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800312c:	e040      	b.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d023      	beq.n	800317e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003136:	4b8c      	ldr	r3, [pc, #560]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a8b      	ldr	r2, [pc, #556]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003142:	f7fe f8b3 	bl	80012ac <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe f8af 	bl	80012ac <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e227      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315c:	4b82      	ldr	r3, [pc, #520]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003168:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	497c      	ldr	r1, [pc, #496]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
 800317c:	e018      	b.n	80031b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317e:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a79      	ldr	r2, [pc, #484]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fe f88f 	bl	80012ac <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003192:	f7fe f88b 	bl	80012ac <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e203      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a4:	4b70      	ldr	r3, [pc, #448]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d03c      	beq.n	8003236 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01c      	beq.n	80031fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c4:	4b68      	ldr	r3, [pc, #416]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	4a67      	ldr	r2, [pc, #412]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe f86a 	bl	80012ac <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe f866 	bl	80012ac <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1de      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ee:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80031f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ef      	beq.n	80031dc <HAL_RCC_OscConfig+0x3ec>
 80031fc:	e01b      	b.n	8003236 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fe f84d 	bl	80012ac <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003216:	f7fe f849 	bl	80012ac <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1c1      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003228:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ef      	bne.n	8003216 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80a6 	beq.w	8003390 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003254:	4b44      	ldr	r3, [pc, #272]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325e:	6593      	str	r3, [r2, #88]	; 0x58
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326c:	2301      	movs	r3, #1
 800326e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003270:	4b3e      	ldr	r3, [pc, #248]	; (800336c <HAL_RCC_OscConfig+0x57c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d118      	bne.n	80032ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327c:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x57c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3a      	ldr	r2, [pc, #232]	; (800336c <HAL_RCC_OscConfig+0x57c>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003288:	f7fe f810 	bl	80012ac <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003290:	f7fe f80c 	bl	80012ac <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e184      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	4b32      	ldr	r3, [pc, #200]	; (800336c <HAL_RCC_OscConfig+0x57c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4d8>
 80032b6:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c6:	e024      	b.n	8003312 <HAL_RCC_OscConfig+0x522>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d110      	bne.n	80032f2 <HAL_RCC_OscConfig+0x502>
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	4a24      	ldr	r2, [pc, #144]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a20      	ldr	r2, [pc, #128]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f0:	e00f      	b.n	8003312 <HAL_RCC_OscConfig+0x522>
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	4a17      	ldr	r2, [pc, #92]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fd ffc7 	bl	80012ac <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fd ffc3 	bl	80012ac <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e139      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_OscConfig+0x578>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ed      	beq.n	8003322 <HAL_RCC_OscConfig+0x532>
 8003346:	e01a      	b.n	800337e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fd ffb0 	bl	80012ac <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800334e:	e00f      	b.n	8003370 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fd ffac 	bl	80012ac <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d906      	bls.n	8003370 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e122      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003370:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e8      	bne.n	8003350 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337e:	7ffb      	ldrb	r3, [r7, #31]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003384:	4b8b      	ldr	r3, [pc, #556]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	4a8a      	ldr	r2, [pc, #552]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 800338a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8108 	beq.w	80035aa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	2b02      	cmp	r3, #2
 80033a0:	f040 80d0 	bne.w	8003544 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033a4:	4b83      	ldr	r3, [pc, #524]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0203 	and.w	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d130      	bne.n	800341a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	3b01      	subs	r3, #1
 80033c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d127      	bne.n	800341a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d11f      	bne.n	800341a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e4:	2a07      	cmp	r2, #7
 80033e6:	bf14      	ite	ne
 80033e8:	2201      	movne	r2, #1
 80033ea:	2200      	moveq	r2, #0
 80033ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d113      	bne.n	800341a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d109      	bne.n	800341a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d06e      	beq.n	80034f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d069      	beq.n	80034f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003420:	4b64      	ldr	r3, [pc, #400]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800342c:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0b7      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800343c:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5c      	ldr	r2, [pc, #368]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003446:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003448:	f7fd ff30 	bl	80012ac <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd ff2c 	bl	80012ac <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0a4      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003462:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <HAL_RCC_OscConfig+0x7c8>)
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800347e:	3a01      	subs	r2, #1
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003488:	0212      	lsls	r2, r2, #8
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003490:	0852      	lsrs	r2, r2, #1
 8003492:	3a01      	subs	r2, #1
 8003494:	0552      	lsls	r2, r2, #21
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800349c:	0852      	lsrs	r2, r2, #1
 800349e:	3a01      	subs	r2, #1
 80034a0:	0652      	lsls	r2, r2, #25
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034a8:	0912      	lsrs	r2, r2, #4
 80034aa:	0452      	lsls	r2, r2, #17
 80034ac:	430a      	orrs	r2, r1
 80034ae:	4941      	ldr	r1, [pc, #260]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3e      	ldr	r2, [pc, #248]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c0:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034cc:	f7fd feee 	bl	80012ac <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fd feea 	bl	80012ac <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e062      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f2:	e05a      	b.n	80035aa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e059      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f8:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d152      	bne.n	80035aa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003504:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800351c:	f7fd fec6 	bl	80012ac <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fd fec2 	bl	80012ac <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e03a      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x734>
 8003542:	e032      	b.n	80035aa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d02d      	beq.n	80035a6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003554:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003568:	f023 0303 	bic.w	r3, r3, #3
 800356c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 8003574:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fd fe95 	bl	80012ac <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7fd fe91 	bl	80012ac <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e009      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_OscConfig+0x7c4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x796>
 80035a4:	e001      	b.n	80035aa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	f99d808c 	.word	0xf99d808c

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0c8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d910      	bls.n	8003600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b63      	ldr	r3, [pc, #396]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	4961      	ldr	r1, [pc, #388]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b5f      	ldr	r3, [pc, #380]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b0      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d04c      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d107      	bne.n	8003624 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003614:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d121      	bne.n	8003664 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e09e      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d107      	bne.n	800363c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d115      	bne.n	8003664 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e092      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003644:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e086      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	4b46      	ldr	r3, [pc, #280]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e07e      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003664:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	493f      	ldr	r1, [pc, #252]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003676:	f7fd fe19 	bl	80012ac <HAL_GetTick>
 800367a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367c:	e00a      	b.n	8003694 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367e:	f7fd fe15 	bl	80012ac <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e066      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 020c 	and.w	r2, r3, #12
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d1eb      	bne.n	800367e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b2:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	492c      	ldr	r1, [pc, #176]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b29      	ldr	r3, [pc, #164]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d210      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b26      	ldr	r3, [pc, #152]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0207 	bic.w	r2, r3, #7
 80036da:	4924      	ldr	r1, [pc, #144]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_RCC_ClockConfig+0x1b0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e036      	b.n	8003762 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4918      	ldr	r1, [pc, #96]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4910      	ldr	r1, [pc, #64]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003732:	f000 f825 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8003736:	4601      	mov	r1, r0
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <HAL_RCC_ClockConfig+0x1b4>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	4a0c      	ldr	r2, [pc, #48]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	5cd3      	ldrb	r3, [r2, r3]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	fa21 f303 	lsr.w	r3, r1, r3
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fd5c 	bl	8001214 <HAL_InitTick>
 800375c:	4603      	mov	r3, r0
 800375e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003760:	7afb      	ldrb	r3, [r7, #11]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40022000 	.word	0x40022000
 8003770:	40021000 	.word	0x40021000
 8003774:	08005f10 	.word	0x08005f10
 8003778:	20000004 	.word	0x20000004
 800377c:	20000008 	.word	0x20000008

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x34>
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d121      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d11e      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037b4:	4b33      	ldr	r3, [pc, #204]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 80037c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e005      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037d0:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037dc:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d102      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_GetSysClockFreq+0x10c>)
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e004      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d101      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_RCC_GetSysClockFreq+0x110>)
 8003806:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d133      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0xa4>
 800381e:	2b03      	cmp	r3, #3
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0xaa>
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003826:	617b      	str	r3, [r7, #20]
      break;
 8003828:	e005      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCC_GetSysClockFreq+0x110>)
 800382c:	617b      	str	r3, [r7, #20]
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	617b      	str	r3, [r7, #20]
      break;
 8003834:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	3301      	adds	r3, #1
 8003842:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	fb02 f203 	mul.w	r2, r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_GetSysClockFreq+0x104>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	0e5b      	lsrs	r3, r3, #25
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003876:	69bb      	ldr	r3, [r7, #24]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3724      	adds	r7, #36	; 0x24
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40021000 	.word	0x40021000
 8003888:	08005f28 	.word	0x08005f28
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000004 	.word	0x20000004

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4601      	mov	r1, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038c2:	5cd3      	ldrb	r3, [r2, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08005f20 	.word	0x08005f20

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038dc:	f7ff ffda 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038e0:	4601      	mov	r1, r0
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0adb      	lsrs	r3, r3, #11
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	08005f20 	.word	0x08005f20

08003904 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800391c:	f7ff fa04 	bl	8002d28 <HAL_PWREx_GetVoltageRange>
 8003920:	6178      	str	r0, [r7, #20]
 8003922:	e014      	b.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	4a24      	ldr	r2, [pc, #144]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	; 0x58
 8003930:	4b22      	ldr	r3, [pc, #136]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800393c:	f7ff f9f4 	bl	8002d28 <HAL_PWREx_GetVoltageRange>
 8003940:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003954:	d10b      	bne.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d919      	bls.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2ba0      	cmp	r3, #160	; 0xa0
 8003960:	d902      	bls.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003962:	2302      	movs	r3, #2
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e013      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003968:	2301      	movs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	e010      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d902      	bls.n	800397a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003974:	2303      	movs	r3, #3
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	e00a      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d102      	bne.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003980:	2302      	movs	r3, #2
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	e004      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b70      	cmp	r3, #112	; 0x70
 800398a:	d101      	bne.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800398c:	2301      	movs	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 0207 	bic.w	r2, r3, #7
 8003998:	4909      	ldr	r1, [pc, #36]	; (80039c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40022000 	.word	0x40022000

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d0:	2300      	movs	r3, #0
 80039d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e8:	d01c      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80039ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ee:	d802      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00e      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80039f4:	e01f      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80039f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039fa:	d003      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80039fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a00:	d01c      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003a02:	e018      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a04:	4b85      	ldr	r3, [pc, #532]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a84      	ldr	r2, [pc, #528]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a10:	e015      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fab9 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a22:	e00c      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3320      	adds	r3, #32
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fba0 	bl	8004170 <RCCEx_PLLSAI2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a34:	e003      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	74fb      	strb	r3, [r7, #19]
      break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a44:	4b75      	ldr	r3, [pc, #468]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a52:	4972      	ldr	r1, [pc, #456]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a5a:	e001      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d03f      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d01c      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a7a:	d802      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003a80:	e01f      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a86:	d003      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003a88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a8c:	d01c      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a90:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a61      	ldr	r2, [pc, #388]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a9c:	e015      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fa73 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aae:	e00c      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fb5a 	bl	8004170 <RCCEx_PLLSAI2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ad0:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	494f      	ldr	r1, [pc, #316]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a0 	beq.w	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b14:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	4a40      	ldr	r2, [pc, #256]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b20:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b30:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fbb6 	bl	80012ac <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b42:	e009      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fd fbb2 	bl	80012ac <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d902      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	74fb      	strb	r3, [r7, #19]
        break;
 8003b56:	e005      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d15c      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b6a:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01f      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb4:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fd fb71 	bl	80012ac <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fd fb6d 	bl	80012ac <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	74fb      	strb	r3, [r7, #19]
            break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ec      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0a:	4904      	ldr	r1, [pc, #16]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c12:	e009      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c28:	7c7b      	ldrb	r3, [r7, #17]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2e:	4b9e      	ldr	r3, [pc, #632]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	4a9d      	ldr	r2, [pc, #628]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c46:	4b98      	ldr	r3, [pc, #608]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f023 0203 	bic.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	4994      	ldr	r1, [pc, #592]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c68:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 020c 	bic.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	498c      	ldr	r1, [pc, #560]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c8a:	4b87      	ldr	r3, [pc, #540]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	4983      	ldr	r1, [pc, #524]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cac:	4b7e      	ldr	r3, [pc, #504]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	497b      	ldr	r1, [pc, #492]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cdc:	4972      	ldr	r1, [pc, #456]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	496a      	ldr	r1, [pc, #424]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	4961      	ldr	r1, [pc, #388]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d34:	4b5c      	ldr	r3, [pc, #368]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	4959      	ldr	r1, [pc, #356]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d56:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	4950      	ldr	r1, [pc, #320]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	4948      	ldr	r1, [pc, #288]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9a:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	493f      	ldr	r1, [pc, #252]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d028      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dbc:	4b3a      	ldr	r3, [pc, #232]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dca:	4937      	ldr	r1, [pc, #220]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dda:	d106      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a31      	ldr	r2, [pc, #196]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de6:	60d3      	str	r3, [r2, #12]
 8003de8:	e011      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df2:	d10c      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f8c8 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e44:	60d3      	str	r3, [r2, #12]
 8003e46:	e011      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f899 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e96:	d109      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a02      	ldr	r2, [pc, #8]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea2:	60d3      	str	r3, [r2, #12]
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f867 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02f      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eea:	4928      	ldr	r1, [pc, #160]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f844 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d014      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	74bb      	strb	r3, [r7, #18]
 8003f16:	e011      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3320      	adds	r3, #32
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f921 	bl	8004170 <RCCEx_PLLSAI2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f56:	490d      	ldr	r1, [pc, #52]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7a:	4904      	ldr	r1, [pc, #16]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000

08003f90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f9e:	4b73      	ldr	r3, [pc, #460]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003faa:	4b70      	ldr	r3, [pc, #448]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d10d      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fc2:	4b6a      	ldr	r3, [pc, #424]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d044      	beq.n	8004060 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e041      	b.n	8004060 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d00c      	beq.n	8003ffe <RCCEx_PLLSAI1_Config+0x6e>
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d013      	beq.n	8004010 <RCCEx_PLLSAI1_Config+0x80>
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d120      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fec:	4b5f      	ldr	r3, [pc, #380]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11d      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ffc:	e01a      	b.n	8004034 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400e:	e013      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004010:	4b56      	ldr	r3, [pc, #344]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10f      	bne.n	800403c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800401c:	4b53      	ldr	r3, [pc, #332]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800402c:	e006      	b.n	800403c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      break;
 8004032:	e004      	b.n	800403e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800403c:	bf00      	nop
    }

    if(status == HAL_OK)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004044:	4b49      	ldr	r3, [pc, #292]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	3b01      	subs	r3, #1
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	430b      	orrs	r3, r1
 800405a:	4944      	ldr	r1, [pc, #272]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d17d      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a40      	ldr	r2, [pc, #256]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 800406c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004072:	f7fd f91b 	bl	80012ac <HAL_GetTick>
 8004076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004078:	e009      	b.n	800408e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800407a:	f7fd f917 	bl	80012ac <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d902      	bls.n	800408e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	73fb      	strb	r3, [r7, #15]
        break;
 800408c:	e005      	b.n	800409a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800408e:	4b37      	ldr	r3, [pc, #220]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ef      	bne.n	800407a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d160      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d111      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6892      	ldr	r2, [r2, #8]
 80040b6:	0211      	lsls	r1, r2, #8
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68d2      	ldr	r2, [r2, #12]
 80040bc:	0912      	lsrs	r2, r2, #4
 80040be:	0452      	lsls	r2, r2, #17
 80040c0:	430a      	orrs	r2, r1
 80040c2:	492a      	ldr	r1, [pc, #168]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	610b      	str	r3, [r1, #16]
 80040c8:	e027      	b.n	800411a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d112      	bne.n	80040f6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040d0:	4b26      	ldr	r3, [pc, #152]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6892      	ldr	r2, [r2, #8]
 80040e0:	0211      	lsls	r1, r2, #8
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6912      	ldr	r2, [r2, #16]
 80040e6:	0852      	lsrs	r2, r2, #1
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0552      	lsls	r2, r2, #21
 80040ec:	430a      	orrs	r2, r1
 80040ee:	491f      	ldr	r1, [pc, #124]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	610b      	str	r3, [r1, #16]
 80040f4:	e011      	b.n	800411a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6892      	ldr	r2, [r2, #8]
 8004106:	0211      	lsls	r1, r2, #8
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6952      	ldr	r2, [r2, #20]
 800410c:	0852      	lsrs	r2, r2, #1
 800410e:	3a01      	subs	r2, #1
 8004110:	0652      	lsls	r2, r2, #25
 8004112:	430a      	orrs	r2, r1
 8004114:	4915      	ldr	r1, [pc, #84]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004124:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd f8c1 	bl	80012ac <HAL_GetTick>
 800412a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800412c:	e009      	b.n	8004142 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800412e:	f7fd f8bd 	bl	80012ac <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d902      	bls.n	8004142 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	73fb      	strb	r3, [r7, #15]
          break;
 8004140:	e005      	b.n	800414e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0ef      	beq.n	800412e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d106      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <RCCEx_PLLSAI1_Config+0x1dc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000

08004170 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417e:	4b68      	ldr	r3, [pc, #416]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800418a:	4b65      	ldr	r3, [pc, #404]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0203 	and.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d10d      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
       ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041a2:	4b5f      	ldr	r3, [pc, #380]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
       ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d044      	beq.n	8004240 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e041      	b.n	8004240 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d00c      	beq.n	80041de <RCCEx_PLLSAI2_Config+0x6e>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d013      	beq.n	80041f0 <RCCEx_PLLSAI2_Config+0x80>
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d120      	bne.n	800420e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041cc:	4b54      	ldr	r3, [pc, #336]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11d      	bne.n	8004214 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041dc:	e01a      	b.n	8004214 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041de:	4b50      	ldr	r3, [pc, #320]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ee:	e013      	b.n	8004218 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f0:	4b4b      	ldr	r3, [pc, #300]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10f      	bne.n	800421c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041fc:	4b48      	ldr	r3, [pc, #288]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800420c:	e006      	b.n	800421c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
      break;
 8004212:	e004      	b.n	800421e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800421c:	bf00      	nop
    }

    if(status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004224:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	3b01      	subs	r3, #1
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	430b      	orrs	r3, r1
 800423a:	4939      	ldr	r1, [pc, #228]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d167      	bne.n	8004316 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004246:	4b36      	ldr	r3, [pc, #216]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a35      	ldr	r2, [pc, #212]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 800424c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004252:	f7fd f82b 	bl	80012ac <HAL_GetTick>
 8004256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004258:	e009      	b.n	800426e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800425a:	f7fd f827 	bl	80012ac <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d902      	bls.n	800426e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	73fb      	strb	r3, [r7, #15]
        break;
 800426c:	e005      	b.n	800427a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800426e:	4b2c      	ldr	r3, [pc, #176]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ef      	bne.n	800425a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d14a      	bne.n	8004316 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d111      	bne.n	80042aa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004286:	4b26      	ldr	r3, [pc, #152]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800428e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6892      	ldr	r2, [r2, #8]
 8004296:	0211      	lsls	r1, r2, #8
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68d2      	ldr	r2, [r2, #12]
 800429c:	0912      	lsrs	r2, r2, #4
 800429e:	0452      	lsls	r2, r2, #17
 80042a0:	430a      	orrs	r2, r1
 80042a2:	491f      	ldr	r1, [pc, #124]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	614b      	str	r3, [r1, #20]
 80042a8:	e011      	b.n	80042ce <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6892      	ldr	r2, [r2, #8]
 80042ba:	0211      	lsls	r1, r2, #8
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6912      	ldr	r2, [r2, #16]
 80042c0:	0852      	lsrs	r2, r2, #1
 80042c2:	3a01      	subs	r2, #1
 80042c4:	0652      	lsls	r2, r2, #25
 80042c6:	430a      	orrs	r2, r1
 80042c8:	4915      	ldr	r1, [pc, #84]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7fc ffe7 	bl	80012ac <HAL_GetTick>
 80042de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e0:	e009      	b.n	80042f6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042e2:	f7fc ffe3 	bl	80012ac <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d902      	bls.n	80042f6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	73fb      	strb	r3, [r7, #15]
          break;
 80042f4:	e005      	b.n	8004302 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ef      	beq.n	80042e2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	4903      	ldr	r1, [pc, #12]	; (8004320 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000

08004324 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d06c      	beq.n	8004410 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc fd4e 	bl	8000dec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	22ca      	movs	r2, #202	; 0xca
 800435e:	625a      	str	r2, [r3, #36]	; 0x24
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2253      	movs	r2, #83	; 0x53
 8004366:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f87c 	bl	8004466 <RTC_EnterInitMode>
 800436e:	4603      	mov	r3, r0
 8004370:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d14b      	bne.n	8004410 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68d2      	ldr	r2, [r2, #12]
 80043b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6919      	ldr	r1, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	041a      	lsls	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f87f 	bl	80044cc <RTC_ExitInitMode>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11b      	bne.n	8004410 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0203 	bic.w	r2, r2, #3
 80043e6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004430:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004432:	f7fc ff3b 	bl	80012ac <HAL_GetTick>
 8004436:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004438:	e009      	b.n	800444e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800443a:	f7fc ff37 	bl	80012ac <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004448:	d901      	bls.n	800444e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e007      	b.n	800445e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ee      	beq.n	800443a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d120      	bne.n	80044c2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004488:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800448a:	f7fc ff0f 	bl	80012ac <HAL_GetTick>
 800448e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004490:	e00d      	b.n	80044ae <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004492:	f7fc ff0b 	bl	80012ac <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a0:	d905      	bls.n	80044ae <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2203      	movs	r2, #3
 80044aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <RTC_EnterInitMode+0x5c>
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d1e7      	bne.n	8004492 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <RTC_ExitInitMode+0x78>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <RTC_ExitInitMode+0x78>)
 80044de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <RTC_ExitInitMode+0x78>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10c      	bne.n	800450a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff92 	bl	800441a <HAL_RTC_WaitForSynchro>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01e      	beq.n	800453a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2203      	movs	r2, #3
 8004500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e017      	b.n	800453a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <RTC_ExitInitMode+0x78>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <RTC_ExitInitMode+0x78>)
 8004510:	f023 0320 	bic.w	r3, r3, #32
 8004514:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ff7f 	bl	800441a <HAL_RTC_WaitForSynchro>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2203      	movs	r2, #3
 8004526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <RTC_ExitInitMode+0x78>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4a04      	ldr	r2, [pc, #16]	; (8004544 <RTC_ExitInitMode+0x78>)
 8004534:	f043 0320 	orr.w	r3, r3, #32
 8004538:	6093      	str	r3, [r2, #8]
  }

  return status;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40002800 	.word	0x40002800

08004548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e01d      	b.n	8004596 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc fd74 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 f8c2 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_ConfigClockSource+0x18>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e0a8      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x16a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d067      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x124>
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d80b      	bhi.n	800460e <HAL_TIM_ConfigClockSource+0x70>
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d073      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x144>
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d802      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x66>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d06f      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004602:	e078      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004604:	2b20      	cmp	r3, #32
 8004606:	d06c      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x144>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d06a      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800460c:	e073      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800460e:	2b70      	cmp	r3, #112	; 0x70
 8004610:	d00d      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x90>
 8004612:	2b70      	cmp	r3, #112	; 0x70
 8004614:	d804      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x82>
 8004616:	2b50      	cmp	r3, #80	; 0x50
 8004618:	d033      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0xe4>
 800461a:	2b60      	cmp	r3, #96	; 0x60
 800461c:	d041      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800461e:	e06a      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004624:	d066      	beq.n	80046f4 <HAL_TIM_ConfigClockSource+0x156>
 8004626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462a:	d017      	beq.n	800465c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800462c:	e063      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6899      	ldr	r1, [r3, #8]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f000 f97b 	bl	8004938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004650:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	609a      	str	r2, [r3, #8]
      break;
 800465a:	e04c      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6899      	ldr	r1, [r3, #8]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f000 f964 	bl	8004938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800467e:	609a      	str	r2, [r3, #8]
      break;
 8004680:	e039      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	f000 f8d8 	bl	8004844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2150      	movs	r1, #80	; 0x50
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f931 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80046a0:	e029      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 f8f7 	bl	80048a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2160      	movs	r1, #96	; 0x60
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f921 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80046c0:	e019      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f000 f8b8 	bl	8004844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2140      	movs	r1, #64	; 0x40
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f911 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80046e0:	e009      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f000 f908 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80046f2:	e000      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80046f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a40      	ldr	r2, [pc, #256]	; (8004824 <TIM_Base_SetConfig+0x114>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d00f      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3d      	ldr	r2, [pc, #244]	; (8004828 <TIM_Base_SetConfig+0x118>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00b      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a3c      	ldr	r2, [pc, #240]	; (800482c <TIM_Base_SetConfig+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d007      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a3b      	ldr	r2, [pc, #236]	; (8004830 <TIM_Base_SetConfig+0x120>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a3a      	ldr	r2, [pc, #232]	; (8004834 <TIM_Base_SetConfig+0x124>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d108      	bne.n	8004762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2f      	ldr	r2, [pc, #188]	; (8004824 <TIM_Base_SetConfig+0x114>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01f      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <TIM_Base_SetConfig+0x118>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2b      	ldr	r2, [pc, #172]	; (800482c <TIM_Base_SetConfig+0x11c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <TIM_Base_SetConfig+0x120>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <TIM_Base_SetConfig+0x124>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a28      	ldr	r2, [pc, #160]	; (8004838 <TIM_Base_SetConfig+0x128>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <TIM_Base_SetConfig+0x12c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a26      	ldr	r2, [pc, #152]	; (8004840 <TIM_Base_SetConfig+0x130>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <TIM_Base_SetConfig+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <TIM_Base_SetConfig+0x128>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a10      	ldr	r2, [pc, #64]	; (800483c <TIM_Base_SetConfig+0x12c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <TIM_Base_SetConfig+0x130>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	615a      	str	r2, [r3, #20]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40013400 	.word	0x40013400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 030a 	bic.w	r3, r3, #10
 8004880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e068      	b.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2e      	ldr	r2, [pc, #184]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2d      	ldr	r2, [pc, #180]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d018      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10c      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40013400 	.word	0x40013400
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	40014000 	.word	0x40014000

08004a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e040      	b.n	8004b1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fb26 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	; 0x24
 8004ab4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8c0 	bl	8004c4c <UART_SetConfig>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e022      	b.n	8004b1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fc26 	bl	8005330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fcad 	bl	8005474 <UART_CheckIdleState>
 8004b1a:	4603      	mov	r3, r0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	f040 8081 	bne.w	8004c40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_UART_Transmit+0x26>
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e079      	b.n	8004c42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Transmit+0x38>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e072      	b.n	8004c42 <HAL_UART_Transmit+0x11e>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2221      	movs	r2, #33	; 0x21
 8004b6e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b70:	f7fc fb9c 	bl	80012ac <HAL_GetTick>
 8004b74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	88fa      	ldrh	r2, [r7, #6]
 8004b7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8e:	d108      	bne.n	8004ba2 <HAL_UART_Transmit+0x7e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e003      	b.n	8004baa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004bb2:	e02d      	b.n	8004c10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fc9d 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e039      	b.n	8004c42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	881a      	ldrh	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be0:	b292      	uxth	r2, r2
 8004be2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	3302      	adds	r3, #2
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	e008      	b.n	8004bfe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	b292      	uxth	r2, r2
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1cb      	bne.n	8004bb4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fc69 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e005      	b.n	8004c42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c50:	b08a      	sub	sp, #40	; 0x28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4bb8      	ldr	r3, [pc, #736]	; (8004f64 <UART_SetConfig+0x318>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4aae      	ldr	r2, [pc, #696]	; (8004f68 <UART_SetConfig+0x31c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4aa5      	ldr	r2, [pc, #660]	; (8004f6c <UART_SetConfig+0x320>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d126      	bne.n	8004d2a <UART_SetConfig+0xde>
 8004cdc:	4ba4      	ldr	r3, [pc, #656]	; (8004f70 <UART_SetConfig+0x324>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d81a      	bhi.n	8004d20 <UART_SetConfig+0xd4>
 8004cea:	a201      	add	r2, pc, #4	; (adr r2, 8004cf0 <UART_SetConfig+0xa4>)
 8004cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e105      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e101      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d10:	2304      	movs	r3, #4
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e0fd      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e0f9      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d20:	2310      	movs	r3, #16
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	bf00      	nop
 8004d28:	e0f4      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a91      	ldr	r2, [pc, #580]	; (8004f74 <UART_SetConfig+0x328>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d138      	bne.n	8004da6 <UART_SetConfig+0x15a>
 8004d34:	4b8e      	ldr	r3, [pc, #568]	; (8004f70 <UART_SetConfig+0x324>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d82c      	bhi.n	8004d9c <UART_SetConfig+0x150>
 8004d42:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0xfc>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d9d 	.word	0x08004d9d
 8004d50:	08004d9d 	.word	0x08004d9d
 8004d54:	08004d9d 	.word	0x08004d9d
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004d9d 	.word	0x08004d9d
 8004d60:	08004d9d 	.word	0x08004d9d
 8004d64:	08004d9d 	.word	0x08004d9d
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	08004d9d 	.word	0x08004d9d
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e0c7      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d84:	2302      	movs	r3, #2
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e0c3      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e0bf      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d94:	2308      	movs	r3, #8
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e0bb      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	bf00      	nop
 8004da4:	e0b6      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a73      	ldr	r2, [pc, #460]	; (8004f78 <UART_SetConfig+0x32c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d125      	bne.n	8004dfc <UART_SetConfig+0x1b0>
 8004db0:	4b6f      	ldr	r3, [pc, #444]	; (8004f70 <UART_SetConfig+0x324>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d011      	beq.n	8004de2 <UART_SetConfig+0x196>
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d802      	bhi.n	8004dc8 <UART_SetConfig+0x17c>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <UART_SetConfig+0x186>
 8004dc6:	e014      	b.n	8004df2 <UART_SetConfig+0x1a6>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d006      	beq.n	8004dda <UART_SetConfig+0x18e>
 8004dcc:	2b30      	cmp	r3, #48	; 0x30
 8004dce:	d00c      	beq.n	8004dea <UART_SetConfig+0x19e>
 8004dd0:	e00f      	b.n	8004df2 <UART_SetConfig+0x1a6>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd8:	e09c      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de0:	e098      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004de2:	2304      	movs	r3, #4
 8004de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de8:	e094      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004dea:	2308      	movs	r3, #8
 8004dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df0:	e090      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004df2:	2310      	movs	r3, #16
 8004df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df8:	bf00      	nop
 8004dfa:	e08b      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5e      	ldr	r2, [pc, #376]	; (8004f7c <UART_SetConfig+0x330>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d125      	bne.n	8004e52 <UART_SetConfig+0x206>
 8004e06:	4b5a      	ldr	r3, [pc, #360]	; (8004f70 <UART_SetConfig+0x324>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d011      	beq.n	8004e38 <UART_SetConfig+0x1ec>
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d802      	bhi.n	8004e1e <UART_SetConfig+0x1d2>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <UART_SetConfig+0x1dc>
 8004e1c:	e014      	b.n	8004e48 <UART_SetConfig+0x1fc>
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d006      	beq.n	8004e30 <UART_SetConfig+0x1e4>
 8004e22:	2bc0      	cmp	r3, #192	; 0xc0
 8004e24:	d00c      	beq.n	8004e40 <UART_SetConfig+0x1f4>
 8004e26:	e00f      	b.n	8004e48 <UART_SetConfig+0x1fc>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e071      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e06d      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e069      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e065      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	bf00      	nop
 8004e50:	e060      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4a      	ldr	r2, [pc, #296]	; (8004f80 <UART_SetConfig+0x334>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d129      	bne.n	8004eb0 <UART_SetConfig+0x264>
 8004e5c:	4b44      	ldr	r3, [pc, #272]	; (8004f70 <UART_SetConfig+0x324>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6a:	d014      	beq.n	8004e96 <UART_SetConfig+0x24a>
 8004e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e70:	d802      	bhi.n	8004e78 <UART_SetConfig+0x22c>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <UART_SetConfig+0x23a>
 8004e76:	e016      	b.n	8004ea6 <UART_SetConfig+0x25a>
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7c:	d007      	beq.n	8004e8e <UART_SetConfig+0x242>
 8004e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e82:	d00c      	beq.n	8004e9e <UART_SetConfig+0x252>
 8004e84:	e00f      	b.n	8004ea6 <UART_SetConfig+0x25a>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8c:	e042      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e94:	e03e      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e96:	2304      	movs	r3, #4
 8004e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9c:	e03a      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea4:	e036      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eac:	bf00      	nop
 8004eae:	e031      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <UART_SetConfig+0x31c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d129      	bne.n	8004f0e <UART_SetConfig+0x2c2>
 8004eba:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <UART_SetConfig+0x324>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec8:	d014      	beq.n	8004ef4 <UART_SetConfig+0x2a8>
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ece:	d802      	bhi.n	8004ed6 <UART_SetConfig+0x28a>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <UART_SetConfig+0x298>
 8004ed4:	e016      	b.n	8004f04 <UART_SetConfig+0x2b8>
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eda:	d007      	beq.n	8004eec <UART_SetConfig+0x2a0>
 8004edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee0:	d00c      	beq.n	8004efc <UART_SetConfig+0x2b0>
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x2b8>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e013      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e00f      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e00b      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e007      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <UART_SetConfig+0x2c8>
 8004f0e:	2310      	movs	r3, #16
 8004f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <UART_SetConfig+0x31c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f040 80fe 	bne.w	800511c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d837      	bhi.n	8004f98 <UART_SetConfig+0x34c>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x2e4>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f99 	.word	0x08004f99
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f99 	.word	0x08004f99
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004f99 	.word	0x08004f99
 8004f4c:	08004f99 	.word	0x08004f99
 8004f50:	08004f91 	.word	0x08004f91
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004f54:	f7fe fcaa 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8004f58:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f5a:	e020      	b.n	8004f9e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <UART_SetConfig+0x338>)
 8004f5e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f60:	e01d      	b.n	8004f9e <UART_SetConfig+0x352>
 8004f62:	bf00      	nop
 8004f64:	efff69f3 	.word	0xefff69f3
 8004f68:	40008000 	.word	0x40008000
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40004400 	.word	0x40004400
 8004f78:	40004800 	.word	0x40004800
 8004f7c:	40004c00 	.word	0x40004c00
 8004f80:	40005000 	.word	0x40005000
 8004f84:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004f88:	f7fe fbfa 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004f8c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f8e:	e006      	b.n	8004f9e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f94:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f96:	e002      	b.n	8004f9e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	76fb      	strb	r3, [r7, #27]
        break;
 8004f9c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 81b9 	beq.w	8005318 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d305      	bcc.n	8004fc2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d902      	bls.n	8004fc8 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	76fb      	strb	r3, [r7, #27]
 8004fc6:	e1a7      	b.n	8005318 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	f200 8092 	bhi.w	80050f6 <UART_SetConfig+0x4aa>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x38c>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	080050f7 	.word	0x080050f7
 8004fe0:	0800504b 	.word	0x0800504b
 8004fe4:	080050f7 	.word	0x080050f7
 8004fe8:	0800507f 	.word	0x0800507f
 8004fec:	080050f7 	.word	0x080050f7
 8004ff0:	080050f7 	.word	0x080050f7
 8004ff4:	080050f7 	.word	0x080050f7
 8004ff8:	080050cd 	.word	0x080050cd
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004ffc:	f7fe fc56 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005000:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4619      	mov	r1, r3
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	f04f 0400 	mov.w	r4, #0
 8005012:	0214      	lsls	r4, r2, #8
 8005014:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005018:	020b      	lsls	r3, r1, #8
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6852      	ldr	r2, [r2, #4]
 800501e:	0852      	lsrs	r2, r2, #1
 8005020:	4611      	mov	r1, r2
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	eb13 0b01 	adds.w	fp, r3, r1
 800502a:	eb44 0c02 	adc.w	ip, r4, r2
 800502e:	4658      	mov	r0, fp
 8005030:	4661      	mov	r1, ip
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f04f 0400 	mov.w	r4, #0
 800503a:	461a      	mov	r2, r3
 800503c:	4623      	mov	r3, r4
 800503e:	f7fb f91f 	bl	8000280 <__aeabi_uldivmod>
 8005042:	4603      	mov	r3, r0
 8005044:	460c      	mov	r4, r1
 8005046:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005048:	e058      	b.n	80050fc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	f04f 0400 	mov.w	r4, #0
 8005054:	49ae      	ldr	r1, [pc, #696]	; (8005310 <UART_SetConfig+0x6c4>)
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	eb13 0b01 	adds.w	fp, r3, r1
 800505e:	eb44 0c02 	adc.w	ip, r4, r2
 8005062:	4658      	mov	r0, fp
 8005064:	4661      	mov	r1, ip
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f04f 0400 	mov.w	r4, #0
 800506e:	461a      	mov	r2, r3
 8005070:	4623      	mov	r3, r4
 8005072:	f7fb f905 	bl	8000280 <__aeabi_uldivmod>
 8005076:	4603      	mov	r3, r0
 8005078:	460c      	mov	r4, r1
 800507a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800507c:	e03e      	b.n	80050fc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fe fb7f 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8005082:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4619      	mov	r1, r3
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	f04f 0400 	mov.w	r4, #0
 8005094:	0214      	lsls	r4, r2, #8
 8005096:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800509a:	020b      	lsls	r3, r1, #8
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6852      	ldr	r2, [r2, #4]
 80050a0:	0852      	lsrs	r2, r2, #1
 80050a2:	4611      	mov	r1, r2
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	eb13 0b01 	adds.w	fp, r3, r1
 80050ac:	eb44 0c02 	adc.w	ip, r4, r2
 80050b0:	4658      	mov	r0, fp
 80050b2:	4661      	mov	r1, ip
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	461a      	mov	r2, r3
 80050be:	4623      	mov	r3, r4
 80050c0:	f7fb f8de 	bl	8000280 <__aeabi_uldivmod>
 80050c4:	4603      	mov	r3, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80050ca:	e017      	b.n	80050fc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	f04f 0400 	mov.w	r4, #0
 80050d6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80050da:	f144 0100 	adc.w	r1, r4, #0
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	461a      	mov	r2, r3
 80050e8:	4623      	mov	r3, r4
 80050ea:	f7fb f8c9 	bl	8000280 <__aeabi_uldivmod>
 80050ee:	4603      	mov	r3, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80050f4:	e002      	b.n	80050fc <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	76fb      	strb	r3, [r7, #27]
            break;
 80050fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005102:	d308      	bcc.n	8005116 <UART_SetConfig+0x4ca>
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510a:	d204      	bcs.n	8005116 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	60da      	str	r2, [r3, #12]
 8005114:	e100      	b.n	8005318 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	76fb      	strb	r3, [r7, #27]
 800511a:	e0fd      	b.n	8005318 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005124:	f040 8084 	bne.w	8005230 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800512c:	2b08      	cmp	r3, #8
 800512e:	d85f      	bhi.n	80051f0 <UART_SetConfig+0x5a4>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x4ec>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800515d 	.word	0x0800515d
 800513c:	0800517d 	.word	0x0800517d
 8005140:	0800519d 	.word	0x0800519d
 8005144:	080051f1 	.word	0x080051f1
 8005148:	080051b9 	.word	0x080051b9
 800514c:	080051f1 	.word	0x080051f1
 8005150:	080051f1 	.word	0x080051f1
 8005154:	080051f1 	.word	0x080051f1
 8005158:	080051d9 	.word	0x080051d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fe fba6 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005160:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	005a      	lsls	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	441a      	add	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	b29b      	uxth	r3, r3
 8005178:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800517a:	e03c      	b.n	80051f6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800517c:	f7fe fbac 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005180:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	005a      	lsls	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	441a      	add	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	b29b      	uxth	r3, r3
 8005198:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800519a:	e02c      	b.n	80051f6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80051a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6852      	ldr	r2, [r2, #4]
 80051ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051b6:	e01e      	b.n	80051f6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b8:	f7fe fae2 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80051bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	005a      	lsls	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	441a      	add	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051d6:	e00e      	b.n	80051f6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051ee:	e002      	b.n	80051f6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	76fb      	strb	r3, [r7, #27]
        break;
 80051f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d916      	bls.n	800522a <UART_SetConfig+0x5de>
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d212      	bcs.n	800522a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	b29b      	uxth	r3, r3
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	b29a      	uxth	r2, r3
 800521a:	89fb      	ldrh	r3, [r7, #14]
 800521c:	4313      	orrs	r3, r2
 800521e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	89fa      	ldrh	r2, [r7, #14]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	e076      	b.n	8005318 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	76fb      	strb	r3, [r7, #27]
 800522e:	e073      	b.n	8005318 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005234:	2b08      	cmp	r3, #8
 8005236:	d85c      	bhi.n	80052f2 <UART_SetConfig+0x6a6>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x5f4>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005265 	.word	0x08005265
 8005244:	08005283 	.word	0x08005283
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052f3 	.word	0x080052f3
 8005250:	080052bd 	.word	0x080052bd
 8005254:	080052f3 	.word	0x080052f3
 8005258:	080052f3 	.word	0x080052f3
 800525c:	080052f3 	.word	0x080052f3
 8005260:	080052db 	.word	0x080052db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fe fb22 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005268:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	085a      	lsrs	r2, r3, #1
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	441a      	add	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	b29b      	uxth	r3, r3
 800527e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005280:	e03a      	b.n	80052f8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005282:	f7fe fb29 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005286:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	085a      	lsrs	r2, r3, #1
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800529e:	e02b      	b.n	80052f8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80052aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6852      	ldr	r2, [r2, #4]
 80052b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052ba:	e01d      	b.n	80052f8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052bc:	f7fe fa60 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80052c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	085a      	lsrs	r2, r3, #1
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	441a      	add	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052d8:	e00e      	b.n	80052f8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052f0:	e002      	b.n	80052f8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	76fb      	strb	r3, [r7, #27]
        break;
 80052f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d90a      	bls.n	8005314 <UART_SetConfig+0x6c8>
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005304:	d206      	bcs.n	8005314 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e003      	b.n	8005318 <UART_SetConfig+0x6cc>
 8005310:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005324:	7efb      	ldrb	r3, [r7, #27]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3728      	adds	r7, #40	; 0x28
 800532a:	46bd      	mov	sp, r7
 800532c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d10a      	bne.n	8005446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005482:	f7fb ff13 	bl	80012ac <HAL_GetTick>
 8005486:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d10e      	bne.n	80054b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005496:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f82a 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e020      	b.n	80054f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d10e      	bne.n	80054e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f814 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e00a      	b.n	80054f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550e:	e05d      	b.n	80055cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005516:	d059      	beq.n	80055cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005518:	f7fb fec8 	bl	80012ac <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	429a      	cmp	r2, r3
 8005526:	d302      	bcc.n	800552e <UART_WaitOnFlagUntilTimeout+0x30>
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d11b      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800553c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e042      	b.n	80055ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d02b      	beq.n	80055cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005582:	d123      	bne.n	80055cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800558c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800559c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e00f      	b.n	80055ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d092      	beq.n	8005510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <__errno>:
 80055f4:	4b01      	ldr	r3, [pc, #4]	; (80055fc <__errno+0x8>)
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000010 	.word	0x20000010

08005600 <__libc_init_array>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	4e0d      	ldr	r6, [pc, #52]	; (8005638 <__libc_init_array+0x38>)
 8005604:	4c0d      	ldr	r4, [pc, #52]	; (800563c <__libc_init_array+0x3c>)
 8005606:	1ba4      	subs	r4, r4, r6
 8005608:	10a4      	asrs	r4, r4, #2
 800560a:	2500      	movs	r5, #0
 800560c:	42a5      	cmp	r5, r4
 800560e:	d109      	bne.n	8005624 <__libc_init_array+0x24>
 8005610:	4e0b      	ldr	r6, [pc, #44]	; (8005640 <__libc_init_array+0x40>)
 8005612:	4c0c      	ldr	r4, [pc, #48]	; (8005644 <__libc_init_array+0x44>)
 8005614:	f000 fc26 	bl	8005e64 <_init>
 8005618:	1ba4      	subs	r4, r4, r6
 800561a:	10a4      	asrs	r4, r4, #2
 800561c:	2500      	movs	r5, #0
 800561e:	42a5      	cmp	r5, r4
 8005620:	d105      	bne.n	800562e <__libc_init_array+0x2e>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005628:	4798      	blx	r3
 800562a:	3501      	adds	r5, #1
 800562c:	e7ee      	b.n	800560c <__libc_init_array+0xc>
 800562e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005632:	4798      	blx	r3
 8005634:	3501      	adds	r5, #1
 8005636:	e7f2      	b.n	800561e <__libc_init_array+0x1e>
 8005638:	08005f94 	.word	0x08005f94
 800563c:	08005f94 	.word	0x08005f94
 8005640:	08005f94 	.word	0x08005f94
 8005644:	08005f98 	.word	0x08005f98

08005648 <memset>:
 8005648:	4402      	add	r2, r0
 800564a:	4603      	mov	r3, r0
 800564c:	4293      	cmp	r3, r2
 800564e:	d100      	bne.n	8005652 <memset+0xa>
 8005650:	4770      	bx	lr
 8005652:	f803 1b01 	strb.w	r1, [r3], #1
 8005656:	e7f9      	b.n	800564c <memset+0x4>

08005658 <siprintf>:
 8005658:	b40e      	push	{r1, r2, r3}
 800565a:	b500      	push	{lr}
 800565c:	b09c      	sub	sp, #112	; 0x70
 800565e:	ab1d      	add	r3, sp, #116	; 0x74
 8005660:	9002      	str	r0, [sp, #8]
 8005662:	9006      	str	r0, [sp, #24]
 8005664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005668:	4809      	ldr	r0, [pc, #36]	; (8005690 <siprintf+0x38>)
 800566a:	9107      	str	r1, [sp, #28]
 800566c:	9104      	str	r1, [sp, #16]
 800566e:	4909      	ldr	r1, [pc, #36]	; (8005694 <siprintf+0x3c>)
 8005670:	f853 2b04 	ldr.w	r2, [r3], #4
 8005674:	9105      	str	r1, [sp, #20]
 8005676:	6800      	ldr	r0, [r0, #0]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	a902      	add	r1, sp, #8
 800567c:	f000 f866 	bl	800574c <_svfiprintf_r>
 8005680:	9b02      	ldr	r3, [sp, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	b01c      	add	sp, #112	; 0x70
 8005688:	f85d eb04 	ldr.w	lr, [sp], #4
 800568c:	b003      	add	sp, #12
 800568e:	4770      	bx	lr
 8005690:	20000010 	.word	0x20000010
 8005694:	ffff0208 	.word	0xffff0208

08005698 <__ssputs_r>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	688e      	ldr	r6, [r1, #8]
 800569e:	429e      	cmp	r6, r3
 80056a0:	4682      	mov	sl, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	4690      	mov	r8, r2
 80056a6:	4699      	mov	r9, r3
 80056a8:	d837      	bhi.n	800571a <__ssputs_r+0x82>
 80056aa:	898a      	ldrh	r2, [r1, #12]
 80056ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056b0:	d031      	beq.n	8005716 <__ssputs_r+0x7e>
 80056b2:	6825      	ldr	r5, [r4, #0]
 80056b4:	6909      	ldr	r1, [r1, #16]
 80056b6:	1a6f      	subs	r7, r5, r1
 80056b8:	6965      	ldr	r5, [r4, #20]
 80056ba:	2302      	movs	r3, #2
 80056bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80056c4:	f109 0301 	add.w	r3, r9, #1
 80056c8:	443b      	add	r3, r7
 80056ca:	429d      	cmp	r5, r3
 80056cc:	bf38      	it	cc
 80056ce:	461d      	movcc	r5, r3
 80056d0:	0553      	lsls	r3, r2, #21
 80056d2:	d530      	bpl.n	8005736 <__ssputs_r+0x9e>
 80056d4:	4629      	mov	r1, r5
 80056d6:	f000 fb2b 	bl	8005d30 <_malloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	b950      	cbnz	r0, 80056f4 <__ssputs_r+0x5c>
 80056de:	230c      	movs	r3, #12
 80056e0:	f8ca 3000 	str.w	r3, [sl]
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f4:	463a      	mov	r2, r7
 80056f6:	6921      	ldr	r1, [r4, #16]
 80056f8:	f000 faa8 	bl	8005c4c <memcpy>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	6126      	str	r6, [r4, #16]
 800570a:	6165      	str	r5, [r4, #20]
 800570c:	443e      	add	r6, r7
 800570e:	1bed      	subs	r5, r5, r7
 8005710:	6026      	str	r6, [r4, #0]
 8005712:	60a5      	str	r5, [r4, #8]
 8005714:	464e      	mov	r6, r9
 8005716:	454e      	cmp	r6, r9
 8005718:	d900      	bls.n	800571c <__ssputs_r+0x84>
 800571a:	464e      	mov	r6, r9
 800571c:	4632      	mov	r2, r6
 800571e:	4641      	mov	r1, r8
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	f000 fa9e 	bl	8005c62 <memmove>
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	1b9b      	subs	r3, r3, r6
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	441e      	add	r6, r3
 8005730:	6026      	str	r6, [r4, #0]
 8005732:	2000      	movs	r0, #0
 8005734:	e7dc      	b.n	80056f0 <__ssputs_r+0x58>
 8005736:	462a      	mov	r2, r5
 8005738:	f000 fb54 	bl	8005de4 <_realloc_r>
 800573c:	4606      	mov	r6, r0
 800573e:	2800      	cmp	r0, #0
 8005740:	d1e2      	bne.n	8005708 <__ssputs_r+0x70>
 8005742:	6921      	ldr	r1, [r4, #16]
 8005744:	4650      	mov	r0, sl
 8005746:	f000 faa5 	bl	8005c94 <_free_r>
 800574a:	e7c8      	b.n	80056de <__ssputs_r+0x46>

0800574c <_svfiprintf_r>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	461d      	mov	r5, r3
 8005752:	898b      	ldrh	r3, [r1, #12]
 8005754:	061f      	lsls	r7, r3, #24
 8005756:	b09d      	sub	sp, #116	; 0x74
 8005758:	4680      	mov	r8, r0
 800575a:	460c      	mov	r4, r1
 800575c:	4616      	mov	r6, r2
 800575e:	d50f      	bpl.n	8005780 <_svfiprintf_r+0x34>
 8005760:	690b      	ldr	r3, [r1, #16]
 8005762:	b96b      	cbnz	r3, 8005780 <_svfiprintf_r+0x34>
 8005764:	2140      	movs	r1, #64	; 0x40
 8005766:	f000 fae3 	bl	8005d30 <_malloc_r>
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	6120      	str	r0, [r4, #16]
 800576e:	b928      	cbnz	r0, 800577c <_svfiprintf_r+0x30>
 8005770:	230c      	movs	r3, #12
 8005772:	f8c8 3000 	str.w	r3, [r8]
 8005776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577a:	e0c8      	b.n	800590e <_svfiprintf_r+0x1c2>
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	6163      	str	r3, [r4, #20]
 8005780:	2300      	movs	r3, #0
 8005782:	9309      	str	r3, [sp, #36]	; 0x24
 8005784:	2320      	movs	r3, #32
 8005786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800578a:	2330      	movs	r3, #48	; 0x30
 800578c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005790:	9503      	str	r5, [sp, #12]
 8005792:	f04f 0b01 	mov.w	fp, #1
 8005796:	4637      	mov	r7, r6
 8005798:	463d      	mov	r5, r7
 800579a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800579e:	b10b      	cbz	r3, 80057a4 <_svfiprintf_r+0x58>
 80057a0:	2b25      	cmp	r3, #37	; 0x25
 80057a2:	d13e      	bne.n	8005822 <_svfiprintf_r+0xd6>
 80057a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80057a8:	d00b      	beq.n	80057c2 <_svfiprintf_r+0x76>
 80057aa:	4653      	mov	r3, sl
 80057ac:	4632      	mov	r2, r6
 80057ae:	4621      	mov	r1, r4
 80057b0:	4640      	mov	r0, r8
 80057b2:	f7ff ff71 	bl	8005698 <__ssputs_r>
 80057b6:	3001      	adds	r0, #1
 80057b8:	f000 80a4 	beq.w	8005904 <_svfiprintf_r+0x1b8>
 80057bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057be:	4453      	add	r3, sl
 80057c0:	9309      	str	r3, [sp, #36]	; 0x24
 80057c2:	783b      	ldrb	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 809d 	beq.w	8005904 <_svfiprintf_r+0x1b8>
 80057ca:	2300      	movs	r3, #0
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057dc:	931a      	str	r3, [sp, #104]	; 0x68
 80057de:	462f      	mov	r7, r5
 80057e0:	2205      	movs	r2, #5
 80057e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80057e6:	4850      	ldr	r0, [pc, #320]	; (8005928 <_svfiprintf_r+0x1dc>)
 80057e8:	f7fa fcfa 	bl	80001e0 <memchr>
 80057ec:	9b04      	ldr	r3, [sp, #16]
 80057ee:	b9d0      	cbnz	r0, 8005826 <_svfiprintf_r+0xda>
 80057f0:	06d9      	lsls	r1, r3, #27
 80057f2:	bf44      	itt	mi
 80057f4:	2220      	movmi	r2, #32
 80057f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80057fa:	071a      	lsls	r2, r3, #28
 80057fc:	bf44      	itt	mi
 80057fe:	222b      	movmi	r2, #43	; 0x2b
 8005800:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005804:	782a      	ldrb	r2, [r5, #0]
 8005806:	2a2a      	cmp	r2, #42	; 0x2a
 8005808:	d015      	beq.n	8005836 <_svfiprintf_r+0xea>
 800580a:	9a07      	ldr	r2, [sp, #28]
 800580c:	462f      	mov	r7, r5
 800580e:	2000      	movs	r0, #0
 8005810:	250a      	movs	r5, #10
 8005812:	4639      	mov	r1, r7
 8005814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005818:	3b30      	subs	r3, #48	; 0x30
 800581a:	2b09      	cmp	r3, #9
 800581c:	d94d      	bls.n	80058ba <_svfiprintf_r+0x16e>
 800581e:	b1b8      	cbz	r0, 8005850 <_svfiprintf_r+0x104>
 8005820:	e00f      	b.n	8005842 <_svfiprintf_r+0xf6>
 8005822:	462f      	mov	r7, r5
 8005824:	e7b8      	b.n	8005798 <_svfiprintf_r+0x4c>
 8005826:	4a40      	ldr	r2, [pc, #256]	; (8005928 <_svfiprintf_r+0x1dc>)
 8005828:	1a80      	subs	r0, r0, r2
 800582a:	fa0b f000 	lsl.w	r0, fp, r0
 800582e:	4318      	orrs	r0, r3
 8005830:	9004      	str	r0, [sp, #16]
 8005832:	463d      	mov	r5, r7
 8005834:	e7d3      	b.n	80057de <_svfiprintf_r+0x92>
 8005836:	9a03      	ldr	r2, [sp, #12]
 8005838:	1d11      	adds	r1, r2, #4
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	9103      	str	r1, [sp, #12]
 800583e:	2a00      	cmp	r2, #0
 8005840:	db01      	blt.n	8005846 <_svfiprintf_r+0xfa>
 8005842:	9207      	str	r2, [sp, #28]
 8005844:	e004      	b.n	8005850 <_svfiprintf_r+0x104>
 8005846:	4252      	negs	r2, r2
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	9207      	str	r2, [sp, #28]
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	783b      	ldrb	r3, [r7, #0]
 8005852:	2b2e      	cmp	r3, #46	; 0x2e
 8005854:	d10c      	bne.n	8005870 <_svfiprintf_r+0x124>
 8005856:	787b      	ldrb	r3, [r7, #1]
 8005858:	2b2a      	cmp	r3, #42	; 0x2a
 800585a:	d133      	bne.n	80058c4 <_svfiprintf_r+0x178>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	1d1a      	adds	r2, r3, #4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	9203      	str	r2, [sp, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	bfb8      	it	lt
 8005868:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800586c:	3702      	adds	r7, #2
 800586e:	9305      	str	r3, [sp, #20]
 8005870:	4d2e      	ldr	r5, [pc, #184]	; (800592c <_svfiprintf_r+0x1e0>)
 8005872:	7839      	ldrb	r1, [r7, #0]
 8005874:	2203      	movs	r2, #3
 8005876:	4628      	mov	r0, r5
 8005878:	f7fa fcb2 	bl	80001e0 <memchr>
 800587c:	b138      	cbz	r0, 800588e <_svfiprintf_r+0x142>
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	1b40      	subs	r0, r0, r5
 8005882:	fa03 f000 	lsl.w	r0, r3, r0
 8005886:	9b04      	ldr	r3, [sp, #16]
 8005888:	4303      	orrs	r3, r0
 800588a:	3701      	adds	r7, #1
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	7839      	ldrb	r1, [r7, #0]
 8005890:	4827      	ldr	r0, [pc, #156]	; (8005930 <_svfiprintf_r+0x1e4>)
 8005892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005896:	2206      	movs	r2, #6
 8005898:	1c7e      	adds	r6, r7, #1
 800589a:	f7fa fca1 	bl	80001e0 <memchr>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d038      	beq.n	8005914 <_svfiprintf_r+0x1c8>
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <_svfiprintf_r+0x1e8>)
 80058a4:	bb13      	cbnz	r3, 80058ec <_svfiprintf_r+0x1a0>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	3307      	adds	r3, #7
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	3308      	adds	r3, #8
 80058b0:	9303      	str	r3, [sp, #12]
 80058b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b4:	444b      	add	r3, r9
 80058b6:	9309      	str	r3, [sp, #36]	; 0x24
 80058b8:	e76d      	b.n	8005796 <_svfiprintf_r+0x4a>
 80058ba:	fb05 3202 	mla	r2, r5, r2, r3
 80058be:	2001      	movs	r0, #1
 80058c0:	460f      	mov	r7, r1
 80058c2:	e7a6      	b.n	8005812 <_svfiprintf_r+0xc6>
 80058c4:	2300      	movs	r3, #0
 80058c6:	3701      	adds	r7, #1
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	4619      	mov	r1, r3
 80058cc:	250a      	movs	r5, #10
 80058ce:	4638      	mov	r0, r7
 80058d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058d4:	3a30      	subs	r2, #48	; 0x30
 80058d6:	2a09      	cmp	r2, #9
 80058d8:	d903      	bls.n	80058e2 <_svfiprintf_r+0x196>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0c8      	beq.n	8005870 <_svfiprintf_r+0x124>
 80058de:	9105      	str	r1, [sp, #20]
 80058e0:	e7c6      	b.n	8005870 <_svfiprintf_r+0x124>
 80058e2:	fb05 2101 	mla	r1, r5, r1, r2
 80058e6:	2301      	movs	r3, #1
 80058e8:	4607      	mov	r7, r0
 80058ea:	e7f0      	b.n	80058ce <_svfiprintf_r+0x182>
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4622      	mov	r2, r4
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <_svfiprintf_r+0x1ec>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4640      	mov	r0, r8
 80058f8:	f3af 8000 	nop.w
 80058fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005900:	4681      	mov	r9, r0
 8005902:	d1d6      	bne.n	80058b2 <_svfiprintf_r+0x166>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	065b      	lsls	r3, r3, #25
 8005908:	f53f af35 	bmi.w	8005776 <_svfiprintf_r+0x2a>
 800590c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800590e:	b01d      	add	sp, #116	; 0x74
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	ab03      	add	r3, sp, #12
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	4622      	mov	r2, r4
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <_svfiprintf_r+0x1ec>)
 800591c:	a904      	add	r1, sp, #16
 800591e:	4640      	mov	r0, r8
 8005920:	f000 f882 	bl	8005a28 <_printf_i>
 8005924:	e7ea      	b.n	80058fc <_svfiprintf_r+0x1b0>
 8005926:	bf00      	nop
 8005928:	08005f58 	.word	0x08005f58
 800592c:	08005f5e 	.word	0x08005f5e
 8005930:	08005f62 	.word	0x08005f62
 8005934:	00000000 	.word	0x00000000
 8005938:	08005699 	.word	0x08005699

0800593c <_printf_common>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	4691      	mov	r9, r2
 8005942:	461f      	mov	r7, r3
 8005944:	688a      	ldr	r2, [r1, #8]
 8005946:	690b      	ldr	r3, [r1, #16]
 8005948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800594c:	4293      	cmp	r3, r2
 800594e:	bfb8      	it	lt
 8005950:	4613      	movlt	r3, r2
 8005952:	f8c9 3000 	str.w	r3, [r9]
 8005956:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800595a:	4606      	mov	r6, r0
 800595c:	460c      	mov	r4, r1
 800595e:	b112      	cbz	r2, 8005966 <_printf_common+0x2a>
 8005960:	3301      	adds	r3, #1
 8005962:	f8c9 3000 	str.w	r3, [r9]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	0699      	lsls	r1, r3, #26
 800596a:	bf42      	ittt	mi
 800596c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005970:	3302      	addmi	r3, #2
 8005972:	f8c9 3000 	strmi.w	r3, [r9]
 8005976:	6825      	ldr	r5, [r4, #0]
 8005978:	f015 0506 	ands.w	r5, r5, #6
 800597c:	d107      	bne.n	800598e <_printf_common+0x52>
 800597e:	f104 0a19 	add.w	sl, r4, #25
 8005982:	68e3      	ldr	r3, [r4, #12]
 8005984:	f8d9 2000 	ldr.w	r2, [r9]
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	42ab      	cmp	r3, r5
 800598c:	dc28      	bgt.n	80059e0 <_printf_common+0xa4>
 800598e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	3300      	adds	r3, #0
 8005996:	bf18      	it	ne
 8005998:	2301      	movne	r3, #1
 800599a:	0692      	lsls	r2, r2, #26
 800599c:	d42d      	bmi.n	80059fa <_printf_common+0xbe>
 800599e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a2:	4639      	mov	r1, r7
 80059a4:	4630      	mov	r0, r6
 80059a6:	47c0      	blx	r8
 80059a8:	3001      	adds	r0, #1
 80059aa:	d020      	beq.n	80059ee <_printf_common+0xb2>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	68e5      	ldr	r5, [r4, #12]
 80059b0:	f8d9 2000 	ldr.w	r2, [r9]
 80059b4:	f003 0306 	and.w	r3, r3, #6
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	bf08      	it	eq
 80059bc:	1aad      	subeq	r5, r5, r2
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	6922      	ldr	r2, [r4, #16]
 80059c2:	bf0c      	ite	eq
 80059c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c8:	2500      	movne	r5, #0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bfc4      	itt	gt
 80059ce:	1a9b      	subgt	r3, r3, r2
 80059d0:	18ed      	addgt	r5, r5, r3
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	341a      	adds	r4, #26
 80059d8:	454d      	cmp	r5, r9
 80059da:	d11a      	bne.n	8005a12 <_printf_common+0xd6>
 80059dc:	2000      	movs	r0, #0
 80059de:	e008      	b.n	80059f2 <_printf_common+0xb6>
 80059e0:	2301      	movs	r3, #1
 80059e2:	4652      	mov	r2, sl
 80059e4:	4639      	mov	r1, r7
 80059e6:	4630      	mov	r0, r6
 80059e8:	47c0      	blx	r8
 80059ea:	3001      	adds	r0, #1
 80059ec:	d103      	bne.n	80059f6 <_printf_common+0xba>
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	3501      	adds	r5, #1
 80059f8:	e7c3      	b.n	8005982 <_printf_common+0x46>
 80059fa:	18e1      	adds	r1, r4, r3
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	2030      	movs	r0, #48	; 0x30
 8005a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a04:	4422      	add	r2, r4
 8005a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a0e:	3302      	adds	r3, #2
 8005a10:	e7c5      	b.n	800599e <_printf_common+0x62>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4622      	mov	r2, r4
 8005a16:	4639      	mov	r1, r7
 8005a18:	4630      	mov	r0, r6
 8005a1a:	47c0      	blx	r8
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d0e6      	beq.n	80059ee <_printf_common+0xb2>
 8005a20:	f109 0901 	add.w	r9, r9, #1
 8005a24:	e7d8      	b.n	80059d8 <_printf_common+0x9c>
	...

08005a28 <_printf_i>:
 8005a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a30:	460c      	mov	r4, r1
 8005a32:	7e09      	ldrb	r1, [r1, #24]
 8005a34:	b085      	sub	sp, #20
 8005a36:	296e      	cmp	r1, #110	; 0x6e
 8005a38:	4617      	mov	r7, r2
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	4698      	mov	r8, r3
 8005a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a40:	f000 80b3 	beq.w	8005baa <_printf_i+0x182>
 8005a44:	d822      	bhi.n	8005a8c <_printf_i+0x64>
 8005a46:	2963      	cmp	r1, #99	; 0x63
 8005a48:	d036      	beq.n	8005ab8 <_printf_i+0x90>
 8005a4a:	d80a      	bhi.n	8005a62 <_printf_i+0x3a>
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	f000 80b9 	beq.w	8005bc4 <_printf_i+0x19c>
 8005a52:	2958      	cmp	r1, #88	; 0x58
 8005a54:	f000 8083 	beq.w	8005b5e <_printf_i+0x136>
 8005a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a60:	e032      	b.n	8005ac8 <_printf_i+0xa0>
 8005a62:	2964      	cmp	r1, #100	; 0x64
 8005a64:	d001      	beq.n	8005a6a <_printf_i+0x42>
 8005a66:	2969      	cmp	r1, #105	; 0x69
 8005a68:	d1f6      	bne.n	8005a58 <_printf_i+0x30>
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	6813      	ldr	r3, [r2, #0]
 8005a6e:	0605      	lsls	r5, r0, #24
 8005a70:	f103 0104 	add.w	r1, r3, #4
 8005a74:	d52a      	bpl.n	8005acc <_printf_i+0xa4>
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6011      	str	r1, [r2, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da03      	bge.n	8005a86 <_printf_i+0x5e>
 8005a7e:	222d      	movs	r2, #45	; 0x2d
 8005a80:	425b      	negs	r3, r3
 8005a82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a86:	486f      	ldr	r0, [pc, #444]	; (8005c44 <_printf_i+0x21c>)
 8005a88:	220a      	movs	r2, #10
 8005a8a:	e039      	b.n	8005b00 <_printf_i+0xd8>
 8005a8c:	2973      	cmp	r1, #115	; 0x73
 8005a8e:	f000 809d 	beq.w	8005bcc <_printf_i+0x1a4>
 8005a92:	d808      	bhi.n	8005aa6 <_printf_i+0x7e>
 8005a94:	296f      	cmp	r1, #111	; 0x6f
 8005a96:	d020      	beq.n	8005ada <_printf_i+0xb2>
 8005a98:	2970      	cmp	r1, #112	; 0x70
 8005a9a:	d1dd      	bne.n	8005a58 <_printf_i+0x30>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	f043 0320 	orr.w	r3, r3, #32
 8005aa2:	6023      	str	r3, [r4, #0]
 8005aa4:	e003      	b.n	8005aae <_printf_i+0x86>
 8005aa6:	2975      	cmp	r1, #117	; 0x75
 8005aa8:	d017      	beq.n	8005ada <_printf_i+0xb2>
 8005aaa:	2978      	cmp	r1, #120	; 0x78
 8005aac:	d1d4      	bne.n	8005a58 <_printf_i+0x30>
 8005aae:	2378      	movs	r3, #120	; 0x78
 8005ab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ab4:	4864      	ldr	r0, [pc, #400]	; (8005c48 <_printf_i+0x220>)
 8005ab6:	e055      	b.n	8005b64 <_printf_i+0x13c>
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	1d19      	adds	r1, r3, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6011      	str	r1, [r2, #0]
 8005ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e08c      	b.n	8005be6 <_printf_i+0x1be>
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6011      	str	r1, [r2, #0]
 8005ad0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ad4:	bf18      	it	ne
 8005ad6:	b21b      	sxthne	r3, r3
 8005ad8:	e7cf      	b.n	8005a7a <_printf_i+0x52>
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	6825      	ldr	r5, [r4, #0]
 8005ade:	1d18      	adds	r0, r3, #4
 8005ae0:	6010      	str	r0, [r2, #0]
 8005ae2:	0628      	lsls	r0, r5, #24
 8005ae4:	d501      	bpl.n	8005aea <_printf_i+0xc2>
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	e002      	b.n	8005af0 <_printf_i+0xc8>
 8005aea:	0668      	lsls	r0, r5, #25
 8005aec:	d5fb      	bpl.n	8005ae6 <_printf_i+0xbe>
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	4854      	ldr	r0, [pc, #336]	; (8005c44 <_printf_i+0x21c>)
 8005af2:	296f      	cmp	r1, #111	; 0x6f
 8005af4:	bf14      	ite	ne
 8005af6:	220a      	movne	r2, #10
 8005af8:	2208      	moveq	r2, #8
 8005afa:	2100      	movs	r1, #0
 8005afc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b00:	6865      	ldr	r5, [r4, #4]
 8005b02:	60a5      	str	r5, [r4, #8]
 8005b04:	2d00      	cmp	r5, #0
 8005b06:	f2c0 8095 	blt.w	8005c34 <_printf_i+0x20c>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	f021 0104 	bic.w	r1, r1, #4
 8005b10:	6021      	str	r1, [r4, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d13d      	bne.n	8005b92 <_printf_i+0x16a>
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	f040 808e 	bne.w	8005c38 <_printf_i+0x210>
 8005b1c:	4665      	mov	r5, ip
 8005b1e:	2a08      	cmp	r2, #8
 8005b20:	d10b      	bne.n	8005b3a <_printf_i+0x112>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	07db      	lsls	r3, r3, #31
 8005b26:	d508      	bpl.n	8005b3a <_printf_i+0x112>
 8005b28:	6923      	ldr	r3, [r4, #16]
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bfde      	ittt	le
 8005b30:	2330      	movle	r3, #48	; 0x30
 8005b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b3a:	ebac 0305 	sub.w	r3, ip, r5
 8005b3e:	6123      	str	r3, [r4, #16]
 8005b40:	f8cd 8000 	str.w	r8, [sp]
 8005b44:	463b      	mov	r3, r7
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7ff fef6 	bl	800593c <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14d      	bne.n	8005bf0 <_printf_i+0x1c8>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b58:	b005      	add	sp, #20
 8005b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b5e:	4839      	ldr	r0, [pc, #228]	; (8005c44 <_printf_i+0x21c>)
 8005b60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	6821      	ldr	r1, [r4, #0]
 8005b68:	1d1d      	adds	r5, r3, #4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6015      	str	r5, [r2, #0]
 8005b6e:	060a      	lsls	r2, r1, #24
 8005b70:	d50b      	bpl.n	8005b8a <_printf_i+0x162>
 8005b72:	07ca      	lsls	r2, r1, #31
 8005b74:	bf44      	itt	mi
 8005b76:	f041 0120 	orrmi.w	r1, r1, #32
 8005b7a:	6021      	strmi	r1, [r4, #0]
 8005b7c:	b91b      	cbnz	r3, 8005b86 <_printf_i+0x15e>
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	f022 0220 	bic.w	r2, r2, #32
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	2210      	movs	r2, #16
 8005b88:	e7b7      	b.n	8005afa <_printf_i+0xd2>
 8005b8a:	064d      	lsls	r5, r1, #25
 8005b8c:	bf48      	it	mi
 8005b8e:	b29b      	uxthmi	r3, r3
 8005b90:	e7ef      	b.n	8005b72 <_printf_i+0x14a>
 8005b92:	4665      	mov	r5, ip
 8005b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b98:	fb02 3311 	mls	r3, r2, r1, r3
 8005b9c:	5cc3      	ldrb	r3, [r0, r3]
 8005b9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d1f5      	bne.n	8005b94 <_printf_i+0x16c>
 8005ba8:	e7b9      	b.n	8005b1e <_printf_i+0xf6>
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	6825      	ldr	r5, [r4, #0]
 8005bae:	6961      	ldr	r1, [r4, #20]
 8005bb0:	1d18      	adds	r0, r3, #4
 8005bb2:	6010      	str	r0, [r2, #0]
 8005bb4:	0628      	lsls	r0, r5, #24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	d501      	bpl.n	8005bbe <_printf_i+0x196>
 8005bba:	6019      	str	r1, [r3, #0]
 8005bbc:	e002      	b.n	8005bc4 <_printf_i+0x19c>
 8005bbe:	066a      	lsls	r2, r5, #25
 8005bc0:	d5fb      	bpl.n	8005bba <_printf_i+0x192>
 8005bc2:	8019      	strh	r1, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	4665      	mov	r5, ip
 8005bca:	e7b9      	b.n	8005b40 <_printf_i+0x118>
 8005bcc:	6813      	ldr	r3, [r2, #0]
 8005bce:	1d19      	adds	r1, r3, #4
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	681d      	ldr	r5, [r3, #0]
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f7fa fb01 	bl	80001e0 <memchr>
 8005bde:	b108      	cbz	r0, 8005be4 <_printf_i+0x1bc>
 8005be0:	1b40      	subs	r0, r0, r5
 8005be2:	6060      	str	r0, [r4, #4]
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	2300      	movs	r3, #0
 8005bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bee:	e7a7      	b.n	8005b40 <_printf_i+0x118>
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0aa      	beq.n	8005b54 <_printf_i+0x12c>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	079b      	lsls	r3, r3, #30
 8005c02:	d413      	bmi.n	8005c2c <_printf_i+0x204>
 8005c04:	68e0      	ldr	r0, [r4, #12]
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	4298      	cmp	r0, r3
 8005c0a:	bfb8      	it	lt
 8005c0c:	4618      	movlt	r0, r3
 8005c0e:	e7a3      	b.n	8005b58 <_printf_i+0x130>
 8005c10:	2301      	movs	r3, #1
 8005c12:	464a      	mov	r2, r9
 8005c14:	4639      	mov	r1, r7
 8005c16:	4630      	mov	r0, r6
 8005c18:	47c0      	blx	r8
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d09a      	beq.n	8005b54 <_printf_i+0x12c>
 8005c1e:	3501      	adds	r5, #1
 8005c20:	68e3      	ldr	r3, [r4, #12]
 8005c22:	9a03      	ldr	r2, [sp, #12]
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	42ab      	cmp	r3, r5
 8005c28:	dcf2      	bgt.n	8005c10 <_printf_i+0x1e8>
 8005c2a:	e7eb      	b.n	8005c04 <_printf_i+0x1dc>
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	f104 0919 	add.w	r9, r4, #25
 8005c32:	e7f5      	b.n	8005c20 <_printf_i+0x1f8>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1ac      	bne.n	8005b92 <_printf_i+0x16a>
 8005c38:	7803      	ldrb	r3, [r0, #0]
 8005c3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c42:	e76c      	b.n	8005b1e <_printf_i+0xf6>
 8005c44:	08005f69 	.word	0x08005f69
 8005c48:	08005f7a 	.word	0x08005f7a

08005c4c <memcpy>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	1e43      	subs	r3, r0, #1
 8005c50:	440a      	add	r2, r1
 8005c52:	4291      	cmp	r1, r2
 8005c54:	d100      	bne.n	8005c58 <memcpy+0xc>
 8005c56:	bd10      	pop	{r4, pc}
 8005c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c60:	e7f7      	b.n	8005c52 <memcpy+0x6>

08005c62 <memmove>:
 8005c62:	4288      	cmp	r0, r1
 8005c64:	b510      	push	{r4, lr}
 8005c66:	eb01 0302 	add.w	r3, r1, r2
 8005c6a:	d807      	bhi.n	8005c7c <memmove+0x1a>
 8005c6c:	1e42      	subs	r2, r0, #1
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	d00a      	beq.n	8005c88 <memmove+0x26>
 8005c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c7a:	e7f8      	b.n	8005c6e <memmove+0xc>
 8005c7c:	4283      	cmp	r3, r0
 8005c7e:	d9f5      	bls.n	8005c6c <memmove+0xa>
 8005c80:	1881      	adds	r1, r0, r2
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	42d3      	cmn	r3, r2
 8005c86:	d100      	bne.n	8005c8a <memmove+0x28>
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c92:	e7f7      	b.n	8005c84 <memmove+0x22>

08005c94 <_free_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4605      	mov	r5, r0
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	d045      	beq.n	8005d28 <_free_r+0x94>
 8005c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca0:	1f0c      	subs	r4, r1, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bfb8      	it	lt
 8005ca6:	18e4      	addlt	r4, r4, r3
 8005ca8:	f000 f8d2 	bl	8005e50 <__malloc_lock>
 8005cac:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <_free_r+0x98>)
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	b933      	cbnz	r3, 8005cc2 <_free_r+0x2e>
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	6014      	str	r4, [r2, #0]
 8005cb8:	4628      	mov	r0, r5
 8005cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cbe:	f000 b8c8 	b.w	8005e52 <__malloc_unlock>
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	d90c      	bls.n	8005ce0 <_free_r+0x4c>
 8005cc6:	6821      	ldr	r1, [r4, #0]
 8005cc8:	1862      	adds	r2, r4, r1
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bf04      	itt	eq
 8005cce:	681a      	ldreq	r2, [r3, #0]
 8005cd0:	685b      	ldreq	r3, [r3, #4]
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	bf04      	itt	eq
 8005cd6:	1852      	addeq	r2, r2, r1
 8005cd8:	6022      	streq	r2, [r4, #0]
 8005cda:	6004      	str	r4, [r0, #0]
 8005cdc:	e7ec      	b.n	8005cb8 <_free_r+0x24>
 8005cde:	4613      	mov	r3, r2
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	b10a      	cbz	r2, 8005ce8 <_free_r+0x54>
 8005ce4:	42a2      	cmp	r2, r4
 8005ce6:	d9fa      	bls.n	8005cde <_free_r+0x4a>
 8005ce8:	6819      	ldr	r1, [r3, #0]
 8005cea:	1858      	adds	r0, r3, r1
 8005cec:	42a0      	cmp	r0, r4
 8005cee:	d10b      	bne.n	8005d08 <_free_r+0x74>
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	4401      	add	r1, r0
 8005cf4:	1858      	adds	r0, r3, r1
 8005cf6:	4282      	cmp	r2, r0
 8005cf8:	6019      	str	r1, [r3, #0]
 8005cfa:	d1dd      	bne.n	8005cb8 <_free_r+0x24>
 8005cfc:	6810      	ldr	r0, [r2, #0]
 8005cfe:	6852      	ldr	r2, [r2, #4]
 8005d00:	605a      	str	r2, [r3, #4]
 8005d02:	4401      	add	r1, r0
 8005d04:	6019      	str	r1, [r3, #0]
 8005d06:	e7d7      	b.n	8005cb8 <_free_r+0x24>
 8005d08:	d902      	bls.n	8005d10 <_free_r+0x7c>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	602b      	str	r3, [r5, #0]
 8005d0e:	e7d3      	b.n	8005cb8 <_free_r+0x24>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	1821      	adds	r1, r4, r0
 8005d14:	428a      	cmp	r2, r1
 8005d16:	bf04      	itt	eq
 8005d18:	6811      	ldreq	r1, [r2, #0]
 8005d1a:	6852      	ldreq	r2, [r2, #4]
 8005d1c:	6062      	str	r2, [r4, #4]
 8005d1e:	bf04      	itt	eq
 8005d20:	1809      	addeq	r1, r1, r0
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	605c      	str	r4, [r3, #4]
 8005d26:	e7c7      	b.n	8005cb8 <_free_r+0x24>
 8005d28:	bd38      	pop	{r3, r4, r5, pc}
 8005d2a:	bf00      	nop
 8005d2c:	2000009c 	.word	0x2000009c

08005d30 <_malloc_r>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	1ccd      	adds	r5, r1, #3
 8005d34:	f025 0503 	bic.w	r5, r5, #3
 8005d38:	3508      	adds	r5, #8
 8005d3a:	2d0c      	cmp	r5, #12
 8005d3c:	bf38      	it	cc
 8005d3e:	250c      	movcc	r5, #12
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	4606      	mov	r6, r0
 8005d44:	db01      	blt.n	8005d4a <_malloc_r+0x1a>
 8005d46:	42a9      	cmp	r1, r5
 8005d48:	d903      	bls.n	8005d52 <_malloc_r+0x22>
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	2000      	movs	r0, #0
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	f000 f87d 	bl	8005e50 <__malloc_lock>
 8005d56:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <_malloc_r+0xac>)
 8005d58:	6814      	ldr	r4, [r2, #0]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	b991      	cbnz	r1, 8005d84 <_malloc_r+0x54>
 8005d5e:	4c20      	ldr	r4, [pc, #128]	; (8005de0 <_malloc_r+0xb0>)
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	b91b      	cbnz	r3, 8005d6c <_malloc_r+0x3c>
 8005d64:	4630      	mov	r0, r6
 8005d66:	f000 f863 	bl	8005e30 <_sbrk_r>
 8005d6a:	6020      	str	r0, [r4, #0]
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f000 f85e 	bl	8005e30 <_sbrk_r>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d124      	bne.n	8005dc2 <_malloc_r+0x92>
 8005d78:	230c      	movs	r3, #12
 8005d7a:	6033      	str	r3, [r6, #0]
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f000 f868 	bl	8005e52 <__malloc_unlock>
 8005d82:	e7e4      	b.n	8005d4e <_malloc_r+0x1e>
 8005d84:	680b      	ldr	r3, [r1, #0]
 8005d86:	1b5b      	subs	r3, r3, r5
 8005d88:	d418      	bmi.n	8005dbc <_malloc_r+0x8c>
 8005d8a:	2b0b      	cmp	r3, #11
 8005d8c:	d90f      	bls.n	8005dae <_malloc_r+0x7e>
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	50cd      	str	r5, [r1, r3]
 8005d92:	18cc      	adds	r4, r1, r3
 8005d94:	4630      	mov	r0, r6
 8005d96:	f000 f85c 	bl	8005e52 <__malloc_unlock>
 8005d9a:	f104 000b 	add.w	r0, r4, #11
 8005d9e:	1d23      	adds	r3, r4, #4
 8005da0:	f020 0007 	bic.w	r0, r0, #7
 8005da4:	1ac3      	subs	r3, r0, r3
 8005da6:	d0d3      	beq.n	8005d50 <_malloc_r+0x20>
 8005da8:	425a      	negs	r2, r3
 8005daa:	50e2      	str	r2, [r4, r3]
 8005dac:	e7d0      	b.n	8005d50 <_malloc_r+0x20>
 8005dae:	428c      	cmp	r4, r1
 8005db0:	684b      	ldr	r3, [r1, #4]
 8005db2:	bf16      	itet	ne
 8005db4:	6063      	strne	r3, [r4, #4]
 8005db6:	6013      	streq	r3, [r2, #0]
 8005db8:	460c      	movne	r4, r1
 8005dba:	e7eb      	b.n	8005d94 <_malloc_r+0x64>
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	6849      	ldr	r1, [r1, #4]
 8005dc0:	e7cc      	b.n	8005d5c <_malloc_r+0x2c>
 8005dc2:	1cc4      	adds	r4, r0, #3
 8005dc4:	f024 0403 	bic.w	r4, r4, #3
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d005      	beq.n	8005dd8 <_malloc_r+0xa8>
 8005dcc:	1a21      	subs	r1, r4, r0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f000 f82e 	bl	8005e30 <_sbrk_r>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d0cf      	beq.n	8005d78 <_malloc_r+0x48>
 8005dd8:	6025      	str	r5, [r4, #0]
 8005dda:	e7db      	b.n	8005d94 <_malloc_r+0x64>
 8005ddc:	2000009c 	.word	0x2000009c
 8005de0:	200000a0 	.word	0x200000a0

08005de4 <_realloc_r>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	4607      	mov	r7, r0
 8005de8:	4614      	mov	r4, r2
 8005dea:	460e      	mov	r6, r1
 8005dec:	b921      	cbnz	r1, 8005df8 <_realloc_r+0x14>
 8005dee:	4611      	mov	r1, r2
 8005df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005df4:	f7ff bf9c 	b.w	8005d30 <_malloc_r>
 8005df8:	b922      	cbnz	r2, 8005e04 <_realloc_r+0x20>
 8005dfa:	f7ff ff4b 	bl	8005c94 <_free_r>
 8005dfe:	4625      	mov	r5, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e04:	f000 f826 	bl	8005e54 <_malloc_usable_size_r>
 8005e08:	42a0      	cmp	r0, r4
 8005e0a:	d20f      	bcs.n	8005e2c <_realloc_r+0x48>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ff8e 	bl	8005d30 <_malloc_r>
 8005e14:	4605      	mov	r5, r0
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d0f2      	beq.n	8005e00 <_realloc_r+0x1c>
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	f7ff ff15 	bl	8005c4c <memcpy>
 8005e22:	4631      	mov	r1, r6
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff ff35 	bl	8005c94 <_free_r>
 8005e2a:	e7e9      	b.n	8005e00 <_realloc_r+0x1c>
 8005e2c:	4635      	mov	r5, r6
 8005e2e:	e7e7      	b.n	8005e00 <_realloc_r+0x1c>

08005e30 <_sbrk_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4c06      	ldr	r4, [pc, #24]	; (8005e4c <_sbrk_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4605      	mov	r5, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	f7fb f858 	bl	8000ef0 <_sbrk>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_sbrk_r+0x1a>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_sbrk_r+0x1a>
 8005e48:	602b      	str	r3, [r5, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	20000274 	.word	0x20000274

08005e50 <__malloc_lock>:
 8005e50:	4770      	bx	lr

08005e52 <__malloc_unlock>:
 8005e52:	4770      	bx	lr

08005e54 <_malloc_usable_size_r>:
 8005e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e58:	1f18      	subs	r0, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bfbc      	itt	lt
 8005e5e:	580b      	ldrlt	r3, [r1, r0]
 8005e60:	18c0      	addlt	r0, r0, r3
 8005e62:	4770      	bx	lr

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
