
board_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b94  08005b94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b9c  08005b9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000074  08005c18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005c18  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019aea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331a  00000000  00000000  00039b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029732  00000000  00000000  0003f630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189c2  00000000  00000000  00068d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fde98  00000000  00000000  00081724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017f5bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  0017f610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a9c 	.word	0x08005a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005a9c 	.word	0x08005a9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_CAN1_Init+0x64>)
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <MX_CAN1_Init+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_CAN1_Init+0x64>)
 8000584:	2210      	movs	r2, #16
 8000586:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_CAN1_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_CAN1_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_CAN1_Init+0x64>)
 8000596:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800059a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_CAN1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_CAN1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_CAN1_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_CAN1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_CAN1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_CAN1_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_CAN1_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_CAN1_Init+0x64>)
 80005c8:	f000 fe84 	bl	80012d4 <HAL_CAN_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80005d2:	f000 fb93 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2000009c 	.word	0x2000009c
 80005e0:	40006400 	.word	0x40006400

080005e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <HAL_CAN_MspInit+0x8c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d130      	bne.n	8000668 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <HAL_CAN_MspInit+0x90>)
 8000608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060a:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <HAL_CAN_MspInit+0x90>)
 800060c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000610:	6593      	str	r3, [r2, #88]	; 0x58
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_CAN_MspInit+0x90>)
 8000614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_CAN_MspInit+0x90>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_CAN_MspInit+0x90>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_CAN_MspInit+0x90>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000648:	2309      	movs	r3, #9
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <HAL_CAN_MspInit+0x94>)
 8000654:	f001 fca4 	bl	8001fa0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2015      	movs	r0, #21
 800065e:	f001 fc68 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000662:	2015      	movs	r0, #21
 8000664:	f001 fc81 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	; 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40006400 	.word	0x40006400
 8000674:	40021000 	.word	0x40021000
 8000678:	48000400 	.word	0x48000400

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <MX_GPIO_Init+0x108>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a3b      	ldr	r2, [pc, #236]	; (8000784 <MX_GPIO_Init+0x108>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MX_GPIO_Init+0x108>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <MX_GPIO_Init+0x108>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <MX_GPIO_Init+0x108>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_GPIO_Init+0x108>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <MX_GPIO_Init+0x108>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <MX_GPIO_Init+0x108>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0x108>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0x108>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a29      	ldr	r2, [pc, #164]	; (8000784 <MX_GPIO_Init+0x108>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0x108>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7190 	mov.w	r1, #288	; 0x120
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f001 fdfa 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Brake_Pin|Battery_Pin|DLR_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000706:	4820      	ldr	r0, [pc, #128]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000708:	f001 fdf4 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_GPIO_Init+0x110>)
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4819      	ldr	r0, [pc, #100]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000722:	f001 fc3d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000726:	f44f 7390 	mov.w	r3, #288	; 0x120
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f001 fc2d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Brake_Pin|Battery_Pin|DLR_Pin;
 8000746:	f44f 7350 	mov.w	r3, #832	; 0x340
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000760:	f001 fc1e 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Select_Pin;
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Select_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000778:	f001 fc12 	bl	8001fa0 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	48000800 	.word	0x48000800
 800078c:	10210000 	.word	0x10210000

08000790 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f023 030f 	bic.w	r3, r3, #15
 80007a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f043 030c 	orr.w	r3, r3, #12
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007bc:	7bbb      	ldrb	r3, [r7, #14]
 80007be:	f043 030c 	orr.w	r3, r3, #12
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2304      	movs	r3, #4
 80007da:	214e      	movs	r1, #78	; 0x4e
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <lcd_send_cmd+0x5c>)
 80007de:	f001 fe31 	bl	8002444 <HAL_I2C_Master_Transmit>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000c4 	.word	0x200000c4

080007f0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f023 030f 	bic.w	r3, r3, #15
 8000800:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	f043 030d 	orr.w	r3, r3, #13
 800080e:	b2db      	uxtb	r3, r3
 8000810:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	f043 0309 	orr.w	r3, r3, #9
 8000818:	b2db      	uxtb	r3, r3
 800081a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	f043 030d 	orr.w	r3, r3, #13
 8000822:	b2db      	uxtb	r3, r3
 8000824:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0309 	orr.w	r3, r3, #9
 800082c:	b2db      	uxtb	r3, r3
 800082e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000830:	f107 0208 	add.w	r2, r7, #8
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2304      	movs	r3, #4
 800083a:	214e      	movs	r1, #78	; 0x4e
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <lcd_send_data+0x5c>)
 800083e:	f001 fe01 	bl	8002444 <HAL_I2C_Master_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000c4 	.word	0x200000c4

08000850 <lcd_clear>:

void lcd_clear (void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000856:	2080      	movs	r0, #128	; 0x80
 8000858:	f7ff ff9a 	bl	8000790 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	e005      	b.n	800086e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000862:	2020      	movs	r0, #32
 8000864:	f7ff ffc4 	bl	80007f0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b45      	cmp	r3, #69	; 0x45
 8000872:	ddf6      	ble.n	8000862 <lcd_clear+0x12>
	}
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
    switch (row)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <lcd_put_cur+0x18>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d005      	beq.n	80008a0 <lcd_put_cur+0x22>
 8000894:	e009      	b.n	80008aa <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	603b      	str	r3, [r7, #0]
            break;
 800089e:	e004      	b.n	80008aa <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80008a6:	603b      	str	r3, [r7, #0]
            break;
 80008a8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff6e 	bl	8000790 <lcd_send_cmd>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <lcd_init>:


void lcd_init (void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80008c0:	2032      	movs	r0, #50	; 0x32
 80008c2:	f000 fce3 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008c6:	2030      	movs	r0, #48	; 0x30
 80008c8:	f7ff ff62 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008cc:	2005      	movs	r0, #5
 80008ce:	f000 fcdd 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008d2:	2030      	movs	r0, #48	; 0x30
 80008d4:	f7ff ff5c 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 fcd7 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x30);
 80008de:	2030      	movs	r0, #48	; 0x30
 80008e0:	f7ff ff56 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(10);
 80008e4:	200a      	movs	r0, #10
 80008e6:	f000 fcd1 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008ea:	2020      	movs	r0, #32
 80008ec:	f7ff ff50 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(10);
 80008f0:	200a      	movs	r0, #10
 80008f2:	f000 fccb 	bl	800128c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008f6:	2028      	movs	r0, #40	; 0x28
 80008f8:	f7ff ff4a 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 fcc5 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000902:	2008      	movs	r0, #8
 8000904:	f7ff ff44 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fcbf 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff ff3e 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f000 fcb9 	bl	800128c <HAL_Delay>
	HAL_Delay(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f000 fcb6 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000920:	2006      	movs	r0, #6
 8000922:	f7ff ff35 	bl	8000790 <lcd_send_cmd>
	HAL_Delay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fcb0 	bl	800128c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800092c:	200c      	movs	r0, #12
 800092e:	f7ff ff2f 	bl	8000790 <lcd_send_cmd>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}

08000936 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800093e:	e006      	b.n	800094e <lcd_send_string+0x18>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff51 	bl	80007f0 <lcd_send_data>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f4      	bne.n	8000940 <lcd_send_string+0xa>
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_I2C3_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_I2C3_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_I2C3_Init+0x74>)
 800096c:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <MX_I2C3_Init+0x7c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_I2C3_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_I2C3_Init+0x74>)
 8000978:	2201      	movs	r2, #1
 800097a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_I2C3_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_I2C3_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_I2C3_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_I2C3_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_I2C3_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800099a:	480e      	ldr	r0, [pc, #56]	; (80009d4 <MX_I2C3_Init+0x74>)
 800099c:	f001 fcc2 	bl	8002324 <HAL_I2C_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009a6:	f000 f9a9 	bl	8000cfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <MX_I2C3_Init+0x74>)
 80009ae:	f001 ffb1 	bl	8002914 <HAL_I2CEx_ConfigAnalogFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009b8:	f000 f9a0 	bl	8000cfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_I2C3_Init+0x74>)
 80009c0:	f001 fff3 	bl	80029aa <HAL_I2CEx_ConfigDigitalFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 f997 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000c4 	.word	0x200000c4
 80009d8:	40005c00 	.word	0x40005c00
 80009dc:	10909cec 	.word	0x10909cec

080009e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ac      	sub	sp, #176	; 0xb0
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2288      	movs	r2, #136	; 0x88
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 fc15 	bl	8005230 <memset>
  if(i2cHandle->Instance==I2C3)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <HAL_I2C_MspInit+0xb0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13b      	bne.n	8000a88 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a14:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 fe60 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a2a:	f000 f967 	bl	8000cfc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_I2C_MspInit+0xb4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <HAL_I2C_MspInit+0xb4>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_I2C_MspInit+0xb4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a46:	2303      	movs	r3, #3
 8000a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4c:	2312      	movs	r3, #18
 8000a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <HAL_I2C_MspInit+0xb8>)
 8000a6c:	f001 fa98 	bl	8001fa0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_I2C_MspInit+0xb4>)
 8000a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_I2C_MspInit+0xb4>)
 8000a76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_I2C_MspInit+0xb4>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000a88:	bf00      	nop
 8000a8a:	37b0      	adds	r7, #176	; 0xb0
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40005c00 	.word	0x40005c00
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 fb78 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f81c 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f7ff fde8 	bl	800067c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000aac:	f7ff fd64 	bl	8000578 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000ab0:	f000 fa46 	bl	8000f40 <MX_TIM1_Init>
  MX_RTC_Init();
 8000ab4:	f000 f92c 	bl	8000d10 <MX_RTC_Init>
  MX_I2C3_Init();
 8000ab8:	f7ff ff52 	bl	8000960 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000abc:	f000 fab4 	bl	8001028 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //setup the CAN interface
  CAN_filterConfig();
 8000ac0:	f000 f8fc 	bl	8000cbc <CAN_filterConfig>
  HAL_CAN_Start(&hcan1);
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <main+0x40>)
 8000ac6:	f000 fdca 	bl	800165e <HAL_CAN_Start>
  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  startMsg();
 8000aca:	f000 f85d 	bl	8000b88 <startMsg>
  while (1)
  {

		  HAL_Delay(1000);
 8000ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad2:	f000 fbdb 	bl	800128c <HAL_Delay>
		  CAN_Rx();
 8000ad6:	f000 f8ad 	bl	8000c34 <CAN_Rx>
		  HAL_Delay(1000);
 8000ada:	e7f8      	b.n	8000ace <main+0x32>
 8000adc:	2000009c 	.word	0x2000009c

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b096      	sub	sp, #88	; 0x58
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2244      	movs	r2, #68	; 0x44
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 fb9e 	bl	8005230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b06:	f001 ffab 	bl	8002a60 <HAL_PWREx_ControlVoltageScaling>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b10:	f000 f8f4 	bl	8000cfc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b14:	230a      	movs	r3, #10
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b32:	230a      	movs	r3, #10
 8000b34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 ffe0 	bl	8002b0c <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000b52:	f000 f8d3 	bl	8000cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 fbb2 	bl	80032d8 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b7a:	f000 f8bf 	bl	8000cfc <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3758      	adds	r7, #88	; 0x58
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <startMsg>:

/* USER CODE BEGIN 4 */
void startMsg(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

	  serialClear();
 8000b8c:	f000 f848 	bl	8000c20 <serialClear>
	  lcd_init();
 8000b90:	f7ff fe94 	bl	80008bc <lcd_init>
	  lcd_put_cur(0,0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fe71 	bl	800087e <lcd_put_cur>
	  serialMsg("***Init!***\r\n");
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <startMsg+0x34>)
 8000b9e:	f000 f811 	bl	8000bc4 <serialMsg>
	  lcd_send_string("***Init!***");
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <startMsg+0x38>)
 8000ba4:	f7ff fec7 	bl	8000936 <lcd_send_string>
	  HAL_Delay(1000);
 8000ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bac:	f000 fb6e 	bl	800128c <HAL_Delay>
	  serialClear();
 8000bb0:	f000 f836 	bl	8000c20 <serialClear>
	  lcd_clear();
 8000bb4:	f7ff fe4c 	bl	8000850 <lcd_clear>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	08005ab4 	.word	0x08005ab4
 8000bc0:	08005ac4 	.word	0x08005ac4

08000bc4 <serialMsg>:

void serialMsg(char msg[]){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	char msgEnd[] = "\r\n";
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <serialMsg+0x54>)
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	8019      	strh	r1, [r3, #0]
 8000bd8:	3302      	adds	r3, #2
 8000bda:	0c12      	lsrs	r2, r2, #16
 8000bdc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff faf6 	bl	80001d0 <strlen>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <serialMsg+0x58>)
 8000bf0:	f003 fe6e 	bl	80048d0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)msgEnd, strlen(msgEnd), HAL_MAX_DELAY);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fae9 	bl	80001d0 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f107 010c 	add.w	r1, r7, #12
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <serialMsg+0x58>)
 8000c0c:	f003 fe60 	bl	80048d0 <HAL_UART_Transmit>

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08005ad0 	.word	0x08005ad0
 8000c1c:	200001ec 	.word	0x200001ec

08000c20 <serialClear>:

void serialClear(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	serialMsg("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <serialClear+0x10>)
 8000c26:	f7ff ffcd 	bl	8000bc4 <serialMsg>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08005ad4 	.word	0x08005ad4

08000c34 <CAN_Rx>:
		//serialMsg("Message transmitted!\n\r");
	}
	else return;
}

void CAN_Rx(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

	char str[8];
	char msg[8];
	uint8_t crx[8];
	RxHeader.DLC = 8;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <CAN_Rx+0x74>)
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_EXT;
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <CAN_Rx+0x74>)
 8000c42:	2204      	movs	r2, #4
 8000c44:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <CAN_Rx+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
	RxHeader.ExtId = RemoteID;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <CAN_Rx+0x78>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <CAN_Rx+0x74>)
 8000c54:	605a      	str	r2, [r3, #4]


	//If there is no message
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8000c56:	463b      	mov	r3, r7
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <CAN_Rx+0x74>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <CAN_Rx+0x7c>)
 8000c5e:	f000 fd42 	bl	80016e6 <HAL_CAN_GetRxMessage>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <CAN_Rx+0x3c>
		serialMsg("CAN_Rx fault\n\r");
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <CAN_Rx+0x80>)
 8000c6a:	f7ff ffab 	bl	8000bc4 <serialMsg>
 8000c6e:	e018      	b.n	8000ca2 <CAN_Rx+0x6e>
		return;
	}
	sprintf(msg, "%x", (unsigned int)crx);
 8000c70:	463a      	mov	r2, r7
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4910      	ldr	r1, [pc, #64]	; (8000cb8 <CAN_Rx+0x84>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 fae1 	bl	8005240 <siprintf>
	serialMsg(msg);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff9e 	bl	8000bc4 <serialMsg>
	sprintf(str, "%x", RxHeader.ExtId);
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <CAN_Rx+0x74>)
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4909      	ldr	r1, [pc, #36]	; (8000cb8 <CAN_Rx+0x84>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 fad4 	bl	8005240 <siprintf>
	serialMsg(str);
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff91 	bl	8000bc4 <serialMsg>
}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000012c 	.word	0x2000012c
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	2000009c 	.word	0x2000009c
 8000cb4:	08005af0 	.word	0x08005af0
 8000cb8:	08005b00 	.word	0x08005b00

08000cbc <CAN_filterConfig>:


void CAN_filterConfig(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
	filterConfig.FilterActivation = ENABLE;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0x0000;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <CAN_filterConfig+0x3c>)
 8000cec:	f000 fbed 	bl	80014ca <HAL_CAN_ConfigFilter>
}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000009c 	.word	0x2000009c

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	serialMsg("Error happened!\r\n");
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <Error_Handler+0x10>)
 8000d02:	f7ff ff5f 	bl	8000bc4 <serialMsg>
  /* USER CODE END Error_Handler_Debug */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08005b04 	.word	0x08005b04

08000d10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d16:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <MX_RTC_Init+0x4c>)
 8000d18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d22:	227f      	movs	r2, #127	; 0x7f
 8000d24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d28:	22ff      	movs	r2, #255	; 0xff
 8000d2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_RTC_Init+0x48>)
 8000d46:	f003 f989 	bl	800405c <HAL_RTC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000d50:	f7ff ffd4 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000017c 	.word	0x2000017c
 8000d5c:	40002800 	.word	0x40002800

08000d60 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0a4      	sub	sp, #144	; 0x90
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2288      	movs	r2, #136	; 0x88
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fa5d 	bl	8005230 <memset>
  if(rtcHandle->Instance==RTC)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_RTC_MspInit+0x5c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d118      	bne.n	8000db2 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fca6 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d9e:	f7ff ffad 	bl	8000cfc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_RTC_MspInit+0x60>)
 8000da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_RTC_MspInit+0x60>)
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3790      	adds	r7, #144	; 0x90
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40002800 	.word	0x40002800
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x44>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f9f4 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <CAN1_RX1_IRQHandler+0x10>)
 8000e6e:	f000 fd4c 	bl	800190a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000009c 	.word	0x2000009c

08000e7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x50>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x16>
		heap_end = &end;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <_sbrk+0x50>)
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <_sbrk+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <_sbrk+0x50>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <_sbrk+0x50>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	466a      	mov	r2, sp
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d907      	bls.n	8000eb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ea6:	f004 f999 	bl	80051dc <__errno>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	220c      	movs	r2, #12
 8000eae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	e006      	b.n	8000ec4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <_sbrk+0x50>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <_sbrk+0x50>)
 8000ec0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	20000288 	.word	0x20000288

08000ed4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <SystemInit+0x64>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <SystemInit+0x64>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <SystemInit+0x68>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <SystemInit+0x68>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <SystemInit+0x68>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <SystemInit+0x68>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <SystemInit+0x68>)
 8000f00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <SystemInit+0x68>)
 8000f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <SystemInit+0x68>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <SystemInit+0x68>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <SystemInit+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SystemInit+0x64>)
 8000f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00
 8000f3c:	40021000 	.word	0x40021000

08000f40 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f60:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <MX_TIM1_Init+0xa4>)
 8000f62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f66:	224f      	movs	r2, #79	; 0x4f
 8000f68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000f8c:	f003 f978 	bl	8004280 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f96:	f7ff feb1 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000fa8:	f003 f9c1 	bl	800432e <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fb2:	f7ff fea3 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <MX_TIM1_Init+0xa0>)
 8000fc8:	f003 fbac 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fd2:	f7ff fe93 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001a0 	.word	0x200001a0
 8000fe4:	40012c00 	.word	0x40012c00

08000fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_TIM_Base_MspInit+0x38>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d10b      	bne.n	8001012 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_Base_MspInit+0x3c>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_TIM_Base_MspInit+0x3c>)
 8001000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_TIM_Base_MspInit+0x3c>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40012c00 	.word	0x40012c00
 8001024:	40021000 	.word	0x40021000

08001028 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <MX_USART2_UART_Init+0x5c>)
 8001030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART2_UART_Init+0x58>)
 800106c:	f003 fbe2 	bl	8004834 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001076:	f7ff fe41 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001ec 	.word	0x200001ec
 8001084:	40004400 	.word	0x40004400

08001088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ac      	sub	sp, #176	; 0xb0
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2288      	movs	r2, #136	; 0x88
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 f8c1 	bl	8005230 <memset>
  if(uartHandle->Instance==USART2)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a21      	ldr	r2, [pc, #132]	; (8001138 <HAL_UART_MspInit+0xb0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d13b      	bne.n	8001130 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fb0d 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d0:	f7ff fe14 	bl	8000cfc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010de:	6593      	str	r3, [r2, #88]	; 0x58
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001104:	230c      	movs	r3, #12
 8001106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111c:	2307      	movs	r3, #7
 800111e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 ff38 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	37b0      	adds	r7, #176	; 0xb0
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40004400 	.word	0x40004400
 800113c:	40021000 	.word	0x40021000

08001140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001144:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001146:	e003      	b.n	8001150 <LoopCopyDataInit>

08001148 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800114a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800114c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800114e:	3104      	adds	r1, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001154:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001156:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001158:	d3f6      	bcc.n	8001148 <CopyDataInit>
	ldr	r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopForever+0x12>)
	b	LoopFillZerobss
 800115c:	e002      	b.n	8001164 <LoopFillZerobss>

0800115e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800115e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001160:	f842 3b04 	str.w	r3, [r2], #4

08001164 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <LoopForever+0x16>)
	cmp	r2, r3
 8001166:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001168:	d3f9      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800116a:	f7ff feb3 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f004 f83b 	bl	80051e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001172:	f7ff fc93 	bl	8000a9c <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001178:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800117c:	08005ba4 	.word	0x08005ba4
	ldr	r0, =_sdata
 8001180:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001184:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001188:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800118c:	20000284 	.word	0x20000284

08001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_2_IRQHandler>
	...

08001194 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_Init+0x3c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_Init+0x3c>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 feb6 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b0:	200f      	movs	r0, #15
 80011b2:	f000 f80f 	bl	80011d4 <HAL_InitTick>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	e001      	b.n	80011c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c2:	f7ff fdff 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_InitTick+0x6c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d023      	beq.n	8001230 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_InitTick+0x70>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_InitTick+0x6c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fec1 	bl	8001f86 <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d809      	bhi.n	8001224 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 fe8b 	bl	8001f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_InitTick+0x74>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e007      	b.n	8001234 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e004      	b.n	8001234 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e001      	b.n	8001234 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000000c 	.word	0x2000000c
 8001244:	20000004 	.word	0x20000004
 8001248:	20000008 	.word	0x20000008

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	2000000c 	.word	0x2000000c
 8001270:	20000270 	.word	0x20000270

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000270 	.word	0x20000270

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0ed      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f976 	bl	80005e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0202 	bic.w	r2, r2, #2
 8001306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff ffb4 	bl	8001274 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800130e:	e012      	b.n	8001336 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001310:	f7ff ffb0 	bl	8001274 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b0a      	cmp	r3, #10
 800131c:	d90b      	bls.n	8001336 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2205      	movs	r2, #5
 800132e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0c5      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e5      	bne.n	8001310 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff ff8e 	bl	8001274 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800135a:	e012      	b.n	8001382 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135c:	f7ff ff8a 	bl	8001274 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d90b      	bls.n	8001382 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2205      	movs	r2, #5
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e09f      	b.n	80014c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0e5      	beq.n	800135c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e1b      	ldrb	r3, [r3, #24]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e5b      	ldrb	r3, [r3, #25]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e9b      	ldrb	r3, [r3, #26]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0220 	orr.w	r2, r2, #32
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0220 	bic.w	r2, r2, #32
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7edb      	ldrb	r3, [r3, #27]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0210 	bic.w	r2, r2, #16
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e007      	b.n	8001438 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0210 	orr.w	r2, r2, #16
 8001436:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7f1b      	ldrb	r3, [r3, #28]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0208 	orr.w	r2, r2, #8
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e007      	b.n	8001462 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0208 	bic.w	r2, r2, #8
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7f5b      	ldrb	r3, [r3, #29]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d108      	bne.n	800147c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0204 	orr.w	r2, r2, #4
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e007      	b.n	800148c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0204 	bic.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	ea42 0103 	orr.w	r1, r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b087      	sub	sp, #28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014e2:	7cfb      	ldrb	r3, [r7, #19]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d003      	beq.n	80014f0 <HAL_CAN_ConfigFilter+0x26>
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	f040 80aa 	bne.w	8001644 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2201      	movs	r2, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d123      	bne.n	8001572 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	401a      	ands	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800154c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3248      	adds	r2, #72	; 0x48
 8001552:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001566:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001568:	6979      	ldr	r1, [r7, #20]
 800156a:	3348      	adds	r3, #72	; 0x48
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d122      	bne.n	80015c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	431a      	orrs	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800159a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3248      	adds	r2, #72	; 0x48
 80015a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	3348      	adds	r3, #72	; 0x48
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015da:	e007      	b.n	80015ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001606:	e007      	b.n	8001618 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001636:	f023 0201 	bic.w	r2, r3, #1
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e006      	b.n	8001652 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
  }
}
 8001652:	4618      	mov	r0, r3
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d12e      	bne.n	80016d0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2202      	movs	r2, #2
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800168a:	f7ff fdf3 	bl	8001274 <HAL_GetTick>
 800168e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001690:	e012      	b.n	80016b8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001692:	f7ff fdef 	bl	8001274 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b0a      	cmp	r3, #10
 800169e:	d90b      	bls.n	80016b8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2205      	movs	r2, #5
 80016b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e012      	b.n	80016de <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1e5      	bne.n	8001692 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e006      	b.n	80016de <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016e6:	b480      	push	{r7}
 80016e8:	b087      	sub	sp, #28
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d003      	beq.n	800170a <HAL_CAN_GetRxMessage+0x24>
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f040 80f3 	bne.w	80018f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10e      	bne.n	800172e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0e7      	b.n	80018fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0d8      	b.n	80018fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	331b      	adds	r3, #27
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0204 	and.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	331b      	adds	r3, #27
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0d5b      	lsrs	r3, r3, #21
 800177a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00b      	b.n	800179c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	331b      	adds	r3, #27
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	08db      	lsrs	r3, r3, #3
 8001794:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	331b      	adds	r3, #27
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0202 	and.w	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	331b      	adds	r3, #27
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	3304      	adds	r3, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 020f 	and.w	r2, r3, #15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	331b      	adds	r3, #27
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	331b      	adds	r3, #27
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	3304      	adds	r3, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0a1a      	lsrs	r2, r3, #8
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0c1a      	lsrs	r2, r3, #16
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3302      	adds	r3, #2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0e1a      	lsrs	r2, r3, #24
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3303      	adds	r3, #3
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3304      	adds	r3, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0a1a      	lsrs	r2, r3, #8
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	3305      	adds	r3, #5
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0c1a      	lsrs	r2, r3, #16
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3306      	adds	r3, #6
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e1a      	lsrs	r2, r3, #24
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	3307      	adds	r3, #7
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	e007      	b.n	80018ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0220 	orr.w	r2, r2, #32
 80018ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e006      	b.n	80018fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b08a      	sub	sp, #40	; 0x28
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d07c      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d023      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f983 	bl	8001c78 <HAL_CAN_TxMailbox0CompleteCallback>
 8001972:	e016      	b.n	80019a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	e00c      	b.n	80019a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	e002      	b.n	80019a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f989 	bl	8001cb4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d024      	beq.n	80019f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f963 	bl	8001c8c <HAL_CAN_TxMailbox1CompleteCallback>
 80019c6:	e016      	b.n	80019f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
 80019da:	e00c      	b.n	80019f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	e002      	b.n	80019f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f969 	bl	8001cc8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d024      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f943 	bl	8001ca0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a1a:	e016      	b.n	8001a4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	e00c      	b.n	8001a4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	e002      	b.n	8001a4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f949 	bl	8001cdc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00c      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2208      	movs	r2, #8
 8001a88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f93a 	bl	8001d04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f921 	bl	8001cf0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f91c 	bl	8001d2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f903 	bl	8001d18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00b      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f906 	bl	8001d40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8ff 	bl	8001d54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d07b      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d072      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d043      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d03e      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bd8:	2b60      	cmp	r3, #96	; 0x60
 8001bda:	d02b      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x32a>
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d82e      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001be0:	2b50      	cmp	r3, #80	; 0x50
 8001be2:	d022      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x320>
 8001be4:	2b50      	cmp	r3, #80	; 0x50
 8001be6:	d82a      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d019      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x316>
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d826      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001bf0:	2b30      	cmp	r3, #48	; 0x30
 8001bf2:	d010      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x30c>
 8001bf4:	2b30      	cmp	r3, #48	; 0x30
 8001bf6:	d822      	bhi.n	8001c3e <HAL_CAN_IRQHandler+0x334>
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d002      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x2f8>
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d005      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c00:	e01d      	b.n	8001c3e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c0a:	e019      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c14:	e014      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f043 0320 	orr.w	r3, r3, #32
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1e:	e00f      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c28:	e00a      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c32:	e005      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c3c:	e000      	b.n	8001c40 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2204      	movs	r2, #4
 8001c56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f87c 	bl	8001d68 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	e17f      	b.n	80022b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8171 	beq.w	80022aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d00b      	beq.n	8001fe8 <HAL_GPIO_Init+0x48>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fdc:	2b11      	cmp	r3, #17
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d130      	bne.n	800204a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800201e:	2201      	movs	r2, #1
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 0201 	and.w	r2, r3, #1
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b03      	cmp	r3, #3
 8002054:	d118      	bne.n	8002088 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x128>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b12      	cmp	r3, #18
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	6939      	ldr	r1, [r7, #16]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80ac 	beq.w	80022aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	4a5e      	ldr	r2, [pc, #376]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6613      	str	r3, [r2, #96]	; 0x60
 800215e:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800216a:	4a5a      	ldr	r2, [pc, #360]	; (80022d4 <HAL_GPIO_Init+0x334>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x242>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_GPIO_Init+0x338>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x23e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4e      	ldr	r2, [pc, #312]	; (80022dc <HAL_GPIO_Init+0x33c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x23a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_GPIO_Init+0x340>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x236>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <HAL_GPIO_Init+0x344>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x232>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_GPIO_Init+0x348>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x22e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <HAL_GPIO_Init+0x34c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x22a>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00c      	b.n	80021e4 <HAL_GPIO_Init+0x244>
 80021ca:	2307      	movs	r3, #7
 80021cc:	e00a      	b.n	80021e4 <HAL_GPIO_Init+0x244>
 80021ce:	2305      	movs	r3, #5
 80021d0:	e008      	b.n	80021e4 <HAL_GPIO_Init+0x244>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x244>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e004      	b.n	80021e4 <HAL_GPIO_Init+0x244>
 80021da:	2302      	movs	r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_Init+0x244>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_GPIO_Init+0x244>
 80021e2:	2300      	movs	r3, #0
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	f002 0203 	and.w	r2, r2, #3
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	4093      	lsls	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021f4:	4937      	ldr	r1, [pc, #220]	; (80022d4 <HAL_GPIO_Init+0x334>)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_GPIO_Init+0x350>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_GPIO_Init+0x350>)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_GPIO_Init+0x350>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_GPIO_Init+0x350>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_GPIO_Init+0x350>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_GPIO_Init+0x350>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_GPIO_Init+0x350>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_GPIO_Init+0x350>)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3301      	adds	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f47f ae78 	bne.w	8001fb0 <HAL_GPIO_Init+0x10>
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000
 80022d8:	48000400 	.word	0x48000400
 80022dc:	48000800 	.word	0x48000800
 80022e0:	48000c00 	.word	0x48000c00
 80022e4:	48001000 	.word	0x48001000
 80022e8:	48001400 	.word	0x48001400
 80022ec:	48001800 	.word	0x48001800
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002310:	e002      	b.n	8002318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e081      	b.n	800243a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fb48 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e006      	b.n	80023ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d104      	bne.n	80023be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	ea42 0103 	orr.w	r1, r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69d9      	ldr	r1, [r3, #28]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	460b      	mov	r3, r1
 8002452:	817b      	strh	r3, [r7, #10]
 8002454:	4613      	mov	r3, r2
 8002456:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b20      	cmp	r3, #32
 8002462:	f040 80da 	bne.w	800261a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_I2C_Master_Transmit+0x30>
 8002470:	2302      	movs	r3, #2
 8002472:	e0d3      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800247c:	f7fe fefa 	bl	8001274 <HAL_GetTick>
 8002480:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2319      	movs	r3, #25
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8f0 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0be      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2221      	movs	r2, #33	; 0x21
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2210      	movs	r2, #16
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	893a      	ldrh	r2, [r7, #8]
 80024be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2bff      	cmp	r3, #255	; 0xff
 80024ce:	d90e      	bls.n	80024ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_I2C_Master_Transmit+0x1e0>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f9e6 	bl	80028b8 <I2C_TransferConfig>
 80024ec:	e06c      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_I2C_Master_Transmit+0x1e0>)
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f9d5 	bl	80028b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800250e:	e05b      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6a39      	ldr	r1, [r7, #32]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8ed 	bl	80026f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e07b      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d034      	beq.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	2b00      	cmp	r3, #0
 8002564:	d130      	bne.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	2200      	movs	r2, #0
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f87f 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e04d      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d90e      	bls.n	80025a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	22ff      	movs	r2, #255	; 0xff
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	b2da      	uxtb	r2, r3
 8002596:	8979      	ldrh	r1, [r7, #10]
 8002598:	2300      	movs	r3, #0
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f989 	bl	80028b8 <I2C_TransferConfig>
 80025a6:	e00f      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	2300      	movs	r3, #0
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f978 	bl	80028b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d19e      	bne.n	8002510 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f8cc 	bl	8002774 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01a      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2220      	movs	r2, #32
 80025ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_I2C_Master_Transmit+0x1e4>)
 80025fa:	400b      	ands	r3, r1
 80025fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	80002000 	.word	0x80002000
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d007      	beq.n	8002668 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	619a      	str	r2, [r3, #24]
  }
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002684:	e022      	b.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d01e      	beq.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fdf1 	bl	8001274 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d113      	bne.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e00f      	b.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d0cd      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002700:	e02c      	b.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f870 	bl	80027ec <I2C_IsAcknowledgeFailed>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e02a      	b.n	800276c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d01e      	beq.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fda9 	bl	8001274 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d113      	bne.n	800275c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e007      	b.n	800276c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d1cb      	bne.n	8002702 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002780:	e028      	b.n	80027d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f830 	bl	80027ec <I2C_IsAcknowledgeFailed>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e026      	b.n	80027e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7fe fd6d 	bl	8001274 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d113      	bne.n	80027d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e007      	b.n	80027e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d1cf      	bne.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b10      	cmp	r3, #16
 8002804:	d151      	bne.n	80028aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002806:	e022      	b.n	800284e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d01e      	beq.n	800284e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002810:	f7fe fd30 	bl	8001274 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	d302      	bcc.n	8002826 <I2C_IsAcknowledgeFailed+0x3a>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d113      	bne.n	800284e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e02e      	b.n	80028ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b20      	cmp	r3, #32
 800285a:	d1d5      	bne.n	8002808 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2210      	movs	r2, #16
 8002862:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2220      	movs	r2, #32
 800286a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff fedd 	bl	800262c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800287e:	400b      	ands	r3, r1
 8002880:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f043 0204 	orr.w	r2, r3, #4
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	fe00e800 	.word	0xfe00e800

080028b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	4613      	mov	r3, r2
 80028c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	0d5b      	lsrs	r3, r3, #21
 80028d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <I2C_TransferConfig+0x58>)
 80028da:	430b      	orrs	r3, r1
 80028dc:	43db      	mvns	r3, r3
 80028de:	ea02 0103 	and.w	r1, r2, r3
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028e8:	7a7b      	ldrb	r3, [r7, #9]
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	03ff63ff 	.word	0x03ff63ff

08002914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b20      	cmp	r3, #32
 8002928:	d138      	bne.n	800299c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002934:	2302      	movs	r3, #2
 8002936:	e032      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	; 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d139      	bne.n	8002a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e033      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2224      	movs	r2, #36	; 0x24
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000

08002a60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6e:	d130      	bne.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7c:	d038      	beq.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2232      	movs	r2, #50	; 0x32
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9b      	lsrs	r3, r3, #18
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa4:	e002      	b.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab8:	d102      	bne.n	8002ac0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f2      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d110      	bne.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e00f      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ade:	d007      	beq.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae8:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40007000 	.word	0x40007000
 8002b04:	20000004 	.word	0x20000004
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e3d4      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1e:	4ba1      	ldr	r3, [pc, #644]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b28:	4b9e      	ldr	r3, [pc, #632]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80e4 	beq.w	8002d08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4a>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	f040 808b 	bne.w	8002c64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	f040 8087 	bne.w	8002c64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b56:	4b93      	ldr	r3, [pc, #588]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x62>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e3ac      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_RCC_OscConfig+0x7c>
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b86:	e005      	b.n	8002b94 <HAL_RCC_OscConfig+0x88>
 8002b88:	4b86      	ldr	r3, [pc, #536]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d223      	bcs.n	8002be0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fd41 	bl	8003624 <RCC_SetFlashLatencyFromMSIRange>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e38d      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bac:	4b7d      	ldr	r3, [pc, #500]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4977      	ldr	r1, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	4972      	ldr	r1, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
 8002bde:	e025      	b.n	8002c2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be0:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6f      	ldr	r2, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	496a      	ldr	r1, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bfe:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fd01 	bl	8003624 <RCC_SetFlashLatencyFromMSIRange>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e34d      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c2c:	f000 fc36 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	495a      	ldr	r1, [pc, #360]	; (8002da8 <HAL_RCC_OscConfig+0x29c>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCC_OscConfig+0x2a0>)
 8002c4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c4c:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_RCC_OscConfig+0x2a4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fabf 	bl	80011d4 <HAL_InitTick>
 8002c56:	4603      	mov	r3, r0
 8002c58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d052      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	e331      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d032      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fafc 	bl	8001274 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c80:	f7fe faf8 	bl	8001274 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e31a      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c92:	4b44      	ldr	r3, [pc, #272]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	493b      	ldr	r1, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	4936      	ldr	r1, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
 8002cd0:	e01a      	b.n	8002d08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cde:	f7fe fac9 	bl	8001274 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fac5 	bl	8001274 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e2e7      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x1da>
 8002d04:	e000      	b.n	8002d08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d074      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x21a>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d10e      	bne.n	8002d3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d10b      	bne.n	8002d3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d064      	beq.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d160      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e2c4      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x24a>
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e01d      	b.n	8002d92 <HAL_RCC_OscConfig+0x286>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x26e>
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x286>
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x298>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fa6b 	bl	8001274 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da0:	e011      	b.n	8002dc6 <HAL_RCC_OscConfig+0x2ba>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	08005b18 	.word	0x08005b18
 8002dac:	20000004 	.word	0x20000004
 8002db0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fa5e 	bl	8001274 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e280      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc6:	4baf      	ldr	r3, [pc, #700]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2a8>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fa4e 	bl	8001274 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fa4a 	bl	8001274 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e26c      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dee:	4ba5      	ldr	r3, [pc, #660]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x2d0>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d060      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x310>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d116      	bne.n	8002e4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e1c:	4b99      	ldr	r3, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x328>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e249      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b93      	ldr	r3, [pc, #588]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	4990      	ldr	r1, [pc, #576]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e48:	e040      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d023      	beq.n	8002e9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e52:	4b8c      	ldr	r3, [pc, #560]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a8b      	ldr	r2, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fa09 	bl	8001274 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fa05 	bl	8001274 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e227      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e78:	4b82      	ldr	r3, [pc, #520]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b7f      	ldr	r3, [pc, #508]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	497c      	ldr	r1, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	e018      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a79      	ldr	r2, [pc, #484]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe f9e5 	bl	8001274 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe f9e1 	bl	8001274 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e203      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec0:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d03c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	4a67      	ldr	r2, [pc, #412]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f9c0 	bl	8001274 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fe f9bc 	bl	8001274 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1de      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x3ec>
 8002f18:	e01b      	b.n	8002f52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	4a58      	ldr	r2, [pc, #352]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe f9a3 	bl	8001274 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f32:	f7fe f99f 	bl	8001274 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1c1      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ef      	bne.n	8002f32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a6 	beq.w	80030ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f64:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f70:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8c:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d118      	bne.n	8002fca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f98:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa4:	f7fe f966 	bl	8001274 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7fe f962 	bl	8001274 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e184      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbe:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_RCC_OscConfig+0x57c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4d8>
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe2:	e024      	b.n	800302e <HAL_RCC_OscConfig+0x522>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d110      	bne.n	800300e <HAL_RCC_OscConfig+0x502>
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	4a24      	ldr	r2, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a20      	ldr	r2, [pc, #128]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300c:	e00f      	b.n	800302e <HAL_RCC_OscConfig+0x522>
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe f91d 	bl	8001274 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe f919 	bl	8001274 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e139      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_OscConfig+0x578>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0ed      	beq.n	800303e <HAL_RCC_OscConfig+0x532>
 8003062:	e01a      	b.n	800309a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe f906 	bl	8001274 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800306a:	e00f      	b.n	800308c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fe f902 	bl	8001274 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d906      	bls.n	800308c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e122      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800308c:	4b90      	ldr	r3, [pc, #576]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e8      	bne.n	800306c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309a:	7ffb      	ldrb	r3, [r7, #31]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	4a8a      	ldr	r2, [pc, #552]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8108 	beq.w	80032c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	f040 80d0 	bne.w	8003260 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030c0:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d130      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	3b01      	subs	r3, #1
 80030e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d127      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d11f      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003100:	2a07      	cmp	r2, #7
 8003102:	bf14      	ite	ne
 8003104:	2201      	movne	r2, #1
 8003106:	2200      	moveq	r2, #0
 8003108:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800310a:	4293      	cmp	r3, r2
 800310c:	d113      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d109      	bne.n	8003136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d06e      	beq.n	8003214 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d069      	beq.n	8003210 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003148:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b7      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003158:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5c      	ldr	r2, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003164:	f7fe f886 	bl	8001274 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe f882 	bl	8001274 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0a4      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318a:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <HAL_RCC_OscConfig+0x7c8>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800319a:	3a01      	subs	r2, #1
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031a4:	0212      	lsls	r2, r2, #8
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031ac:	0852      	lsrs	r2, r2, #1
 80031ae:	3a01      	subs	r2, #1
 80031b0:	0552      	lsls	r2, r2, #21
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031b8:	0852      	lsrs	r2, r2, #1
 80031ba:	3a01      	subs	r2, #1
 80031bc:	0652      	lsls	r2, r2, #25
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031c4:	0912      	lsrs	r2, r2, #4
 80031c6:	0452      	lsls	r2, r2, #17
 80031c8:	430a      	orrs	r2, r1
 80031ca:	4941      	ldr	r1, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031d0:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3e      	ldr	r2, [pc, #248]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031dc:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a3b      	ldr	r2, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80031e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031e8:	f7fe f844 	bl	8001274 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe f840 	bl	8001274 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e062      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003202:	4b33      	ldr	r3, [pc, #204]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800320e:	e05a      	b.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e059      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d152      	bne.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003238:	f7fe f81c 	bl	8001274 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe f818 	bl	8001274 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e03a      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x734>
 800325e:	e032      	b.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b0c      	cmp	r3, #12
 8003264:	d02d      	beq.n	80032c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800326c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003270:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003284:	f023 0303 	bic.w	r3, r3, #3
 8003288:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 8003290:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fd ffeb 	bl	8001274 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fd ffe7 	bl	8001274 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e009      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x7c4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x796>
 80032c0:	e001      	b.n	80032c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	f99d808c 	.word	0xf99d808c

080032d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0c8      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b66      	ldr	r3, [pc, #408]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4961      	ldr	r1, [pc, #388]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b0      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04c      	beq.n	80033c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d107      	bne.n	8003340 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003330:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d121      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e09e      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d107      	bne.n	8003358 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d115      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e092      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003360:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e086      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003370:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e07e      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003380:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 0203 	bic.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	493f      	ldr	r1, [pc, #252]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003392:	f7fd ff6f 	bl	8001274 <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339a:	f7fd ff6b 	bl	8001274 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e066      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 020c 	and.w	r2, r3, #12
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	429a      	cmp	r2, r3
 80033c0:	d1eb      	bne.n	800339a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	492c      	ldr	r1, [pc, #176]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d210      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0207 	bic.w	r2, r3, #7
 80033f6:	4924      	ldr	r1, [pc, #144]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x1b0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e036      	b.n	800347e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4918      	ldr	r1, [pc, #96]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4910      	ldr	r1, [pc, #64]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344e:	f000 f825 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_ClockConfig+0x1b4>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490c      	ldr	r1, [pc, #48]	; (8003490 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd feae 	bl	80011d4 <HAL_InitTick>
 8003478:	4603      	mov	r3, r0
 800347a:	72fb      	strb	r3, [r7, #11]

  return status;
 800347c:	7afb      	ldrb	r3, [r7, #11]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	08005b18 	.word	0x08005b18
 8003494:	20000004 	.word	0x20000004
 8003498:	20000008 	.word	0x20000008

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d121      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d11e      	bne.n	800350e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034d0:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034ec:	4b2d      	ldr	r3, [pc, #180]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034f8:	4a2b      	ldr	r2, [pc, #172]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d102      	bne.n	800351a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e004      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d101      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d134      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800352a:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0xa6>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d003      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0xac>
 8003540:	e005      	b.n	800354e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003544:	617b      	str	r3, [r7, #20]
      break;
 8003546:	e005      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800354a:	617b      	str	r3, [r7, #20]
      break;
 800354c:	e002      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	617b      	str	r3, [r7, #20]
      break;
 8003552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	3301      	adds	r3, #1
 8003560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	fb02 f203 	mul.w	r2, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	0e5b      	lsrs	r3, r3, #25
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	3301      	adds	r3, #1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003594:	69bb      	ldr	r3, [r7, #24]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08005b30 	.word	0x08005b30
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	007a1200 	.word	0x007a1200

080035b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000004 	.word	0x20000004

080035cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035d0:	f7ff fff0 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4904      	ldr	r1, [pc, #16]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	08005b28 	.word	0x08005b28

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035fc:	f7ff ffda 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0adb      	lsrs	r3, r3, #11
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4904      	ldr	r1, [pc, #16]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000
 8003620:	08005b28 	.word	0x08005b28

08003624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800362c:	2300      	movs	r3, #0
 800362e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003630:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800363c:	f7ff fa02 	bl	8002a44 <HAL_PWREx_GetVoltageRange>
 8003640:	6178      	str	r0, [r7, #20]
 8003642:	e014      	b.n	800366e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003648:	4a24      	ldr	r2, [pc, #144]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364e:	6593      	str	r3, [r2, #88]	; 0x58
 8003650:	4b22      	ldr	r3, [pc, #136]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800365c:	f7ff f9f2 	bl	8002a44 <HAL_PWREx_GetVoltageRange>
 8003660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d10b      	bne.n	800368e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d919      	bls.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2ba0      	cmp	r3, #160	; 0xa0
 8003680:	d902      	bls.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003682:	2302      	movs	r3, #2
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e013      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003688:	2301      	movs	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e010      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d902      	bls.n	800369a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003694:	2303      	movs	r3, #3
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e00a      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d102      	bne.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036a0:	2302      	movs	r3, #2
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e004      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b70      	cmp	r3, #112	; 0x70
 80036aa:	d101      	bne.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036ac:	2301      	movs	r3, #1
 80036ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 0207 	bic.w	r2, r3, #7
 80036b8:	4909      	ldr	r1, [pc, #36]	; (80036e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40022000 	.word	0x40022000

080036e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036ec:	2300      	movs	r3, #0
 80036ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036f0:	2300      	movs	r3, #0
 80036f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d041      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003708:	d02a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800370a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800370e:	d824      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003710:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003714:	d008      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800371a:	d81e      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003724:	d010      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003726:	e018      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003728:	4b86      	ldr	r3, [pc, #536]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a85      	ldr	r2, [pc, #532]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003732:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003734:	e015      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fabb 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003746:	e00c      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3320      	adds	r3, #32
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fba6 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	74fb      	strb	r3, [r7, #19]
      break;
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003768:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003776:	4973      	ldr	r1, [pc, #460]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800377e:	e001      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d041      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003794:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003798:	d02a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800379a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800379e:	d824      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a4:	d008      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037aa:	d81e      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b4:	d010      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037b6:	e018      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037b8:	4b62      	ldr	r3, [pc, #392]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a61      	ldr	r2, [pc, #388]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c4:	e015      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fa73 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037d6:	e00c      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3320      	adds	r3, #32
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fb5e 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037e8:	e003      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	74fb      	strb	r3, [r7, #19]
      break;
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037f8:	4b52      	ldr	r3, [pc, #328]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003806:	494f      	ldr	r1, [pc, #316]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800380e:	e001      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80a0 	beq.w	8003962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	4b41      	ldr	r3, [pc, #260]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4a40      	ldr	r2, [pc, #256]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003846:	6593      	str	r3, [r2, #88]	; 0x58
 8003848:	4b3e      	ldr	r3, [pc, #248]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003858:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800385e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003862:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003864:	f7fd fd06 	bl	8001274 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800386a:	e009      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386c:	f7fd fd02 	bl	8001274 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	74fb      	strb	r3, [r7, #19]
        break;
 800387e:	e005      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ef      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d15c      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01f      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d019      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038b0:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	4a20      	ldr	r2, [pc, #128]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fd fcc1 	bl	8001274 <HAL_GetTick>
 80038f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f4:	e00b      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fd fcbd 	bl	8001274 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d902      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	74fb      	strb	r3, [r7, #19]
            break;
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ec      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10c      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003932:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800393a:	e009      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003950:	7c7b      	ldrb	r3, [r7, #17]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003956:	4b9e      	ldr	r3, [pc, #632]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	4a9d      	ldr	r2, [pc, #628]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003960:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800396e:	4b98      	ldr	r3, [pc, #608]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f023 0203 	bic.w	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	4994      	ldr	r1, [pc, #592]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003990:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f023 020c 	bic.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	498c      	ldr	r1, [pc, #560]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b2:	4b87      	ldr	r3, [pc, #540]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4983      	ldr	r1, [pc, #524]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039d4:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	497b      	ldr	r1, [pc, #492]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a04:	4972      	ldr	r1, [pc, #456]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a18:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	496a      	ldr	r1, [pc, #424]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	4961      	ldr	r1, [pc, #388]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a5c:	4b5c      	ldr	r3, [pc, #368]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	4959      	ldr	r1, [pc, #356]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7e:	4b54      	ldr	r3, [pc, #336]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	4950      	ldr	r1, [pc, #320]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	4948      	ldr	r1, [pc, #288]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac2:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	493f      	ldr	r1, [pc, #252]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d028      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae4:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af2:	4937      	ldr	r1, [pc, #220]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b04:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0e:	60d3      	str	r3, [r2, #12]
 8003b10:	e011      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f8c8 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	491f      	ldr	r1, [pc, #124]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b60:	d106      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b6c:	60d3      	str	r3, [r2, #12]
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f899 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02b      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bae:	4908      	ldr	r1, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a02      	ldr	r2, [pc, #8]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bca:	60d3      	str	r3, [r2, #12]
 8003bcc:	e014      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f867 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02f      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c12:	4928      	ldr	r1, [pc, #160]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c22:	d10d      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f844 	bl	8003cb8 <RCCEx_PLLSAI1_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d014      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	74bb      	strb	r3, [r7, #18]
 8003c3e:	e011      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3320      	adds	r3, #32
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f925 	bl	8003ea0 <RCCEx_PLLSAI2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7e:	490d      	ldr	r1, [pc, #52]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca2:	4904      	ldr	r1, [pc, #16]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003caa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000

08003cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cc6:	4b75      	ldr	r3, [pc, #468]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d018      	beq.n	8003d04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0203 	and.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d10d      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cea:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d047      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	e044      	b.n	8003d8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d018      	beq.n	8003d3e <RCCEx_PLLSAI1_Config+0x86>
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d825      	bhi.n	8003d5c <RCCEx_PLLSAI1_Config+0xa4>
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d002      	beq.n	8003d1a <RCCEx_PLLSAI1_Config+0x62>
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d009      	beq.n	8003d2c <RCCEx_PLLSAI1_Config+0x74>
 8003d18:	e020      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d1a:	4b60      	ldr	r3, [pc, #384]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11d      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2a:	e01a      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d2c:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3c:	e013      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d4a:	4b54      	ldr	r3, [pc, #336]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d5a:	e006      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d60:	e004      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10d      	bne.n	8003d8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d72:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	430b      	orrs	r3, r1
 8003d88:	4944      	ldr	r1, [pc, #272]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d17d      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d94:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da0:	f7fd fa68 	bl	8001274 <HAL_GetTick>
 8003da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da6:	e009      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003da8:	f7fd fa64 	bl	8001274 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	73fb      	strb	r3, [r7, #15]
        break;
 8003dba:	e005      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dbc:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ef      	bne.n	8003da8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d160      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d111      	bne.n	8003df8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd4:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6892      	ldr	r2, [r2, #8]
 8003de4:	0211      	lsls	r1, r2, #8
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68d2      	ldr	r2, [r2, #12]
 8003dea:	0912      	lsrs	r2, r2, #4
 8003dec:	0452      	lsls	r2, r2, #17
 8003dee:	430a      	orrs	r2, r1
 8003df0:	492a      	ldr	r1, [pc, #168]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	610b      	str	r3, [r1, #16]
 8003df6:	e027      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d112      	bne.n	8003e24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	0211      	lsls	r1, r2, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6912      	ldr	r2, [r2, #16]
 8003e14:	0852      	lsrs	r2, r2, #1
 8003e16:	3a01      	subs	r2, #1
 8003e18:	0552      	lsls	r2, r2, #21
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	491f      	ldr	r1, [pc, #124]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
 8003e22:	e011      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6892      	ldr	r2, [r2, #8]
 8003e34:	0211      	lsls	r1, r2, #8
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6952      	ldr	r2, [r2, #20]
 8003e3a:	0852      	lsrs	r2, r2, #1
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0652      	lsls	r2, r2, #25
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4916      	ldr	r1, [pc, #88]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd fa0e 	bl	8001274 <HAL_GetTick>
 8003e58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e5a:	e009      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5c:	f7fd fa0a 	bl	8001274 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d902      	bls.n	8003e70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003e6e:	e005      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ef      	beq.n	8003e5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	4904      	ldr	r1, [pc, #16]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d018      	beq.n	8003eec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eba:	4b67      	ldr	r3, [pc, #412]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10d      	bne.n	8003ee6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ed2:	4b61      	ldr	r3, [pc, #388]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d047      	beq.n	8003f76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	e044      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d018      	beq.n	8003f26 <RCCEx_PLLSAI2_Config+0x86>
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d825      	bhi.n	8003f44 <RCCEx_PLLSAI2_Config+0xa4>
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d002      	beq.n	8003f02 <RCCEx_PLLSAI2_Config+0x62>
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d009      	beq.n	8003f14 <RCCEx_PLLSAI2_Config+0x74>
 8003f00:	e020      	b.n	8003f44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f02:	4b55      	ldr	r3, [pc, #340]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11d      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f12:	e01a      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f24:	e013      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f26:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f42:	e006      	b.n	8003f52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e004      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f5a:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	4939      	ldr	r1, [pc, #228]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d167      	bne.n	800404c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f7c:	4b36      	ldr	r3, [pc, #216]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a35      	ldr	r2, [pc, #212]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fd f974 	bl	8001274 <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f8e:	e009      	b.n	8003fa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f90:	f7fd f970 	bl	8001274 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d902      	bls.n	8003fa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fa2:	e005      	b.n	8003fb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ef      	bne.n	8003f90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d14a      	bne.n	800404c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d111      	bne.n	8003fe0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6892      	ldr	r2, [r2, #8]
 8003fcc:	0211      	lsls	r1, r2, #8
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	0912      	lsrs	r2, r2, #4
 8003fd4:	0452      	lsls	r2, r2, #17
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	491f      	ldr	r1, [pc, #124]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	614b      	str	r3, [r1, #20]
 8003fde:	e011      	b.n	8004004 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	0211      	lsls	r1, r2, #8
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6912      	ldr	r2, [r2, #16]
 8003ff6:	0852      	lsrs	r2, r2, #1
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0652      	lsls	r2, r2, #25
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	4916      	ldr	r1, [pc, #88]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fd f930 	bl	8001274 <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004016:	e009      	b.n	800402c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004018:	f7fd f92c 	bl	8001274 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d902      	bls.n	800402c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	73fb      	strb	r3, [r7, #15]
          break;
 800402a:	e005      	b.n	8004038 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ef      	beq.n	8004018 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4904      	ldr	r1, [pc, #16]	; (8004058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004048:	4313      	orrs	r3, r2
 800404a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000

0800405c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06c      	beq.n	8004148 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fe6c 	bl	8000d60 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	22ca      	movs	r2, #202	; 0xca
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2253      	movs	r2, #83	; 0x53
 800409e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f87c 	bl	800419e <RTC_EnterInitMode>
 80040a6:	4603      	mov	r3, r0
 80040a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d14b      	bne.n	8004148 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6899      	ldr	r1, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68d2      	ldr	r2, [r2, #12]
 80040ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6919      	ldr	r1, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	041a      	lsls	r2, r3, #16
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f87f 	bl	8004204 <RTC_ExitInitMode>
 8004106:	4603      	mov	r3, r0
 8004108:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11b      	bne.n	8004148 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0203 	bic.w	r2, r2, #3
 800411e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004168:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800416a:	f7fd f883 	bl	8001274 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004170:	e009      	b.n	8004186 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004172:	f7fd f87f 	bl	8001274 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004180:	d901      	bls.n	8004186 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e007      	b.n	8004196 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ee      	beq.n	8004172 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d120      	bne.n	80041fa <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f04f 32ff 	mov.w	r2, #4294967295
 80041c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041c2:	f7fd f857 	bl	8001274 <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041c8:	e00d      	b.n	80041e6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041ca:	f7fd f853 	bl	8001274 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d8:	d905      	bls.n	80041e6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2203      	movs	r2, #3
 80041e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <RTC_EnterInitMode+0x5c>
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d1e7      	bne.n	80041ca <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <RTC_ExitInitMode+0x78>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <RTC_ExitInitMode+0x78>)
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <RTC_ExitInitMode+0x78>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10c      	bne.n	8004242 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ff92 	bl	8004152 <HAL_RTC_WaitForSynchro>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01e      	beq.n	8004272 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2203      	movs	r2, #3
 8004238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e017      	b.n	8004272 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <RTC_ExitInitMode+0x78>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <RTC_ExitInitMode+0x78>)
 8004248:	f023 0320 	bic.w	r3, r3, #32
 800424c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ff7f 	bl	8004152 <HAL_RTC_WaitForSynchro>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2203      	movs	r2, #3
 800425e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <RTC_ExitInitMode+0x78>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <RTC_ExitInitMode+0x78>)
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40002800 	.word	0x40002800

08004280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e049      	b.n	8004326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fe9e 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 f8fc 	bl	80044bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_TIM_ConfigClockSource+0x18>
 8004342:	2302      	movs	r3, #2
 8004344:	e0b5      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x184>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004364:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004368:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004370:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004382:	d03e      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xd4>
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004388:	f200 8087 	bhi.w	800449a <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	f000 8085 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x170>
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d87f      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
 800439a:	2b70      	cmp	r3, #112	; 0x70
 800439c:	d01a      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0xa6>
 800439e:	2b70      	cmp	r3, #112	; 0x70
 80043a0:	d87b      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
 80043a2:	2b60      	cmp	r3, #96	; 0x60
 80043a4:	d050      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0x11a>
 80043a6:	2b60      	cmp	r3, #96	; 0x60
 80043a8:	d877      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
 80043aa:	2b50      	cmp	r3, #80	; 0x50
 80043ac:	d03c      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0xfa>
 80043ae:	2b50      	cmp	r3, #80	; 0x50
 80043b0:	d873      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d058      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0x13a>
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d86f      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
 80043ba:	2b30      	cmp	r3, #48	; 0x30
 80043bc:	d064      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x15a>
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d86b      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d060      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x15a>
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d867      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d05c      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x15a>
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d05a      	beq.n	8004488 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043d2:	e062      	b.n	800449a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f000 f97e 	bl	80046e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]
      break;
 8004400:	e04e      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f000 f967 	bl	80046e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004424:	609a      	str	r2, [r3, #8]
      break;
 8004426:	e03b      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	461a      	mov	r2, r3
 8004436:	f000 f8db 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2150      	movs	r1, #80	; 0x50
 8004440:	4618      	mov	r0, r3
 8004442:	f000 f934 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8004446:	e02b      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	461a      	mov	r2, r3
 8004456:	f000 f8fa 	bl	800464e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2160      	movs	r1, #96	; 0x60
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f924 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8004466:	e01b      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	461a      	mov	r2, r3
 8004476:	f000 f8bb 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f914 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 8004486:	e00b      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 f90b 	bl	80046ae <TIM_ITRx_SetConfig>
        break;
 8004498:	e002      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800449e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a40      	ldr	r2, [pc, #256]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d00f      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <TIM_Base_SetConfig+0x118>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <TIM_Base_SetConfig+0x11c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3b      	ldr	r2, [pc, #236]	; (80045dc <TIM_Base_SetConfig+0x120>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3a      	ldr	r2, [pc, #232]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d01b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <TIM_Base_SetConfig+0x118>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d017      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <TIM_Base_SetConfig+0x11c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <TIM_Base_SetConfig+0x120>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a29      	ldr	r2, [pc, #164]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <TIM_Base_SetConfig+0x128>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a27      	ldr	r2, [pc, #156]	; (80045e8 <TIM_Base_SetConfig+0x12c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <TIM_Base_SetConfig+0x130>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <TIM_Base_SetConfig+0x128>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <TIM_Base_SetConfig+0x12c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <TIM_Base_SetConfig+0x130>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	615a      	str	r2, [r3, #20]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40013400 	.word	0x40013400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0201 	bic.w	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f023 030a 	bic.w	r3, r3, #10
 800462c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f043 0307 	orr.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	431a      	orrs	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e068      	b.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2e      	ldr	r2, [pc, #184]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ae:	d018      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a13      	ldr	r2, [pc, #76]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d10c      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40014000 	.word	0x40014000

08004834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e040      	b.n	80048c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc fc16 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	; 0x24
 8004860:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8c0 	bl	80049f8 <UART_SetConfig>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e022      	b.n	80048c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fb3e 	bl	8004f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800489e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fbc5 	bl	8005050 <UART_CheckIdleState>
 80048c6:	4603      	mov	r3, r0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	f040 8082 	bne.w	80049ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_UART_Transmit+0x26>
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07a      	b.n	80049f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_UART_Transmit+0x38>
 8004904:	2302      	movs	r3, #2
 8004906:	e073      	b.n	80049f0 <HAL_UART_Transmit+0x120>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2221      	movs	r2, #33	; 0x21
 800491c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491e:	f7fc fca9 	bl	8001274 <HAL_GetTick>
 8004922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493c:	d108      	bne.n	8004950 <HAL_UART_Transmit+0x80>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e003      	b.n	8004958 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004960:	e02d      	b.n	80049be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2200      	movs	r2, #0
 800496a:	2180      	movs	r1, #128	; 0x80
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fbb8 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e039      	b.n	80049f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	881a      	ldrh	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498e:	b292      	uxth	r2, r2
 8004990:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	3302      	adds	r3, #2
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	e008      	b.n	80049ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	b292      	uxth	r2, r2
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	3301      	adds	r3, #1
 80049aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1cb      	bne.n	8004962 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2140      	movs	r1, #64	; 0x40
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fb84 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e005      	b.n	80049f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e000      	b.n	80049f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	b5b0      	push	{r4, r5, r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4bad      	ldr	r3, [pc, #692]	; (8004cd8 <UART_SetConfig+0x2e0>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4aa2      	ldr	r2, [pc, #648]	; (8004cdc <UART_SetConfig+0x2e4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d004      	beq.n	8004a60 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a99      	ldr	r2, [pc, #612]	; (8004ce0 <UART_SetConfig+0x2e8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d121      	bne.n	8004ac2 <UART_SetConfig+0xca>
 8004a7e:	4b99      	ldr	r3, [pc, #612]	; (8004ce4 <UART_SetConfig+0x2ec>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d817      	bhi.n	8004abc <UART_SetConfig+0xc4>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <UART_SetConfig+0x9c>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004aa5 	.word	0x08004aa5
 8004a98:	08004ab1 	.word	0x08004ab1
 8004a9c:	08004aab 	.word	0x08004aab
 8004aa0:	08004ab7 	.word	0x08004ab7
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	76fb      	strb	r3, [r7, #27]
 8004aa8:	e0e7      	b.n	8004c7a <UART_SetConfig+0x282>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	76fb      	strb	r3, [r7, #27]
 8004aae:	e0e4      	b.n	8004c7a <UART_SetConfig+0x282>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	76fb      	strb	r3, [r7, #27]
 8004ab4:	e0e1      	b.n	8004c7a <UART_SetConfig+0x282>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	76fb      	strb	r3, [r7, #27]
 8004aba:	e0de      	b.n	8004c7a <UART_SetConfig+0x282>
 8004abc:	2310      	movs	r3, #16
 8004abe:	76fb      	strb	r3, [r7, #27]
 8004ac0:	e0db      	b.n	8004c7a <UART_SetConfig+0x282>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a88      	ldr	r2, [pc, #544]	; (8004ce8 <UART_SetConfig+0x2f0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d132      	bne.n	8004b32 <UART_SetConfig+0x13a>
 8004acc:	4b85      	ldr	r3, [pc, #532]	; (8004ce4 <UART_SetConfig+0x2ec>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d828      	bhi.n	8004b2c <UART_SetConfig+0x134>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0xe8>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b2d 	.word	0x08004b2d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b21 	.word	0x08004b21
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b2d 	.word	0x08004b2d
 8004afc:	08004b2d 	.word	0x08004b2d
 8004b00:	08004b1b 	.word	0x08004b1b
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b2d 	.word	0x08004b2d
 8004b10:	08004b27 	.word	0x08004b27
 8004b14:	2300      	movs	r3, #0
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e0af      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	76fb      	strb	r3, [r7, #27]
 8004b1e:	e0ac      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b20:	2304      	movs	r3, #4
 8004b22:	76fb      	strb	r3, [r7, #27]
 8004b24:	e0a9      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b26:	2308      	movs	r3, #8
 8004b28:	76fb      	strb	r3, [r7, #27]
 8004b2a:	e0a6      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	76fb      	strb	r3, [r7, #27]
 8004b30:	e0a3      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a6d      	ldr	r2, [pc, #436]	; (8004cec <UART_SetConfig+0x2f4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d120      	bne.n	8004b7e <UART_SetConfig+0x186>
 8004b3c:	4b69      	ldr	r3, [pc, #420]	; (8004ce4 <UART_SetConfig+0x2ec>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b46:	2b30      	cmp	r3, #48	; 0x30
 8004b48:	d013      	beq.n	8004b72 <UART_SetConfig+0x17a>
 8004b4a:	2b30      	cmp	r3, #48	; 0x30
 8004b4c:	d814      	bhi.n	8004b78 <UART_SetConfig+0x180>
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d009      	beq.n	8004b66 <UART_SetConfig+0x16e>
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d810      	bhi.n	8004b78 <UART_SetConfig+0x180>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <UART_SetConfig+0x168>
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d006      	beq.n	8004b6c <UART_SetConfig+0x174>
 8004b5e:	e00b      	b.n	8004b78 <UART_SetConfig+0x180>
 8004b60:	2300      	movs	r3, #0
 8004b62:	76fb      	strb	r3, [r7, #27]
 8004b64:	e089      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b66:	2302      	movs	r3, #2
 8004b68:	76fb      	strb	r3, [r7, #27]
 8004b6a:	e086      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	76fb      	strb	r3, [r7, #27]
 8004b70:	e083      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b72:	2308      	movs	r3, #8
 8004b74:	76fb      	strb	r3, [r7, #27]
 8004b76:	e080      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	76fb      	strb	r3, [r7, #27]
 8004b7c:	e07d      	b.n	8004c7a <UART_SetConfig+0x282>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5b      	ldr	r2, [pc, #364]	; (8004cf0 <UART_SetConfig+0x2f8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d120      	bne.n	8004bca <UART_SetConfig+0x1d2>
 8004b88:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <UART_SetConfig+0x2ec>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b92:	2bc0      	cmp	r3, #192	; 0xc0
 8004b94:	d013      	beq.n	8004bbe <UART_SetConfig+0x1c6>
 8004b96:	2bc0      	cmp	r3, #192	; 0xc0
 8004b98:	d814      	bhi.n	8004bc4 <UART_SetConfig+0x1cc>
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d009      	beq.n	8004bb2 <UART_SetConfig+0x1ba>
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d810      	bhi.n	8004bc4 <UART_SetConfig+0x1cc>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <UART_SetConfig+0x1b4>
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d006      	beq.n	8004bb8 <UART_SetConfig+0x1c0>
 8004baa:	e00b      	b.n	8004bc4 <UART_SetConfig+0x1cc>
 8004bac:	2300      	movs	r3, #0
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	e063      	b.n	8004c7a <UART_SetConfig+0x282>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	76fb      	strb	r3, [r7, #27]
 8004bb6:	e060      	b.n	8004c7a <UART_SetConfig+0x282>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	76fb      	strb	r3, [r7, #27]
 8004bbc:	e05d      	b.n	8004c7a <UART_SetConfig+0x282>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	76fb      	strb	r3, [r7, #27]
 8004bc2:	e05a      	b.n	8004c7a <UART_SetConfig+0x282>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	76fb      	strb	r3, [r7, #27]
 8004bc8:	e057      	b.n	8004c7a <UART_SetConfig+0x282>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a49      	ldr	r2, [pc, #292]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d125      	bne.n	8004c20 <UART_SetConfig+0x228>
 8004bd4:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <UART_SetConfig+0x2ec>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be2:	d017      	beq.n	8004c14 <UART_SetConfig+0x21c>
 8004be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be8:	d817      	bhi.n	8004c1a <UART_SetConfig+0x222>
 8004bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bee:	d00b      	beq.n	8004c08 <UART_SetConfig+0x210>
 8004bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf4:	d811      	bhi.n	8004c1a <UART_SetConfig+0x222>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <UART_SetConfig+0x20a>
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d006      	beq.n	8004c0e <UART_SetConfig+0x216>
 8004c00:	e00b      	b.n	8004c1a <UART_SetConfig+0x222>
 8004c02:	2300      	movs	r3, #0
 8004c04:	76fb      	strb	r3, [r7, #27]
 8004c06:	e038      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	76fb      	strb	r3, [r7, #27]
 8004c0c:	e035      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c0e:	2304      	movs	r3, #4
 8004c10:	76fb      	strb	r3, [r7, #27]
 8004c12:	e032      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c14:	2308      	movs	r3, #8
 8004c16:	76fb      	strb	r3, [r7, #27]
 8004c18:	e02f      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	76fb      	strb	r3, [r7, #27]
 8004c1e:	e02c      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <UART_SetConfig+0x2e4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d125      	bne.n	8004c76 <UART_SetConfig+0x27e>
 8004c2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <UART_SetConfig+0x2ec>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c38:	d017      	beq.n	8004c6a <UART_SetConfig+0x272>
 8004c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c3e:	d817      	bhi.n	8004c70 <UART_SetConfig+0x278>
 8004c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c44:	d00b      	beq.n	8004c5e <UART_SetConfig+0x266>
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d811      	bhi.n	8004c70 <UART_SetConfig+0x278>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <UART_SetConfig+0x260>
 8004c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c54:	d006      	beq.n	8004c64 <UART_SetConfig+0x26c>
 8004c56:	e00b      	b.n	8004c70 <UART_SetConfig+0x278>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	76fb      	strb	r3, [r7, #27]
 8004c5c:	e00d      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	76fb      	strb	r3, [r7, #27]
 8004c62:	e00a      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c64:	2304      	movs	r3, #4
 8004c66:	76fb      	strb	r3, [r7, #27]
 8004c68:	e007      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e004      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c70:	2310      	movs	r3, #16
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e001      	b.n	8004c7a <UART_SetConfig+0x282>
 8004c76:	2310      	movs	r3, #16
 8004c78:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <UART_SetConfig+0x2e4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	f040 8087 	bne.w	8004d94 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c86:	7efb      	ldrb	r3, [r7, #27]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d837      	bhi.n	8004cfc <UART_SetConfig+0x304>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <UART_SetConfig+0x29c>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cfd 	.word	0x08004cfd
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cfd 	.word	0x08004cfd
 8004ca4:	08004cc7 	.word	0x08004cc7
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004cfd 	.word	0x08004cfd
 8004cb0:	08004cfd 	.word	0x08004cfd
 8004cb4:	08004ccf 	.word	0x08004ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7fe fc88 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004cbc:	6178      	str	r0, [r7, #20]
        break;
 8004cbe:	e022      	b.n	8004d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <UART_SetConfig+0x300>)
 8004cc2:	617b      	str	r3, [r7, #20]
        break;
 8004cc4:	e01f      	b.n	8004d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc6:	f7fe fbe9 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004cca:	6178      	str	r0, [r7, #20]
        break;
 8004ccc:	e01b      	b.n	8004d06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd2:	617b      	str	r3, [r7, #20]
        break;
 8004cd4:	e017      	b.n	8004d06 <UART_SetConfig+0x30e>
 8004cd6:	bf00      	nop
 8004cd8:	efff69f3 	.word	0xefff69f3
 8004cdc:	40008000 	.word	0x40008000
 8004ce0:	40013800 	.word	0x40013800
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40004400 	.word	0x40004400
 8004cec:	40004800 	.word	0x40004800
 8004cf0:	40004c00 	.word	0x40004c00
 8004cf4:	40005000 	.word	0x40005000
 8004cf8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	76bb      	strb	r3, [r7, #26]
        break;
 8004d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80f1 	beq.w	8004ef0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4413      	add	r3, r2
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d305      	bcc.n	8004d2a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d902      	bls.n	8004d30 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	76bb      	strb	r3, [r7, #26]
 8004d2e:	e0df      	b.n	8004ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	020b      	lsls	r3, r1, #8
 8004d42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d46:	0202      	lsls	r2, r0, #8
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	6849      	ldr	r1, [r1, #4]
 8004d4c:	0849      	lsrs	r1, r1, #1
 8004d4e:	4608      	mov	r0, r1
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	1814      	adds	r4, r2, r0
 8004d56:	eb43 0501 	adc.w	r5, r3, r1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	4620      	mov	r0, r4
 8004d66:	4629      	mov	r1, r5
 8004d68:	f7fb fa8a 	bl	8000280 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4613      	mov	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d7a:	d308      	bcc.n	8004d8e <UART_SetConfig+0x396>
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d82:	d204      	bcs.n	8004d8e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	e0b0      	b.n	8004ef0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	76bb      	strb	r3, [r7, #26]
 8004d92:	e0ad      	b.n	8004ef0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	d15c      	bne.n	8004e58 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004d9e:	7efb      	ldrb	r3, [r7, #27]
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d828      	bhi.n	8004df6 <UART_SetConfig+0x3fe>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0x3b4>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004de1 	.word	0x08004de1
 8004db8:	08004df7 	.word	0x08004df7
 8004dbc:	08004de7 	.word	0x08004de7
 8004dc0:	08004df7 	.word	0x08004df7
 8004dc4:	08004df7 	.word	0x08004df7
 8004dc8:	08004df7 	.word	0x08004df7
 8004dcc:	08004def 	.word	0x08004def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd0:	f7fe fbfc 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004dd4:	6178      	str	r0, [r7, #20]
        break;
 8004dd6:	e013      	b.n	8004e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd8:	f7fe fc0e 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004ddc:	6178      	str	r0, [r7, #20]
        break;
 8004dde:	e00f      	b.n	8004e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de0:	4b49      	ldr	r3, [pc, #292]	; (8004f08 <UART_SetConfig+0x510>)
 8004de2:	617b      	str	r3, [r7, #20]
        break;
 8004de4:	e00c      	b.n	8004e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de6:	f7fe fb59 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004dea:	6178      	str	r0, [r7, #20]
        break;
 8004dec:	e008      	b.n	8004e00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	617b      	str	r3, [r7, #20]
        break;
 8004df4:	e004      	b.n	8004e00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	76bb      	strb	r3, [r7, #26]
        break;
 8004dfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d074      	beq.n	8004ef0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	005a      	lsls	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	085b      	lsrs	r3, r3, #1
 8004e10:	441a      	add	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d916      	bls.n	8004e52 <UART_SetConfig+0x45a>
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2a:	d212      	bcs.n	8004e52 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f023 030f 	bic.w	r3, r3, #15
 8004e34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	89fa      	ldrh	r2, [r7, #14]
 8004e4e:	60da      	str	r2, [r3, #12]
 8004e50:	e04e      	b.n	8004ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	76bb      	strb	r3, [r7, #26]
 8004e56:	e04b      	b.n	8004ef0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e58:	7efb      	ldrb	r3, [r7, #27]
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d827      	bhi.n	8004eae <UART_SetConfig+0x4b6>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <UART_SetConfig+0x46c>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	08004eaf 	.word	0x08004eaf
 8004e74:	08004e9f 	.word	0x08004e9f
 8004e78:	08004eaf 	.word	0x08004eaf
 8004e7c:	08004eaf 	.word	0x08004eaf
 8004e80:	08004eaf 	.word	0x08004eaf
 8004e84:	08004ea7 	.word	0x08004ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e88:	f7fe fba0 	bl	80035cc <HAL_RCC_GetPCLK1Freq>
 8004e8c:	6178      	str	r0, [r7, #20]
        break;
 8004e8e:	e013      	b.n	8004eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e90:	f7fe fbb2 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004e94:	6178      	str	r0, [r7, #20]
        break;
 8004e96:	e00f      	b.n	8004eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <UART_SetConfig+0x510>)
 8004e9a:	617b      	str	r3, [r7, #20]
        break;
 8004e9c:	e00c      	b.n	8004eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9e:	f7fe fafd 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8004ea2:	6178      	str	r0, [r7, #20]
        break;
 8004ea4:	e008      	b.n	8004eb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	617b      	str	r3, [r7, #20]
        break;
 8004eac:	e004      	b.n	8004eb8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	76bb      	strb	r3, [r7, #26]
        break;
 8004eb6:	bf00      	nop
    }

    if (pclk != 0U)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d018      	beq.n	8004ef0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085a      	lsrs	r2, r3, #1
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	d908      	bls.n	8004eec <UART_SetConfig+0x4f4>
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d204      	bcs.n	8004eec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	e001      	b.n	8004ef0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004efc:	7ebb      	ldrb	r3, [r7, #26]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bdb0      	pop	{r4, r5, r7, pc}
 8004f06:	bf00      	nop
 8004f08:	00f42400 	.word	0x00f42400

08004f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01a      	beq.n	8005022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500a:	d10a      	bne.n	8005022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	605a      	str	r2, [r3, #4]
  }
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af02      	add	r7, sp, #8
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005060:	f7fc f908 	bl	8001274 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d10e      	bne.n	8005092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f82d 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e023      	b.n	80050da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b04      	cmp	r3, #4
 800509e:	d10e      	bne.n	80050be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f817 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e00d      	b.n	80050da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	e05e      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fa:	d05a      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fc:	f7fc f8ba 	bl	8001274 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <UART_WaitOnFlagUntilTimeout+0x30>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11b      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005120:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e043      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02c      	beq.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005166:	d124      	bne.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005170:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005180:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e00f      	b.n	80051d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d091      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <__errno>:
 80051dc:	4b01      	ldr	r3, [pc, #4]	; (80051e4 <__errno+0x8>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000010 	.word	0x20000010

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4d0d      	ldr	r5, [pc, #52]	; (8005220 <__libc_init_array+0x38>)
 80051ec:	4c0d      	ldr	r4, [pc, #52]	; (8005224 <__libc_init_array+0x3c>)
 80051ee:	1b64      	subs	r4, r4, r5
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	2600      	movs	r6, #0
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	4d0b      	ldr	r5, [pc, #44]	; (8005228 <__libc_init_array+0x40>)
 80051fa:	4c0c      	ldr	r4, [pc, #48]	; (800522c <__libc_init_array+0x44>)
 80051fc:	f000 fc4e 	bl	8005a9c <_init>
 8005200:	1b64      	subs	r4, r4, r5
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	2600      	movs	r6, #0
 8005206:	42a6      	cmp	r6, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005210:	4798      	blx	r3
 8005212:	3601      	adds	r6, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	f855 3b04 	ldr.w	r3, [r5], #4
 800521a:	4798      	blx	r3
 800521c:	3601      	adds	r6, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	08005b9c 	.word	0x08005b9c
 8005224:	08005b9c 	.word	0x08005b9c
 8005228:	08005b9c 	.word	0x08005b9c
 800522c:	08005ba0 	.word	0x08005ba0

08005230 <memset>:
 8005230:	4402      	add	r2, r0
 8005232:	4603      	mov	r3, r0
 8005234:	4293      	cmp	r3, r2
 8005236:	d100      	bne.n	800523a <memset+0xa>
 8005238:	4770      	bx	lr
 800523a:	f803 1b01 	strb.w	r1, [r3], #1
 800523e:	e7f9      	b.n	8005234 <memset+0x4>

08005240 <siprintf>:
 8005240:	b40e      	push	{r1, r2, r3}
 8005242:	b500      	push	{lr}
 8005244:	b09c      	sub	sp, #112	; 0x70
 8005246:	ab1d      	add	r3, sp, #116	; 0x74
 8005248:	9002      	str	r0, [sp, #8]
 800524a:	9006      	str	r0, [sp, #24]
 800524c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005250:	4809      	ldr	r0, [pc, #36]	; (8005278 <siprintf+0x38>)
 8005252:	9107      	str	r1, [sp, #28]
 8005254:	9104      	str	r1, [sp, #16]
 8005256:	4909      	ldr	r1, [pc, #36]	; (800527c <siprintf+0x3c>)
 8005258:	f853 2b04 	ldr.w	r2, [r3], #4
 800525c:	9105      	str	r1, [sp, #20]
 800525e:	6800      	ldr	r0, [r0, #0]
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	a902      	add	r1, sp, #8
 8005264:	f000 f868 	bl	8005338 <_svfiprintf_r>
 8005268:	9b02      	ldr	r3, [sp, #8]
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	b01c      	add	sp, #112	; 0x70
 8005270:	f85d eb04 	ldr.w	lr, [sp], #4
 8005274:	b003      	add	sp, #12
 8005276:	4770      	bx	lr
 8005278:	20000010 	.word	0x20000010
 800527c:	ffff0208 	.word	0xffff0208

08005280 <__ssputs_r>:
 8005280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	688e      	ldr	r6, [r1, #8]
 8005286:	429e      	cmp	r6, r3
 8005288:	4682      	mov	sl, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4690      	mov	r8, r2
 800528e:	461f      	mov	r7, r3
 8005290:	d838      	bhi.n	8005304 <__ssputs_r+0x84>
 8005292:	898a      	ldrh	r2, [r1, #12]
 8005294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005298:	d032      	beq.n	8005300 <__ssputs_r+0x80>
 800529a:	6825      	ldr	r5, [r4, #0]
 800529c:	6909      	ldr	r1, [r1, #16]
 800529e:	eba5 0901 	sub.w	r9, r5, r1
 80052a2:	6965      	ldr	r5, [r4, #20]
 80052a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052ac:	3301      	adds	r3, #1
 80052ae:	444b      	add	r3, r9
 80052b0:	106d      	asrs	r5, r5, #1
 80052b2:	429d      	cmp	r5, r3
 80052b4:	bf38      	it	cc
 80052b6:	461d      	movcc	r5, r3
 80052b8:	0553      	lsls	r3, r2, #21
 80052ba:	d531      	bpl.n	8005320 <__ssputs_r+0xa0>
 80052bc:	4629      	mov	r1, r5
 80052be:	f000 fb47 	bl	8005950 <_malloc_r>
 80052c2:	4606      	mov	r6, r0
 80052c4:	b950      	cbnz	r0, 80052dc <__ssputs_r+0x5c>
 80052c6:	230c      	movs	r3, #12
 80052c8:	f8ca 3000 	str.w	r3, [sl]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052dc:	6921      	ldr	r1, [r4, #16]
 80052de:	464a      	mov	r2, r9
 80052e0:	f000 fabe 	bl	8005860 <memcpy>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	6126      	str	r6, [r4, #16]
 80052f2:	6165      	str	r5, [r4, #20]
 80052f4:	444e      	add	r6, r9
 80052f6:	eba5 0509 	sub.w	r5, r5, r9
 80052fa:	6026      	str	r6, [r4, #0]
 80052fc:	60a5      	str	r5, [r4, #8]
 80052fe:	463e      	mov	r6, r7
 8005300:	42be      	cmp	r6, r7
 8005302:	d900      	bls.n	8005306 <__ssputs_r+0x86>
 8005304:	463e      	mov	r6, r7
 8005306:	4632      	mov	r2, r6
 8005308:	6820      	ldr	r0, [r4, #0]
 800530a:	4641      	mov	r1, r8
 800530c:	f000 fab6 	bl	800587c <memmove>
 8005310:	68a3      	ldr	r3, [r4, #8]
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	1b9b      	subs	r3, r3, r6
 8005316:	4432      	add	r2, r6
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	6022      	str	r2, [r4, #0]
 800531c:	2000      	movs	r0, #0
 800531e:	e7db      	b.n	80052d8 <__ssputs_r+0x58>
 8005320:	462a      	mov	r2, r5
 8005322:	f000 fb6f 	bl	8005a04 <_realloc_r>
 8005326:	4606      	mov	r6, r0
 8005328:	2800      	cmp	r0, #0
 800532a:	d1e1      	bne.n	80052f0 <__ssputs_r+0x70>
 800532c:	6921      	ldr	r1, [r4, #16]
 800532e:	4650      	mov	r0, sl
 8005330:	f000 fabe 	bl	80058b0 <_free_r>
 8005334:	e7c7      	b.n	80052c6 <__ssputs_r+0x46>
	...

08005338 <_svfiprintf_r>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	4698      	mov	r8, r3
 800533e:	898b      	ldrh	r3, [r1, #12]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	b09d      	sub	sp, #116	; 0x74
 8005344:	4607      	mov	r7, r0
 8005346:	460d      	mov	r5, r1
 8005348:	4614      	mov	r4, r2
 800534a:	d50e      	bpl.n	800536a <_svfiprintf_r+0x32>
 800534c:	690b      	ldr	r3, [r1, #16]
 800534e:	b963      	cbnz	r3, 800536a <_svfiprintf_r+0x32>
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	f000 fafd 	bl	8005950 <_malloc_r>
 8005356:	6028      	str	r0, [r5, #0]
 8005358:	6128      	str	r0, [r5, #16]
 800535a:	b920      	cbnz	r0, 8005366 <_svfiprintf_r+0x2e>
 800535c:	230c      	movs	r3, #12
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e0d1      	b.n	800550a <_svfiprintf_r+0x1d2>
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	616b      	str	r3, [r5, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	9309      	str	r3, [sp, #36]	; 0x24
 800536e:	2320      	movs	r3, #32
 8005370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005374:	f8cd 800c 	str.w	r8, [sp, #12]
 8005378:	2330      	movs	r3, #48	; 0x30
 800537a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005524 <_svfiprintf_r+0x1ec>
 800537e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005382:	f04f 0901 	mov.w	r9, #1
 8005386:	4623      	mov	r3, r4
 8005388:	469a      	mov	sl, r3
 800538a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538e:	b10a      	cbz	r2, 8005394 <_svfiprintf_r+0x5c>
 8005390:	2a25      	cmp	r2, #37	; 0x25
 8005392:	d1f9      	bne.n	8005388 <_svfiprintf_r+0x50>
 8005394:	ebba 0b04 	subs.w	fp, sl, r4
 8005398:	d00b      	beq.n	80053b2 <_svfiprintf_r+0x7a>
 800539a:	465b      	mov	r3, fp
 800539c:	4622      	mov	r2, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ff6d 	bl	8005280 <__ssputs_r>
 80053a6:	3001      	adds	r0, #1
 80053a8:	f000 80aa 	beq.w	8005500 <_svfiprintf_r+0x1c8>
 80053ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ae:	445a      	add	r2, fp
 80053b0:	9209      	str	r2, [sp, #36]	; 0x24
 80053b2:	f89a 3000 	ldrb.w	r3, [sl]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80a2 	beq.w	8005500 <_svfiprintf_r+0x1c8>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c6:	f10a 0a01 	add.w	sl, sl, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d2:	931a      	str	r3, [sp, #104]	; 0x68
 80053d4:	4654      	mov	r4, sl
 80053d6:	2205      	movs	r2, #5
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	4851      	ldr	r0, [pc, #324]	; (8005524 <_svfiprintf_r+0x1ec>)
 80053de:	f7fa feff 	bl	80001e0 <memchr>
 80053e2:	9a04      	ldr	r2, [sp, #16]
 80053e4:	b9d8      	cbnz	r0, 800541e <_svfiprintf_r+0xe6>
 80053e6:	06d0      	lsls	r0, r2, #27
 80053e8:	bf44      	itt	mi
 80053ea:	2320      	movmi	r3, #32
 80053ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f0:	0711      	lsls	r1, r2, #28
 80053f2:	bf44      	itt	mi
 80053f4:	232b      	movmi	r3, #43	; 0x2b
 80053f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005400:	d015      	beq.n	800542e <_svfiprintf_r+0xf6>
 8005402:	9a07      	ldr	r2, [sp, #28]
 8005404:	4654      	mov	r4, sl
 8005406:	2000      	movs	r0, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	4621      	mov	r1, r4
 800540e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005412:	3b30      	subs	r3, #48	; 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d94e      	bls.n	80054b6 <_svfiprintf_r+0x17e>
 8005418:	b1b0      	cbz	r0, 8005448 <_svfiprintf_r+0x110>
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	e014      	b.n	8005448 <_svfiprintf_r+0x110>
 800541e:	eba0 0308 	sub.w	r3, r0, r8
 8005422:	fa09 f303 	lsl.w	r3, r9, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	46a2      	mov	sl, r4
 800542c:	e7d2      	b.n	80053d4 <_svfiprintf_r+0x9c>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbb      	ittet	lt
 800543a:	425b      	neglt	r3, r3
 800543c:	f042 0202 	orrlt.w	r2, r2, #2
 8005440:	9307      	strge	r3, [sp, #28]
 8005442:	9307      	strlt	r3, [sp, #28]
 8005444:	bfb8      	it	lt
 8005446:	9204      	strlt	r2, [sp, #16]
 8005448:	7823      	ldrb	r3, [r4, #0]
 800544a:	2b2e      	cmp	r3, #46	; 0x2e
 800544c:	d10c      	bne.n	8005468 <_svfiprintf_r+0x130>
 800544e:	7863      	ldrb	r3, [r4, #1]
 8005450:	2b2a      	cmp	r3, #42	; 0x2a
 8005452:	d135      	bne.n	80054c0 <_svfiprintf_r+0x188>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	9203      	str	r2, [sp, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	bfb8      	it	lt
 8005460:	f04f 33ff 	movlt.w	r3, #4294967295
 8005464:	3402      	adds	r4, #2
 8005466:	9305      	str	r3, [sp, #20]
 8005468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005534 <_svfiprintf_r+0x1fc>
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	2203      	movs	r2, #3
 8005470:	4650      	mov	r0, sl
 8005472:	f7fa feb5 	bl	80001e0 <memchr>
 8005476:	b140      	cbz	r0, 800548a <_svfiprintf_r+0x152>
 8005478:	2340      	movs	r3, #64	; 0x40
 800547a:	eba0 000a 	sub.w	r0, r0, sl
 800547e:	fa03 f000 	lsl.w	r0, r3, r0
 8005482:	9b04      	ldr	r3, [sp, #16]
 8005484:	4303      	orrs	r3, r0
 8005486:	3401      	adds	r4, #1
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548e:	4826      	ldr	r0, [pc, #152]	; (8005528 <_svfiprintf_r+0x1f0>)
 8005490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005494:	2206      	movs	r2, #6
 8005496:	f7fa fea3 	bl	80001e0 <memchr>
 800549a:	2800      	cmp	r0, #0
 800549c:	d038      	beq.n	8005510 <_svfiprintf_r+0x1d8>
 800549e:	4b23      	ldr	r3, [pc, #140]	; (800552c <_svfiprintf_r+0x1f4>)
 80054a0:	bb1b      	cbnz	r3, 80054ea <_svfiprintf_r+0x1b2>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	3307      	adds	r3, #7
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	3308      	adds	r3, #8
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b0:	4433      	add	r3, r6
 80054b2:	9309      	str	r3, [sp, #36]	; 0x24
 80054b4:	e767      	b.n	8005386 <_svfiprintf_r+0x4e>
 80054b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ba:	460c      	mov	r4, r1
 80054bc:	2001      	movs	r0, #1
 80054be:	e7a5      	b.n	800540c <_svfiprintf_r+0xd4>
 80054c0:	2300      	movs	r3, #0
 80054c2:	3401      	adds	r4, #1
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4619      	mov	r1, r3
 80054c8:	f04f 0c0a 	mov.w	ip, #10
 80054cc:	4620      	mov	r0, r4
 80054ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d2:	3a30      	subs	r2, #48	; 0x30
 80054d4:	2a09      	cmp	r2, #9
 80054d6:	d903      	bls.n	80054e0 <_svfiprintf_r+0x1a8>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0c5      	beq.n	8005468 <_svfiprintf_r+0x130>
 80054dc:	9105      	str	r1, [sp, #20]
 80054de:	e7c3      	b.n	8005468 <_svfiprintf_r+0x130>
 80054e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e4:	4604      	mov	r4, r0
 80054e6:	2301      	movs	r3, #1
 80054e8:	e7f0      	b.n	80054cc <_svfiprintf_r+0x194>
 80054ea:	ab03      	add	r3, sp, #12
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	462a      	mov	r2, r5
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <_svfiprintf_r+0x1f8>)
 80054f2:	a904      	add	r1, sp, #16
 80054f4:	4638      	mov	r0, r7
 80054f6:	f3af 8000 	nop.w
 80054fa:	1c42      	adds	r2, r0, #1
 80054fc:	4606      	mov	r6, r0
 80054fe:	d1d6      	bne.n	80054ae <_svfiprintf_r+0x176>
 8005500:	89ab      	ldrh	r3, [r5, #12]
 8005502:	065b      	lsls	r3, r3, #25
 8005504:	f53f af2c 	bmi.w	8005360 <_svfiprintf_r+0x28>
 8005508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800550a:	b01d      	add	sp, #116	; 0x74
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	ab03      	add	r3, sp, #12
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	462a      	mov	r2, r5
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <_svfiprintf_r+0x1f8>)
 8005518:	a904      	add	r1, sp, #16
 800551a:	4638      	mov	r0, r7
 800551c:	f000 f87a 	bl	8005614 <_printf_i>
 8005520:	e7eb      	b.n	80054fa <_svfiprintf_r+0x1c2>
 8005522:	bf00      	nop
 8005524:	08005b60 	.word	0x08005b60
 8005528:	08005b6a 	.word	0x08005b6a
 800552c:	00000000 	.word	0x00000000
 8005530:	08005281 	.word	0x08005281
 8005534:	08005b66 	.word	0x08005b66

08005538 <_printf_common>:
 8005538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	4616      	mov	r6, r2
 800553e:	4699      	mov	r9, r3
 8005540:	688a      	ldr	r2, [r1, #8]
 8005542:	690b      	ldr	r3, [r1, #16]
 8005544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005548:	4293      	cmp	r3, r2
 800554a:	bfb8      	it	lt
 800554c:	4613      	movlt	r3, r2
 800554e:	6033      	str	r3, [r6, #0]
 8005550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005554:	4607      	mov	r7, r0
 8005556:	460c      	mov	r4, r1
 8005558:	b10a      	cbz	r2, 800555e <_printf_common+0x26>
 800555a:	3301      	adds	r3, #1
 800555c:	6033      	str	r3, [r6, #0]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	0699      	lsls	r1, r3, #26
 8005562:	bf42      	ittt	mi
 8005564:	6833      	ldrmi	r3, [r6, #0]
 8005566:	3302      	addmi	r3, #2
 8005568:	6033      	strmi	r3, [r6, #0]
 800556a:	6825      	ldr	r5, [r4, #0]
 800556c:	f015 0506 	ands.w	r5, r5, #6
 8005570:	d106      	bne.n	8005580 <_printf_common+0x48>
 8005572:	f104 0a19 	add.w	sl, r4, #25
 8005576:	68e3      	ldr	r3, [r4, #12]
 8005578:	6832      	ldr	r2, [r6, #0]
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	42ab      	cmp	r3, r5
 800557e:	dc26      	bgt.n	80055ce <_printf_common+0x96>
 8005580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005584:	1e13      	subs	r3, r2, #0
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	bf18      	it	ne
 800558a:	2301      	movne	r3, #1
 800558c:	0692      	lsls	r2, r2, #26
 800558e:	d42b      	bmi.n	80055e8 <_printf_common+0xb0>
 8005590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005594:	4649      	mov	r1, r9
 8005596:	4638      	mov	r0, r7
 8005598:	47c0      	blx	r8
 800559a:	3001      	adds	r0, #1
 800559c:	d01e      	beq.n	80055dc <_printf_common+0xa4>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	68e5      	ldr	r5, [r4, #12]
 80055a2:	6832      	ldr	r2, [r6, #0]
 80055a4:	f003 0306 	and.w	r3, r3, #6
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	bf08      	it	eq
 80055ac:	1aad      	subeq	r5, r5, r2
 80055ae:	68a3      	ldr	r3, [r4, #8]
 80055b0:	6922      	ldr	r2, [r4, #16]
 80055b2:	bf0c      	ite	eq
 80055b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b8:	2500      	movne	r5, #0
 80055ba:	4293      	cmp	r3, r2
 80055bc:	bfc4      	itt	gt
 80055be:	1a9b      	subgt	r3, r3, r2
 80055c0:	18ed      	addgt	r5, r5, r3
 80055c2:	2600      	movs	r6, #0
 80055c4:	341a      	adds	r4, #26
 80055c6:	42b5      	cmp	r5, r6
 80055c8:	d11a      	bne.n	8005600 <_printf_common+0xc8>
 80055ca:	2000      	movs	r0, #0
 80055cc:	e008      	b.n	80055e0 <_printf_common+0xa8>
 80055ce:	2301      	movs	r3, #1
 80055d0:	4652      	mov	r2, sl
 80055d2:	4649      	mov	r1, r9
 80055d4:	4638      	mov	r0, r7
 80055d6:	47c0      	blx	r8
 80055d8:	3001      	adds	r0, #1
 80055da:	d103      	bne.n	80055e4 <_printf_common+0xac>
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e4:	3501      	adds	r5, #1
 80055e6:	e7c6      	b.n	8005576 <_printf_common+0x3e>
 80055e8:	18e1      	adds	r1, r4, r3
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	2030      	movs	r0, #48	; 0x30
 80055ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055f2:	4422      	add	r2, r4
 80055f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055fc:	3302      	adds	r3, #2
 80055fe:	e7c7      	b.n	8005590 <_printf_common+0x58>
 8005600:	2301      	movs	r3, #1
 8005602:	4622      	mov	r2, r4
 8005604:	4649      	mov	r1, r9
 8005606:	4638      	mov	r0, r7
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d0e6      	beq.n	80055dc <_printf_common+0xa4>
 800560e:	3601      	adds	r6, #1
 8005610:	e7d9      	b.n	80055c6 <_printf_common+0x8e>
	...

08005614 <_printf_i>:
 8005614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	460c      	mov	r4, r1
 800561a:	4691      	mov	r9, r2
 800561c:	7e27      	ldrb	r7, [r4, #24]
 800561e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005620:	2f78      	cmp	r7, #120	; 0x78
 8005622:	4680      	mov	r8, r0
 8005624:	469a      	mov	sl, r3
 8005626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800562a:	d807      	bhi.n	800563c <_printf_i+0x28>
 800562c:	2f62      	cmp	r7, #98	; 0x62
 800562e:	d80a      	bhi.n	8005646 <_printf_i+0x32>
 8005630:	2f00      	cmp	r7, #0
 8005632:	f000 80d8 	beq.w	80057e6 <_printf_i+0x1d2>
 8005636:	2f58      	cmp	r7, #88	; 0x58
 8005638:	f000 80a3 	beq.w	8005782 <_printf_i+0x16e>
 800563c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005644:	e03a      	b.n	80056bc <_printf_i+0xa8>
 8005646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800564a:	2b15      	cmp	r3, #21
 800564c:	d8f6      	bhi.n	800563c <_printf_i+0x28>
 800564e:	a001      	add	r0, pc, #4	; (adr r0, 8005654 <_printf_i+0x40>)
 8005650:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005654:	080056ad 	.word	0x080056ad
 8005658:	080056c1 	.word	0x080056c1
 800565c:	0800563d 	.word	0x0800563d
 8005660:	0800563d 	.word	0x0800563d
 8005664:	0800563d 	.word	0x0800563d
 8005668:	0800563d 	.word	0x0800563d
 800566c:	080056c1 	.word	0x080056c1
 8005670:	0800563d 	.word	0x0800563d
 8005674:	0800563d 	.word	0x0800563d
 8005678:	0800563d 	.word	0x0800563d
 800567c:	0800563d 	.word	0x0800563d
 8005680:	080057cd 	.word	0x080057cd
 8005684:	080056f1 	.word	0x080056f1
 8005688:	080057af 	.word	0x080057af
 800568c:	0800563d 	.word	0x0800563d
 8005690:	0800563d 	.word	0x0800563d
 8005694:	080057ef 	.word	0x080057ef
 8005698:	0800563d 	.word	0x0800563d
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	0800563d 	.word	0x0800563d
 80056a4:	0800563d 	.word	0x0800563d
 80056a8:	080057b7 	.word	0x080057b7
 80056ac:	680b      	ldr	r3, [r1, #0]
 80056ae:	1d1a      	adds	r2, r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	600a      	str	r2, [r1, #0]
 80056b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056bc:	2301      	movs	r3, #1
 80056be:	e0a3      	b.n	8005808 <_printf_i+0x1f4>
 80056c0:	6825      	ldr	r5, [r4, #0]
 80056c2:	6808      	ldr	r0, [r1, #0]
 80056c4:	062e      	lsls	r6, r5, #24
 80056c6:	f100 0304 	add.w	r3, r0, #4
 80056ca:	d50a      	bpl.n	80056e2 <_printf_i+0xce>
 80056cc:	6805      	ldr	r5, [r0, #0]
 80056ce:	600b      	str	r3, [r1, #0]
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	da03      	bge.n	80056dc <_printf_i+0xc8>
 80056d4:	232d      	movs	r3, #45	; 0x2d
 80056d6:	426d      	negs	r5, r5
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056dc:	485e      	ldr	r0, [pc, #376]	; (8005858 <_printf_i+0x244>)
 80056de:	230a      	movs	r3, #10
 80056e0:	e019      	b.n	8005716 <_printf_i+0x102>
 80056e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056e6:	6805      	ldr	r5, [r0, #0]
 80056e8:	600b      	str	r3, [r1, #0]
 80056ea:	bf18      	it	ne
 80056ec:	b22d      	sxthne	r5, r5
 80056ee:	e7ef      	b.n	80056d0 <_printf_i+0xbc>
 80056f0:	680b      	ldr	r3, [r1, #0]
 80056f2:	6825      	ldr	r5, [r4, #0]
 80056f4:	1d18      	adds	r0, r3, #4
 80056f6:	6008      	str	r0, [r1, #0]
 80056f8:	0628      	lsls	r0, r5, #24
 80056fa:	d501      	bpl.n	8005700 <_printf_i+0xec>
 80056fc:	681d      	ldr	r5, [r3, #0]
 80056fe:	e002      	b.n	8005706 <_printf_i+0xf2>
 8005700:	0669      	lsls	r1, r5, #25
 8005702:	d5fb      	bpl.n	80056fc <_printf_i+0xe8>
 8005704:	881d      	ldrh	r5, [r3, #0]
 8005706:	4854      	ldr	r0, [pc, #336]	; (8005858 <_printf_i+0x244>)
 8005708:	2f6f      	cmp	r7, #111	; 0x6f
 800570a:	bf0c      	ite	eq
 800570c:	2308      	moveq	r3, #8
 800570e:	230a      	movne	r3, #10
 8005710:	2100      	movs	r1, #0
 8005712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005716:	6866      	ldr	r6, [r4, #4]
 8005718:	60a6      	str	r6, [r4, #8]
 800571a:	2e00      	cmp	r6, #0
 800571c:	bfa2      	ittt	ge
 800571e:	6821      	ldrge	r1, [r4, #0]
 8005720:	f021 0104 	bicge.w	r1, r1, #4
 8005724:	6021      	strge	r1, [r4, #0]
 8005726:	b90d      	cbnz	r5, 800572c <_printf_i+0x118>
 8005728:	2e00      	cmp	r6, #0
 800572a:	d04d      	beq.n	80057c8 <_printf_i+0x1b4>
 800572c:	4616      	mov	r6, r2
 800572e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005732:	fb03 5711 	mls	r7, r3, r1, r5
 8005736:	5dc7      	ldrb	r7, [r0, r7]
 8005738:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800573c:	462f      	mov	r7, r5
 800573e:	42bb      	cmp	r3, r7
 8005740:	460d      	mov	r5, r1
 8005742:	d9f4      	bls.n	800572e <_printf_i+0x11a>
 8005744:	2b08      	cmp	r3, #8
 8005746:	d10b      	bne.n	8005760 <_printf_i+0x14c>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	07df      	lsls	r7, r3, #31
 800574c:	d508      	bpl.n	8005760 <_printf_i+0x14c>
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	6861      	ldr	r1, [r4, #4]
 8005752:	4299      	cmp	r1, r3
 8005754:	bfde      	ittt	le
 8005756:	2330      	movle	r3, #48	; 0x30
 8005758:	f806 3c01 	strble.w	r3, [r6, #-1]
 800575c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005760:	1b92      	subs	r2, r2, r6
 8005762:	6122      	str	r2, [r4, #16]
 8005764:	f8cd a000 	str.w	sl, [sp]
 8005768:	464b      	mov	r3, r9
 800576a:	aa03      	add	r2, sp, #12
 800576c:	4621      	mov	r1, r4
 800576e:	4640      	mov	r0, r8
 8005770:	f7ff fee2 	bl	8005538 <_printf_common>
 8005774:	3001      	adds	r0, #1
 8005776:	d14c      	bne.n	8005812 <_printf_i+0x1fe>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	b004      	add	sp, #16
 800577e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005782:	4835      	ldr	r0, [pc, #212]	; (8005858 <_printf_i+0x244>)
 8005784:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	680e      	ldr	r6, [r1, #0]
 800578c:	061f      	lsls	r7, r3, #24
 800578e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005792:	600e      	str	r6, [r1, #0]
 8005794:	d514      	bpl.n	80057c0 <_printf_i+0x1ac>
 8005796:	07d9      	lsls	r1, r3, #31
 8005798:	bf44      	itt	mi
 800579a:	f043 0320 	orrmi.w	r3, r3, #32
 800579e:	6023      	strmi	r3, [r4, #0]
 80057a0:	b91d      	cbnz	r5, 80057aa <_printf_i+0x196>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	f023 0320 	bic.w	r3, r3, #32
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	2310      	movs	r3, #16
 80057ac:	e7b0      	b.n	8005710 <_printf_i+0xfc>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	f043 0320 	orr.w	r3, r3, #32
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	2378      	movs	r3, #120	; 0x78
 80057b8:	4828      	ldr	r0, [pc, #160]	; (800585c <_printf_i+0x248>)
 80057ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057be:	e7e3      	b.n	8005788 <_printf_i+0x174>
 80057c0:	065e      	lsls	r6, r3, #25
 80057c2:	bf48      	it	mi
 80057c4:	b2ad      	uxthmi	r5, r5
 80057c6:	e7e6      	b.n	8005796 <_printf_i+0x182>
 80057c8:	4616      	mov	r6, r2
 80057ca:	e7bb      	b.n	8005744 <_printf_i+0x130>
 80057cc:	680b      	ldr	r3, [r1, #0]
 80057ce:	6826      	ldr	r6, [r4, #0]
 80057d0:	6960      	ldr	r0, [r4, #20]
 80057d2:	1d1d      	adds	r5, r3, #4
 80057d4:	600d      	str	r5, [r1, #0]
 80057d6:	0635      	lsls	r5, r6, #24
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	d501      	bpl.n	80057e0 <_printf_i+0x1cc>
 80057dc:	6018      	str	r0, [r3, #0]
 80057de:	e002      	b.n	80057e6 <_printf_i+0x1d2>
 80057e0:	0671      	lsls	r1, r6, #25
 80057e2:	d5fb      	bpl.n	80057dc <_printf_i+0x1c8>
 80057e4:	8018      	strh	r0, [r3, #0]
 80057e6:	2300      	movs	r3, #0
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	4616      	mov	r6, r2
 80057ec:	e7ba      	b.n	8005764 <_printf_i+0x150>
 80057ee:	680b      	ldr	r3, [r1, #0]
 80057f0:	1d1a      	adds	r2, r3, #4
 80057f2:	600a      	str	r2, [r1, #0]
 80057f4:	681e      	ldr	r6, [r3, #0]
 80057f6:	6862      	ldr	r2, [r4, #4]
 80057f8:	2100      	movs	r1, #0
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7fa fcf0 	bl	80001e0 <memchr>
 8005800:	b108      	cbz	r0, 8005806 <_printf_i+0x1f2>
 8005802:	1b80      	subs	r0, r0, r6
 8005804:	6060      	str	r0, [r4, #4]
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	6123      	str	r3, [r4, #16]
 800580a:	2300      	movs	r3, #0
 800580c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005810:	e7a8      	b.n	8005764 <_printf_i+0x150>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	4632      	mov	r2, r6
 8005816:	4649      	mov	r1, r9
 8005818:	4640      	mov	r0, r8
 800581a:	47d0      	blx	sl
 800581c:	3001      	adds	r0, #1
 800581e:	d0ab      	beq.n	8005778 <_printf_i+0x164>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	079b      	lsls	r3, r3, #30
 8005824:	d413      	bmi.n	800584e <_printf_i+0x23a>
 8005826:	68e0      	ldr	r0, [r4, #12]
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	4298      	cmp	r0, r3
 800582c:	bfb8      	it	lt
 800582e:	4618      	movlt	r0, r3
 8005830:	e7a4      	b.n	800577c <_printf_i+0x168>
 8005832:	2301      	movs	r3, #1
 8005834:	4632      	mov	r2, r6
 8005836:	4649      	mov	r1, r9
 8005838:	4640      	mov	r0, r8
 800583a:	47d0      	blx	sl
 800583c:	3001      	adds	r0, #1
 800583e:	d09b      	beq.n	8005778 <_printf_i+0x164>
 8005840:	3501      	adds	r5, #1
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	9903      	ldr	r1, [sp, #12]
 8005846:	1a5b      	subs	r3, r3, r1
 8005848:	42ab      	cmp	r3, r5
 800584a:	dcf2      	bgt.n	8005832 <_printf_i+0x21e>
 800584c:	e7eb      	b.n	8005826 <_printf_i+0x212>
 800584e:	2500      	movs	r5, #0
 8005850:	f104 0619 	add.w	r6, r4, #25
 8005854:	e7f5      	b.n	8005842 <_printf_i+0x22e>
 8005856:	bf00      	nop
 8005858:	08005b71 	.word	0x08005b71
 800585c:	08005b82 	.word	0x08005b82

08005860 <memcpy>:
 8005860:	440a      	add	r2, r1
 8005862:	4291      	cmp	r1, r2
 8005864:	f100 33ff 	add.w	r3, r0, #4294967295
 8005868:	d100      	bne.n	800586c <memcpy+0xc>
 800586a:	4770      	bx	lr
 800586c:	b510      	push	{r4, lr}
 800586e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005876:	4291      	cmp	r1, r2
 8005878:	d1f9      	bne.n	800586e <memcpy+0xe>
 800587a:	bd10      	pop	{r4, pc}

0800587c <memmove>:
 800587c:	4288      	cmp	r0, r1
 800587e:	b510      	push	{r4, lr}
 8005880:	eb01 0402 	add.w	r4, r1, r2
 8005884:	d902      	bls.n	800588c <memmove+0x10>
 8005886:	4284      	cmp	r4, r0
 8005888:	4623      	mov	r3, r4
 800588a:	d807      	bhi.n	800589c <memmove+0x20>
 800588c:	1e43      	subs	r3, r0, #1
 800588e:	42a1      	cmp	r1, r4
 8005890:	d008      	beq.n	80058a4 <memmove+0x28>
 8005892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800589a:	e7f8      	b.n	800588e <memmove+0x12>
 800589c:	4402      	add	r2, r0
 800589e:	4601      	mov	r1, r0
 80058a0:	428a      	cmp	r2, r1
 80058a2:	d100      	bne.n	80058a6 <memmove+0x2a>
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ae:	e7f7      	b.n	80058a0 <memmove+0x24>

080058b0 <_free_r>:
 80058b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d048      	beq.n	8005948 <_free_r+0x98>
 80058b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ba:	9001      	str	r0, [sp, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f1a1 0404 	sub.w	r4, r1, #4
 80058c2:	bfb8      	it	lt
 80058c4:	18e4      	addlt	r4, r4, r3
 80058c6:	f000 f8d3 	bl	8005a70 <__malloc_lock>
 80058ca:	4a20      	ldr	r2, [pc, #128]	; (800594c <_free_r+0x9c>)
 80058cc:	9801      	ldr	r0, [sp, #4]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	4615      	mov	r5, r2
 80058d2:	b933      	cbnz	r3, 80058e2 <_free_r+0x32>
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	6014      	str	r4, [r2, #0]
 80058d8:	b003      	add	sp, #12
 80058da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058de:	f000 b8cd 	b.w	8005a7c <__malloc_unlock>
 80058e2:	42a3      	cmp	r3, r4
 80058e4:	d90b      	bls.n	80058fe <_free_r+0x4e>
 80058e6:	6821      	ldr	r1, [r4, #0]
 80058e8:	1862      	adds	r2, r4, r1
 80058ea:	4293      	cmp	r3, r2
 80058ec:	bf04      	itt	eq
 80058ee:	681a      	ldreq	r2, [r3, #0]
 80058f0:	685b      	ldreq	r3, [r3, #4]
 80058f2:	6063      	str	r3, [r4, #4]
 80058f4:	bf04      	itt	eq
 80058f6:	1852      	addeq	r2, r2, r1
 80058f8:	6022      	streq	r2, [r4, #0]
 80058fa:	602c      	str	r4, [r5, #0]
 80058fc:	e7ec      	b.n	80058d8 <_free_r+0x28>
 80058fe:	461a      	mov	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b10b      	cbz	r3, 8005908 <_free_r+0x58>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d9fa      	bls.n	80058fe <_free_r+0x4e>
 8005908:	6811      	ldr	r1, [r2, #0]
 800590a:	1855      	adds	r5, r2, r1
 800590c:	42a5      	cmp	r5, r4
 800590e:	d10b      	bne.n	8005928 <_free_r+0x78>
 8005910:	6824      	ldr	r4, [r4, #0]
 8005912:	4421      	add	r1, r4
 8005914:	1854      	adds	r4, r2, r1
 8005916:	42a3      	cmp	r3, r4
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	d1dd      	bne.n	80058d8 <_free_r+0x28>
 800591c:	681c      	ldr	r4, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	4421      	add	r1, r4
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	e7d7      	b.n	80058d8 <_free_r+0x28>
 8005928:	d902      	bls.n	8005930 <_free_r+0x80>
 800592a:	230c      	movs	r3, #12
 800592c:	6003      	str	r3, [r0, #0]
 800592e:	e7d3      	b.n	80058d8 <_free_r+0x28>
 8005930:	6825      	ldr	r5, [r4, #0]
 8005932:	1961      	adds	r1, r4, r5
 8005934:	428b      	cmp	r3, r1
 8005936:	bf04      	itt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	bf04      	itt	eq
 8005940:	1949      	addeq	r1, r1, r5
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6054      	str	r4, [r2, #4]
 8005946:	e7c7      	b.n	80058d8 <_free_r+0x28>
 8005948:	b003      	add	sp, #12
 800594a:	bd30      	pop	{r4, r5, pc}
 800594c:	20000094 	.word	0x20000094

08005950 <_malloc_r>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	1ccd      	adds	r5, r1, #3
 8005954:	f025 0503 	bic.w	r5, r5, #3
 8005958:	3508      	adds	r5, #8
 800595a:	2d0c      	cmp	r5, #12
 800595c:	bf38      	it	cc
 800595e:	250c      	movcc	r5, #12
 8005960:	2d00      	cmp	r5, #0
 8005962:	4606      	mov	r6, r0
 8005964:	db01      	blt.n	800596a <_malloc_r+0x1a>
 8005966:	42a9      	cmp	r1, r5
 8005968:	d903      	bls.n	8005972 <_malloc_r+0x22>
 800596a:	230c      	movs	r3, #12
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	2000      	movs	r0, #0
 8005970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005972:	f000 f87d 	bl	8005a70 <__malloc_lock>
 8005976:	4921      	ldr	r1, [pc, #132]	; (80059fc <_malloc_r+0xac>)
 8005978:	680a      	ldr	r2, [r1, #0]
 800597a:	4614      	mov	r4, r2
 800597c:	b99c      	cbnz	r4, 80059a6 <_malloc_r+0x56>
 800597e:	4f20      	ldr	r7, [pc, #128]	; (8005a00 <_malloc_r+0xb0>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	b923      	cbnz	r3, 800598e <_malloc_r+0x3e>
 8005984:	4621      	mov	r1, r4
 8005986:	4630      	mov	r0, r6
 8005988:	f000 f862 	bl	8005a50 <_sbrk_r>
 800598c:	6038      	str	r0, [r7, #0]
 800598e:	4629      	mov	r1, r5
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f85d 	bl	8005a50 <_sbrk_r>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	d123      	bne.n	80059e2 <_malloc_r+0x92>
 800599a:	230c      	movs	r3, #12
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	4630      	mov	r0, r6
 80059a0:	f000 f86c 	bl	8005a7c <__malloc_unlock>
 80059a4:	e7e3      	b.n	800596e <_malloc_r+0x1e>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	1b5b      	subs	r3, r3, r5
 80059aa:	d417      	bmi.n	80059dc <_malloc_r+0x8c>
 80059ac:	2b0b      	cmp	r3, #11
 80059ae:	d903      	bls.n	80059b8 <_malloc_r+0x68>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	441c      	add	r4, r3
 80059b4:	6025      	str	r5, [r4, #0]
 80059b6:	e004      	b.n	80059c2 <_malloc_r+0x72>
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	42a2      	cmp	r2, r4
 80059bc:	bf0c      	ite	eq
 80059be:	600b      	streq	r3, [r1, #0]
 80059c0:	6053      	strne	r3, [r2, #4]
 80059c2:	4630      	mov	r0, r6
 80059c4:	f000 f85a 	bl	8005a7c <__malloc_unlock>
 80059c8:	f104 000b 	add.w	r0, r4, #11
 80059cc:	1d23      	adds	r3, r4, #4
 80059ce:	f020 0007 	bic.w	r0, r0, #7
 80059d2:	1ac2      	subs	r2, r0, r3
 80059d4:	d0cc      	beq.n	8005970 <_malloc_r+0x20>
 80059d6:	1a1b      	subs	r3, r3, r0
 80059d8:	50a3      	str	r3, [r4, r2]
 80059da:	e7c9      	b.n	8005970 <_malloc_r+0x20>
 80059dc:	4622      	mov	r2, r4
 80059de:	6864      	ldr	r4, [r4, #4]
 80059e0:	e7cc      	b.n	800597c <_malloc_r+0x2c>
 80059e2:	1cc4      	adds	r4, r0, #3
 80059e4:	f024 0403 	bic.w	r4, r4, #3
 80059e8:	42a0      	cmp	r0, r4
 80059ea:	d0e3      	beq.n	80059b4 <_malloc_r+0x64>
 80059ec:	1a21      	subs	r1, r4, r0
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 f82e 	bl	8005a50 <_sbrk_r>
 80059f4:	3001      	adds	r0, #1
 80059f6:	d1dd      	bne.n	80059b4 <_malloc_r+0x64>
 80059f8:	e7cf      	b.n	800599a <_malloc_r+0x4a>
 80059fa:	bf00      	nop
 80059fc:	20000094 	.word	0x20000094
 8005a00:	20000098 	.word	0x20000098

08005a04 <_realloc_r>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	4607      	mov	r7, r0
 8005a08:	4614      	mov	r4, r2
 8005a0a:	460e      	mov	r6, r1
 8005a0c:	b921      	cbnz	r1, 8005a18 <_realloc_r+0x14>
 8005a0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a12:	4611      	mov	r1, r2
 8005a14:	f7ff bf9c 	b.w	8005950 <_malloc_r>
 8005a18:	b922      	cbnz	r2, 8005a24 <_realloc_r+0x20>
 8005a1a:	f7ff ff49 	bl	80058b0 <_free_r>
 8005a1e:	4625      	mov	r5, r4
 8005a20:	4628      	mov	r0, r5
 8005a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a24:	f000 f830 	bl	8005a88 <_malloc_usable_size_r>
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d20f      	bcs.n	8005a4c <_realloc_r+0x48>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4638      	mov	r0, r7
 8005a30:	f7ff ff8e 	bl	8005950 <_malloc_r>
 8005a34:	4605      	mov	r5, r0
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d0f2      	beq.n	8005a20 <_realloc_r+0x1c>
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	f7ff ff0f 	bl	8005860 <memcpy>
 8005a42:	4631      	mov	r1, r6
 8005a44:	4638      	mov	r0, r7
 8005a46:	f7ff ff33 	bl	80058b0 <_free_r>
 8005a4a:	e7e9      	b.n	8005a20 <_realloc_r+0x1c>
 8005a4c:	4635      	mov	r5, r6
 8005a4e:	e7e7      	b.n	8005a20 <_realloc_r+0x1c>

08005a50 <_sbrk_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	; (8005a6c <_sbrk_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fb fa0e 	bl	8000e7c <_sbrk>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_sbrk_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_sbrk_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20000274 	.word	0x20000274

08005a70 <__malloc_lock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__malloc_lock+0x8>)
 8005a72:	f000 b811 	b.w	8005a98 <__retarget_lock_acquire_recursive>
 8005a76:	bf00      	nop
 8005a78:	2000027c 	.word	0x2000027c

08005a7c <__malloc_unlock>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <__malloc_unlock+0x8>)
 8005a7e:	f000 b80c 	b.w	8005a9a <__retarget_lock_release_recursive>
 8005a82:	bf00      	nop
 8005a84:	2000027c 	.word	0x2000027c

08005a88 <_malloc_usable_size_r>:
 8005a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8c:	1f18      	subs	r0, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bfbc      	itt	lt
 8005a92:	580b      	ldrlt	r3, [r1, r0]
 8005a94:	18c0      	addlt	r0, r0, r3
 8005a96:	4770      	bx	lr

08005a98 <__retarget_lock_acquire_recursive>:
 8005a98:	4770      	bx	lr

08005a9a <__retarget_lock_release_recursive>:
 8005a9a:	4770      	bx	lr

08005a9c <_init>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr

08005aa8 <_fini>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr
