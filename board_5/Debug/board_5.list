
board_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005324  08005324  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800532c  0800532c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000010  08005344  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08005344  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f3d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029c6  00000000  00000000  00034f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  00037948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  00038c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028393  00000000  00000000  00039db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f72b  00000000  00000000  00062143  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f62b3  00000000  00000000  0007186e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167b21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  00167b9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005244 	.word	0x08005244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005244 	.word	0x08005244

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <MX_CAN1_Init+0x68>)
 80004de:	4a19      	ldr	r2, [pc, #100]	; (8000544 <MX_CAN1_Init+0x6c>)
 80004e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <MX_CAN1_Init+0x68>)
 80004e4:	2215      	movs	r2, #21
 80004e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <MX_CAN1_Init+0x68>)
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ee:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <MX_CAN1_Init+0x68>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MX_CAN1_Init+0x68>)
 80004f8:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80004fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <MX_CAN1_Init+0x68>)
 8000500:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000504:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_CAN1_Init+0x68>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_CAN1_Init+0x68>)
 800050e:	2200      	movs	r2, #0
 8000510:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_CAN1_Init+0x68>)
 8000514:	2200      	movs	r2, #0
 8000516:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_CAN1_Init+0x68>)
 800051a:	2200      	movs	r2, #0
 800051c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_CAN1_Init+0x68>)
 8000520:	2200      	movs	r2, #0
 8000522:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_CAN1_Init+0x68>)
 8000526:	2200      	movs	r2, #0
 8000528:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_CAN1_Init+0x68>)
 800052c:	f000 fdfa 	bl	8001124 <HAL_CAN_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000536:	f000 fba5 	bl	8000c84 <Error_Handler>
  }

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c
 8000544:	40006400 	.word	0x40006400

08000548 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <HAL_CAN_MspInit+0x90>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d131      	bne.n	80005ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <HAL_CAN_MspInit+0x94>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <HAL_CAN_MspInit+0x94>)
 8000570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000574:	6593      	str	r3, [r2, #88]	; 0x58
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <HAL_CAN_MspInit+0x94>)
 8000578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <HAL_CAN_MspInit+0x94>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <HAL_CAN_MspInit+0x94>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <HAL_CAN_MspInit+0x94>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800059a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800059e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005ac:	2309      	movs	r3, #9
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f001 fd39 	bl	8002030 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 80005be:	2202      	movs	r2, #2
 80005c0:	2100      	movs	r1, #0
 80005c2:	2014      	movs	r0, #20
 80005c4:	f001 fcfd 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005c8:	2014      	movs	r0, #20
 80005ca:	f001 fd16 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40006400 	.word	0x40006400
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <MX_GPIO_Init+0xec>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a34      	ldr	r2, [pc, #208]	; (80006cc <MX_GPIO_Init+0xec>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <MX_GPIO_Init+0xec>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <MX_GPIO_Init+0xec>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a2e      	ldr	r2, [pc, #184]	; (80006cc <MX_GPIO_Init+0xec>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <MX_GPIO_Init+0xec>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_GPIO_Init+0xec>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a28      	ldr	r2, [pc, #160]	; (80006cc <MX_GPIO_Init+0xec>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_GPIO_Init+0xec>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a22      	ldr	r2, [pc, #136]	; (80006cc <MX_GPIO_Init+0xec>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 fea7 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_GPIO_Init+0xf0>)
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_GPIO_Init+0xf4>)
 8000678:	f001 fcda 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800067c:	2301      	movs	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_GPIO_Init+0xf8>)
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f001 fccd 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000696:	2320      	movs	r3, #32
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f001 fcbe 	bl	8002030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2100      	movs	r1, #0
 80006b8:	2006      	movs	r0, #6
 80006ba:	f001 fc82 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006be:	2006      	movs	r0, #6
 80006c0:	f001 fc9b 	bl	8001ffa <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	10210000 	.word	0x10210000
 80006d4:	48000800 	.word	0x48000800
 80006d8:	10110000 	.word	0x10110000

080006dc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f023 030f 	bic.w	r3, r3, #15
 80006ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f043 030c 	orr.w	r3, r3, #12
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	b2db      	uxtb	r3, r3
 8000706:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	f043 030c 	orr.w	r3, r3, #12
 800070e:	b2db      	uxtb	r3, r3
 8000710:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000712:	7bbb      	ldrb	r3, [r7, #14]
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	b2db      	uxtb	r3, r3
 800071a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800071c:	f107 0208 	add.w	r2, r7, #8
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2304      	movs	r3, #4
 8000726:	214e      	movs	r1, #78	; 0x4e
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <lcd_send_cmd+0x5c>)
 800072a:	f001 ff0b 	bl	8002544 <HAL_I2C_Master_Transmit>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000054 	.word	0x20000054

0800073c <lcd_send_data>:

void lcd_send_data (char data)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af02      	add	r7, sp, #8
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f023 030f 	bic.w	r3, r3, #15
 800074c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f043 030d 	orr.w	r3, r3, #13
 800075a:	b2db      	uxtb	r3, r3
 800075c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	f043 0309 	orr.w	r3, r3, #9
 8000764:	b2db      	uxtb	r3, r3
 8000766:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	f043 030d 	orr.w	r3, r3, #13
 800076e:	b2db      	uxtb	r3, r3
 8000770:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	f043 0309 	orr.w	r3, r3, #9
 8000778:	b2db      	uxtb	r3, r3
 800077a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800077c:	f107 0208 	add.w	r2, r7, #8
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2304      	movs	r3, #4
 8000786:	214e      	movs	r1, #78	; 0x4e
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <lcd_send_data+0x5c>)
 800078a:	f001 fedb 	bl	8002544 <HAL_I2C_Master_Transmit>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000054 	.word	0x20000054

0800079c <lcd_clear>:

void lcd_clear (void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80007a2:	2080      	movs	r0, #128	; 0x80
 80007a4:	f7ff ff9a 	bl	80006dc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	e005      	b.n	80007ba <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80007ae:	2020      	movs	r0, #32
 80007b0:	f7ff ffc4 	bl	800073c <lcd_send_data>
	for (int i=0; i<70; i++)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b45      	cmp	r3, #69	; 0x45
 80007be:	ddf6      	ble.n	80007ae <lcd_clear+0x12>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    switch (row)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <lcd_put_cur+0x16>
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d005      	beq.n	80007e8 <lcd_put_cur+0x20>
 80007dc:	e009      	b.n	80007f2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	603b      	str	r3, [r7, #0]
            break;
 80007e6:	e004      	b.n	80007f2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007ee:	603b      	str	r3, [r7, #0]
            break;
 80007f0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff70 	bl	80006dc <lcd_send_cmd>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcd_init>:


void lcd_init (void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f000 fc69 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800080e:	2030      	movs	r0, #48	; 0x30
 8000810:	f7ff ff64 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fc63 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800081a:	2030      	movs	r0, #48	; 0x30
 800081c:	f7ff ff5e 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fc5d 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000826:	2030      	movs	r0, #48	; 0x30
 8000828:	f7ff ff58 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fc57 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000832:	2020      	movs	r0, #32
 8000834:	f7ff ff52 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fc51 	bl	80010e0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff4c 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fc4b 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff46 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fc45 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff40 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fc3f 	bl	80010e0 <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fc3c 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff37 	bl	80006dc <lcd_send_cmd>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fc36 	bl	80010e0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff31 	bl	80006dc <lcd_send_cmd>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000886:	e006      	b.n	8000896 <lcd_send_string+0x18>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff53 	bl	800073c <lcd_send_data>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f4      	bne.n	8000888 <lcd_send_string+0xa>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C1_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C1_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C1_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <MX_I2C1_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_I2C1_Init+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_I2C1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_I2C1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_I2C1_Init+0x74>)
 80008e4:	f001 fd9f 	bl	8002426 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 f9c9 	bl	8000c84 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C1_Init+0x74>)
 80008f6:	f002 f88d 	bl	8002a14 <HAL_I2CEx_ConfigAnalogFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 f9c0 	bl	8000c84 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2C1_Init+0x74>)
 8000908:	f002 f8cf 	bl	8002aaa <HAL_I2CEx_ConfigDigitalFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 f9b7 	bl	8000c84 <Error_Handler>
  }

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000054 	.word	0x20000054
 8000920:	40005400 	.word	0x40005400
 8000924:	10909cec 	.word	0x10909cec

08000928 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_I2C_MspInit+0x7c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d128      	bne.n	800099c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_I2C_MspInit+0x80>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_I2C_MspInit+0x80>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_I2C_MspInit+0x80>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	2312      	movs	r3, #18
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096c:	2301      	movs	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000974:	2304      	movs	r3, #4
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <HAL_I2C_MspInit+0x84>)
 8000980:	f001 fb56 	bl	8002030 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x80>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_I2C_MspInit+0x80>)
 800098a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098e:	6593      	str	r3, [r2, #88]	; 0x58
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_I2C_MspInit+0x80>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fb1c 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f840 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f7ff fe10 	bl	80005e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c0:	f000 fa7a 	bl	8000eb8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80009c4:	f7ff fd88 	bl	80004d8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80009c8:	f7ff ff6e 	bl	80008a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009cc:	f000 fa00 	bl	8000dd0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  serialClear();
 80009d0:	f000 f8c2 	bl	8000b58 <serialClear>
  lcd_init();
 80009d4:	f7ff ff16 	bl	8000804 <lcd_init>
  lcd_put_cur(0,0);
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fef4 	bl	80007c8 <lcd_put_cur>
  lcd_send_string("***Init!***");
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <main+0x78>)
 80009e2:	f7ff ff4c 	bl	800087e <lcd_send_string>
  serialMsg("***Init!***\n\r");
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <main+0x7c>)
 80009e8:	f000 f8a0 	bl	8000b2c <serialMsg>
  HAL_Delay(1000);
 80009ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f0:	f000 fb76 	bl	80010e0 <HAL_Delay>
  lcd_clear();
 80009f4:	f7ff fed2 	bl	800079c <lcd_clear>

  CAN_filterConfig();
 80009f8:	f000 f924 	bl	8000c44 <CAN_filterConfig>
  HAL_CAN_Start(&hcan1);
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <main+0x80>)
 80009fe:	f000 fd56 	bl	80014ae <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a02:	2102      	movs	r1, #2
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <main+0x80>)
 8000a06:	f000 ffa8 	bl	800195a <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == RESET){
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <main+0x84>)
 8000a10:	f001 fcb6 	bl	8002380 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f7      	bne.n	8000a0a <main+0x5a>
		  CAN_Tx("Hello!");
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <main+0x88>)
 8000a1c:	f000 f8a6 	bl	8000b6c <CAN_Tx>
		  HAL_Delay(250);
 8000a20:	20fa      	movs	r0, #250	; 0xfa
 8000a22:	f000 fb5d 	bl	80010e0 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == RESET){
 8000a26:	e7f0      	b.n	8000a0a <main+0x5a>
 8000a28:	0800525c 	.word	0x0800525c
 8000a2c:	08005268 	.word	0x08005268
 8000a30:	2000002c 	.word	0x2000002c
 8000a34:	48000800 	.word	0x48000800
 8000a38:	08005278 	.word	0x08005278

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0b8      	sub	sp, #224	; 0xe0
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a46:	2244      	movs	r2, #68	; 0x44
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fbf2 	bl	8005234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2288      	movs	r2, #136	; 0x88
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fbe4 	bl	8005234 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a86:	2302      	movs	r3, #2
 8000a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a92:	230a      	movs	r3, #10
 8000a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 f8ac 	bl	8002c0c <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aba:	f000 f8e3 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000adc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fc78 	bl	80033d8 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000aee:	f000 f8c9 	bl	8000c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000af2:	2342      	movs	r3, #66	; 0x42
 8000af4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fe6d 	bl	80037e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b0c:	f000 f8ba 	bl	8000c84 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b14:	f002 f824 	bl	8002b60 <HAL_PWREx_ControlVoltageScaling>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000b1e:	f000 f8b1 	bl	8000c84 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	37e0      	adds	r7, #224	; 0xe0
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <serialMsg>:

/* USER CODE BEGIN 4 */
void serialMsg(char msg[]){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fb47 	bl	80001c8 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <serialMsg+0x28>)
 8000b46:	f003 fde9 	bl	800471c <HAL_UART_Transmit>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000011c 	.word	0x2000011c

08000b58 <serialClear>:

void serialClear(void){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	serialMsg("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <serialClear+0x10>)
 8000b5e:	f7ff ffe5 	bl	8000b2c <serialMsg>
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08005280 	.word	0x08005280

08000b6c <CAN_Tx>:

void HAL_CAN_RxFifo0FullCallBack(CAN_HandleTypeDef *hcan){
	if(hcan) return;
}

void CAN_Tx(char msg[]){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

	if(sizeof(*msg)<=8){
		TxHeader.DLC = 8;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <CAN_Tx+0x5c>)
 8000b76:	2208      	movs	r2, #8
 8000b78:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <CAN_Tx+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <CAN_Tx+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = OwnID;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <CAN_Tx+0x60>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <CAN_Tx+0x5c>)
 8000b8e:	601a      	str	r2, [r3, #0]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)msg, &TxMailBox) != HAL_OK) Error_Handler();
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <CAN_Tx+0x64>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <CAN_Tx+0x5c>)
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <CAN_Tx+0x68>)
 8000b98:	f000 fccd 	bl	8001536 <HAL_CAN_AddTxMessage>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <CAN_Tx+0x3a>
 8000ba2:	f000 f86f 	bl	8000c84 <Error_Handler>

		while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));
 8000ba6:	bf00      	nop
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <CAN_Tx+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <CAN_Tx+0x68>)
 8000bb0:	f000 fd9c 	bl	80016ec <HAL_CAN_IsTxMessagePending>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f6      	bne.n	8000ba8 <CAN_Tx+0x3c>
		serialMsg("Message transmitted!\n\r");
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <CAN_Tx+0x6c>)
 8000bbc:	f7ff ffb6 	bl	8000b2c <serialMsg>
	}
	else return;
}
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000a8 	.word	0x200000a8
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	200000a0 	.word	0x200000a0
 8000bd4:	2000002c 	.word	0x2000002c
 8000bd8:	0800529c 	.word	0x0800529c

08000bdc <CAN_Rx>:

void CAN_Rx(void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <CAN_Rx+0x54>)
 8000be4:	2208      	movs	r2, #8
 8000be6:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <CAN_Rx+0x54>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <CAN_Rx+0x54>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <CAN_Rx+0x58>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <CAN_Rx+0x54>)
 8000bfc:	601a      	str	r2, [r3, #0]

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <CAN_Rx+0x54>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <CAN_Rx+0x5c>)
 8000c06:	f000 fd95 	bl	8001734 <HAL_CAN_GetRxMessage>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <CAN_Rx+0x3a>
		Error_Handler();
 8000c10:	f000 f838 	bl	8000c84 <Error_Handler>
 8000c14:	e009      	b.n	8000c2a <CAN_Rx+0x4e>
		return;
	}
	//delay(1);
	serialMsg("Received message: ");
 8000c16:	4809      	ldr	r0, [pc, #36]	; (8000c3c <CAN_Rx+0x60>)
 8000c18:	f7ff ff88 	bl	8000b2c <serialMsg>
	serialMsg((char*)crx);
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff84 	bl	8000b2c <serialMsg>
	serialMsg("\n\r");
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <CAN_Rx+0x64>)
 8000c26:	f7ff ff81 	bl	8000b2c <serialMsg>

}
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000c0 	.word	0x200000c0
 8000c34:	20000002 	.word	0x20000002
 8000c38:	2000002c 	.word	0x2000002c
 8000c3c:	080052b4 	.word	0x080052b4
 8000c40:	080052c8 	.word	0x080052c8

08000c44 <CAN_filterConfig>:


void CAN_filterConfig(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
	filterConfig.FilterActivation = ENABLE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0x0000;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4619      	mov	r1, r3
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <CAN_filterConfig+0x3c>)
 8000c74:	f000 fb51 	bl	800131a <HAL_CAN_ConfigFilter>
}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000002c 	.word	0x2000002c

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	serialMsg("Error happened!");
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <Error_Handler+0x10>)
 8000c8a:	f7ff ff4f 	bl	8000b2c <serialMsg>
  /* USER CODE END Error_Handler_Debug */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	080052cc 	.word	0x080052cc

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f001 f96c 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9b6 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d40:	2001      	movs	r0, #1
 8000d42:	f001 fb4d 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <CAN1_RX0_IRQHandler+0x14>)
 8000d52:	f000 fe28 	bl	80019a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 8000d56:	f7ff ff41 	bl	8000bdc <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000002c 	.word	0x2000002c

08000d64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <SystemInit+0x64>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <SystemInit+0x64>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <SystemInit+0x68>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <SystemInit+0x68>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <SystemInit+0x68>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <SystemInit+0x68>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <SystemInit+0x68>)
 8000d90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <SystemInit+0x68>)
 8000d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000da0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <SystemInit+0x68>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <SystemInit+0x68>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <SystemInit+0x68>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SystemInit+0x64>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
#endif
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <MX_TIM1_Init+0xa4>)
 8000df2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000df6:	224f      	movs	r2, #79	; 0x4f
 8000df8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000e02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e1a:	4815      	ldr	r0, [pc, #84]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000e1c:	f003 f990 	bl	8004140 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e26:	f7ff ff2d 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4619      	mov	r1, r3
 8000e36:	480e      	ldr	r0, [pc, #56]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000e38:	f003 f9ad 	bl	8004196 <HAL_TIM_ConfigClockSource>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e42:	f7ff ff1f 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM1_Init+0xa0>)
 8000e58:	f003 fb8a 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e62:	f7ff ff0f 	bl	8000c84 <Error_Handler>
  }

}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000dc 	.word	0x200000dc
 8000e74:	40012c00 	.word	0x40012c00

08000e78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x38>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10b      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40012c00 	.word	0x40012c00
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_USART2_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000efc:	f003 fbc0 	bl	8004680 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f06:	f7ff febd 	bl	8000c84 <Error_Handler>
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	40004400 	.word	0x40004400

08000f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_UART_MspInit+0x7c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d128      	bne.n	8000f8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_UART_MspInit+0x80>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f001 f852 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40021000 	.word	0x40021000

08000f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <LoopForever+0x16>)
	cmp	r2, r3
 8000fc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc6:	f7ff fecd 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f004 f90f 	bl	80051ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f7ff fcef 	bl	80009b0 <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fd8:	08005334 	.word	0x08005334
	ldr	r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fe0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000fe4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000fe8:	200001a0 	.word	0x200001a0

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_Init+0x3c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_Init+0x3c>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 ffd0 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f80f 	bl	8001030 <HAL_InitTick>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	e001      	b.n	8001022 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101e:	f7ff fe3b 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001022:	79fb      	ldrb	r3, [r7, #7]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_InitTick+0x68>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d022      	beq.n	800108a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_InitTick+0x6c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_InitTick+0x68>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001050:	fbb1 f3f3 	udiv	r3, r1, r3
 8001054:	fbb2 f3f3 	udiv	r3, r2, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f000 ffdc 	bl	8002016 <HAL_SYSTICK_Config>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10f      	bne.n	8001084 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d809      	bhi.n	800107e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106a:	2200      	movs	r2, #0
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001072:	f000 ffa6 	bl	8001fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_InitTick+0x70>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e007      	b.n	800108e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e004      	b.n	800108e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e001      	b.n	800108e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000004 	.word	0x20000004
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_IncTick+0x1c>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_IncTick+0x20>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a03      	ldr	r2, [pc, #12]	; (80010c0 <HAL_IncTick+0x1c>)
 80010b4:	6013      	str	r3, [r2, #0]
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	2000019c 	.word	0x2000019c
 80010c4:	2000000c 	.word	0x2000000c

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000019c 	.word	0x2000019c

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f8:	d004      	beq.n	8001104 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_Delay+0x40>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001104:	bf00      	nop
 8001106:	f7ff ffdf 	bl	80010c8 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	429a      	cmp	r2, r3
 8001114:	d8f7      	bhi.n	8001106 <HAL_Delay+0x26>
  {
  }
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000000c 	.word	0x2000000c

08001124 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0ed      	b.n	8001312 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fa00 	bl	8000548 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0202 	bic.w	r2, r2, #2
 8001156:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001158:	f7ff ffb6 	bl	80010c8 <HAL_GetTick>
 800115c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800115e:	e012      	b.n	8001186 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001160:	f7ff ffb2 	bl	80010c8 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b0a      	cmp	r3, #10
 800116c:	d90b      	bls.n	8001186 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2205      	movs	r2, #5
 800117e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0c5      	b.n	8001312 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e5      	bne.n	8001160 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a4:	f7ff ff90 	bl	80010c8 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011aa:	e012      	b.n	80011d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011ac:	f7ff ff8c 	bl	80010c8 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b0a      	cmp	r3, #10
 80011b8:	d90b      	bls.n	80011d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2205      	movs	r2, #5
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e09f      	b.n	8001312 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0e5      	beq.n	80011ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7e1b      	ldrb	r3, [r3, #24]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e007      	b.n	800120a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7e5b      	ldrb	r3, [r3, #25]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d108      	bne.n	8001224 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e007      	b.n	8001234 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001232:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7e9b      	ldrb	r3, [r3, #26]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0220 	orr.w	r2, r2, #32
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e007      	b.n	800125e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0220 	bic.w	r2, r2, #32
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7edb      	ldrb	r3, [r3, #27]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0210 	bic.w	r2, r2, #16
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e007      	b.n	8001288 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0210 	orr.w	r2, r2, #16
 8001286:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7f1b      	ldrb	r3, [r3, #28]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d108      	bne.n	80012a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0208 	orr.w	r2, r2, #8
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0208 	bic.w	r2, r2, #8
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7f5b      	ldrb	r3, [r3, #29]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d108      	bne.n	80012cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0204 	orr.w	r2, r2, #4
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e007      	b.n	80012dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0204 	bic.w	r2, r2, #4
 80012da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	ea42 0103 	orr.w	r1, r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800131a:	b480      	push	{r7}
 800131c:	b087      	sub	sp, #28
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001330:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d003      	beq.n	8001340 <HAL_CAN_ConfigFilter+0x26>
 8001338:	7cfb      	ldrb	r3, [r7, #19]
 800133a:	2b02      	cmp	r3, #2
 800133c:	f040 80aa 	bne.w	8001494 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	2201      	movs	r2, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d123      	bne.n	80013c2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	401a      	ands	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800139c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3248      	adds	r2, #72	; 0x48
 80013a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013b8:	6979      	ldr	r1, [r7, #20]
 80013ba:	3348      	adds	r3, #72	; 0x48
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d122      	bne.n	8001410 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3248      	adds	r2, #72	; 0x48
 80013f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001404:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001406:	6979      	ldr	r1, [r7, #20]
 8001408:	3348      	adds	r3, #72	; 0x48
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d109      	bne.n	800142c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800142a:	e007      	b.n	800143c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	431a      	orrs	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d109      	bne.n	8001458 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001456:	e007      	b.n	8001468 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	431a      	orrs	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d107      	bne.n	8001480 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001486:	f023 0201 	bic.w	r2, r3, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	e006      	b.n	80014a2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
  }
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d12e      	bne.n	8001520 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2202      	movs	r2, #2
 80014c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014da:	f7ff fdf5 	bl	80010c8 <HAL_GetTick>
 80014de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014e0:	e012      	b.n	8001508 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e2:	f7ff fdf1 	bl	80010c8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b0a      	cmp	r3, #10
 80014ee:	d90b      	bls.n	8001508 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2205      	movs	r2, #5
 8001500:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e012      	b.n	800152e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e5      	bne.n	80014e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	e006      	b.n	800152e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
  }
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001536:	b480      	push	{r7}
 8001538:	b089      	sub	sp, #36	; 0x24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001554:	7ffb      	ldrb	r3, [r7, #31]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d003      	beq.n	8001562 <HAL_CAN_AddTxMessage+0x2c>
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	2b02      	cmp	r3, #2
 800155e:	f040 80b8 	bne.w	80016d2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a0 	beq.w	80016c2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	0e1b      	lsrs	r3, r3, #24
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d907      	bls.n	80015a2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e09e      	b.n	80016e0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015a2:	2201      	movs	r2, #1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10d      	bne.n	80015d0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	6809      	ldr	r1, [r1, #0]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3318      	adds	r3, #24
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	440b      	add	r3, r1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e00f      	b.n	80015f0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015da:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015e4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3318      	adds	r3, #24
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	440b      	add	r3, r1
 80015ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3318      	adds	r3, #24
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	440b      	add	r3, r1
 8001600:	3304      	adds	r3, #4
 8001602:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	7d1b      	ldrb	r3, [r3, #20]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d111      	bne.n	8001630 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3318      	adds	r3, #24
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	3304      	adds	r3, #4
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3318      	adds	r3, #24
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	3304      	adds	r3, #4
 800162e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3307      	adds	r3, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	061a      	lsls	r2, r3, #24
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3306      	adds	r3, #6
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	041b      	lsls	r3, r3, #16
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3305      	adds	r3, #5
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	4313      	orrs	r3, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	3204      	adds	r2, #4
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4610      	mov	r0, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	6811      	ldr	r1, [r2, #0]
 8001658:	ea43 0200 	orr.w	r2, r3, r0
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	440b      	add	r3, r1
 8001662:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001666:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3303      	adds	r3, #3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	061a      	lsls	r2, r3, #24
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3302      	adds	r3, #2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3301      	adds	r3, #1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	4313      	orrs	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	4610      	mov	r0, r2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	6811      	ldr	r1, [r2, #0]
 800168e:	ea43 0200 	orr.w	r2, r3, r0
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800169c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3318      	adds	r3, #24
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	6811      	ldr	r1, [r2, #0]
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3318      	adds	r3, #24
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	440b      	add	r3, r1
 80016bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e00e      	b.n	80016e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e006      	b.n	80016e0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
  }
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3724      	adds	r7, #36	; 0x24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001700:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001702:	7afb      	ldrb	r3, [r7, #11]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d002      	beq.n	800170e <HAL_CAN_IsTxMessagePending+0x22>
 8001708:	7afb      	ldrb	r3, [r7, #11]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d10b      	bne.n	8001726 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	069b      	lsls	r3, r3, #26
 8001718:	401a      	ands	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	069b      	lsls	r3, r3, #26
 800171e:	429a      	cmp	r2, r3
 8001720:	d001      	beq.n	8001726 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001722:	2301      	movs	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001748:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d003      	beq.n	8001758 <HAL_CAN_GetRxMessage+0x24>
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b02      	cmp	r3, #2
 8001754:	f040 80f4 	bne.w	8001940 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10e      	bne.n	800177c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d116      	bne.n	800179a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0e8      	b.n	800194e <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d107      	bne.n	800179a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0d9      	b.n	800194e <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	331b      	adds	r3, #27
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0204 	and.w	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10c      	bne.n	80017d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	331b      	adds	r3, #27
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0d5b      	lsrs	r3, r3, #21
 80017c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e00b      	b.n	80017ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	331b      	adds	r3, #27
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	331b      	adds	r3, #27
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	331b      	adds	r3, #27
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 020f 	and.w	r2, r3, #15
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	331b      	adds	r3, #27
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	4413      	add	r3, r2
 8001826:	3304      	adds	r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b2da      	uxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	331b      	adds	r3, #27
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	3304      	adds	r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	b29a      	uxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0a1a      	lsrs	r2, r3, #8
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4413      	add	r3, r2
 8001884:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0c1a      	lsrs	r2, r3, #16
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3302      	adds	r3, #2
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0e1a      	lsrs	r2, r3, #24
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3303      	adds	r3, #3
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3304      	adds	r3, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0a1a      	lsrs	r2, r3, #8
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3305      	adds	r3, #5
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0c1a      	lsrs	r2, r3, #16
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	3306      	adds	r3, #6
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0e1a      	lsrs	r2, r3, #24
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3307      	adds	r3, #7
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d108      	bne.n	800192c <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0220 	orr.w	r2, r2, #32
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	e007      	b.n	800193c <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0220 	orr.w	r2, r2, #32
 800193a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e006      	b.n	800194e <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d002      	beq.n	8001978 <HAL_CAN_ActivateNotification+0x1e>
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d109      	bne.n	800198c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6959      	ldr	r1, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	e006      	b.n	800199a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
  }
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b08a      	sub	sp, #40	; 0x28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d07c      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d023      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f97d 	bl	8001d08 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a0e:	e016      	b.n	8001a3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	e00c      	b.n	8001a3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	e002      	b.n	8001a3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f983 	bl	8001d44 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d024      	beq.n	8001a92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f95d 	bl	8001d1c <HAL_CAN_TxMailbox1CompleteCallback>
 8001a62:	e016      	b.n	8001a92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	e00c      	b.n	8001a92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8a:	e002      	b.n	8001a92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f963 	bl	8001d58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d024      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f93d 	bl	8001d30 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ab6:	e016      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e00c      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e002      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f943 	bl	8001d6c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00c      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2210      	movs	r2, #16
 8001b08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2208      	movs	r2, #8
 8001b24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f934 	bl	8001d94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f91b 	bl	8001d80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00c      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2208      	movs	r2, #8
 8001b88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f916 	bl	8001dbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8fd 	bl	8001da8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f900 	bl	8001dd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8f9 	bl	8001de4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d075      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d03d      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d038      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c74:	2b30      	cmp	r3, #48	; 0x30
 8001c76:	d017      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x302>
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	d804      	bhi.n	8001c86 <HAL_CAN_IRQHandler+0x2e0>
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d009      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x2ee>
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d00c      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c84:	e024      	b.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001c86:	2b50      	cmp	r3, #80	; 0x50
 8001c88:	d018      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x316>
 8001c8a:	2b60      	cmp	r3, #96	; 0x60
 8001c8c:	d01b      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x320>
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d00f      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001c92:	e01d      	b.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c9c:	e018      	b.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f043 0310 	orr.w	r3, r3, #16
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca6:	e013      	b.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	f043 0320 	orr.w	r3, r3, #32
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cb0:	e00e      	b.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cba:	e009      	b.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cc4:	e004      	b.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cde:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f87c 	bl	8001df8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <__NVIC_EnableIRQ+0x38>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f1c3 0307 	rsb	r3, r3, #7
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf28      	it	cs
 8001f1e:	2304      	movcs	r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d902      	bls.n	8001f30 <NVIC_EncodePriority+0x30>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3b03      	subs	r3, #3
 8001f2e:	e000      	b.n	8001f32 <NVIC_EncodePriority+0x32>
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	4313      	orrs	r3, r2
         );
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f8c:	f7ff ff8e 	bl	8001eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff29 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff3e 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff8e 	bl	8001f00 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5d 	bl	8001eac <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff31 	bl	8001e70 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa2 	bl	8001f68 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	e17f      	b.n	8002340 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8171 	beq.w	800233a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d00b      	beq.n	8002078 <HAL_GPIO_Init+0x48>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800206c:	2b11      	cmp	r3, #17
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b12      	cmp	r3, #18
 8002076:	d130      	bne.n	80020da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ae:	2201      	movs	r2, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 0201 	and.w	r2, r3, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d118      	bne.n	8002118 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x128>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b12      	cmp	r3, #18
 8002156:	d123      	bne.n	80021a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	6939      	ldr	r1, [r7, #16]
 800219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80ac 	beq.w	800233a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	4b5e      	ldr	r3, [pc, #376]	; (800235c <HAL_GPIO_Init+0x32c>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	4a5d      	ldr	r2, [pc, #372]	; (800235c <HAL_GPIO_Init+0x32c>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6613      	str	r3, [r2, #96]	; 0x60
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <HAL_GPIO_Init+0x32c>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021fa:	4a59      	ldr	r2, [pc, #356]	; (8002360 <HAL_GPIO_Init+0x330>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002224:	d025      	beq.n	8002272 <HAL_GPIO_Init+0x242>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	; (8002364 <HAL_GPIO_Init+0x334>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <HAL_GPIO_Init+0x23e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_GPIO_Init+0x338>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x23a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_GPIO_Init+0x33c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x236>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <HAL_GPIO_Init+0x340>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x232>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_GPIO_Init+0x344>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x22e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a49      	ldr	r2, [pc, #292]	; (8002378 <HAL_GPIO_Init+0x348>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x22a>
 8002256:	2306      	movs	r3, #6
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800225a:	2307      	movs	r3, #7
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x244>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x244>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x244>
 8002272:	2300      	movs	r3, #0
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002284:	4936      	ldr	r1, [pc, #216]	; (8002360 <HAL_GPIO_Init+0x330>)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_GPIO_Init+0x34c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022b6:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_GPIO_Init+0x34c>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_GPIO_Init+0x34c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022e0:	4a26      	ldr	r2, [pc, #152]	; (800237c <HAL_GPIO_Init+0x34c>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e6:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_GPIO_Init+0x34c>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_GPIO_Init+0x34c>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_GPIO_Init+0x34c>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <HAL_GPIO_Init+0x34c>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f ae78 	bne.w	8002040 <HAL_GPIO_Init+0x10>
  }
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	48000c00 	.word	0x48000c00
 8002370:	48001000 	.word	0x48001000
 8002374:	48001400 	.word	0x48001400
 8002378:	48001800 	.word	0x48001800
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e001      	b.n	80023a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f806 	bl	8002410 <HAL_GPIO_EXTI_Callback>
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e081      	b.n	800253c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d106      	bne.n	8002452 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7fe fa6b 	bl	8000928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2224      	movs	r2, #36	; 0x24
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002476:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002486:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d107      	bne.n	80024a0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	e006      	b.n	80024ae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d104      	bne.n	80024c0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	ea42 0103 	orr.w	r1, r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	021a      	lsls	r2, r3, #8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69d9      	ldr	r1, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1a      	ldr	r2, [r3, #32]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	461a      	mov	r2, r3
 8002550:	460b      	mov	r3, r1
 8002552:	817b      	strh	r3, [r7, #10]
 8002554:	4613      	mov	r3, r2
 8002556:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b20      	cmp	r3, #32
 8002562:	f040 80da 	bne.w	800271a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x30>
 8002570:	2302      	movs	r3, #2
 8002572:	e0d3      	b.n	800271c <HAL_I2C_Master_Transmit+0x1d8>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800257c:	f7fe fda4 	bl	80010c8 <HAL_GetTick>
 8002580:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2319      	movs	r3, #25
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f8f0 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0be      	b.n	800271c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2221      	movs	r2, #33	; 0x21
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2210      	movs	r2, #16
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	893a      	ldrh	r2, [r7, #8]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2bff      	cmp	r3, #255	; 0xff
 80025ce:	d90e      	bls.n	80025ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	22ff      	movs	r2, #255	; 0xff
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	8979      	ldrh	r1, [r7, #10]
 80025de:	4b51      	ldr	r3, [pc, #324]	; (8002724 <HAL_I2C_Master_Transmit+0x1e0>)
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f9e6 	bl	80029b8 <I2C_TransferConfig>
 80025ec:	e06c      	b.n	80026c8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_I2C_Master_Transmit+0x1e0>)
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f9d5 	bl	80029b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800260e:	e05b      	b.n	80026c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	6a39      	ldr	r1, [r7, #32]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8ed 	bl	80027f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e07b      	b.n	800271c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d034      	beq.n	80026c8 <HAL_I2C_Master_Transmit+0x184>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d130      	bne.n	80026c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2200      	movs	r2, #0
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f87f 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04d      	b.n	800271c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d90e      	bls.n	80026a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	b2da      	uxtb	r2, r3
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	2300      	movs	r3, #0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f989 	bl	80029b8 <I2C_TransferConfig>
 80026a6:	e00f      	b.n	80026c8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f978 	bl	80029b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d19e      	bne.n	8002610 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	6a39      	ldr	r1, [r7, #32]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f8cc 	bl	8002874 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e01a      	b.n	800271c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2220      	movs	r2, #32
 80026ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_I2C_Master_Transmit+0x1e4>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	80002000 	.word	0x80002000
 8002728:	fe00e800 	.word	0xfe00e800

0800272c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d103      	bne.n	800274a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d007      	beq.n	8002768 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	619a      	str	r2, [r3, #24]
  }
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002784:	e022      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278c:	d01e      	beq.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7fe fc9b 	bl	80010c8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d113      	bne.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e00f      	b.n	80027ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	4013      	ands	r3, r2
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	429a      	cmp	r2, r3
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d0cd      	beq.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002800:	e02c      	b.n	800285c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f870 	bl	80028ec <I2C_IsAcknowledgeFailed>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e02a      	b.n	800286c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800281c:	d01e      	beq.n	800285c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7fe fc53 	bl	80010c8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d113      	bne.n	800285c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e007      	b.n	800286c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d1cb      	bne.n	8002802 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002880:	e028      	b.n	80028d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f830 	bl	80028ec <I2C_IsAcknowledgeFailed>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e026      	b.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7fe fc17 	bl	80010c8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d113      	bne.n	80028d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e007      	b.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d1cf      	bne.n	8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b10      	cmp	r3, #16
 8002904:	d151      	bne.n	80029aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002906:	e022      	b.n	800294e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800290e:	d01e      	beq.n	800294e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7fe fbda 	bl	80010c8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <I2C_IsAcknowledgeFailed+0x3a>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d113      	bne.n	800294e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02e      	b.n	80029ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d1d5      	bne.n	8002908 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2210      	movs	r2, #16
 8002962:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2220      	movs	r2, #32
 800296a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fedd 	bl	800272c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800297e:	400b      	ands	r3, r1
 8002980:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	fe00e800 	.word	0xfe00e800

080029b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	817b      	strh	r3, [r7, #10]
 80029c6:	4613      	mov	r3, r2
 80029c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	0d5b      	lsrs	r3, r3, #21
 80029d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <I2C_TransferConfig+0x58>)
 80029da:	430b      	orrs	r3, r1
 80029dc:	43db      	mvns	r3, r3
 80029de:	ea02 0103 	and.w	r1, r2, r3
 80029e2:	897b      	ldrh	r3, [r7, #10]
 80029e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029e8:	7a7b      	ldrb	r3, [r7, #9]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	03ff63ff 	.word	0x03ff63ff

08002a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d138      	bne.n	8002a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e032      	b.n	8002a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	; 0x24
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d139      	bne.n	8002b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e033      	b.n	8002b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2224      	movs	r2, #36	; 0x24
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40007000 	.word	0x40007000

08002b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6e:	d130      	bne.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7c:	d038      	beq.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2232      	movs	r2, #50	; 0x32
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0c9b      	lsrs	r3, r3, #18
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba4:	e002      	b.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb8:	d102      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f2      	bne.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bcc:	d110      	bne.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e00f      	b.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bde:	d007      	beq.n	8002bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be8:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000
 8002c04:	20000004 	.word	0x20000004
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e3d4      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1e:	4ba1      	ldr	r3, [pc, #644]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c28:	4b9e      	ldr	r3, [pc, #632]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80e4 	beq.w	8002e08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_RCC_OscConfig+0x4a>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	f040 808b 	bne.w	8002d64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	f040 8087 	bne.w	8002d64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c56:	4b93      	ldr	r3, [pc, #588]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_RCC_OscConfig+0x62>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e3ac      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1a      	ldr	r2, [r3, #32]
 8002c72:	4b8c      	ldr	r3, [pc, #560]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_RCC_OscConfig+0x7c>
 8002c7e:	4b89      	ldr	r3, [pc, #548]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c86:	e005      	b.n	8002c94 <HAL_RCC_OscConfig+0x88>
 8002c88:	4b86      	ldr	r3, [pc, #536]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d223      	bcs.n	8002ce0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fd3f 	bl	8003720 <RCC_SetFlashLatencyFromMSIRange>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e38d      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cac:	4b7d      	ldr	r3, [pc, #500]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7c      	ldr	r2, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b7a      	ldr	r3, [pc, #488]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4977      	ldr	r1, [pc, #476]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cca:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	4972      	ldr	r1, [pc, #456]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
 8002cde:	e025      	b.n	8002d2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce0:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a6f      	ldr	r2, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002ce6:	f043 0308 	orr.w	r3, r3, #8
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	496a      	ldr	r1, [pc, #424]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cfe:	4b69      	ldr	r3, [pc, #420]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	4965      	ldr	r1, [pc, #404]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fcff 	bl	8003720 <RCC_SetFlashLatencyFromMSIRange>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e34d      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d2c:	f000 fc36 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8002d30:	4601      	mov	r1, r0
 8002d32:	4b5c      	ldr	r3, [pc, #368]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ea8 <HAL_RCC_OscConfig+0x29c>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa21 f303 	lsr.w	r3, r1, r3
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_OscConfig+0x2a0>)
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d4c:	4b58      	ldr	r3, [pc, #352]	; (8002eb0 <HAL_RCC_OscConfig+0x2a4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe f96d 	bl	8001030 <HAL_InitTick>
 8002d56:	4603      	mov	r3, r0
 8002d58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d052      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	e331      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d032      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d78:	f7fe f9a6 	bl	80010c8 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d80:	f7fe f9a2 	bl	80010c8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e31a      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a40      	ldr	r2, [pc, #256]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	493b      	ldr	r1, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	4936      	ldr	r1, [pc, #216]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
 8002dd0:	e01a      	b.n	8002e08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dd2:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dde:	f7fe f973 	bl	80010c8 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de6:	f7fe f96f 	bl	80010c8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e2e7      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x1da>
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d074      	beq.n	8002efe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x21a>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d10e      	bne.n	8002e3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d10b      	bne.n	8002e3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d064      	beq.n	8002efc <HAL_RCC_OscConfig+0x2f0>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d160      	bne.n	8002efc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e2c4      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x24a>
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	e01d      	b.n	8002e92 <HAL_RCC_OscConfig+0x286>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x26e>
 8002e60:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e00b      	b.n	8002e92 <HAL_RCC_OscConfig+0x286>
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <HAL_RCC_OscConfig+0x298>)
 8002e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01c      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe f915 	bl	80010c8 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea0:	e011      	b.n	8002ec6 <HAL_RCC_OscConfig+0x2ba>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	080052dc 	.word	0x080052dc
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe f908 	bl	80010c8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e280      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec6:	4baf      	ldr	r3, [pc, #700]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x2a8>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fe f8f8 	bl	80010c8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe f8f4 	bl	80010c8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e26c      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eee:	4ba5      	ldr	r3, [pc, #660]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x2d0>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d060      	beq.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x310>
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d119      	bne.n	8002f4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d116      	bne.n	8002f4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f1c:	4b99      	ldr	r3, [pc, #612]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_OscConfig+0x328>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e249      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4b93      	ldr	r3, [pc, #588]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	4990      	ldr	r1, [pc, #576]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f48:	e040      	b.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d023      	beq.n	8002f9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f52:	4b8c      	ldr	r3, [pc, #560]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a8b      	ldr	r2, [pc, #556]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe f8b3 	bl	80010c8 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe f8af 	bl	80010c8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e227      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f78:	4b82      	ldr	r3, [pc, #520]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b7f      	ldr	r3, [pc, #508]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	061b      	lsls	r3, r3, #24
 8002f92:	497c      	ldr	r1, [pc, #496]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	e018      	b.n	8002fcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b7a      	ldr	r3, [pc, #488]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a79      	ldr	r2, [pc, #484]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe f88f 	bl	80010c8 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe f88b 	bl	80010c8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e203      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc0:	4b70      	ldr	r3, [pc, #448]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03c      	beq.n	8003052 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01c      	beq.n	800301a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe0:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe6:	4a67      	ldr	r2, [pc, #412]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe f86a 	bl	80010c8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe f866 	bl	80010c8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1de      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800300a:	4b5e      	ldr	r3, [pc, #376]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 800300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ef      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x3ec>
 8003018:	e01b      	b.n	8003052 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b5a      	ldr	r3, [pc, #360]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 800301c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7fe f84d 	bl	80010c8 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003032:	f7fe f849 	bl	80010c8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1c1      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003044:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ef      	bne.n	8003032 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80a6 	beq.w	80031ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003064:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b44      	ldr	r3, [pc, #272]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	4a43      	ldr	r2, [pc, #268]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	; 0x58
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003088:	2301      	movs	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_RCC_OscConfig+0x57c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d118      	bne.n	80030ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003098:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_RCC_OscConfig+0x57c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3a      	ldr	r2, [pc, #232]	; (8003188 <HAL_RCC_OscConfig+0x57c>)
 800309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a4:	f7fe f810 	bl	80010c8 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ac:	f7fe f80c 	bl	80010c8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e184      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030be:	4b32      	ldr	r3, [pc, #200]	; (8003188 <HAL_RCC_OscConfig+0x57c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d108      	bne.n	80030e4 <HAL_RCC_OscConfig+0x4d8>
 80030d2:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e2:	e024      	b.n	800312e <HAL_RCC_OscConfig+0x522>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b05      	cmp	r3, #5
 80030ea:	d110      	bne.n	800310e <HAL_RCC_OscConfig+0x502>
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	4a24      	ldr	r2, [pc, #144]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800310c:	e00f      	b.n	800312e <HAL_RCC_OscConfig+0x522>
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003126:	f023 0304 	bic.w	r3, r3, #4
 800312a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fd ffc7 	bl	80010c8 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fd ffc3 	bl	80010c8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e139      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_OscConfig+0x578>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ed      	beq.n	800313e <HAL_RCC_OscConfig+0x532>
 8003162:	e01a      	b.n	800319a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fd ffb0 	bl	80010c8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316a:	e00f      	b.n	800318c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fd ffac 	bl	80010c8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d906      	bls.n	800318c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e122      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800318c:	4b90      	ldr	r3, [pc, #576]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e8      	bne.n	800316c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319a:	7ffb      	ldrb	r3, [r7, #31]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a0:	4b8b      	ldr	r3, [pc, #556]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	4a8a      	ldr	r2, [pc, #552]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80031a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8108 	beq.w	80033c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	f040 80d0 	bne.w	8003360 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031c0:	4b83      	ldr	r3, [pc, #524]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d130      	bne.n	8003236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	3b01      	subs	r3, #1
 80031e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d127      	bne.n	8003236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d11f      	bne.n	8003236 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003200:	2a07      	cmp	r2, #7
 8003202:	bf14      	ite	ne
 8003204:	2201      	movne	r2, #1
 8003206:	2200      	moveq	r2, #0
 8003208:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320a:	4293      	cmp	r3, r2
 800320c:	d113      	bne.n	8003236 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d109      	bne.n	8003236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d06e      	beq.n	8003314 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	d069      	beq.n	8003310 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800323c:	4b64      	ldr	r3, [pc, #400]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003248:	4b61      	ldr	r3, [pc, #388]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b7      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003258:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5c      	ldr	r2, [pc, #368]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800325e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003264:	f7fd ff30 	bl	80010c8 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fd ff2c 	bl	80010c8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e0a4      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328a:	4b51      	ldr	r3, [pc, #324]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <HAL_RCC_OscConfig+0x7c8>)
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800329a:	3a01      	subs	r2, #1
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032a4:	0212      	lsls	r2, r2, #8
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ac:	0852      	lsrs	r2, r2, #1
 80032ae:	3a01      	subs	r2, #1
 80032b0:	0552      	lsls	r2, r2, #21
 80032b2:	4311      	orrs	r1, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032b8:	0852      	lsrs	r2, r2, #1
 80032ba:	3a01      	subs	r2, #1
 80032bc:	0652      	lsls	r2, r2, #25
 80032be:	4311      	orrs	r1, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032c4:	0912      	lsrs	r2, r2, #4
 80032c6:	0452      	lsls	r2, r2, #17
 80032c8:	430a      	orrs	r2, r1
 80032ca:	4941      	ldr	r1, [pc, #260]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032d0:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3e      	ldr	r2, [pc, #248]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032dc:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a3b      	ldr	r2, [pc, #236]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e8:	f7fd feee 	bl	80010c8 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fd feea 	bl	80010c8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e062      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330e:	e05a      	b.n	80033c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e059      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003314:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d152      	bne.n	80033c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003320:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003338:	f7fd fec6 	bl	80010c8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd fec2 	bl	80010c8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e03a      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003352:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x734>
 800335e:	e032      	b.n	80033c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d02d      	beq.n	80033c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800336c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003370:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003372:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4a10      	ldr	r2, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 8003390:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fd fe95 	bl	80010c8 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fe91 	bl	80010c8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e009      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_OscConfig+0x7c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x796>
 80033c0:	e001      	b.n	80033c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	f99d808c 	.word	0xf99d808c

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0c8      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4961      	ldr	r1, [pc, #388]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b5f      	ldr	r3, [pc, #380]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0b0      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d04c      	beq.n	80034c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003430:	4b56      	ldr	r3, [pc, #344]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d121      	bne.n	8003480 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e09e      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d107      	bne.n	8003458 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d115      	bne.n	8003480 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e092      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003460:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e086      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003470:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e07e      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003480:	4b42      	ldr	r3, [pc, #264]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 0203 	bic.w	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	493f      	ldr	r1, [pc, #252]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003492:	f7fd fe19 	bl	80010c8 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349a:	f7fd fe15 	bl	80010c8 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e066      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 020c 	and.w	r2, r3, #12
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	429a      	cmp	r2, r3
 80034c0:	d1eb      	bne.n	800349a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ce:	4b2f      	ldr	r3, [pc, #188]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	492c      	ldr	r1, [pc, #176]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d210      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	4924      	ldr	r1, [pc, #144]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1b0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e036      	b.n	800357e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4918      	ldr	r1, [pc, #96]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4910      	ldr	r1, [pc, #64]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800354e:	f000 f825 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8003552:	4601      	mov	r1, r0
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_RCC_ClockConfig+0x1b4>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	fa21 f303 	lsr.w	r3, r1, r3
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fd5c 	bl	8001030 <HAL_InitTick>
 8003578:	4603      	mov	r3, r0
 800357a:	72fb      	strb	r3, [r7, #11]

  return status;
 800357c:	7afb      	ldrb	r3, [r7, #11]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
 8003590:	080052dc 	.word	0x080052dc
 8003594:	20000004 	.word	0x20000004
 8003598:	20000008 	.word	0x20000008

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035aa:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b4:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x34>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d121      	bne.n	800360e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d11e      	bne.n	800360e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035d0:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035dc:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e2:	0a1b      	lsrs	r3, r3, #8
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	e005      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035ec:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035f8:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003600:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800360c:	e00a      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d102      	bne.n	800361a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	e004      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d101      	bne.n	8003624 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003622:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d133      	bne.n	8003692 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d002      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xa4>
 800363a:	2b03      	cmp	r3, #3
 800363c:	d003      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0xaa>
 800363e:	e005      	b.n	800364c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003642:	617b      	str	r3, [r7, #20]
      break;
 8003644:	e005      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003648:	617b      	str	r3, [r7, #20]
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	617b      	str	r3, [r7, #20]
      break;
 8003650:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	3301      	adds	r3, #1
 800365e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	fb02 f203 	mul.w	r2, r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	fbb2 f3f3 	udiv	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	0e5b      	lsrs	r3, r3, #25
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	3301      	adds	r3, #1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003692:	69bb      	ldr	r3, [r7, #24]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3724      	adds	r7, #36	; 0x24
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40021000 	.word	0x40021000
 80036a4:	080052f4 	.word	0x080052f4
 80036a8:	00f42400 	.word	0x00f42400
 80036ac:	007a1200 	.word	0x007a1200

080036b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000004 	.word	0x20000004

080036c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036cc:	f7ff fff0 	bl	80036b0 <HAL_RCC_GetHCLKFreq>
 80036d0:	4601      	mov	r1, r0
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036de:	5cd3      	ldrb	r3, [r2, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	080052ec 	.word	0x080052ec

080036f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036f8:	f7ff ffda 	bl	80036b0 <HAL_RCC_GetHCLKFreq>
 80036fc:	4601      	mov	r1, r0
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0adb      	lsrs	r3, r3, #11
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_RCC_GetPCLK2Freq+0x28>)
 800370a:	5cd3      	ldrb	r3, [r2, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	080052ec 	.word	0x080052ec

08003720 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800372c:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003738:	f7ff fa04 	bl	8002b44 <HAL_PWREx_GetVoltageRange>
 800373c:	6178      	str	r0, [r7, #20]
 800373e:	e014      	b.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	6593      	str	r3, [r2, #88]	; 0x58
 800374c:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003758:	f7ff f9f4 	bl	8002b44 <HAL_PWREx_GetVoltageRange>
 800375c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003770:	d10b      	bne.n	800378a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d919      	bls.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2ba0      	cmp	r3, #160	; 0xa0
 800377c:	d902      	bls.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800377e:	2302      	movs	r3, #2
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e013      	b.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003784:	2301      	movs	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	e010      	b.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d902      	bls.n	8003796 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003790:	2303      	movs	r3, #3
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	e00a      	b.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d102      	bne.n	80037a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800379c:	2302      	movs	r3, #2
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	e004      	b.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b70      	cmp	r3, #112	; 0x70
 80037a6:	d101      	bne.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037a8:	2301      	movs	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 0207 	bic.w	r2, r3, #7
 80037b4:	4909      	ldr	r1, [pc, #36]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40022000 	.word	0x40022000

080037e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037e8:	2300      	movs	r3, #0
 80037ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037ec:	2300      	movs	r3, #0
 80037ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d03f      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003804:	d01c      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380a:	d802      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003810:	e01f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003812:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003816:	d003      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003818:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800381c:	d01c      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800381e:	e018      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003820:	4b85      	ldr	r3, [pc, #532]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a84      	ldr	r2, [pc, #528]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800382c:	e015      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fab9 	bl	8003dac <RCCEx_PLLSAI1_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800383e:	e00c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3320      	adds	r3, #32
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fba0 	bl	8003f8c <RCCEx_PLLSAI2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	74fb      	strb	r3, [r7, #19]
      break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003860:	4b75      	ldr	r3, [pc, #468]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386e:	4972      	ldr	r1, [pc, #456]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003876:	e001      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800388c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003890:	d01c      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003896:	d802      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xda>
 800389c:	e01f      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800389e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a2:	d003      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80038a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038a8:	d01c      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80038aa:	e018      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038ac:	4b62      	ldr	r3, [pc, #392]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4a61      	ldr	r2, [pc, #388]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038b8:	e015      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3304      	adds	r3, #4
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fa73 	bl	8003dac <RCCEx_PLLSAI1_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ca:	e00c      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3320      	adds	r3, #32
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fb5a 	bl	8003f8c <RCCEx_PLLSAI2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	74fb      	strb	r3, [r7, #19]
      break;
 80038e2:	e000      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80038e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038ec:	4b52      	ldr	r3, [pc, #328]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fa:	494f      	ldr	r1, [pc, #316]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003902:	e001      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80a0 	beq.w	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800392a:	2300      	movs	r3, #0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003930:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393a:	6593      	str	r3, [r2, #88]	; 0x58
 800393c:	4b3e      	ldr	r3, [pc, #248]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003948:	2301      	movs	r3, #1
 800394a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3a      	ldr	r2, [pc, #232]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003958:	f7fd fbb6 	bl	80010c8 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800395e:	e009      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003960:	f7fd fbb2 	bl	80010c8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d902      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	74fb      	strb	r3, [r7, #19]
        break;
 8003972:	e005      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ef      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d15c      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003986:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003990:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01f      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d019      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d0:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fd fb71 	bl	80010c8 <HAL_GetTick>
 80039e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e8:	e00b      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fd fb6d 	bl	80010c8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d902      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ec      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a26:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a2e:	e009      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a44:	7c7b      	ldrb	r3, [r7, #17]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b9e      	ldr	r3, [pc, #632]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	4a9d      	ldr	r2, [pc, #628]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a62:	4b98      	ldr	r3, [pc, #608]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f023 0203 	bic.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	4994      	ldr	r1, [pc, #592]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a84:	4b8f      	ldr	r3, [pc, #572]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 020c 	bic.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	498c      	ldr	r1, [pc, #560]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa6:	4b87      	ldr	r3, [pc, #540]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	4983      	ldr	r1, [pc, #524]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ac8:	4b7e      	ldr	r3, [pc, #504]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	497b      	ldr	r1, [pc, #492]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af8:	4972      	ldr	r1, [pc, #456]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b0c:	4b6d      	ldr	r3, [pc, #436]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	496a      	ldr	r1, [pc, #424]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	4961      	ldr	r1, [pc, #388]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b50:	4b5c      	ldr	r3, [pc, #368]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	4959      	ldr	r1, [pc, #356]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b72:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	4950      	ldr	r1, [pc, #320]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b94:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	4948      	ldr	r1, [pc, #288]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bb6:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	493f      	ldr	r1, [pc, #252]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d028      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be6:	4937      	ldr	r1, [pc, #220]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf6:	d106      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf8:	4b32      	ldr	r3, [pc, #200]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a31      	ldr	r2, [pc, #196]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c02:	60d3      	str	r3, [r2, #12]
 8003c04:	e011      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f8c8 	bl	8003dac <RCCEx_PLLSAI1_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d028      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c36:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	491f      	ldr	r1, [pc, #124]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c54:	d106      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c60:	60d3      	str	r3, [r2, #12]
 8003c62:	e011      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2101      	movs	r1, #1
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f899 	bl	8003dac <RCCEx_PLLSAI1_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02b      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	4908      	ldr	r1, [pc, #32]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb2:	d109      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a02      	ldr	r2, [pc, #8]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cbe:	60d3      	str	r3, [r2, #12]
 8003cc0:	e014      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f867 	bl	8003dac <RCCEx_PLLSAI1_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02f      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d06:	4928      	ldr	r1, [pc, #160]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f844 	bl	8003dac <RCCEx_PLLSAI1_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d014      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	74bb      	strb	r3, [r7, #18]
 8003d32:	e011      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3320      	adds	r3, #32
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f921 	bl	8003f8c <RCCEx_PLLSAI2_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d72:	490d      	ldr	r1, [pc, #52]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d96:	4904      	ldr	r1, [pc, #16]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000

08003dac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dba:	4b73      	ldr	r3, [pc, #460]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d018      	beq.n	8003df8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003dc6:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0203 	and.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d10d      	bne.n	8003df2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dde:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
       ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d044      	beq.n	8003e7c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	e041      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d00c      	beq.n	8003e1a <RCCEx_PLLSAI1_Config+0x6e>
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d013      	beq.n	8003e2c <RCCEx_PLLSAI1_Config+0x80>
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d120      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e08:	4b5f      	ldr	r3, [pc, #380]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11d      	bne.n	8003e50 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e18:	e01a      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d116      	bne.n	8003e54 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2a:	e013      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e2c:	4b56      	ldr	r3, [pc, #344]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e48:	e006      	b.n	8003e58 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4e:	e004      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e50:	bf00      	nop
 8003e52:	e002      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e58:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e60:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	430b      	orrs	r3, r1
 8003e76:	4944      	ldr	r1, [pc, #272]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d17d      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8e:	f7fd f91b 	bl	80010c8 <HAL_GetTick>
 8003e92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e94:	e009      	b.n	8003eaa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e96:	f7fd f917 	bl	80010c8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d902      	bls.n	8003eaa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ea8:	e005      	b.n	8003eb6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eaa:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ef      	bne.n	8003e96 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d160      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d111      	bne.n	8003ee6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec2:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6892      	ldr	r2, [r2, #8]
 8003ed2:	0211      	lsls	r1, r2, #8
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68d2      	ldr	r2, [r2, #12]
 8003ed8:	0912      	lsrs	r2, r2, #4
 8003eda:	0452      	lsls	r2, r2, #17
 8003edc:	430a      	orrs	r2, r1
 8003ede:	492a      	ldr	r1, [pc, #168]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	610b      	str	r3, [r1, #16]
 8003ee4:	e027      	b.n	8003f36 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d112      	bne.n	8003f12 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eec:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ef4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	0211      	lsls	r1, r2, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6912      	ldr	r2, [r2, #16]
 8003f02:	0852      	lsrs	r2, r2, #1
 8003f04:	3a01      	subs	r2, #1
 8003f06:	0552      	lsls	r2, r2, #21
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	491f      	ldr	r1, [pc, #124]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	610b      	str	r3, [r1, #16]
 8003f10:	e011      	b.n	8003f36 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	0211      	lsls	r1, r2, #8
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6952      	ldr	r2, [r2, #20]
 8003f28:	0852      	lsrs	r2, r2, #1
 8003f2a:	3a01      	subs	r2, #1
 8003f2c:	0652      	lsls	r2, r2, #25
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	4915      	ldr	r1, [pc, #84]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fd f8c1 	bl	80010c8 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f48:	e009      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f4a:	f7fd f8bd 	bl	80010c8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d902      	bls.n	8003f5e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	73fb      	strb	r3, [r7, #15]
          break;
 8003f5c:	e005      	b.n	8003f6a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ef      	beq.n	8003f4a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000

08003f8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f9a:	4b68      	ldr	r3, [pc, #416]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d018      	beq.n	8003fd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fa6:	4b65      	ldr	r3, [pc, #404]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0203 	and.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d10d      	bne.n	8003fd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
       ||
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fbe:	4b5f      	ldr	r3, [pc, #380]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
       ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d044      	beq.n	800405c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
 8003fd6:	e041      	b.n	800405c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d00c      	beq.n	8003ffa <RCCEx_PLLSAI2_Config+0x6e>
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d013      	beq.n	800400c <RCCEx_PLLSAI2_Config+0x80>
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d120      	bne.n	800402a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fe8:	4b54      	ldr	r3, [pc, #336]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d11d      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff8:	e01a      	b.n	8004030 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ffa:	4b50      	ldr	r3, [pc, #320]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d116      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400a:	e013      	b.n	8004034 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400c:	4b4b      	ldr	r3, [pc, #300]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004018:	4b48      	ldr	r3, [pc, #288]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d109      	bne.n	8004038 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004028:	e006      	b.n	8004038 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
      break;
 800402e:	e004      	b.n	800403a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004030:	bf00      	nop
 8004032:	e002      	b.n	800403a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004038:	bf00      	nop
    }

    if(status == HAL_OK)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10d      	bne.n	800405c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004040:	4b3e      	ldr	r3, [pc, #248]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	3b01      	subs	r3, #1
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	430b      	orrs	r3, r1
 8004056:	4939      	ldr	r1, [pc, #228]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004058:	4313      	orrs	r3, r2
 800405a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d167      	bne.n	8004132 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a35      	ldr	r2, [pc, #212]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fd f82b 	bl	80010c8 <HAL_GetTick>
 8004072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004074:	e009      	b.n	800408a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004076:	f7fd f827 	bl	80010c8 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d902      	bls.n	800408a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	73fb      	strb	r3, [r7, #15]
        break;
 8004088:	e005      	b.n	8004096 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ef      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d14a      	bne.n	8004132 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d111      	bne.n	80040c6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	0211      	lsls	r1, r2, #8
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68d2      	ldr	r2, [r2, #12]
 80040b8:	0912      	lsrs	r2, r2, #4
 80040ba:	0452      	lsls	r2, r2, #17
 80040bc:	430a      	orrs	r2, r1
 80040be:	491f      	ldr	r1, [pc, #124]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	614b      	str	r3, [r1, #20]
 80040c4:	e011      	b.n	80040ea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6892      	ldr	r2, [r2, #8]
 80040d6:	0211      	lsls	r1, r2, #8
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6912      	ldr	r2, [r2, #16]
 80040dc:	0852      	lsrs	r2, r2, #1
 80040de:	3a01      	subs	r2, #1
 80040e0:	0652      	lsls	r2, r2, #25
 80040e2:	430a      	orrs	r2, r1
 80040e4:	4915      	ldr	r1, [pc, #84]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a13      	ldr	r2, [pc, #76]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fc ffe7 	bl	80010c8 <HAL_GetTick>
 80040fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040fc:	e009      	b.n	8004112 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040fe:	f7fc ffe3 	bl	80010c8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d902      	bls.n	8004112 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	73fb      	strb	r3, [r7, #15]
          break;
 8004110:	e005      	b.n	800411e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0ef      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	4903      	ldr	r1, [pc, #12]	; (800413c <RCCEx_PLLSAI2_Config+0x1b0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e01d      	b.n	800418e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fc fe86 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f000 f8c2 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_ConfigClockSource+0x18>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e0a8      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x16a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d067      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x124>
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d80b      	bhi.n	8004206 <HAL_TIM_ConfigClockSource+0x70>
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d073      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x144>
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d802      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x66>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d06f      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80041fa:	e078      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d06c      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x144>
 8004200:	2b30      	cmp	r3, #48	; 0x30
 8004202:	d06a      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004204:	e073      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004206:	2b70      	cmp	r3, #112	; 0x70
 8004208:	d00d      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x90>
 800420a:	2b70      	cmp	r3, #112	; 0x70
 800420c:	d804      	bhi.n	8004218 <HAL_TIM_ConfigClockSource+0x82>
 800420e:	2b50      	cmp	r3, #80	; 0x50
 8004210:	d033      	beq.n	800427a <HAL_TIM_ConfigClockSource+0xe4>
 8004212:	2b60      	cmp	r3, #96	; 0x60
 8004214:	d041      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004216:	e06a      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d066      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0x156>
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004222:	d017      	beq.n	8004254 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004224:	e063      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6899      	ldr	r1, [r3, #8]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f000 f97b 	bl	8004530 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004248:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	609a      	str	r2, [r3, #8]
      break;
 8004252:	e04c      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6899      	ldr	r1, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f000 f964 	bl	8004530 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004276:	609a      	str	r2, [r3, #8]
      break;
 8004278:	e039      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	461a      	mov	r2, r3
 8004288:	f000 f8d8 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2150      	movs	r1, #80	; 0x50
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f931 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8004298:	e029      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f000 f8f7 	bl	800449a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2160      	movs	r1, #96	; 0x60
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f921 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 80042b8:	e019      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f000 f8b8 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2140      	movs	r1, #64	; 0x40
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f911 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 80042d8:	e009      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f000 f908 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 80042ea:	e000      	b.n	80042ee <HAL_TIM_ConfigClockSource+0x158>
      break;
 80042ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a40      	ldr	r2, [pc, #256]	; (800441c <TIM_Base_SetConfig+0x114>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004326:	d00f      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3d      	ldr	r2, [pc, #244]	; (8004420 <TIM_Base_SetConfig+0x118>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <TIM_Base_SetConfig+0x11c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3b      	ldr	r2, [pc, #236]	; (8004428 <TIM_Base_SetConfig+0x120>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3a      	ldr	r2, [pc, #232]	; (800442c <TIM_Base_SetConfig+0x124>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2f      	ldr	r2, [pc, #188]	; (800441c <TIM_Base_SetConfig+0x114>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01f      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d01b      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <TIM_Base_SetConfig+0x118>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d017      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <TIM_Base_SetConfig+0x11c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <TIM_Base_SetConfig+0x120>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00f      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a29      	ldr	r2, [pc, #164]	; (800442c <TIM_Base_SetConfig+0x124>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a28      	ldr	r2, [pc, #160]	; (8004430 <TIM_Base_SetConfig+0x128>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a27      	ldr	r2, [pc, #156]	; (8004434 <TIM_Base_SetConfig+0x12c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a26      	ldr	r2, [pc, #152]	; (8004438 <TIM_Base_SetConfig+0x130>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <TIM_Base_SetConfig+0x114>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00f      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a12      	ldr	r2, [pc, #72]	; (800442c <TIM_Base_SetConfig+0x124>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00b      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a11      	ldr	r2, [pc, #68]	; (8004430 <TIM_Base_SetConfig+0x128>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d007      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a10      	ldr	r2, [pc, #64]	; (8004434 <TIM_Base_SetConfig+0x12c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a0f      	ldr	r2, [pc, #60]	; (8004438 <TIM_Base_SetConfig+0x130>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	615a      	str	r2, [r3, #20]
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40013400 	.word	0x40013400
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800

0800443c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 030a 	bic.w	r3, r3, #10
 8004478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0210 	bic.w	r2, r3, #16
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	f043 0307 	orr.w	r3, r3, #7
 800451c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	431a      	orrs	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	609a      	str	r2, [r3, #8]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004584:	2302      	movs	r3, #2
 8004586:	e068      	b.n	800465a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2e      	ldr	r2, [pc, #184]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2d      	ldr	r2, [pc, #180]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d108      	bne.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01d      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d018      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a18      	ldr	r2, [pc, #96]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10c      	bne.n	8004648 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	4313      	orrs	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40013400 	.word	0x40013400
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40000c00 	.word	0x40000c00
 800467c:	40014000 	.word	0x40014000

08004680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e040      	b.n	8004714 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fc38 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2224      	movs	r2, #36	; 0x24
 80046ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8c0 	bl	8004844 <UART_SetConfig>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e022      	b.n	8004714 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fc26 	bl	8004f28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fcad 	bl	800506c <UART_CheckIdleState>
 8004712:	4603      	mov	r3, r0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	; 0x28
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	2b20      	cmp	r3, #32
 8004732:	f040 8081 	bne.w	8004838 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_UART_Transmit+0x26>
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e079      	b.n	800483a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_UART_Transmit+0x38>
 8004750:	2302      	movs	r3, #2
 8004752:	e072      	b.n	800483a <HAL_UART_Transmit+0x11e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2221      	movs	r2, #33	; 0x21
 8004766:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004768:	f7fc fcae 	bl	80010c8 <HAL_GetTick>
 800476c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004786:	d108      	bne.n	800479a <HAL_UART_Transmit+0x7e>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	e003      	b.n	80047a2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80047aa:	e02d      	b.n	8004808 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fc9d 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e039      	b.n	800483a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d8:	b292      	uxth	r2, r2
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	3302      	adds	r3, #2
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e008      	b.n	80047f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b292      	uxth	r2, r2
 80047ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	3301      	adds	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1cb      	bne.n	80047ac <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	2140      	movs	r1, #64	; 0x40
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fc69 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e005      	b.n	800483a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004844:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004848:	b08a      	sub	sp, #40	; 0x28
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	4313      	orrs	r3, r2
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4bb8      	ldr	r3, [pc, #736]	; (8004b5c <UART_SetConfig+0x318>)
 800487a:	4013      	ands	r3, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004882:	430b      	orrs	r3, r1
 8004884:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4aae      	ldr	r2, [pc, #696]	; (8004b60 <UART_SetConfig+0x31c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	4313      	orrs	r3, r2
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4aa5      	ldr	r2, [pc, #660]	; (8004b64 <UART_SetConfig+0x320>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d126      	bne.n	8004922 <UART_SetConfig+0xde>
 80048d4:	4ba4      	ldr	r3, [pc, #656]	; (8004b68 <UART_SetConfig+0x324>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d81a      	bhi.n	8004918 <UART_SetConfig+0xd4>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0xa4>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	080048f9 	.word	0x080048f9
 80048ec:	08004909 	.word	0x08004909
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004911 	.word	0x08004911
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e105      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004900:	2302      	movs	r3, #2
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e101      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004908:	2304      	movs	r3, #4
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e0fd      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004910:	2308      	movs	r3, #8
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e0f9      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004918:	2310      	movs	r3, #16
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	bf00      	nop
 8004920:	e0f4      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a91      	ldr	r2, [pc, #580]	; (8004b6c <UART_SetConfig+0x328>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d138      	bne.n	800499e <UART_SetConfig+0x15a>
 800492c:	4b8e      	ldr	r3, [pc, #568]	; (8004b68 <UART_SetConfig+0x324>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d82c      	bhi.n	8004994 <UART_SetConfig+0x150>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0xfc>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004975 	.word	0x08004975
 8004944:	08004995 	.word	0x08004995
 8004948:	08004995 	.word	0x08004995
 800494c:	08004995 	.word	0x08004995
 8004950:	08004985 	.word	0x08004985
 8004954:	08004995 	.word	0x08004995
 8004958:	08004995 	.word	0x08004995
 800495c:	08004995 	.word	0x08004995
 8004960:	0800497d 	.word	0x0800497d
 8004964:	08004995 	.word	0x08004995
 8004968:	08004995 	.word	0x08004995
 800496c:	08004995 	.word	0x08004995
 8004970:	0800498d 	.word	0x0800498d
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e0c7      	b.n	8004b0c <UART_SetConfig+0x2c8>
 800497c:	2302      	movs	r3, #2
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e0c3      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004984:	2304      	movs	r3, #4
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e0bf      	b.n	8004b0c <UART_SetConfig+0x2c8>
 800498c:	2308      	movs	r3, #8
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e0bb      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004994:	2310      	movs	r3, #16
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499a:	bf00      	nop
 800499c:	e0b6      	b.n	8004b0c <UART_SetConfig+0x2c8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a73      	ldr	r2, [pc, #460]	; (8004b70 <UART_SetConfig+0x32c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d125      	bne.n	80049f4 <UART_SetConfig+0x1b0>
 80049a8:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <UART_SetConfig+0x324>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d011      	beq.n	80049da <UART_SetConfig+0x196>
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d802      	bhi.n	80049c0 <UART_SetConfig+0x17c>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <UART_SetConfig+0x186>
 80049be:	e014      	b.n	80049ea <UART_SetConfig+0x1a6>
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d006      	beq.n	80049d2 <UART_SetConfig+0x18e>
 80049c4:	2b30      	cmp	r3, #48	; 0x30
 80049c6:	d00c      	beq.n	80049e2 <UART_SetConfig+0x19e>
 80049c8:	e00f      	b.n	80049ea <UART_SetConfig+0x1a6>
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d0:	e09c      	b.n	8004b0c <UART_SetConfig+0x2c8>
 80049d2:	2302      	movs	r3, #2
 80049d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d8:	e098      	b.n	8004b0c <UART_SetConfig+0x2c8>
 80049da:	2304      	movs	r3, #4
 80049dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e0:	e094      	b.n	8004b0c <UART_SetConfig+0x2c8>
 80049e2:	2308      	movs	r3, #8
 80049e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e8:	e090      	b.n	8004b0c <UART_SetConfig+0x2c8>
 80049ea:	2310      	movs	r3, #16
 80049ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f0:	bf00      	nop
 80049f2:	e08b      	b.n	8004b0c <UART_SetConfig+0x2c8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5e      	ldr	r2, [pc, #376]	; (8004b74 <UART_SetConfig+0x330>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d125      	bne.n	8004a4a <UART_SetConfig+0x206>
 80049fe:	4b5a      	ldr	r3, [pc, #360]	; (8004b68 <UART_SetConfig+0x324>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d011      	beq.n	8004a30 <UART_SetConfig+0x1ec>
 8004a0c:	2b40      	cmp	r3, #64	; 0x40
 8004a0e:	d802      	bhi.n	8004a16 <UART_SetConfig+0x1d2>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <UART_SetConfig+0x1dc>
 8004a14:	e014      	b.n	8004a40 <UART_SetConfig+0x1fc>
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d006      	beq.n	8004a28 <UART_SetConfig+0x1e4>
 8004a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a1c:	d00c      	beq.n	8004a38 <UART_SetConfig+0x1f4>
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0x1fc>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a26:	e071      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2e:	e06d      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a30:	2304      	movs	r3, #4
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a36:	e069      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3e:	e065      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a40:	2310      	movs	r3, #16
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	bf00      	nop
 8004a48:	e060      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4a      	ldr	r2, [pc, #296]	; (8004b78 <UART_SetConfig+0x334>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d129      	bne.n	8004aa8 <UART_SetConfig+0x264>
 8004a54:	4b44      	ldr	r3, [pc, #272]	; (8004b68 <UART_SetConfig+0x324>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d014      	beq.n	8004a8e <UART_SetConfig+0x24a>
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a68:	d802      	bhi.n	8004a70 <UART_SetConfig+0x22c>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <UART_SetConfig+0x23a>
 8004a6e:	e016      	b.n	8004a9e <UART_SetConfig+0x25a>
 8004a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a74:	d007      	beq.n	8004a86 <UART_SetConfig+0x242>
 8004a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7a:	d00c      	beq.n	8004a96 <UART_SetConfig+0x252>
 8004a7c:	e00f      	b.n	8004a9e <UART_SetConfig+0x25a>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a84:	e042      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a86:	2302      	movs	r3, #2
 8004a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8c:	e03e      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a94:	e03a      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a96:	2308      	movs	r3, #8
 8004a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9c:	e036      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa4:	bf00      	nop
 8004aa6:	e031      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <UART_SetConfig+0x31c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d129      	bne.n	8004b06 <UART_SetConfig+0x2c2>
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <UART_SetConfig+0x324>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac0:	d014      	beq.n	8004aec <UART_SetConfig+0x2a8>
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac6:	d802      	bhi.n	8004ace <UART_SetConfig+0x28a>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <UART_SetConfig+0x298>
 8004acc:	e016      	b.n	8004afc <UART_SetConfig+0x2b8>
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d007      	beq.n	8004ae4 <UART_SetConfig+0x2a0>
 8004ad4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ad8:	d00c      	beq.n	8004af4 <UART_SetConfig+0x2b0>
 8004ada:	e00f      	b.n	8004afc <UART_SetConfig+0x2b8>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e013      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e00f      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004aec:	2304      	movs	r3, #4
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004af4:	2308      	movs	r3, #8
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afa:	e007      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004afc:	2310      	movs	r3, #16
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b02:	bf00      	nop
 8004b04:	e002      	b.n	8004b0c <UART_SetConfig+0x2c8>
 8004b06:	2310      	movs	r3, #16
 8004b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <UART_SetConfig+0x31c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	f040 80fe 	bne.w	8004d14 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d837      	bhi.n	8004b90 <UART_SetConfig+0x34c>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <UART_SetConfig+0x2e4>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b91 	.word	0x08004b91
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b91 	.word	0x08004b91
 8004b38:	08004b81 	.word	0x08004b81
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004b91 	.word	0x08004b91
 8004b44:	08004b91 	.word	0x08004b91
 8004b48:	08004b89 	.word	0x08004b89
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7fe fdbc 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8004b50:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b52:	e020      	b.n	8004b96 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <UART_SetConfig+0x338>)
 8004b56:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b58:	e01d      	b.n	8004b96 <UART_SetConfig+0x352>
 8004b5a:	bf00      	nop
 8004b5c:	efff69f3 	.word	0xefff69f3
 8004b60:	40008000 	.word	0x40008000
 8004b64:	40013800 	.word	0x40013800
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40004400 	.word	0x40004400
 8004b70:	40004800 	.word	0x40004800
 8004b74:	40004c00 	.word	0x40004c00
 8004b78:	40005000 	.word	0x40005000
 8004b7c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004b80:	f7fe fd0c 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004b84:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b86:	e006      	b.n	8004b96 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b8e:	e002      	b.n	8004b96 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	76fb      	strb	r3, [r7, #27]
        break;
 8004b94:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 81b9 	beq.w	8004f10 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	4413      	add	r3, r2
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d305      	bcc.n	8004bba <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d902      	bls.n	8004bc0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	76fb      	strb	r3, [r7, #27]
 8004bbe:	e1a7      	b.n	8004f10 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	f200 8092 	bhi.w	8004cee <UART_SetConfig+0x4aa>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x38c>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004cef 	.word	0x08004cef
 8004bd8:	08004c43 	.word	0x08004c43
 8004bdc:	08004cef 	.word	0x08004cef
 8004be0:	08004c77 	.word	0x08004c77
 8004be4:	08004cef 	.word	0x08004cef
 8004be8:	08004cef 	.word	0x08004cef
 8004bec:	08004cef 	.word	0x08004cef
 8004bf0:	08004cc5 	.word	0x08004cc5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7fe fd68 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	f04f 0400 	mov.w	r4, #0
 8004c0a:	0214      	lsls	r4, r2, #8
 8004c0c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c10:	020b      	lsls	r3, r1, #8
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6852      	ldr	r2, [r2, #4]
 8004c16:	0852      	lsrs	r2, r2, #1
 8004c18:	4611      	mov	r1, r2
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	eb13 0b01 	adds.w	fp, r3, r1
 8004c22:	eb44 0c02 	adc.w	ip, r4, r2
 8004c26:	4658      	mov	r0, fp
 8004c28:	4661      	mov	r1, ip
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f04f 0400 	mov.w	r4, #0
 8004c32:	461a      	mov	r2, r3
 8004c34:	4623      	mov	r3, r4
 8004c36:	f7fb facf 	bl	80001d8 <__aeabi_uldivmod>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c40:	e058      	b.n	8004cf4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	f04f 0400 	mov.w	r4, #0
 8004c4c:	49ae      	ldr	r1, [pc, #696]	; (8004f08 <UART_SetConfig+0x6c4>)
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	eb13 0b01 	adds.w	fp, r3, r1
 8004c56:	eb44 0c02 	adc.w	ip, r4, r2
 8004c5a:	4658      	mov	r0, fp
 8004c5c:	4661      	mov	r1, ip
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f04f 0400 	mov.w	r4, #0
 8004c66:	461a      	mov	r2, r3
 8004c68:	4623      	mov	r3, r4
 8004c6a:	f7fb fab5 	bl	80001d8 <__aeabi_uldivmod>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	460c      	mov	r4, r1
 8004c72:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c74:	e03e      	b.n	8004cf4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe fc91 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004c7a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	f04f 0400 	mov.w	r4, #0
 8004c8c:	0214      	lsls	r4, r2, #8
 8004c8e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c92:	020b      	lsls	r3, r1, #8
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6852      	ldr	r2, [r2, #4]
 8004c98:	0852      	lsrs	r2, r2, #1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	eb13 0b01 	adds.w	fp, r3, r1
 8004ca4:	eb44 0c02 	adc.w	ip, r4, r2
 8004ca8:	4658      	mov	r0, fp
 8004caa:	4661      	mov	r1, ip
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f04f 0400 	mov.w	r4, #0
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	f7fb fa8e 	bl	80001d8 <__aeabi_uldivmod>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cc2:	e017      	b.n	8004cf4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	f04f 0400 	mov.w	r4, #0
 8004cce:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004cd2:	f144 0100 	adc.w	r1, r4, #0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f04f 0400 	mov.w	r4, #0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4623      	mov	r3, r4
 8004ce2:	f7fb fa79 	bl	80001d8 <__aeabi_uldivmod>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cec:	e002      	b.n	8004cf4 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	76fb      	strb	r3, [r7, #27]
            break;
 8004cf2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfa:	d308      	bcc.n	8004d0e <UART_SetConfig+0x4ca>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d02:	d204      	bcs.n	8004d0e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	60da      	str	r2, [r3, #12]
 8004d0c:	e100      	b.n	8004f10 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	76fb      	strb	r3, [r7, #27]
 8004d12:	e0fd      	b.n	8004f10 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1c:	f040 8084 	bne.w	8004e28 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d85f      	bhi.n	8004de8 <UART_SetConfig+0x5a4>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0x4ec>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004d95 	.word	0x08004d95
 8004d3c:	08004de9 	.word	0x08004de9
 8004d40:	08004db1 	.word	0x08004db1
 8004d44:	08004de9 	.word	0x08004de9
 8004d48:	08004de9 	.word	0x08004de9
 8004d4c:	08004de9 	.word	0x08004de9
 8004d50:	08004dd1 	.word	0x08004dd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fe fcb8 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8004d58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	005a      	lsls	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d72:	e03c      	b.n	8004dee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d74:	f7fe fcbe 	bl	80036f4 <HAL_RCC_GetPCLK2Freq>
 8004d78:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	005a      	lsls	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d92:	e02c      	b.n	8004dee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004d9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6852      	ldr	r2, [r2, #4]
 8004da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dae:	e01e      	b.n	8004dee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db0:	f7fe fbf4 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004db4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	005a      	lsls	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	441a      	add	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dce:	e00e      	b.n	8004dee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004de6:	e002      	b.n	8004dee <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	76fb      	strb	r3, [r7, #27]
        break;
 8004dec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b0f      	cmp	r3, #15
 8004df2:	d916      	bls.n	8004e22 <UART_SetConfig+0x5de>
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfa:	d212      	bcs.n	8004e22 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f023 030f 	bic.w	r3, r3, #15
 8004e04:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	89fb      	ldrh	r3, [r7, #14]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	89fa      	ldrh	r2, [r7, #14]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e076      	b.n	8004f10 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	76fb      	strb	r3, [r7, #27]
 8004e26:	e073      	b.n	8004f10 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d85c      	bhi.n	8004eea <UART_SetConfig+0x6a6>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x5f4>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e7b 	.word	0x08004e7b
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004eeb 	.word	0x08004eeb
 8004e48:	08004eb5 	.word	0x08004eb5
 8004e4c:	08004eeb 	.word	0x08004eeb
 8004e50:	08004eeb 	.word	0x08004eeb
 8004e54:	08004eeb 	.word	0x08004eeb
 8004e58:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fe fc34 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8004e60:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	085a      	lsrs	r2, r3, #1
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	441a      	add	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e78:	e03a      	b.n	8004ef0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e7a:	f7fe fc3b 	bl	80036f4 <HAL_RCC_GetPCLK2Freq>
 8004e7e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	085a      	lsrs	r2, r3, #1
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e96:	e02b      	b.n	8004ef0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004ea2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6852      	ldr	r2, [r2, #4]
 8004eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eb2:	e01d      	b.n	8004ef0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb4:	f7fe fb72 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004eb8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	085a      	lsrs	r2, r3, #1
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ed0:	e00e      	b.n	8004ef0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ee8:	e002      	b.n	8004ef0 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	76fb      	strb	r3, [r7, #27]
        break;
 8004eee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d90a      	bls.n	8004f0c <UART_SetConfig+0x6c8>
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d206      	bcs.n	8004f0c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	e003      	b.n	8004f10 <UART_SetConfig+0x6cc>
 8004f08:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f1c:	7efb      	ldrb	r3, [r7, #27]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01a      	beq.n	800503e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005026:	d10a      	bne.n	800503e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800507a:	f7fc f825 	bl	80010c8 <HAL_GetTick>
 800507e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b08      	cmp	r3, #8
 800508c:	d10e      	bne.n	80050ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800508e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f82a 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e020      	b.n	80050ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d10e      	bne.n	80050d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f814 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e00a      	b.n	80050ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005106:	e05d      	b.n	80051c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510e:	d059      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7fb ffda 	bl	80010c8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <UART_WaitOnFlagUntilTimeout+0x30>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d11b      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005134:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e042      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02b      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800517a:	d123      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005184:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005194:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e00f      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d092      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <__libc_init_array>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	4e0d      	ldr	r6, [pc, #52]	; (8005224 <__libc_init_array+0x38>)
 80051f0:	4c0d      	ldr	r4, [pc, #52]	; (8005228 <__libc_init_array+0x3c>)
 80051f2:	1ba4      	subs	r4, r4, r6
 80051f4:	10a4      	asrs	r4, r4, #2
 80051f6:	2500      	movs	r5, #0
 80051f8:	42a5      	cmp	r5, r4
 80051fa:	d109      	bne.n	8005210 <__libc_init_array+0x24>
 80051fc:	4e0b      	ldr	r6, [pc, #44]	; (800522c <__libc_init_array+0x40>)
 80051fe:	4c0c      	ldr	r4, [pc, #48]	; (8005230 <__libc_init_array+0x44>)
 8005200:	f000 f820 	bl	8005244 <_init>
 8005204:	1ba4      	subs	r4, r4, r6
 8005206:	10a4      	asrs	r4, r4, #2
 8005208:	2500      	movs	r5, #0
 800520a:	42a5      	cmp	r5, r4
 800520c:	d105      	bne.n	800521a <__libc_init_array+0x2e>
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005214:	4798      	blx	r3
 8005216:	3501      	adds	r5, #1
 8005218:	e7ee      	b.n	80051f8 <__libc_init_array+0xc>
 800521a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800521e:	4798      	blx	r3
 8005220:	3501      	adds	r5, #1
 8005222:	e7f2      	b.n	800520a <__libc_init_array+0x1e>
 8005224:	0800532c 	.word	0x0800532c
 8005228:	0800532c 	.word	0x0800532c
 800522c:	0800532c 	.word	0x0800532c
 8005230:	08005330 	.word	0x08005330

08005234 <memset>:
 8005234:	4402      	add	r2, r0
 8005236:	4603      	mov	r3, r0
 8005238:	4293      	cmp	r3, r2
 800523a:	d100      	bne.n	800523e <memset+0xa>
 800523c:	4770      	bx	lr
 800523e:	f803 1b01 	strb.w	r1, [r3], #1
 8005242:	e7f9      	b.n	8005238 <memset+0x4>

08005244 <_init>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr

08005250 <_fini>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr
